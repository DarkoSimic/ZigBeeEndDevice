###############################################################################
#
# IAR C/C++ Compiler V9.30.3.3983 for 8051                05/Apr/2017  10:45:06
# Copyright 2004-2016 IAR Systems AB.
# Evaluation license - IAR Embedded Workbench for 8051, Evaluation version 9.30
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Components\stack\zdo\ZDApp.c
#    Command line       =  
#        -f
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0x0422
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Components\stack\zdo\ZDApp.c
#        -D NWK_AUTO_POLL -D ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC
#        -D LCD_SUPPORTED=DEBUG -D xPOWER_SAVING -lC
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\EndDeviceEB\List
#        -lA
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\EndDeviceEB\List
#        --diag_suppress Pe001,Pa010 -o
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\EndDeviceEB\Obj
#        -e --no_code_motion --debug --core=plain --dptr=16,1
#        --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 16 -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\Source\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -Ohz --require_prototypes
#    List file          =  
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\EndDeviceEB\List\ZDApp.lst
#    Object file        =  
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\EndDeviceEB\Obj\ZDApp.r51
#
###############################################################################

C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Components\stack\zdo\ZDApp.c
      1          /**************************************************************************************************
      2            Filename:       ZDApp.c
      3            Revised:        $Date: 2014-06-03 18:29:46 -0700 (Tue, 03 Jun 2014) $
      4            Revision:       $Revision: 38789 $
      5          
      6            Description:    This file contains the interface to the Zigbee Device Application. This is the
      7                            Application part that the user can change. This also contains the Task functions.
      8          
      9          
     10            Copyright 2004-2014 Texas Instruments Incorporated. All rights reserved.
     11          
     12            IMPORTANT: Your use of this Software is limited to those specific rights
     13            granted under the terms of a software license agreement between the user
     14            who downloaded the software, his/her employer (which must be your employer)
     15            and Texas Instruments Incorporated (the "License"). You may not use this
     16            Software unless you agree to abide by the terms of the License. The License
     17            limits your use, and you acknowledge, that the Software may not be modified,
     18            copied or distributed unless embedded on a Texas Instruments microcontroller
     19            or used solely and exclusively in conjunction with a Texas Instruments radio
     20            frequency transceiver, which is integrated into your product. Other than for
     21            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     22            works of, modify, distribute, perform, display or sell this Software and/or
     23            its documentation for any purpose.
     24          
     25            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     26            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     27            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     28            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     29            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     30            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     31            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     32            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     33            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     34            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     35            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     36          
     37            Should you have any questions regarding your right to use this Software,
     38            contact Texas Instruments Incorporated at www.TI.com.
     39          **************************************************************************************************/
     40          
     41          /*********************************************************************
     42           * INCLUDES
     43           */
     44          
     45          #include "ZComDef.h"
     46          #include "ZMAC.h"
     47          #include "OSAL.h"
     48          #include "OSAL_Tasks.h"
     49          #include "OSAL_PwrMgr.h"
     50          #include "OSAL_Nv.h"
     51          #include "AF.h"
     52          #include "APSMEDE.h"
     53          #include "NLMEDE.h"
     54          #include "AddrMgr.h"
     55          #include "ZDProfile.h"
     56          #include "ZDObject.h"
     57          #include "ZDConfig.h"
     58          #include "ZDSecMgr.h"
     59          #include "ZDApp.h"
     60          #include "DebugTrace.h"
     61          #include "nwk_util.h"
     62          #include "OnBoard.h"
     63          #include "ZGlobals.h"
     64          #include "ZDNwkMgr.h"
     65          #include "rtg.h"
     66          
     67          #include "ssp.h"
     68          
     69          /* HAL */
     70          #include "hal_led.h"
     71          #include "hal_lcd.h"
     72          #include "hal_key.h"
     73          
     74          #if defined( MT_MAC_FUNC ) || defined( MT_MAC_CB_FUNC )
     75            #error "ERROR! MT_MAC functionalities should be disabled on ZDO devices"
     76          #endif
     77          
     78          /*********************************************************************
     79           * CONSTANTS
     80           */
     81          
     82          #if !defined( NWK_START_DELAY )
     83            #define NWK_START_DELAY             100   // in milliseconds
     84          #endif
     85          
     86          #if !defined( LEAVE_RESET_DELAY )
     87            #define LEAVE_RESET_DELAY           5000  // in milliseconds
     88          #endif
     89          
     90          // Init ZDO, but hold and wait for application to start the joining or
     91          // forming network
     92          #define ZDO_INIT_HOLD_NWK_START       0xFFFF
     93          
     94          #if !defined( EXTENDED_JOINING_RANDOM_MASK )
     95            #define EXTENDED_JOINING_RANDOM_MASK 0x007F
     96          #endif
     97          
     98          #if !defined( BEACON_REQUEST_DELAY )
     99            #define BEACON_REQUEST_DELAY        100   // in milliseconds
    100          #endif
    101          
    102          #if !defined( BEACON_REQ_DELAY_MASK )
    103            #define BEACON_REQ_DELAY_MASK       0x007F
    104          #endif
    105          
    106          #define MAX_RESUME_RETRY            3
    107          
    108          #define MAX_DEVICE_UNAUTH_TIMEOUT   10000  // 10 seconds
    109          
    110          // Beacon Order Settings (see NLMEDE.h)
    111          #define DEFAULT_BEACON_ORDER        BEACON_ORDER_NO_BEACONS
    112          #define DEFAULT_SUPERFRAME_ORDER    DEFAULT_BEACON_ORDER
    113          
    114          #if !defined( NWK_FRAMECOUNTER_CHANGES_RESTORE_DELTA )
    115          // Additional counts to add to the frame counter when restoring from NV
    116          // This amount is in addition to MAX_NWK_FRAMECOUNTER_CHANGES
    117          #define NWK_FRAMECOUNTER_CHANGES_RESTORE_DELTA    250
    118          #endif
    119          
    120          // Leave control bits
    121          #define ZDAPP_LEAVE_CTRL_INIT 0
    122          #define ZDAPP_LEAVE_CTRL_SET  1
    123          #define ZDAPP_LEAVE_CTRL_RA   2
    124          
    125          // Address Manager Stub Implementation
    126          #define ZDApp_NwkWriteNVRequest AddrMgrWriteNVRequest
    127          
    128          
    129          #if !defined ZDO_NV_SAVE_RFDs
    130          #define ZDO_NV_SAVE_RFDs  TRUE
    131          #endif
    132          
    133          // Delay time before updating NWK NV data to force fewer writes during high activity.
    134          #if ZDO_NV_SAVE_RFDs
    135          #define ZDAPP_UPDATE_NWK_NV_TIME 700
    136          #else
    137          #define ZDAPP_UPDATE_NWK_NV_TIME 65000
    138          #endif
    139          
    140          // Timeout value to process New Devices
    141          #define ZDAPP_NEW_DEVICE_TIME     600   // in ms
    142          
    143          #if !defined ( ZDP_BIND_SKIP_VALIDATION )
    144          #if !defined MAX_PENDING_BIND_REQ
    145          #define MAX_PENDING_BIND_REQ 3
    146          #endif
    147          #endif
    148          
    149          /******************************************************************************
    150           * TYPEDEFS
    151           */
    152          typedef struct
    153          {
    154            void   *next;
    155            uint16 shortAddr;
    156            uint16 timeDelta;
    157          } ZDAppNewDevice_t;
    158          
    159          /*********************************************************************
    160           * GLOBAL VARIABLES
    161           */
    162          
    163          #if defined( LCD_SUPPORTED )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    164            uint8 MatchRsps = 0;
   \                     MatchRsps:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    165          #endif
    166          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    167          uint8 zdoDiscCounter = 1;
   \                     zdoDiscCounter:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zdoDiscCounter>`
   \   000001                REQUIRE __INIT_XDATA_I
    168          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    169          zAddrType_t ZDAppNwkAddr;
   \                     ZDAppNwkAddr:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z
    170          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    171          uint8 zdappMgmtNwkDiscRspTransSeq;
   \                     zdappMgmtNwkDiscRspTransSeq:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    172          uint8 zdappMgmtNwkDiscReqInProgress = FALSE;
   \                     zdappMgmtNwkDiscReqInProgress:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    173          zAddrType_t zdappMgmtNwkDiscRspAddr;
   \                     zdappMgmtNwkDiscRspAddr:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    174          uint8 zdappMgmtNwkDiscStartIndex;
   \                     zdappMgmtNwkDiscStartIndex:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    175          uint8 zdappMgmtSavedNwkState;
   \                     zdappMgmtSavedNwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    176          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    177          uint8 continueJoining = TRUE;
   \                     continueJoining:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for continueJoining>`
   \   000001                REQUIRE __INIT_XDATA_I
    178          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    179          uint8  _tmpRejoinState;
   \                     _tmpRejoinState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    180          
    181          // The extended PanID used in ZDO layer for rejoin.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    182          uint8 ZDO_UseExtendedPANID[Z_EXTADDR_LEN];
   \                     ZDO_UseExtendedPANID:
   \   000000                DS 8
   \   000008                REQUIRE __INIT_XDATA_Z
    183          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    184          pfnZdoCb zdoCBFunc[MAX_ZDO_CB_FUNC];
   \                     zdoCBFunc:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    185          
    186          #if !defined ( ZDP_BIND_SKIP_VALIDATION )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    187          ZDO_PendingBindReq_t *ZDAppPendingBindReq = NULL;
   \                     ZDAppPendingBindReq:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    188          #endif
    189          
    190          /*********************************************************************
    191           * EXTERNAL VARIABLES
    192           */
    193          
    194          /*********************************************************************
    195           * EXTERNAL FUNCTIONS
    196           */
    197          
    198          /*********************************************************************
    199           * LOCAL FUNCTIONS
    200           */
    201          
    202          void ZDApp_NetworkStartEvt( void );
    203          void ZDApp_DeviceAuthEvt( void );
    204          void ZDApp_SaveNetworkStateEvt( void );
    205          
    206          uint8 ZDApp_ReadNetworkRestoreState( void );
    207          uint8 ZDApp_RestoreNetworkState( void );
    208          void ZDAppDetermineDeviceType( void );
    209          void ZDApp_InitUserDesc( void );
    210          void ZDAppCheckForHoldKey( void );
    211          void ZDApp_ProcessOSALMsg( osal_event_hdr_t *msgPtr );
    212          void ZDApp_ProcessNetworkJoin( void );
    213          void ZDApp_SetCoordAddress( uint8 endPoint, uint8 dstEP );
    214          uint8 ZDApp_RestoreNwkKey( void );
    215          networkDesc_t* ZDApp_NwkDescListProcessing(void);
    216          
    217          void ZDApp_SecInit( uint8 state );
    218          UINT16 ZDApp_ProcessSecEvent( uint8 task_id, UINT16 events );
    219          void ZDApp_ProcessSecMsg( osal_event_hdr_t *msgPtr );
    220          
    221          void ZDApp_SendMsg( uint8 taskID, uint8 cmd, uint8 len, uint8 *buf );
    222          
    223          void ZDApp_ResetTimerStart( uint16 delay );
    224          void ZDApp_ResetTimerCancel( void );
    225          void ZDApp_LeaveCtrlInit( void );
    226          void ZDApp_LeaveCtrlSet( uint8 ra );
    227          uint8 ZDApp_LeaveCtrlBypass( void );
    228          void ZDApp_LeaveCtrlStartup( devStates_t* state, uint16* startDelay );
    229          void ZDApp_LeaveUpdate( uint16 nwkAddr, uint8* extAddr,
    230                                  uint8 removeChildren );
    231          void ZDApp_NodeProfileSync( uint8 stackProfile );
    232          void ZDApp_ProcessMsgCBs( zdoIncomingMsg_t *inMsg );
    233          void ZDApp_RegisterCBs( void );
    234          void ZDApp_InitZdoCBFunc(void);
    235          #if !defined ( ZDP_BIND_SKIP_VALIDATION )
    236          void ZDApp_SetPendingBindDefault( ZDO_PendingBindReq_t *pendBindReq );
    237          void ZDApp_InitPendingBind( void );
    238          void ZDApp_ProcessPendingBindReq( uint8 *extAddr );
    239          void ZDApp_AgeOutPendingBindEntry( void );
    240          #endif
    241          
    242          /*********************************************************************
    243           * LOCAL VARIABLES
    244           */
    245          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    246          uint8 ZDAppTaskID;
   \                     ZDAppTaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    247          uint8 nwkStatus;
   \                     nwkStatus:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    248          endPointDesc_t *ZDApp_AutoFindMode_epDesc = (endPointDesc_t *)NULL;
   \                     ZDApp_AutoFindMode_epDesc:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    249          uint8 ZDApp_LeaveCtrl;
   \                     ZDApp_LeaveCtrl:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    250          
    251          #if defined( HOLD_AUTO_START )
    252            devStates_t devState = DEV_HOLD;
    253          #else

   \                                 In  segment XDATA_I, align 1, keep-with-next
    254            devStates_t devState = DEV_INIT;
   \                     devState:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for devState>`
   \   000001                REQUIRE __INIT_XDATA_I
    255          #endif
    256          
    257          #if ( ZG_BUILD_RTRONLY_TYPE ) || ( ZG_BUILD_ENDDEVICE_TYPE )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    258            devStartModes_t devStartMode = MODE_JOIN;     // Assume joining
   \                     devStartMode:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    259            //devStartModes_t devStartMode = MODE_RESUME; // if already "directly joined"
    260                                  // to parent. Set to make the device do an Orphan scan.
    261          #else
    262            // Set the default to coodinator
    263            devStartModes_t devStartMode = MODE_HARD;
    264          #endif
    265          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    266          uint8 retryCnt;
   \                     retryCnt:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    267          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    268          endPointDesc_t ZDApp_epDesc =
   \                     ZDApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE `?<Initializer for ZDApp_epDesc>`
   \   000006                REQUIRE __INIT_XDATA_I
    269          {
    270            ZDO_EP,
    271            &ZDAppTaskID,
    272            (SimpleDescriptionFormat_t *)NULL,  // No Simple description for ZDO
    273            (afNetworkLatencyReq_t)0            // No Network Latency req
    274          };
    275          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    276          uint16 ZDApp_SavedPollRate = POLL_RATE;
   \                     ZDApp_SavedPollRate:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for ZDApp_SavedPollRate>`
   \   000002                REQUIRE __INIT_XDATA_I
    277          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    278          ZDAppNewDevice_t *ZDApp_NewDeviceList = NULL;
   \                     ZDApp_NewDeviceList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    279          
    280          /* "Hold Key" status saved during ZDAppCheckForHoldKey() */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    281          static uint8 zdappHoldKeys;
   \                     zdappHoldKeys:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    282          
    283          /*********************************************************************
    284           * @fn      ZDApp_Init
    285           *
    286           * @brief   ZDApp Initialization function.
    287           *
    288           * @param   task_id - ZDApp Task ID
    289           *
    290           * @return  None
    291           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    292          void ZDApp_Init( uint8 task_id )
   \                     ZDApp_Init:
    293          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    294            // Save the task ID
    295            ZDAppTaskID = task_id;
   \   000006   90....       MOV     DPTR,#ZDAppTaskID
   \   000009   F0           MOVX    @DPTR,A
    296             
    297            // Initialize the ZDO global device short address storage
    298            ZDAppNwkAddr.addrMode = Addr16Bit;
   \   00000A   90....       MOV     DPTR,#ZDAppNwkAddr + 8
   \   00000D   7402         MOV     A,#0x2
   \   00000F   F0           MOVX    @DPTR,A
    299            ZDAppNwkAddr.addr.shortAddr = INVALID_NODE_ADDR;
   \   000010   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000013   74FE         MOV     A,#-0x2
   \   000015   F0           MOVX    @DPTR,A
   \   000016   A3           INC     DPTR
   \   000017   04           INC     A
   \   000018   F0           MOVX    @DPTR,A
    300            (void)NLME_GetExtAddr();  // Load the saveExtAddr pointer.
   \   000019                ; Setup parameters for call to function NLME_GetExtAddr
   \   000019   12....       LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
    301          
    302            // Check for manual "Hold Auto Start"
    303            // ZDAppCheckForHoldKey();
    304          
    305            // Initialize ZDO items and setup the device - type of device to create.
    306            ZDO_Init();
   \   00001C                ; Setup parameters for call to function ZDO_Init
   \   00001C   12....       LCALL   `??ZDO_Init::?relay` ; Banked call to: ZDO_Init
    307          
    308            // Register the endpoint description with the AF
    309            // This task doesn't have a Simple description, but we still need
    310            // to register the endpoint.
    311            afRegister( (endPointDesc_t *)&ZDApp_epDesc );
   \   00001F                ; Setup parameters for call to function afRegister
   \   00001F   7A..         MOV     R2,#ZDApp_epDesc & 0xff
   \   000021   7B..         MOV     R3,#(ZDApp_epDesc >> 8) & 0xff
   \   000023   12....       LCALL   `??afRegister::?relay`; Banked call to: afRegister
    312          
    313          #if defined( ZDO_USERDESC_RESPONSE )
    314            ZDApp_InitUserDesc();
   \   000026                ; Setup parameters for call to function ZDApp_InitUserDesc
   \   000026   12....       LCALL   `??ZDApp_InitUserDesc::?relay`; Banked call to: ZDApp_InitUserDesc
    315          #endif // ZDO_USERDESC_RESPONSE
    316          
    317            
    318            // Start the device?
    319            if ( devState != DEV_HOLD )
   \   000029   90....       MOV     DPTR,#devState
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   6009         JZ      ??ZDApp_Init_0
    320            {
    321              ZDOInitDevice( 0 );
   \   00002F                ; Setup parameters for call to function ZDOInitDevice
   \   00002F   7A00         MOV     R2,#0x0
   \   000031   7B00         MOV     R3,#0x0
   \   000033   12....       LCALL   `??ZDOInitDevice::?relay`; Banked call to: ZDOInitDevice
   \   000036   8014         SJMP    ??ZDApp_Init_1
    322            }
    323            else
    324            {
    325              ZDOInitDevice( ZDO_INIT_HOLD_NWK_START );
   \                     ??ZDApp_Init_0:
   \   000038                ; Setup parameters for call to function ZDOInitDevice
   \   000038   7AFF         MOV     R2,#-0x1
   \   00003A   7BFF         MOV     R3,#-0x1
   \   00003C   12....       LCALL   `??ZDOInitDevice::?relay`; Banked call to: ZDOInitDevice
    326              // Blink LED to indicate HOLD_START
    327              HalLedBlink ( HAL_LED_4, 0, 50, 500 );
   \   00003F                ; Setup parameters for call to function HalLedBlink
   \   00003F   7CF4         MOV     R4,#-0xc
   \   000041   7D01         MOV     R5,#0x1
   \   000043   7B32         MOV     R3,#0x32
   \   000045   7A00         MOV     R2,#0x0
   \   000047   7908         MOV     R1,#0x8
   \   000049   12....       LCALL   `??HalLedBlink::?relay`; Banked call to: HalLedBlink
    328            }
    329          
    330            // Initialize the ZDO callback function pointers zdoCBFunc[]
    331            ZDApp_InitZdoCBFunc();
   \                     ??ZDApp_Init_1:
   \   00004C                ; Setup parameters for call to function ZDApp_InitZdoCBFunc
   \   00004C   12....       LCALL   `??ZDApp_InitZdoCBFunc::?relay`; Banked call to: ZDApp_InitZdoCBFunc
    332          
    333            ZDApp_RegisterCBs();
   \   00004F                ; Setup parameters for call to function ZDApp_RegisterCBs
   \   00004F   12....       LCALL   `??ZDApp_RegisterCBs::?relay`; Banked call to: ZDApp_RegisterCBs
    334          
    335          #if !defined ( ZDP_BIND_SKIP_VALIDATION )
    336          #if defined ( REFLECTOR )
    337            ZDApp_InitPendingBind();
   \   000052                ; Setup parameters for call to function ZDApp_InitPendingBind
   \   000052   12....       LCALL   `??ZDApp_InitPendingBind::?relay`; Banked call to: ZDApp_InitPendingBind
    338          #endif
    339          #endif
    340          } /* ZDApp_Init() */
   \   000055   02....       LJMP    ??Subroutine57_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine57_0:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    341          
    342          /*********************************************************************
    343           * @fn          ZDApp_SecInit
    344           *
    345           * @brief       ZDApp initialize security.
    346           *
    347           * @param       state - device initialization state
    348           *
    349           * @return      none
    350           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    351          void ZDApp_SecInit( uint8 state )
   \                     ZDApp_SecInit:
    352          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 16
   \   000005   74F0         MOV     A,#-0x10
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0,R1
    353            uint8 zgPreConfigKey[SEC_KEY_LEN];
    354          
    355            if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
    356            {
    357              // Set the Trust Center bit
    358              ZDO_Config_Node_Descriptor.ServerMask |= PRIM_TRUST_CENTER;
    359            }
    360          
    361            // Initialize ZigBee Device Security Manager
    362            ZDSecMgrInit(state);
   \   00000C                ; Setup parameters for call to function ZDSecMgrInit
   \   00000C   12....       LCALL   `??ZDSecMgrInit::?relay`; Banked call to: ZDSecMgrInit
    363          
    364            if ( ZG_SECURE_ENABLED )
    365            {
    366              if ( state != ZDO_INITDEV_RESTORED_NETWORK_STATE )
   \   00000F   E5..         MOV     A,?V0
   \   000011   6045         JZ      ??ZDApp_SecInit_0
    367              {
    368                nwkFrameCounter = 0;
   \   000013   90....       MOV     DPTR,#nwkFrameCounter
   \   000016   E4           CLR     A
   \   000017   F0           MOVX    @DPTR,A
   \   000018   A3           INC     DPTR
   \   000019   F0           MOVX    @DPTR,A
   \   00001A   A3           INC     DPTR
   \   00001B   F0           MOVX    @DPTR,A
   \   00001C   A3           INC     DPTR
   \   00001D   F0           MOVX    @DPTR,A
    369          
    370                if( _NIB.nwkKeyLoaded == FALSE )
   \   00001E   90....       MOV     DPTR,#_NIB + 61
   \   000021   E0           MOVX    A,@DPTR
   \   000022   7034         JNZ     ??ZDApp_SecInit_0
    371                {
    372                  if ( ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE          ) ||
    373                       ( ( zgSecurityMode == ZG_SECURITY_RESIDENTIAL ) && zgPreConfigKeys )    )
   \   000024   90....       MOV     DPTR,#zgSecurityMode
   \   000027   E0           MOVX    A,@DPTR
   \   000028   6401         XRL     A,#0x1
   \   00002A   702C         JNZ     ??ZDApp_SecInit_0
   \   00002C   90....       MOV     DPTR,#zgPreConfigKeys
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   6026         JZ      ??ZDApp_SecInit_0
    374                  {
    375                      ZDSecMgrReadKeyFromNv(ZCD_NV_PRECFGKEY, zgPreConfigKey);
   \   000032                ; Setup parameters for call to function ZDSecMgrReadKeyFromNv
   \   000032   AC..         MOV     R4,?XSP + 0
   \   000034   AD..         MOV     R5,?XSP + 1
   \   000036   7A62         MOV     R2,#0x62
   \   000038   7B00         MOV     R3,#0x0
   \   00003A   12....       LCALL   `??ZDSecMgrReadKeyFromNv::?relay`; Banked call to: ZDSecMgrReadKeyFromNv
    376                      SSP_UpdateNwkKey( zgPreConfigKey, 0);
   \   00003D                ; Setup parameters for call to function SSP_UpdateNwkKey
   \   00003D   7900         MOV     R1,#0x0
   \   00003F   AA..         MOV     R2,?XSP + 0
   \   000041   AB..         MOV     R3,?XSP + 1
   \   000043   12....       LCALL   `??SSP_UpdateNwkKey::?relay`; Banked call to: SSP_UpdateNwkKey
    377                      SSP_SwitchNwkKey( 0 );
   \   000046                ; Setup parameters for call to function SSP_SwitchNwkKey
   \   000046   7900         MOV     R1,#0x0
   \   000048   12....       LCALL   `??SSP_SwitchNwkKey::?relay`; Banked call to: SSP_SwitchNwkKey
    378          
    379                      // clear local copy of key
    380                      osal_memset(zgPreConfigKey, 0x00, SEC_KEY_LEN);
   \   00004B                ; Setup parameters for call to function osal_memset
   \   00004B   7C10         MOV     R4,#0x10
   \   00004D   7D00         MOV     R5,#0x0
   \   00004F   7900         MOV     R1,#0x0
   \   000051   AA..         MOV     R2,?XSP + 0
   \   000053   AB..         MOV     R3,?XSP + 1
   \   000055   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
    381                  }
    382                }
    383              }
    384          
    385              // clean the new devices list when Security module is initialized
    386              if ( ZDApp_NewDeviceList != NULL )
   \                     ??ZDApp_SecInit_0:
   \   000058   90....       MOV     DPTR,#ZDApp_NewDeviceList
   \   00005B   12....       LCALL   ??Subroutine64_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   00005E   6021         JZ      ??ZDApp_SecInit_1
    387              {
    388                ZDAppNewDevice_t *pNewDeviceNext;
    389          
    390                while ( ZDApp_NewDeviceList )
    391                {
    392                  pNewDeviceNext = (ZDAppNewDevice_t *) ZDApp_NewDeviceList->next;
   \                     ??ZDApp_SecInit_2:
   \   000060   90....       MOV     DPTR,#ZDApp_NewDeviceList
   \   000063   12....       LCALL   ??Subroutine62_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   000066   FE           MOV     R6,A
   \   000067   A3           INC     DPTR
   \   000068   E0           MOVX    A,@DPTR
   \   000069   FF           MOV     R7,A
    393                  osal_mem_free( ZDApp_NewDeviceList );
   \   00006A                ; Setup parameters for call to function osal_mem_free
   \   00006A   90....       MOV     DPTR,#ZDApp_NewDeviceList
   \   00006D   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000070   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    394                  ZDApp_NewDeviceList = pNewDeviceNext;
   \   000073   EE           MOV     A,R6
   \   000074   F8           MOV     R0,A
   \   000075   EF           MOV     A,R7
   \   000076   F9           MOV     R1,A
   \   000077   90....       MOV     DPTR,#ZDApp_NewDeviceList
   \   00007A   12....       LCALL   ??Subroutine60_0 & 0xFFFF
    395                }
   \                     ??CrossCallReturnLabel_88:
   \   00007D   E8           MOV     A,R0
   \   00007E   49           ORL     A,R1
   \   00007F   70DF         JNZ     ??ZDApp_SecInit_2
    396              }
    397            }
    398          }
   \                     ??ZDApp_SecInit_1:
   \   000081   7410         MOV     A,#0x10
   \   000083   02....       LJMP    ??Subroutine63_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine60_0:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine62_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8882         MOV     DPL,R0
   \   000008   E0           MOVX    A,@DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine63_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   02....       LJMP    ??Subroutine57_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine64_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   E8           MOV     A,R0
   \   000006   49           ORL     A,R1
   \   000007   22           RET
    399          
    400          /*********************************************************************
    401           * @fn      ZDApp_event_loop()
    402           *
    403           * @brief   Main event loop for Zigbee device objects task. This function
    404           *          should be called at periodic intervals.
    405           *
    406           * @param   task_id - Task ID
    407           * @param   events  - Bitmap of events
    408           *
    409           * @return  none
    410           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    411          UINT16 ZDApp_event_loop( uint8 task_id, UINT16 events )
   \                     ZDApp_event_loop:
    412          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V2,R1
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   EB           MOV     A,R3
   \   00000A   FF           MOV     R7,A
    413            uint8 *msg_ptr;
    414          
    415            if ( events & SYS_EVENT_MSG )
   \   00000B   5480         ANL     A,#0x80
   \   00000D   7032         JNZ     ??ZDApp_event_loop_0
    416            {
    417              while ( (msg_ptr = osal_msg_receive( ZDAppTaskID )) )
    418              {
    419                ZDApp_ProcessOSALMsg( (osal_event_hdr_t *)msg_ptr );
    420          
    421                // Release the memory
    422                osal_msg_deallocate( msg_ptr );
    423              }
    424          
    425              // Return unprocessed events
    426              return (events ^ SYS_EVENT_MSG);
    427            }
    428          
    429            if ( events & ZDO_NETWORK_INIT )
   \   00000F   EE           MOV     A,R6
   \   000010   A2E0         MOV     C,0xE0 /* A   */.0
   \   000012   5045         JNC     ??ZDApp_event_loop_1
    430            {
    431              // Initialize apps and start the network
    432              devState = DEV_INIT;
   \   000014   90....       MOV     DPTR,#devState
   \   000017   7401         MOV     A,#0x1
   \   000019   12....       LCALL   ??Subroutine51_0 & 0xFFFF
    433              osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \                     ??CrossCallReturnLabel_73:
   \   00001C   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
    434          
    435              ZDO_StartDevice( (uint8)ZDO_Config_Node_Descriptor.LogicalType, devStartMode,
    436                               DEFAULT_BEACON_ORDER, DEFAULT_SUPERFRAME_ORDER );
   \   00001F                ; Setup parameters for call to function ZDO_StartDevice
   \   00001F   7C0F         MOV     R4,#0xf
   \   000021   7B0F         MOV     R3,#0xf
   \   000023   90....       MOV     DPTR,#devStartMode
   \   000026   E0           MOVX    A,@DPTR
   \   000027   FA           MOV     R2,A
   \   000028   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   5407         ANL     A,#0x7
   \   00002E   F9           MOV     R1,A
   \   00002F   12....       LCALL   `??ZDO_StartDevice::?relay`; Banked call to: ZDO_StartDevice
    437          
    438              // Return unprocessed events
    439              return (events ^ ZDO_NETWORK_INIT);
   \   000032   EE           MOV     A,R6
   \   000033   6401         XRL     A,#0x1
   \   000035   8050         SJMP    ??ZDApp_event_loop_2
    440            }
   \                     ??ZDApp_event_loop_3:
   \   000037                ; Setup parameters for call to function ZDApp_ProcessOSALMsg
   \   000037   12....       LCALL   `??ZDApp_ProcessOSALMsg::?relay`; Banked call to: ZDApp_ProcessOSALMsg
   \   00003A                ; Setup parameters for call to function osal_msg_deallocate
   \   00003A   AA..         MOV     R2,?V0
   \   00003C   AB..         MOV     R3,?V1
   \   00003E   12....       LCALL   `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
   \                     ??ZDApp_event_loop_0:
   \   000041                ; Setup parameters for call to function osal_msg_receive
   \   000041   90....       MOV     DPTR,#ZDAppTaskID
   \   000044   E0           MOVX    A,@DPTR
   \   000045   F9           MOV     R1,A
   \   000046   12....       LCALL   `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   000049   8A..         MOV     ?V0,R2
   \   00004B   8B..         MOV     ?V1,R3
   \   00004D   EA           MOV     A,R2
   \   00004E   45..         ORL     A,?V1
   \   000050   70E5         JNZ     ??ZDApp_event_loop_3
   \   000052   EE           MOV     A,R6
   \   000053   FA           MOV     R2,A
   \   000054   EF           MOV     A,R7
   \   000055   6480         XRL     A,#0x80
   \   000057   8063         SJMP    ??ZDApp_event_loop_4
    441          
    442            if ( ZSTACK_ROUTER_BUILD )
    443            {
    444              if ( events & ZDO_NETWORK_START )
    445              {
    446                ZDApp_NetworkStartEvt();
    447          
    448                // Return unprocessed events
    449                return (events ^ ZDO_NETWORK_START);
    450              }
    451          
    452              if ( events & ZDO_ROUTER_START )
    453              {
    454                if ( nwkStatus == ZSuccess )
    455                {
    456                  if ( devState == DEV_END_DEVICE )
    457                    devState = DEV_ROUTER;
    458          
    459                  osal_pwrmgr_device( PWRMGR_ALWAYS_ON );
    460                }
    461                else
    462                {
    463                  // remain as end device
    464                }
    465                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
    466          
    467                // Return unprocessed events
    468                return (events ^ ZDO_ROUTER_START);
    469              }
    470            }
    471          
    472            if ( events & ZDO_STATE_CHANGE_EVT )
   \                     ??ZDApp_event_loop_1:
   \   000059   5410         ANL     A,#0x10
   \   00005B   602E         JZ      ??ZDApp_event_loop_5
    473            {
    474              ZDO_UpdateNwkStatus( devState );
   \   00005D                ; Setup parameters for call to function ZDO_UpdateNwkStatus
   \   00005D   90....       MOV     DPTR,#devState
   \   000060   E0           MOVX    A,@DPTR
   \   000061   F9           MOV     R1,A
   \   000062   12....       LCALL   `??ZDO_UpdateNwkStatus::?relay`; Banked call to: ZDO_UpdateNwkStatus
    475          
    476              // At start up, do one MTO route discovery if the device is a concentrator
    477              if ( zgConcentratorEnable == TRUE )
   \   000065   90....       MOV     DPTR,#zgConcentratorEnable
   \   000068   E0           MOVX    A,@DPTR
   \   000069   6401         XRL     A,#0x1
   \   00006B   7017         JNZ     ??ZDApp_event_loop_6
    478              {
    479                // Start next event
    480                osal_start_timerEx( NWK_TaskID, NWK_MTO_RTG_REQ_EVT, 100 );
   \   00006D                ; Setup parameters for call to function osal_start_timerEx
   \   00006D   90....       MOV     DPTR,#__Constant_64
   \   000070   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000073   7A00         MOV     R2,#0x0
   \   000075   7B08         MOV     R3,#0x8
   \   000077   90....       MOV     DPTR,#NWK_TaskID
   \   00007A   E0           MOVX    A,@DPTR
   \   00007B   F9           MOV     R1,A
   \   00007C   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00007F   7404         MOV     A,#0x4
   \   000081   12....       LCALL   ?DEALLOC_XSTACK8
    481              }
    482          
    483              // Return unprocessed events
    484              return (events ^ ZDO_STATE_CHANGE_EVT);
   \                     ??ZDApp_event_loop_6:
   \   000084   EE           MOV     A,R6
   \   000085   6410         XRL     A,#0x10
   \                     ??ZDApp_event_loop_2:
   \   000087   FA           MOV     R2,A
   \   000088   EF           MOV     A,R7
   \   000089   8031         SJMP    ??ZDApp_event_loop_4
    485            }
    486          
    487            if ( events & ZDO_COMMAND_CNF )
   \                     ??ZDApp_event_loop_5:
   \   00008B   EE           MOV     A,R6
   \   00008C   5408         ANL     A,#0x8
   \   00008E   6006         JZ      ??ZDApp_event_loop_7
    488            {
    489              // User defined logic
    490          
    491              // Return unprocessed events
    492              return (events ^ ZDO_COMMAND_CNF);
   \   000090   EE           MOV     A,R6
   \   000091   6408         XRL     A,#0x8
   \   000093   FA           MOV     R2,A
   \   000094   8032         SJMP    ??ZDApp_event_loop_8
    493            }
    494          
    495            if ( events & ZDO_NWK_UPDATE_NV )
   \                     ??ZDApp_event_loop_7:
   \   000096   EF           MOV     A,R7
   \   000097   5401         ANL     A,#0x1
   \   000099   6005         JZ      ??ZDApp_event_loop_9
    496            {
    497              ZDApp_SaveNetworkStateEvt();
    498          
    499              // Return unprocessed events
    500              return (events ^ ZDO_NWK_UPDATE_NV);
   \   00009B   EF           MOV     A,R7
   \   00009C   6401         XRL     A,#0x1
   \   00009E   801C         SJMP    ??ZDApp_event_loop_4
    501            }
    502          
    503            if ( events & ZDO_DEVICE_RESET )
   \                     ??ZDApp_event_loop_9:
   \   0000A0   EE           MOV     A,R6
   \   0000A1   5404         ANL     A,#0x4
   \   0000A3   600A         JZ      ??ZDApp_event_loop_10
    504            {
    505          #ifdef ZBA_FALLBACK_NWKKEY
    506              if ( devState == DEV_END_DEVICE_UNAUTH )
    507              {
    508                ZDSecMgrFallbackNwkKey();
    509              }
    510              else
    511          #endif
    512              {
    513                // Set the NV startup option to force a "new" join.
    514                zgWriteStartupOptions( ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
   \   0000A5                ; Setup parameters for call to function zgWriteStartupOptions
   \   0000A5   7A02         MOV     R2,#0x2
   \   0000A7   79FF         MOV     R1,#-0x1
   \   0000A9   12....       LCALL   `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
    515          
    516                // The device has been in the UNAUTH state, so reset
    517                // Note: there will be no return from this call
    518                SystemResetSoft();
   \   0000AC                ; Setup parameters for call to function Onboard_soft_reset
   \   0000AC   12....       LCALL   Onboard_soft_reset & 0xFFFF
    519              }
    520            }
    521          
    522          #if !defined ( ZDP_BIND_SKIP_VALIDATION )
    523            if ( events & ZDO_PENDING_BIND_REQ_EVT )
   \                     ??ZDApp_event_loop_10:
   \   0000AF   EF           MOV     A,R7
   \   0000B0   5410         ANL     A,#0x10
   \   0000B2   600B         JZ      ??ZDApp_event_loop_11
    524            {
    525          #if defined ( REFLECTOR )
    526              ZDApp_AgeOutPendingBindEntry();
   \   0000B4                ; Setup parameters for call to function ZDApp_AgeOutPendingBindEntry
   \   0000B4   12....       LCALL   `??ZDApp_AgeOutPendingBindEntry::?relay`; Banked call to: ZDApp_AgeOutPendingBindEntry
    527          #endif
    528              // Return unprocessed events
    529              return (events ^ ZDO_PENDING_BIND_REQ_EVT);
   \   0000B7   EE           MOV     A,R6
   \   0000B8   FA           MOV     R2,A
   \   0000B9   EF           MOV     A,R7
   \   0000BA   6410         XRL     A,#0x10
   \                     ??ZDApp_event_loop_4:
   \   0000BC   FB           MOV     R3,A
   \   0000BD   8009         SJMP    ??ZDApp_event_loop_8
    530            }
    531          #endif
    532          
    533            if ( ZG_SECURE_ENABLED )
    534            {
    535              return ( ZDApp_ProcessSecEvent( task_id, events ) );
   \                     ??ZDApp_event_loop_11:
   \   0000BF                ; Setup parameters for call to function ZDApp_ProcessSecEvent
   \   0000BF   EE           MOV     A,R6
   \   0000C0   FA           MOV     R2,A
   \   0000C1   EF           MOV     A,R7
   \   0000C2   FB           MOV     R3,A
   \   0000C3   A9..         MOV     R1,?V2
   \   0000C5   12....       LCALL   `??ZDApp_ProcessSecEvent::?relay`; Banked call to: ZDApp_ProcessSecEvent
    536            }
   \                     ??ZDApp_event_loop_8:
   \   0000C8                REQUIRE ?Subroutine1
   \   0000C8                ; // Fall through to label ?Subroutine1
    537            else
    538            {
    539              // Discard or make more handlers
    540              return 0;
    541            }
    542          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F06         MOV     R7,#0x6
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine51_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function osal_set_event
   \   000001                ; Setup parameters for call to function osal_set_event
   \   000001                ; Setup parameters for call to function osal_set_event
   \   000001   7A10         MOV     R2,#0x10
   \   000003   7B00         MOV     R3,#0x0
   \   000005   90....       MOV     DPTR,#ZDAppTaskID
   \   000008   E0           MOVX    A,@DPTR
   \   000009   F9           MOV     R1,A
   \   00000A   22           RET
    543          
    544          /*********************************************************************
    545           * @fn      ZDApp_ProcessSecEvent()
    546           *
    547           * @brief   Process incoming security events.
    548           *
    549           * @param   task_id - Task ID
    550           * @param   events  - Bitmap of events
    551           *
    552           * @return  none
    553           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    554          UINT16 ZDApp_ProcessSecEvent( uint8 task_id, UINT16 events )
   \                     ZDApp_ProcessSecEvent:
    555          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    556            (void)task_id;  // Intentionally unreferenced parameter
    557          
    558            if ( ZSTACK_ROUTER_BUILD )
    559            {
    560              if ( events & ZDO_NEW_DEVICE )
    561              {
    562                // process the new device event
    563                if ( ZDApp_NewDeviceList )
    564                {
    565                  ZDAppNewDevice_t *pNewDevice;
    566                  uint16 timeDelta;
    567          
    568                  (void) ZDSecMgrNewDeviceEvent( ZDApp_NewDeviceList->shortAddr );
    569          
    570                  pNewDevice = (ZDAppNewDevice_t *) ZDApp_NewDeviceList->next;
    571                  osal_mem_free( ZDApp_NewDeviceList );
    572                  ZDApp_NewDeviceList = pNewDevice;
    573          
    574                  if ( pNewDevice )
    575                  {
    576                    timeDelta = pNewDevice->timeDelta;
    577                    pNewDevice = pNewDevice->next;
    578          
    579                    while ( pNewDevice )
    580                    {
    581                      pNewDevice->timeDelta -= timeDelta;
    582                      pNewDevice = pNewDevice->next;
    583                    }
    584          
    585                    osal_start_timerEx( ZDAppTaskID, ZDO_NEW_DEVICE, timeDelta );
    586                  }
    587                }
    588          
    589                // Return unprocessed events
    590                return (events ^ ZDO_NEW_DEVICE);
    591              }
    592            }
    593          
    594            if ( events & ZDO_DEVICE_AUTH )
   \   000009   EE           MOV     A,R6
   \   00000A   5480         ANL     A,#0x80
   \   00000C   600A         JZ      ??ZDApp_ProcessSecEvent_0
    595            {
    596              ZDApp_DeviceAuthEvt();
   \   00000E                ; Setup parameters for call to function ZDApp_DeviceAuthEvt
   \   00000E   12....       LCALL   `??ZDApp_DeviceAuthEvt::?relay`; Banked call to: ZDApp_DeviceAuthEvt
    597          
    598              // Return unprocessed events
    599              return (events ^ ZDO_DEVICE_AUTH);
   \   000011   EE           MOV     A,R6
   \   000012   6480         XRL     A,#0x80
   \   000014   FA           MOV     R2,A
   \   000015   EF           MOV     A,R7
   \   000016   8026         SJMP    ??ZDApp_ProcessSecEvent_1
    600            }
    601          
    602            if ( events & ZDO_FRAMECOUNTER_CHANGE )
   \                     ??ZDApp_ProcessSecEvent_0:
   \   000018   EF           MOV     A,R7
   \   000019   5402         ANL     A,#0x2
   \   00001B   600A         JZ      ??ZDApp_ProcessSecEvent_2
    603            {
    604              ZDApp_SaveNwkKey();
   \   00001D                ; Setup parameters for call to function ZDApp_SaveNwkKey
   \   00001D   12....       LCALL   `??ZDApp_SaveNwkKey::?relay`; Banked call to: ZDApp_SaveNwkKey
    605          
    606              // Return unprocessed events
    607              return (events ^ ZDO_FRAMECOUNTER_CHANGE);
   \   000020   EE           MOV     A,R6
   \   000021   FA           MOV     R2,A
   \   000022   EF           MOV     A,R7
   \   000023   6402         XRL     A,#0x2
   \   000025   8017         SJMP    ??ZDApp_ProcessSecEvent_1
    608            }
    609          
    610            if ( events & ZDO_APS_FRAMECOUNTER_CHANGE )
   \                     ??ZDApp_ProcessSecEvent_2:
   \   000027   EF           MOV     A,R7
   \   000028   5408         ANL     A,#0x8
   \   00002A   6005         JZ      ??ZDApp_ProcessSecEvent_3
    611            {
    612          #if defined (NV_RESTORE)
    613              ZDSecMgrSaveApsLinkKey();
    614          #endif // (NV_RESTORE)
    615          
    616              // Return unprocessed events
    617              return (events ^ ZDO_APS_FRAMECOUNTER_CHANGE);
   \   00002C   EF           MOV     A,R7
   \   00002D   6408         XRL     A,#0x8
   \   00002F   800D         SJMP    ??ZDApp_ProcessSecEvent_1
    618            }
    619          
    620            if ( events & ZDO_TCLK_FRAMECOUNTER_CHANGE )
   \                     ??ZDApp_ProcessSecEvent_3:
   \   000031   EF           MOV     A,R7
   \   000032   5404         ANL     A,#0x4
   \   000034   600B         JZ      ??ZDApp_ProcessSecEvent_4
    621            {
    622              ZDSecMgrSaveTCLinkKey();
   \   000036                ; Setup parameters for call to function ZDSecMgrSaveTCLinkKey
   \   000036   12....       LCALL   `??ZDSecMgrSaveTCLinkKey::?relay`; Banked call to: ZDSecMgrSaveTCLinkKey
    623          
    624              // Return unprocessed events
    625              return (events ^ ZDO_TCLK_FRAMECOUNTER_CHANGE);
   \   000039   EE           MOV     A,R6
   \   00003A   FA           MOV     R2,A
   \   00003B   EF           MOV     A,R7
   \   00003C   6404         XRL     A,#0x4
   \                     ??ZDApp_ProcessSecEvent_1:
   \   00003E   FB           MOV     R3,A
   \   00003F   8004         SJMP    ??ZDApp_ProcessSecEvent_5
    626            }
    627          
    628            // Discard or make more handlers
    629            return 0;
   \                     ??ZDApp_ProcessSecEvent_4:
   \   000041   7A00         MOV     R2,#0x0
   \   000043   7B00         MOV     R3,#0x0
   \                     ??ZDApp_ProcessSecEvent_5:
   \   000045   02....       LJMP    ??Subroutine57_0 & 0xFFFF
    630          }
    631          
    632          /*********************************************************************
    633           * Application Functions
    634           */
    635          
    636          /*********************************************************************
    637           * @fn      ZDOInitDevice
    638           *
    639           * @brief   Start the device in the network.  This function will read
    640           *   ZCD_NV_STARTUP_OPTION (NV item) to determine whether or not to
    641           *   restore the network state of the device.
    642           *
    643           * @param   startDelay - timeDelay to start device (in milliseconds).
    644           *                       There is a jitter added to this delay:
    645           *                       ((NWK_START_DELAY + startDelay)
    646           *                       + (osal_rand() & EXTENDED_JOINING_RANDOM_MASK))
    647           *                       When startDelay is set to ZDO_INIT_HOLD_NWK_START
    648           *                       this function will hold the network init. Application
    649           *                       can start the device.
    650           *
    651           * NOTE:    If the application would like to force a "new" join, the
    652           *          application should set the ZCD_STARTOPT_DEFAULT_NETWORK_STATE
    653           *          bit in the ZCD_NV_STARTUP_OPTION NV item before calling
    654           *          this function. "new" join means to not restore the network
    655           *          state of the device. Use zgWriteStartupOptions() to set these
    656           *          options.
    657           *
    658           * @return
    659           *    ZDO_INITDEV_RESTORED_NETWORK_STATE  - The device's network state was
    660           *          restored.
    661           *    ZDO_INITDEV_NEW_NETWORK_STATE - The network state was initialized.
    662           *          This could mean that ZCD_NV_STARTUP_OPTION said to not restore, or
    663           *          it could mean that there was no network state to restore.
    664           *    ZDO_INITDEV_LEAVE_NOT_STARTED - Before the reset, a network leave was issued
    665           *          with the rejoin option set to TRUE.  So, the device was not
    666           *          started in the network (one time only).  The next time this
    667           *          function is called it will start.
    668           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    669          uint8 ZDOInitDevice( uint16 startDelay )
   \                     ZDOInitDevice:
    670          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine14 & 0xFFFF
    671            uint8 networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
    672            uint16 extendedDelay = 0;
    673           
    674            
    675            
    676          
    677            if ( devState == DEV_HOLD )
   \                     ??CrossCallReturnLabel_68:
   \   00000D   90....       MOV     DPTR,#devState
   \   000010   E0           MOVX    A,@DPTR
   \   000011   7005         JNZ     ??ZDOInitDevice_0
    678            {
    679              // Initialize the RAM items table, in case an NV item has been updated.
    680              zgInitItems( FALSE );
   \   000013                ; Setup parameters for call to function zgInitItems
   \   000013   7900         MOV     R1,#0x0
   \   000015   12....       LCALL   `??zgInitItems::?relay`; Banked call to: zgInitItems
    681            }
    682          
    683            ZDConfig_InitDescriptors();
   \                     ??ZDOInitDevice_0:
   \   000018                ; Setup parameters for call to function ZDConfig_InitDescriptors
   \   000018   12....       LCALL   `??ZDConfig_InitDescriptors::?relay`; Banked call to: ZDConfig_InitDescriptors
    684            //devtag.071807.todo - fix this temporary solution
    685            _NIB.CapabilityFlags = ZDO_Config_Node_Descriptor.CapabilityFlags;
   \   00001B   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   90....       MOV     DPTR,#_NIB + 14
   \   000022   F0           MOVX    @DPTR,A
    686          
    687          #if defined ( NV_RESTORE )
    688            // Hold down the SW_BYPASS_NV key (defined in OnBoard.h)
    689            // while booting to skip past NV Restore.
    690            if ( zdappHoldKeys == SW_BYPASS_NV )
    691            {
    692              zdappHoldKeys = 0;   // Only once
    693              networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
    694            }
    695            else
    696            {
    697              // Determine if NV should be restored
    698              networkStateNV = ZDApp_ReadNetworkRestoreState();
    699            }
    700          
    701            if ( networkStateNV == ZDO_INITDEV_RESTORED_NETWORK_STATE )
    702            {
    703              networkStateNV = ZDApp_RestoreNetworkState();
    704            }
    705            else
    706            {
    707              // Wipe out the network state in NV
    708              NLME_InitNV();
    709              NLME_SetDefaultNV();
    710              // clear NWK key values
    711              ZDSecMgrClearNVKeyValues();
    712            }
    713          #endif
    714          
    715            if ( networkStateNV == ZDO_INITDEV_NEW_NETWORK_STATE )
    716            {
    717              ZDAppDetermineDeviceType();
   \   000023                ; Setup parameters for call to function ZDAppDetermineDeviceType
   \   000023   12....       LCALL   `??ZDAppDetermineDeviceType::?relay`; Banked call to: ZDAppDetermineDeviceType
    718          
    719              // Only delay if joining network - not restoring network state
    720              extendedDelay = (uint16)((NWK_START_DELAY + startDelay)
    721                        + (osal_rand() & EXTENDED_JOINING_RANDOM_MASK));
   \   000026                ; Setup parameters for call to function osal_rand
   \   000026   12....       LCALL   `??osal_rand::?relay`; Banked call to: osal_rand
   \   000029   85..82       MOV     DPL,?XSP + 0
   \   00002C   85..83       MOV     DPH,?XSP + 1
   \   00002F   EA           MOV     A,R2
   \   000030   547F         ANL     A,#0x7f
   \   000032   F8           MOV     R0,A
   \   000033   E0           MOVX    A,@DPTR
   \   000034   28           ADD     A,R0
   \   000035   F8           MOV     R0,A
   \   000036   A3           INC     DPTR
   \   000037   E0           MOVX    A,@DPTR
   \   000038   3400         ADDC    A,#0x0
   \   00003A   F9           MOV     R1,A
   \   00003B   E8           MOV     A,R0
   \   00003C   2464         ADD     A,#0x64
   \   00003E   FE           MOV     R6,A
   \   00003F   E4           CLR     A
   \   000040   39           ADDC    A,R1
   \   000041   FF           MOV     R7,A
    722            }
    723          
    724            // Initialize the security for type of device
    725            ZDApp_SecInit( networkStateNV );
   \   000042                ; Setup parameters for call to function ZDApp_SecInit
   \   000042   7901         MOV     R1,#0x1
   \   000044   12....       LCALL   `??ZDApp_SecInit::?relay`; Banked call to: ZDApp_SecInit
    726          
    727            if( ZDO_INIT_HOLD_NWK_START != startDelay )
   \   000047   85..82       MOV     DPL,?XSP + 0
   \   00004A   85..83       MOV     DPH,?XSP + 1
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   F4           CPL     A
   \   00004F   7003         JNZ     ??ZDOInitDevice_1
   \   000051   A3           INC     DPTR
   \   000052   E0           MOVX    A,@DPTR
   \   000053   F4           CPL     A
   \                     ??ZDOInitDevice_1:
   \   000054   6038         JZ      ??ZDOInitDevice_2
    728            {
    729              devState = DEV_INIT;    // Remove the Hold state
   \   000056   90....       MOV     DPTR,#devState
   \   000059   7401         MOV     A,#0x1
   \   00005B   F0           MOVX    @DPTR,A
    730          
    731              // Initialize leave control logic
    732              ZDApp_LeaveCtrlInit();
   \   00005C                ; Setup parameters for call to function ZDApp_LeaveCtrlInit
   \   00005C   12....       LCALL   `??ZDApp_LeaveCtrlInit::?relay`; Banked call to: ZDApp_LeaveCtrlInit
    733          
    734              // Check leave control reset settings
    735              ZDApp_LeaveCtrlStartup( &devState, &startDelay );
   \   00005F                ; Setup parameters for call to function ZDApp_LeaveCtrlStartup
   \   00005F   AC..         MOV     R4,?XSP + 0
   \   000061   AD..         MOV     R5,?XSP + 1
   \   000063   7A..         MOV     R2,#devState & 0xff
   \   000065   7B..         MOV     R3,#(devState >> 8) & 0xff
   \   000067   12....       LCALL   `??ZDApp_LeaveCtrlStartup::?relay`; Banked call to: ZDApp_LeaveCtrlStartup
    736          
    737              // Leave may make the hold state come back
    738              if ( devState == DEV_HOLD )
   \   00006A   90....       MOV     DPTR,#devState
   \   00006D   E0           MOVX    A,@DPTR
   \   00006E   7017         JNZ     ??ZDOInitDevice_3
    739              {
    740                // Set the NV startup option to force a "new" join.
    741                zgWriteStartupOptions( ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
   \   000070                ; Setup parameters for call to function zgWriteStartupOptions
   \   000070   7A02         MOV     R2,#0x2
   \   000072   79FF         MOV     R1,#-0x1
   \   000074   12....       LCALL   `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
    742          
    743                // Notify the applications
    744                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   000077                ; Setup parameters for call to function osal_set_event
   \   000077   7A10         MOV     R2,#0x10
   \   000079   7B00         MOV     R3,#0x0
   \   00007B   90....       MOV     DPTR,#ZDAppTaskID
   \   00007E   E0           MOVX    A,@DPTR
   \   00007F   F9           MOV     R1,A
   \   000080   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
    745          
    746                return ( ZDO_INITDEV_LEAVE_NOT_STARTED );   // Don't join - (one time).
   \   000083   7902         MOV     R1,#0x2
   \   000085   8011         SJMP    ??ZDOInitDevice_4
    747              }
    748          
    749              // Trigger the network start
    750              ZDApp_NetworkInit( extendedDelay );
   \                     ??ZDOInitDevice_3:
   \   000087                ; Setup parameters for call to function ZDApp_NetworkInit
   \   000087   EE           MOV     A,R6
   \   000088   FA           MOV     R2,A
   \   000089   EF           MOV     A,R7
   \   00008A   FB           MOV     R3,A
   \   00008B   12....       LCALL   `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
    751            }
    752          
    753            // set broadcast address mask to support broadcast filtering
    754            NLME_SetBroadcastFilter( ZDO_Config_Node_Descriptor.CapabilityFlags );
   \                     ??ZDOInitDevice_2:
   \   00008E                ; Setup parameters for call to function NLME_SetBroadcastFilter
   \   00008E   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000091   E0           MOVX    A,@DPTR
   \   000092   F9           MOV     R1,A
   \   000093   12....       LCALL   `??NLME_SetBroadcastFilter::?relay`; Banked call to: NLME_SetBroadcastFilter
    755          
    756            return ( networkStateNV );
   \   000096   7901         MOV     R1,#0x1
   \                     ??ZDOInitDevice_4:
   \   000098   02....       LJMP    ?Subroutine8 & 0xFFFF
    757          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine50_0
   \   000006                ; // Fall through to label ??Subroutine50_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine50_0:
   \   000000   EA           MOV     A,R2
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   EB           MOV     A,R3
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine54_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine55_0
   \   000003                ; // Fall through to label ??Subroutine55_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine55_0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   7402         MOV     A,#0x2
   \   000002   02....       LJMP    ??Subroutine54_0 & 0xFFFF
    758          
    759          /*********************************************************************
    760           * @fn      ZDApp_ReadNetworkRestoreState
    761           *
    762           * @brief   Read the ZCD_NV_STARTUP_OPTION NV Item to state whether
    763           *          or not to restore the network state.
    764           *          If the read value has the ZCD_STARTOPT_DEFAULT_NETWORK_STATE
    765           *          bit set return the ZDO_INITDEV_NEW_NETWORK_STATE.
    766           *
    767           * @param   none
    768           *
    769           * @return  ZDO_INITDEV_NEW_NETWORK_STATE
    770           *          or ZDO_INITDEV_RESTORED_NETWORK_STATE based on whether or
    771           *          not ZCD_STARTOPT_DEFAULT_NETWORK_STATE bit is set in
    772           *          ZCD_NV_STARTUP_OPTION
    773           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    774          uint8 ZDApp_ReadNetworkRestoreState( void )
   \                     ZDApp_ReadNetworkRestoreState:
    775          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    776            uint8 networkStateNV = ZDO_INITDEV_RESTORED_NETWORK_STATE;
   \   000005   7E00         MOV     R6,#0x0
    777          
    778            // Look for the New Network State option.
    779            if ( zgReadStartupOptions() & ZCD_STARTOPT_DEFAULT_NETWORK_STATE )
   \   000007                ; Setup parameters for call to function zgReadStartupOptions
   \   000007   12....       LCALL   `??zgReadStartupOptions::?relay`; Banked call to: zgReadStartupOptions
   \   00000A   E9           MOV     A,R1
   \   00000B   F8           MOV     R0,A
   \   00000C   A2E1         MOV     C,0xE0 /* A   */.1
   \   00000E   5002         JNC     ??ZDApp_ReadNetworkRestoreState_0
    780            {
    781              networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
   \   000010   7E01         MOV     R6,#0x1
    782            }
    783          
    784            return ( networkStateNV );
   \                     ??ZDApp_ReadNetworkRestoreState_0:
   \   000012   EE           MOV     A,R6
   \   000013   F9           MOV     R1,A
   \   000014   02....       LJMP    ??Subroutine57_0 & 0xFFFF
    785          }
    786          
    787          /*********************************************************************
    788           * @fn      ZDAppDetermineDeviceType()
    789           *
    790           * @brief   Determines the type of device to start.
    791           *
    792           *          Looks at zgDeviceLogicalType and determines what type of
    793           *          device to start.  The types are:
    794           *            ZG_DEVICETYPE_COORDINATOR
    795           *            ZG_DEVICETYPE_ROUTER
    796           *            ZG_DEVICETYPE_ENDDEVICE
    797           *
    798           * @param   none
    799           *
    800           * @return  none
    801           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    802          void ZDAppDetermineDeviceType( void )
   \                     ZDAppDetermineDeviceType:
    803          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    804            if ( zgDeviceLogicalType == ZG_DEVICETYPE_COORDINATOR )
   \   000004   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000007   E0           MOVX    A,@DPTR
   \   000008   700E         JNZ     ??ZDAppDetermineDeviceType_0
    805            {
    806              devStartMode = MODE_HARD;     // Start as a coordinator
   \   00000A   90....       MOV     DPTR,#devStartMode
   \   00000D   7402         MOV     A,#0x2
   \   00000F   F0           MOVX    @DPTR,A
    807              ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_COORDINATOR;
   \   000010   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000013   E0           MOVX    A,@DPTR
   \   000014   54F8         ANL     A,#0xf8
   \   000016   8030         SJMP    ??ZDAppDetermineDeviceType_1
    808            }
    809            else
    810            {
    811              if ( zgDeviceLogicalType == ZG_DEVICETYPE_ROUTER  )
   \                     ??ZDAppDetermineDeviceType_0:
   \   000018   6401         XRL     A,#0x1
   \   00001A   700B         JNZ     ??ZDAppDetermineDeviceType_2
    812                ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_ROUTER;
   \   00001C   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   54F8         ANL     A,#0xf8
   \   000022   F0           MOVX    @DPTR,A
   \   000023   4401         ORL     A,#0x1
   \   000025   800E         SJMP    ??ZDAppDetermineDeviceType_3
    813              else if ( zgDeviceLogicalType == ZG_DEVICETYPE_ENDDEVICE )
   \                     ??ZDAppDetermineDeviceType_2:
   \   000027   E0           MOVX    A,@DPTR
   \   000028   6402         XRL     A,#0x2
   \   00002A   700A         JNZ     ??ZDAppDetermineDeviceType_4
    814                ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_DEVICE;
   \   00002C   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   54F8         ANL     A,#0xf8
   \   000032   F0           MOVX    @DPTR,A
   \   000033   4402         ORL     A,#0x2
   \                     ??ZDAppDetermineDeviceType_3:
   \   000035   F0           MOVX    @DPTR,A
    815          
    816              // If AIB_apsUseExtendedPANID is set to a non-zero value by commissioning
    817              // The device shall do rejoin the network. Otherwise, do normal join
    818              if ( nwk_ExtPANIDValid( AIB_apsUseExtendedPANID ) == false )
   \                     ??ZDAppDetermineDeviceType_4:
   \   000036                ; Setup parameters for call to function nwk_ExtPANIDValid
   \   000036   7A..         MOV     R2,#AIB_apsUseExtendedPANID & 0xff
   \   000038   7B..         MOV     R3,#(AIB_apsUseExtendedPANID >> 8) & 0xff
   \   00003A   12....       LCALL   `??nwk_ExtPANIDValid::?relay`; Banked call to: nwk_ExtPANIDValid
   \   00003D   E9           MOV     A,R1
   \   00003E   90....       MOV     DPTR,#devStartMode
   \   000041   7003         JNZ     ??ZDAppDetermineDeviceType_5
    819              {
    820                devStartMode = MODE_JOIN;     // Assume joining
   \   000043   E4           CLR     A
   \   000044   8002         SJMP    ??ZDAppDetermineDeviceType_1
    821              }
    822              else
    823              {
    824                devStartMode = MODE_REJOIN;
   \                     ??ZDAppDetermineDeviceType_5:
   \   000046   7403         MOV     A,#0x3
   \                     ??ZDAppDetermineDeviceType_1:
   \   000048   F0           MOVX    @DPTR,A
    825              }
    826            }
    827          }
   \   000049   02....       LJMP    ??Subroutine56_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine56_0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    828          
    829          /*********************************************************************
    830           * @fn      ZDApp_NetworkStartEvt()
    831           *
    832           * @brief   Process the Network Start Event
    833           *
    834           * @param   none
    835           *
    836           * @return  none
    837           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    838          void ZDApp_NetworkStartEvt( void )
   \                     ZDApp_NetworkStartEvt:
    839          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    840            if ( nwkStatus == ZSuccess )
   \   000004   90....       MOV     DPTR,#nwkStatus
   \   000007   E0           MOVX    A,@DPTR
   \   000008   7012         JNZ     ??ZDApp_NetworkStartEvt_0
    841            {
    842              // Successfully started a ZigBee network
    843              if ( devState == DEV_COORD_STARTING )
   \   00000A   90....       MOV     DPTR,#devState
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   6408         XRL     A,#0x8
   \   000010   7003         JNZ     ??ZDApp_NetworkStartEvt_1
    844              {
    845                devState = DEV_ZB_COORD;
   \   000012   7409         MOV     A,#0x9
   \   000014   F0           MOVX    @DPTR,A
    846              }
    847          
    848              osal_pwrmgr_device( PWRMGR_ALWAYS_ON );
   \                     ??ZDApp_NetworkStartEvt_1:
   \   000015                ; Setup parameters for call to function osal_pwrmgr_device
   \   000015   7900         MOV     R1,#0x0
   \   000017   12....       LCALL   `??osal_pwrmgr_device::?relay`; Banked call to: osal_pwrmgr_device
    849              osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   00001A                ; Setup parameters for call to function osal_set_event
   \   00001A   802E         SJMP    ??ZDApp_NetworkStartEvt_2
    850            }
    851            else
    852            {
    853              // Try again with a higher energy threshold
    854              if ( ( NLME_GetEnergyThreshold() + ENERGY_SCAN_INCREMENT ) < 0xff )
   \                     ??ZDApp_NetworkStartEvt_0:
   \   00001C                ; Setup parameters for call to function NLME_GetEnergyThreshold
   \   00001C   12....       LCALL   `??NLME_GetEnergyThreshold::?relay`; Banked call to: NLME_GetEnergyThreshold
   \   00001F   E9           MOV     A,R1
   \   000020   7900         MOV     R1,#0x0
   \   000022   2410         ADD     A,#0x10
   \   000024   5001         JNC     ??ZDApp_NetworkStartEvt_3
   \   000026   09           INC     R1
   \                     ??ZDApp_NetworkStartEvt_3:
   \   000027   C3           CLR     C
   \   000028   94FF         SUBB    A,#-0x1
   \   00002A   E9           MOV     A,R1
   \   00002B   9400         SUBB    A,#0x0
   \   00002D   A2D2         MOV     C,0xD0 /* PSW */.2
   \   00002F   65D0         XRL     A,PSW
   \   000031   33           RLC     A
   \   000032   5010         JNC     ??ZDApp_NetworkStartEvt_4
    855              {
    856                NLME_SetEnergyThreshold( (uint8)(NLME_GetEnergyThreshold() + ENERGY_SCAN_INCREMENT) );
   \   000034                ; Setup parameters for call to function NLME_GetEnergyThreshold
   \   000034   12....       LCALL   `??NLME_GetEnergyThreshold::?relay`; Banked call to: NLME_GetEnergyThreshold
   \   000037   E9           MOV     A,R1
   \   000038   F8           MOV     R0,A
   \   000039                ; Setup parameters for call to function NLME_SetEnergyThreshold
   \   000039   7410         MOV     A,#0x10
   \   00003B   29           ADD     A,R1
   \   00003C   F9           MOV     R1,A
   \   00003D   12....       LCALL   `??NLME_SetEnergyThreshold::?relay`; Banked call to: NLME_SetEnergyThreshold
    857                osal_set_event( ZDAppTaskID, ZDO_NETWORK_INIT );
   \   000040                ; Setup parameters for call to function osal_set_event
   \   000040   7A01         MOV     R2,#0x1
   \   000042   8008         SJMP    ??ZDApp_NetworkStartEvt_5
    858              }
    859              else
    860              {
    861                // Failed to start network. Enter a dormant state (until user intervenes)
    862                devState = DEV_INIT;
   \                     ??ZDApp_NetworkStartEvt_4:
   \   000044   90....       MOV     DPTR,#devState
   \   000047   7401         MOV     A,#0x1
   \   000049   F0           MOVX    @DPTR,A
    863                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   00004A                ; Setup parameters for call to function osal_set_event
   \                     ??ZDApp_NetworkStartEvt_2:
   \   00004A   7A10         MOV     R2,#0x10
   \                     ??ZDApp_NetworkStartEvt_5:
   \   00004C   7B00         MOV     R3,#0x0
   \   00004E   90....       MOV     DPTR,#ZDAppTaskID
   \   000051   E0           MOVX    A,@DPTR
   \   000052   F9           MOV     R1,A
   \   000053   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
    864              }
    865            }
    866          }
   \   000056   02....       LJMP    ??Subroutine56_0 & 0xFFFF
    867          
    868          /*********************************************************************
    869           * @fn      ZDApp_DeviceAuthEvt()
    870           *
    871           * @brief   Process the Device Authentic Event
    872           *
    873           * @param   none
    874           *
    875           * @return  none
    876           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    877          void ZDApp_DeviceAuthEvt( void )
   \                     ZDApp_DeviceAuthEvt:
    878          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    879            // received authentication from trust center
    880            if ( devState == DEV_END_DEVICE_UNAUTH )
   \   000004   90....       MOV     DPTR,#devState
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6405         XRL     A,#0x5
   \   00000A   7028         JNZ     ??ZDApp_DeviceAuthEvt_0
    881            {
    882              // Stop the reset timer so it doesn't reset
    883              ZDApp_ResetTimerCancel();
   \   00000C                ; Setup parameters for call to function ZDApp_ResetTimerCancel
   \   00000C   12....       LCALL   `??ZDApp_ResetTimerCancel::?relay`; Banked call to: ZDApp_ResetTimerCancel
    884          
    885              devState = DEV_END_DEVICE;
   \   00000F   12....       LCALL   ?Subroutine10 & 0xFFFF
    886              osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \                     ??CrossCallReturnLabel_71:
   \   000012   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
    887          
    888              // Set the Power Manager Device
    889          #if defined ( POWER_SAVING )
    890              osal_pwrmgr_device( PWRMGR_BATTERY );
    891          #endif
    892          
    893              if ( ZSTACK_ROUTER_BUILD )
    894              {
    895                if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
    896                {
    897                  // NOTE: first two parameters are not used, see NLMEDE.h for details
    898                  NLME_StartRouterRequest( 0, 0, false );
    899                }
    900              }
    901          
    902              // Notify to save info into NV
    903              ZDApp_NVUpdate();
    904          
    905              // Save off the security
    906              ZDApp_SaveNwkKey();
   \   000015                ; Setup parameters for call to function ZDApp_SaveNwkKey
   \   000015   12....       LCALL   `??ZDApp_SaveNwkKey::?relay`; Banked call to: ZDApp_SaveNwkKey
    907          
    908              ZDApp_AnnounceNewAddress();
   \   000018                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   000018   12....       LCALL   `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
    909          
    910              if ( ( (ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE) == 0 )
    911                  || ( (ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE)
    912          #if defined ( ZIGBEE_CHILD_AGING )
    913                    && (zgChildAgingEnable == TRUE)
    914          #endif // ZIGBEE_CHILD_AGING
    915                       ) )
   \   00001B   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   A2E3         MOV     C,0xE0 /* A   */.3
   \   000021   5008         JNC     ??ZDApp_DeviceAuthEvt_1
   \   000023   90....       MOV     DPTR,#zgChildAgingEnable
   \   000026   E0           MOVX    A,@DPTR
   \   000027   6401         XRL     A,#0x1
   \   000029   7009         JNZ     ??ZDApp_DeviceAuthEvt_0
    916              {
    917                NLME_SetPollRate( ZDApp_SavedPollRate );
   \                     ??ZDApp_DeviceAuthEvt_1:
   \   00002B                ; Setup parameters for call to function NLME_SetPollRate
   \   00002B   90....       MOV     DPTR,#ZDApp_SavedPollRate
   \   00002E   12....       LCALL   ?Subroutine26 & 0xFFFF
    918              }
    919            }
   \                     ??CrossCallReturnLabel_16:
   \   000031   12....       LCALL   `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
    920            else
    921            {
    922              ZDApp_NVUpdate();
    923            }
    924          }
   \                     ??ZDApp_DeviceAuthEvt_0:
   \   000034   02....       LJMP    ??Subroutine56_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   90....       MOV     DPTR,#devState
   \   000003   7406         MOV     A,#0x6
   \   000005                REQUIRE ??Subroutine51_0
   \   000005                ; // Fall through to label ??Subroutine51_0
    925          
    926          /*********************************************************************
    927           * @fn      ZDApp_SaveNetworkStateEvt()
    928           *
    929           * @brief   Process the Save the Network State Event
    930           *
    931           * @param   none
    932           *
    933           * @return  none
    934           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    935          void ZDApp_SaveNetworkStateEvt( void )
   \                     ZDApp_SaveNetworkStateEvt:
    936          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    937          #if defined ( NV_RESTORE )
    938           #if defined ( NV_TURN_OFF_RADIO )
    939            // Turn off the radio's receiver during an NV update
    940            uint8 RxOnIdle;
    941            uint8 x = false;
    942            ZMacGetReq( ZMacRxOnIdle, &RxOnIdle );
    943            ZMacSetReq( ZMacRxOnIdle, &x );
    944           #endif
    945          
    946            // Update the Network State in NV
    947            NLME_UpdateNV( NWK_NV_NIB_ENABLE        |
    948                           NWK_NV_DEVICELIST_ENABLE |
    949                           NWK_NV_BINDING_ENABLE    |
    950                           NWK_NV_ADDRMGR_ENABLE );
    951          
    952            // Reset the NV startup option to resume from NV by
    953            // clearing the "New" join option.
    954            zgWriteStartupOptions( FALSE, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
    955          
    956           #if defined ( NV_TURN_OFF_RADIO )
    957            ZMacSetReq( ZMacRxOnIdle, &RxOnIdle );
    958           #endif
    959          #endif // NV_RESTORE
    960          }
   \   000000   02....       LJMP    ?BRET
    961          
    962          #if defined ( NV_RESTORE )
    963          /*********************************************************************
    964           * @fn      ZDApp_RestoreNetworkState()
    965           *
    966           * @brief   This function will restore the network state of the
    967           *          device if the network state is stored in NV.
    968           *
    969           * @param   none
    970           *
    971           * @return
    972           *    ZDO_INITDEV_RESTORED_NETWORK_STATE  - The device's network state was
    973           *          restored.
    974           *    ZDO_INITDEV_NEW_NETWORK_STATE - The network state was not used.
    975           *          This could mean that zgStartupOption said to not restore, or
    976           *          it could mean that there was no network state to restore.
    977           *
    978           */
    979          uint8 ZDApp_RestoreNetworkState( void )
    980          {
    981            uint8 nvStat;
    982          
    983            // Initialize NWK NV items
    984            nvStat = NLME_InitNV();
    985          
    986            if ( nvStat != NV_OPER_FAILED )
    987            {
    988              if ( NLME_RestoreFromNV() )
    989              {
    990                // Are we a coordinator
    991                ZDAppNwkAddr.addr.shortAddr = NLME_GetShortAddr();
    992                if ( ZDAppNwkAddr.addr.shortAddr == 0 )
    993                  ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_COORDINATOR;
    994                devStartMode = MODE_RESUME;
    995                osal_cpyExtAddr( ZDO_UseExtendedPANID, _NIB.extendedPANID );
    996              }
    997              else
    998                nvStat = NV_ITEM_UNINIT;
    999          
   1000              if ( ZG_SECURE_ENABLED )
   1001              {
   1002                nwkFrameCounterChanges = 0;
   1003          
   1004                if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1005                {
   1006                  ZDApp_RestoreNwkKey();
   1007                }
   1008              }
   1009          
   1010              // The default for RxOnWhenIdle is true for Routers and false for end devices
   1011              // [setup in the NLME_RestoreFromNV()].  Change it here if you want something
   1012              // other than default.
   1013            }
   1014          
   1015            if ( nvStat == ZSUCCESS )
   1016              return ( ZDO_INITDEV_RESTORED_NETWORK_STATE );
   1017            else
   1018              return ( ZDO_INITDEV_NEW_NETWORK_STATE );
   1019          }
   1020          #endif // NV_RESTORE
   1021          
   1022          /*********************************************************************
   1023           * @fn      ZDApp_InitUserDesc()
   1024           *
   1025           * @brief   Initialize the User Descriptor, the descriptor is read from NV
   1026           *          when needed.  If you want to initialize the User descriptor to
   1027           *          something other than all zero, do it here.
   1028           *
   1029           * @param   none
   1030           *
   1031           * @return  none
   1032           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1033          void ZDApp_InitUserDesc( void )
   \                     ZDApp_InitUserDesc:
   1034          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV     A,#-0x11
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1035            UserDescriptorFormat_t ZDO_DefaultUserDescriptor;
   1036          
   1037            // Initialize the User Descriptor, the descriptor is read from NV
   1038            // when needed.  If you want to initialize the User descriptor to something
   1039            // other than all zero, do it here.
   1040            osal_memset( &ZDO_DefaultUserDescriptor, 0, sizeof( UserDescriptorFormat_t ) );
   \   00000A                ; Setup parameters for call to function osal_memset
   \   00000A   7C11         MOV     R4,#0x11
   \   00000C   7D00         MOV     R5,#0x0
   \   00000E   7900         MOV     R1,#0x0
   \   000010   AA..         MOV     R2,?XSP + 0
   \   000012   AB..         MOV     R3,?XSP + 1
   \   000014   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1041            if ( ZSUCCESS == osal_nv_item_init( ZCD_NV_USERDESC,
   1042                   sizeof(UserDescriptorFormat_t), (void*)&ZDO_DefaultUserDescriptor ) )
   \   000017                ; Setup parameters for call to function osal_nv_item_init
   \   000017   A8..         MOV     R0,?XSP + 0
   \   000019   A9..         MOV     R1,?XSP + 1
   \   00001B   88..         MOV     ?V0,R0
   \   00001D   89..         MOV     ?V1,R1
   \   00001F   78..         MOV     R0,#?V0
   \   000021   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000024   7C11         MOV     R4,#0x11
   \   000026   7D00         MOV     R5,#0x0
   \   000028   7A81         MOV     R2,#-0x7f
   \   00002A   7B00         MOV     R3,#0x0
   \   00002C   12....       LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   00002F   7402         MOV     A,#0x2
   \   000031   12....       LCALL   ?DEALLOC_XSTACK8
   \   000034   E9           MOV     A,R1
   \   000035   7033         JNZ     ??ZDApp_InitUserDesc_0
   1043            {
   1044              if ( ZSUCCESS == osal_nv_read( ZCD_NV_USERDESC, 0,
   1045                   sizeof(UserDescriptorFormat_t), (void*)&ZDO_DefaultUserDescriptor ) )
   \   000037                ; Setup parameters for call to function osal_nv_read
   \   000037   78..         MOV     R0,#?V0
   \   000039   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003C   75..11       MOV     ?V0,#0x11
   \   00003F   75..00       MOV     ?V1,#0x0
   \   000042   78..         MOV     R0,#?V0
   \   000044   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000047   7C00         MOV     R4,#0x0
   \   000049   7D00         MOV     R5,#0x0
   \   00004B   7A81         MOV     R2,#-0x7f
   \   00004D   7B00         MOV     R3,#0x0
   \   00004F   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000052   7404         MOV     A,#0x4
   \   000054   12....       LCALL   ?DEALLOC_XSTACK8
   \   000057   E9           MOV     A,R1
   \   000058   7010         JNZ     ??ZDApp_InitUserDesc_0
   1046              {
   1047                if ( ZDO_DefaultUserDescriptor.len != 0 )
   \   00005A   85..82       MOV     DPL,?XSP + 0
   \   00005D   85..83       MOV     DPH,?XSP + 1
   \   000060   E0           MOVX    A,@DPTR
   \   000061   6007         JZ      ??ZDApp_InitUserDesc_0
   1048                {
   1049                  ZDO_Config_Node_Descriptor.UserDescAvail = TRUE;
   \   000063   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000066   E0           MOVX    A,@DPTR
   \   000067   D2E4         SETB    0xE0 /* A   */.4
   \   000069   F0           MOVX    @DPTR,A
   1050                }
   1051              }
   1052            }
   1053          }
   \                     ??ZDApp_InitUserDesc_0:
   \   00006A   7411         MOV     A,#0x11
   \   00006C   02....       LJMP    ??Subroutine54_0 & 0xFFFF
   1054          
   1055          /*********************************************************************
   1056           * @fn      ZDAppCheckForHoldKey()
   1057           *
   1058           * @brief   Check for key to set the device into Hold Auto Start
   1059           *
   1060           * @param   none
   1061           *
   1062           * @return  none
   1063           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1064          void ZDAppCheckForHoldKey( void )
   \                     ZDAppCheckForHoldKey:
   1065          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1066          #if (defined HAL_KEY) && (HAL_KEY == TRUE)
   1067            
   1068            // Get Keypad directly to see if a HOLD is needed
   1069            zdappHoldKeys = HalKeyRead();
   \   000004                ; Setup parameters for call to function HalKeyRead
   \   000004   12....       LCALL   `??HalKeyRead::?relay`; Banked call to: HalKeyRead
   \   000007   E9           MOV     A,R1
   \   000008   90....       MOV     DPTR,#zdappHoldKeys
   \   00000B   F0           MOVX    @DPTR,A
   1070            if ( zdappHoldKeys == SW_BYPASS_START )
   \   00000C   6401         XRL     A,#0x1
   \   00000E   7900         MOV     R1,#0x0
   \   000010   7006         JNZ     ??ZDAppCheckForHoldKey_0
   1071            {
   1072              HalLcdWriteString("Ulazi u if.",0);
   \   000012                ; Setup parameters for call to function HalLcdWriteString
   \   000012   7A..         MOV     R2,#`?<Constant "Ulazi u if.">` & 0xff
   \   000014   7B..         MOV     R3,#(`?<Constant "Ulazi u if.">` >> 8) & 0xff
   \   000016   8004         SJMP    ??ZDAppCheckForHoldKey_1
   1073            }
   1074            else
   1075            {
   1076              HalLcdWriteString("Ne ulazi u if.",0);
   \                     ??ZDAppCheckForHoldKey_0:
   \   000018                ; Setup parameters for call to function HalLcdWriteString
   \   000018   7A..         MOV     R2,#`?<Constant "Ne ulazi u if.">` & 0xff
   \   00001A   7B..         MOV     R3,#(`?<Constant "Ne ulazi u if.">` >> 8) & 0xff
   \                     ??ZDAppCheckForHoldKey_1:
   \   00001C   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
   1077            }
   1078            // Hold down the SW_BYPASS_START key (see OnBoard.h)
   1079            // while booting to avoid starting up the device.
   1080            if ( zdappHoldKeys == SW_BYPASS_START )
   \   00001F   90....       MOV     DPTR,#zdappHoldKeys
   \   000022   E0           MOVX    A,@DPTR
   \   000023   6401         XRL     A,#0x1
   \   000025   7005         JNZ     ??ZDAppCheckForHoldKey_2
   1081            {
   1082              
   1083              
   1084              // Change the device state to HOLD on start up
   1085              devState = DEV_HOLD;
   \   000027   90....       MOV     DPTR,#devState
   \   00002A   E4           CLR     A
   \   00002B   F0           MOVX    @DPTR,A
   1086            }
   1087          #endif // HAL_KEY
   1088          }
   \                     ??ZDAppCheckForHoldKey_2:
   \   00002C   02....       LJMP    ??Subroutine56_0 & 0xFFFF
   1089          
   1090          /*********************************************************************
   1091           * @fn      ZDApp_ProcessOSALMsg()
   1092           *
   1093           * @brief   Process the incoming task message.
   1094           *
   1095           * @param   msgPtr - message to process
   1096           *
   1097           * @return  none
   1098           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1099          void ZDApp_ProcessOSALMsg( osal_event_hdr_t *msgPtr )
   \                     ZDApp_ProcessOSALMsg:
   1100          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1101            // Data Confirmation message fields
   1102            uint8 sentEP;       // This should always be 0
   1103            uint8 sentStatus;
   1104            afDataConfirm_t *afDataConfirm;
   1105            uint8 tmp;
   1106          
   1107            switch ( msgPtr->event )
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   14           DEC     A
   \   000010   602A         JZ      ??ZDApp_ProcessOSALMsg_0
   \   000012   14           DEC     A
   \   000013   7003         JNZ     $+5
   \   000015   02....       LJMP    ??ZDApp_ProcessOSALMsg_1 & 0xFFFF
   \   000018   14           DEC     A
   \   000019   7003         JNZ     $+5
   \   00001B   02....       LJMP    ??ZDApp_ProcessOSALMsg_2 & 0xFFFF
   \   00001E   24E9         ADD     A,#-0x17
   \   000020   600E         JZ      ??ZDApp_ProcessOSALMsg_3
   \   000022   2447         ADD     A,#0x47
   \   000024   6010         JZ      ??ZDApp_ProcessOSALMsg_4
   \   000026   24D6         ADD     A,#-0x2a
   \   000028   7003         JNZ     $+5
   \   00002A   02....       LJMP    ??ZDApp_ProcessOSALMsg_5 & 0xFFFF
   \   00002D   02....       LJMP    ??ZDApp_ProcessOSALMsg_6 & 0xFFFF
   1108            {
   1109              // Incoming ZDO Message
   1110              case AF_INCOMING_MSG_CMD:
   1111                ZDP_IncomingData( (afIncomingMSGPacket_t *)msgPtr );
   \                     ??ZDApp_ProcessOSALMsg_3:
   \   000030                ; Setup parameters for call to function ZDP_IncomingData
   \   000030   12....       LCALL   `??ZDP_IncomingData::?relay`; Banked call to: ZDP_IncomingData
   1112                break;
   \   000033   02....       LJMP    ??ZDApp_ProcessOSALMsg_5 & 0xFFFF
   1113          
   1114              case ZDO_CB_MSG:
   1115                ZDApp_ProcessMsgCBs( (zdoIncomingMsg_t *)msgPtr );
   \                     ??ZDApp_ProcessOSALMsg_4:
   \   000036                ; Setup parameters for call to function ZDApp_ProcessMsgCBs
   \   000036   12....       LCALL   `??ZDApp_ProcessMsgCBs::?relay`; Banked call to: ZDApp_ProcessMsgCBs
   1116                break;
   \   000039   02....       LJMP    ??ZDApp_ProcessOSALMsg_5 & 0xFFFF
   1117          
   1118              case AF_DATA_CONFIRM_CMD:
   1119                // This message is received as a confirmation of a data packet sent.
   1120                // The status is of ZStatus_t type [defined in NLMEDE.h]
   1121                // The message fields are defined in AF.h
   1122                afDataConfirm = (afDataConfirm_t *)msgPtr;
   1123                sentEP = afDataConfirm->endpoint;
   1124                sentStatus = afDataConfirm->hdr.status;
   1125          
   1126                // Action taken when confirmation is received.
   1127          #if defined ( ZIGBEE_FREQ_AGILITY )
   1128                if ( pZDNwkMgr_ProcessDataConfirm )
   1129                  pZDNwkMgr_ProcessDataConfirm( afDataConfirm );
   1130          #endif
   1131                (void)sentEP;
   1132                (void)sentStatus;
   1133                break;
   1134          
   1135              case ZDO_NWK_DISC_CNF:
   1136                if (devState != DEV_NWK_DISC)
   \                     ??ZDApp_ProcessOSALMsg_0:
   \   00003C   90....       MOV     DPTR,#devState
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   6402         XRL     A,#0x2
   \   000042   6003         JZ      $+5
   \   000044   02....       LJMP    ??ZDApp_ProcessOSALMsg_5 & 0xFFFF
   1137                  break;
   1138          
   1139                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \   000047   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   6401         XRL     A,#0x1
   \   00004D   6008         JZ      ??ZDApp_ProcessOSALMsg_7
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   6402         XRL     A,#0x2
   \   000052   6003         JZ      $+5
   \   000054   02....       LJMP    ??ZDApp_ProcessOSALMsg_5 & 0xFFFF
   1140                {
   1141                  // Process the network discovery scan results and choose a parent
   1142                  // device to join/rejoin itself
   1143                  networkDesc_t *pChosenNwk;
   1144                  if ( ( (pChosenNwk = ZDApp_NwkDescListProcessing()) != NULL ) && (zdoDiscCounter > NUM_DISC_ATTEMPTS) )
   \                     ??ZDApp_ProcessOSALMsg_7:
   \   000057                ; Setup parameters for call to function ZDApp_NwkDescListProcessing
   \   000057   12....       LCALL   `??ZDApp_NwkDescListProcessing::?relay`; Banked call to: ZDApp_NwkDescListProcessing
   \   00005A   8A..         MOV     ?V0,R2
   \   00005C   8B..         MOV     ?V1,R3
   \   00005E   AE..         MOV     R6,?V0
   \   000060   AF..         MOV     R7,?V1
   \   000062   EE           MOV     A,R6
   \   000063   4F           ORL     A,R7
   \   000064   7003         JNZ     $+5
   \   000066   02....       LJMP    ??ZDApp_ProcessOSALMsg_8 & 0xFFFF
   \   000069   90....       MOV     DPTR,#zdoDiscCounter
   \   00006C   E0           MOVX    A,@DPTR
   \   00006D   C3           CLR     C
   \   00006E   9403         SUBB    A,#0x3
   \   000070   5003         JNC     $+5
   \   000072   02....       LJMP    ??ZDApp_ProcessOSALMsg_8 & 0xFFFF
   1145                  {
   1146                    if ( devStartMode == MODE_JOIN )
   \   000075   90....       MOV     DPTR,#devStartMode
   \   000078   E0           MOVX    A,@DPTR
   \   000079   7055         JNZ     ??ZDApp_ProcessOSALMsg_9
   1147                    {
   1148                      devState = DEV_NWK_JOINING;
   \   00007B   90....       MOV     DPTR,#devState
   \   00007E   7403         MOV     A,#0x3
   \   000080   12....       LCALL   ?Subroutine12 & 0xFFFF
   1149          
   1150                      ZDApp_NodeProfileSync( pChosenNwk->stackProfile);
   \                     ??CrossCallReturnLabel_0:
   \   000083   E0           MOVX    A,@DPTR
   \   000084   F9           MOV     R1,A
   \   000085   12....       LCALL   `??ZDApp_NodeProfileSync::?relay`; Banked call to: ZDApp_NodeProfileSync
   1151          
   1152                      if ( NLME_JoinRequest( pChosenNwk->extendedPANID, pChosenNwk->panId,
   1153                                            pChosenNwk->logicalChannel,
   1154                                            ZDO_Config_Node_Descriptor.CapabilityFlags,
   1155                                            pChosenNwk->chosenRouter, pChosenNwk->chosenRouterDepth ) != ZSuccess )
   \   000088                ; Setup parameters for call to function NLME_JoinRequest
   \   000088   8E82         MOV     DPL,R6
   \   00008A   8F83         MOV     DPH,R7
   \   00008C   A3           INC     DPTR
   \   00008D   A3           INC     DPTR
   \   00008E   A3           INC     DPTR
   \   00008F   A3           INC     DPTR
   \   000090   A3           INC     DPTR
   \   000091   A3           INC     DPTR
   \   000092   A3           INC     DPTR
   \   000093   A3           INC     DPTR
   \   000094   A3           INC     DPTR
   \   000095   A3           INC     DPTR
   \   000096   E0           MOVX    A,@DPTR
   \   000097   F5..         MOV     ?V0,A
   \   000099   78..         MOV     R0,#?V0
   \   00009B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00009E   8E82         MOV     DPL,R6
   \   0000A0   8F83         MOV     DPH,R7
   \   0000A2   A3           INC     DPTR
   \   0000A3   A3           INC     DPTR
   \   0000A4   A3           INC     DPTR
   \   0000A5   A3           INC     DPTR
   \   0000A6   A3           INC     DPTR
   \   0000A7   A3           INC     DPTR
   \   0000A8   A3           INC     DPTR
   \   0000A9   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0000AC   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   0000AF   E0           MOVX    A,@DPTR
   \   0000B0   F5..         MOV     ?V0,A
   \   0000B2   78..         MOV     R0,#?V0
   \   0000B4   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000B7   8E82         MOV     DPL,R6
   \   0000B9   8F83         MOV     DPH,R7
   \   0000BB   12....       LCALL   ?Subroutine41 & 0xFFFF
   1156                      {
   1157                        ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
   1158                                                    + ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
   1159                      }
   1160                    } // if ( devStartMode == MODE_JOIN )
   \                     ??CrossCallReturnLabel_75:
   \   0000BE   E0           MOVX    A,@DPTR
   \   0000BF   FC           MOV     R4,A
   \   0000C0   A3           INC     DPTR
   \   0000C1   E0           MOVX    A,@DPTR
   \   0000C2   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   0000C5   12....       LCALL   `??NLME_JoinRequest::?relay`; Banked call to: NLME_JoinRequest
   \   0000C8   7404         MOV     A,#0x4
   \   0000CA   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000CD   02....       LJMP    ??ZDApp_ProcessOSALMsg_10 & 0xFFFF
   1161                    else if ( devStartMode == MODE_REJOIN )
   \                     ??ZDApp_ProcessOSALMsg_9:
   \   0000D0   6403         XRL     A,#0x3
   \   0000D2   6003         JZ      $+5
   \   0000D4   02....       LJMP    ??ZDApp_ProcessOSALMsg_11 & 0xFFFF
   1162                    {
   1163                      ZStatus_t rejoinStatus;
   1164          
   1165                      devState = DEV_NWK_REJOIN;
   \   0000D7   90....       MOV     DPTR,#devState
   \   0000DA   7404         MOV     A,#0x4
   \   0000DC   F0           MOVX    @DPTR,A
   1166          
   1167                      // Before trying to do rejoin, check if the device has a valid short address
   1168                      // If not, generate a random short address for itself
   1169                      if ( _NIB.nwkDevAddress == INVALID_NODE_ADDR )
   \   0000DD   90....       MOV     DPTR,#_NIB + 20
   \   0000E0   E0           MOVX    A,@DPTR
   \   0000E1   64FE         XRL     A,#0xfe
   \   0000E3   7003         JNZ     ??ZDApp_ProcessOSALMsg_12
   \   0000E5   A3           INC     DPTR
   \   0000E6   E0           MOVX    A,@DPTR
   \   0000E7   F4           CPL     A
   \                     ??ZDApp_ProcessOSALMsg_12:
   \   0000E8   7065         JNZ     ??ZDApp_ProcessOSALMsg_13
   1170                      {
   1171                        uint16 commNwkAddr;
   1172          
   1173                        // Verify if the Network address has been commissioned by external tool
   1174                        if ( ( osal_nv_read( ZCD_NV_COMMISSIONED_NWK_ADDR, 0,
   1175                                           sizeof(commNwkAddr),
   1176                                           (void*)&commNwkAddr ) == ZSUCCESS )   &&
   1177                             ( commNwkAddr != INVALID_NODE_ADDR ) )
   \   0000EA                ; Setup parameters for call to function osal_nv_read
   \   0000EA   7401         MOV     A,#0x1
   \   0000EC   12....       LCALL   ?XSTACK_DISP100_8
   \   0000EF   88..         MOV     ?V0,R0
   \   0000F1   89..         MOV     ?V1,R1
   \   0000F3   78..         MOV     R0,#?V0
   \   0000F5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000F8   75..02       MOV     ?V0,#0x2
   \   0000FB   75..00       MOV     ?V1,#0x0
   \   0000FE   78..         MOV     R0,#?V0
   \   000100   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000103   7C00         MOV     R4,#0x0
   \   000105   7D00         MOV     R5,#0x0
   \   000107   7A49         MOV     R2,#0x49
   \   000109   7B00         MOV     R3,#0x0
   \   00010B   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00010E   7404         MOV     A,#0x4
   \   000110   12....       LCALL   ?DEALLOC_XSTACK8
   \   000113   E9           MOV     A,R1
   \   000114   7025         JNZ     ??ZDApp_ProcessOSALMsg_14
   \   000116   7401         MOV     A,#0x1
   \   000118   12....       LCALL   ?XSTACK_DISP0_8
   \   00011B   E0           MOVX    A,@DPTR
   \   00011C   64FE         XRL     A,#0xfe
   \   00011E   7003         JNZ     ??ZDApp_ProcessOSALMsg_15
   \   000120   A3           INC     DPTR
   \   000121   E0           MOVX    A,@DPTR
   \   000122   F4           CPL     A
   \                     ??ZDApp_ProcessOSALMsg_15:
   \   000123   6016         JZ      ??ZDApp_ProcessOSALMsg_14
   1178                        {
   1179                          _NIB.nwkDevAddress = commNwkAddr;
   \   000125   7401         MOV     A,#0x1
   \   000127   12....       LCALL   ?XSTACK_DISP0_8
   \   00012A   12....       LCALL   ??Subroutine58_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   00012D   90....       MOV     DPTR,#_NIB + 20
   \   000130   12....       LCALL   ??Subroutine60_0 & 0xFFFF
   1180          
   1181                          // clear Allocate address bit because device has a commissioned address
   1182                          _NIB.CapabilityFlags &= ~CAPINFO_ALLOC_ADDR;
   \                     ??CrossCallReturnLabel_89:
   \   000133   90....       MOV     DPTR,#_NIB + 14
   \   000136   E0           MOVX    A,@DPTR
   \   000137   C2E7         CLR     0xE0 /* A   */.7
   \   000139   800A         SJMP    ??ZDApp_ProcessOSALMsg_16
   1183                        }
   1184                        else
   1185                        {
   1186                          _NIB.nwkDevAddress = osal_rand();
   \                     ??ZDApp_ProcessOSALMsg_14:
   \   00013B                ; Setup parameters for call to function osal_rand
   \   00013B   12....       LCALL   `??osal_rand::?relay`; Banked call to: osal_rand
   \   00013E   90....       MOV     DPTR,#_NIB + 20
   \   000141   EA           MOV     A,R2
   \   000142   F0           MOVX    @DPTR,A
   \   000143   A3           INC     DPTR
   \   000144   EB           MOV     A,R3
   \                     ??ZDApp_ProcessOSALMsg_16:
   \   000145   F0           MOVX    @DPTR,A
   1187                        }
   1188          
   1189                        ZMacSetReq( ZMacShortAddress, (byte*)&_NIB.nwkDevAddress );
   \   000146                ; Setup parameters for call to function ZMacSetReq
   \   000146   7A..         MOV     R2,#(_NIB + 20) & 0xff
   \   000148   7B..         MOV     R3,#((_NIB + 20) >> 8) & 0xff
   \   00014A   7953         MOV     R1,#0x53
   \   00014C   12....       LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   1190                      }
   1191          
   1192                      // Check if the device has a valid PanID, if not, set it to the discovered Pan
   1193                      if ( _NIB.nwkPanId == INVALID_PAN_ID )
   \                     ??ZDApp_ProcessOSALMsg_13:
   \   00014F   90....       MOV     DPTR,#_NIB + 33
   \   000152   E0           MOVX    A,@DPTR
   \   000153   64FE         XRL     A,#0xfe
   \   000155   7003         JNZ     ??ZDApp_ProcessOSALMsg_17
   \   000157   A3           INC     DPTR
   \   000158   E0           MOVX    A,@DPTR
   \   000159   F4           CPL     A
   \                     ??ZDApp_ProcessOSALMsg_17:
   \   00015A   7012         JNZ     ??ZDApp_ProcessOSALMsg_18
   1194                      {
   1195                        _NIB.nwkPanId = pChosenNwk->panId;
   \   00015C   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   00015F   90....       MOV     DPTR,#_NIB + 33
   \   000162   12....       LCALL   ??Subroutine60_0 & 0xFFFF
   1196                        ZMacSetReq( ZMacPanId, (byte*)&(_NIB.nwkPanId) );
   \                     ??CrossCallReturnLabel_90:
   \   000165                ; Setup parameters for call to function ZMacSetReq
   \   000165   7A..         MOV     R2,#(_NIB + 33) & 0xff
   \   000167   7B..         MOV     R3,#((_NIB + 33) >> 8) & 0xff
   \   000169   7950         MOV     R1,#0x50
   \   00016B   12....       LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   1197                      }
   1198          
   1199                      tmp = true;
   \                     ??ZDApp_ProcessOSALMsg_18:
   \   00016E   85..82       MOV     DPL,?XSP + 0
   \   000171   85..83       MOV     DPH,?XSP + 1
   \   000174   7401         MOV     A,#0x1
   \   000176   F0           MOVX    @DPTR,A
   1200                      ZMacSetReq( ZMacRxOnIdle, &tmp ); // Set receiver always on during rejoin
   \   000177                ; Setup parameters for call to function ZMacSetReq
   \   000177   AA..         MOV     R2,?XSP + 0
   \   000179   AB..         MOV     R3,?XSP + 1
   \   00017B   7952         MOV     R1,#0x52
   \   00017D   12....       LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   1201          
   1202                      // Perform Secure or Unsecure Rejoin depending on available configuration
   1203                      if ( ZG_SECURE_ENABLED && ( ZDApp_RestoreNwkKey() == TRUE ) )
   \   000180                ; Setup parameters for call to function ZDApp_RestoreNwkKey
   \   000180   12....       LCALL   `??ZDApp_RestoreNwkKey::?relay`; Banked call to: ZDApp_RestoreNwkKey
   \   000183   E9           MOV     A,R1
   \   000184   6401         XRL     A,#0x1
   \   000186   8E82         MOV     DPL,R6
   \   000188   8F83         MOV     DPH,R7
   \   00018A   A3           INC     DPTR
   \   00018B   A3           INC     DPTR
   \   00018C   700B         JNZ     ??ZDApp_ProcessOSALMsg_19
   1204                      {
   1205                        rejoinStatus = NLME_ReJoinRequest( ZDO_UseExtendedPANID, pChosenNwk->logicalChannel);
   \   00018E                ; Setup parameters for call to function NLME_ReJoinRequest
   \   00018E   E0           MOVX    A,@DPTR
   \   00018F   F9           MOV     R1,A
   \   000190   7A..         MOV     R2,#ZDO_UseExtendedPANID & 0xff
   \   000192   7B..         MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   000194   12....       LCALL   `??NLME_ReJoinRequest::?relay`; Banked call to: NLME_ReJoinRequest
   \   000197   8009         SJMP    ??ZDApp_ProcessOSALMsg_10
   1206                      }
   1207                      else
   1208                      {
   1209                        rejoinStatus = NLME_ReJoinRequestUnsecure( ZDO_UseExtendedPANID, pChosenNwk->logicalChannel);
   \                     ??ZDApp_ProcessOSALMsg_19:
   \   000199                ; Setup parameters for call to function NLME_ReJoinRequestUnsecure
   \   000199   E0           MOVX    A,@DPTR
   \   00019A   F9           MOV     R1,A
   \   00019B   7A..         MOV     R2,#ZDO_UseExtendedPANID & 0xff
   \   00019D   7B..         MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   00019F   12....       LCALL   `??NLME_ReJoinRequestUnsecure::?relay`; Banked call to: NLME_ReJoinRequestUnsecure
   \                     ??ZDApp_ProcessOSALMsg_10:
   \   0001A2   E9           MOV     A,R1
   1210                      }
   1211          
   1212                      if ( rejoinStatus != ZSuccess )
   \   0001A3   600E         JZ      ??ZDApp_ProcessOSALMsg_11
   1213                      {
   1214                        ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
   1215                                                    + ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
   \   0001A5                ; Setup parameters for call to function osal_rand
   \   0001A5   12....       LCALL   `??osal_rand::?relay`; Banked call to: osal_rand
   \   0001A8                ; Setup parameters for call to function ZDApp_NetworkInit
   \   0001A8   EA           MOV     A,R2
   \   0001A9   547F         ANL     A,#0x7f
   \   0001AB   2464         ADD     A,#0x64
   \   0001AD   FA           MOV     R2,A
   \   0001AE   7B00         MOV     R3,#0x0
   \   0001B0   12....       LCALL   `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
   1216                      }
   1217                    } // else if ( devStartMode == MODE_REJOIN )
   1218          
   1219                    // The receiver is on, turn network layer polling off.
   1220                    if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
   \                     ??ZDApp_ProcessOSALMsg_11:
   \   0001B3   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   0001B6   E0           MOVX    A,@DPTR
   \   0001B7   A2E3         MOV     C,0xE0 /* A   */.3
   \   0001B9   502B         JNC     ??ZDApp_ProcessOSALMsg_20
   1221                    {
   1222                      // for an End Device with NO Child Table Management process or for a Router
   1223                      if ( ( ZG_DEVICE_RTR_TYPE )  ||
   1224          #if defined ( ZIGBEE_CHILD_AGING )
   1225                           ( (ZG_DEVICE_ENDDEVICE_TYPE) && ( zgChildAgingEnable == FALSE ) ) )
   \   0001BB   90....       MOV     DPTR,#zgDeviceLogicalType
   \   0001BE   E0           MOVX    A,@DPTR
   \   0001BF   600D         JZ      ??ZDApp_ProcessOSALMsg_21
   \   0001C1   6401         XRL     A,#0x1
   \   0001C3   6009         JZ      ??ZDApp_ProcessOSALMsg_21
   \   0001C5   90....       MOV     DPTR,#zgChildAgingEnable
   \   0001C8   E0           MOVX    A,@DPTR
   \   0001C9   6003         JZ      $+5
   \   0001CB   02....       LJMP    ??ZDApp_ProcessOSALMsg_5 & 0xFFFF
   1226          #else
   1227                           (ZG_DEVICE_ENDDEVICE_TYPE) )
   1228          #endif // ZIGBEE_CHILD_AGING
   1229                      {
   1230                        NLME_SetPollRate( 0 );
   \                     ??ZDApp_ProcessOSALMsg_21:
   \   0001CE                ; Setup parameters for call to function NLME_SetPollRate
   \   0001CE   7A00         MOV     R2,#0x0
   \   0001D0   7B00         MOV     R3,#0x0
   \   0001D2   12....       LCALL   `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   1231                        NLME_SetQueuedPollRate( 0 );
   \   0001D5                ; Setup parameters for call to function NLME_SetQueuedPollRate
   \   0001D5   7A00         MOV     R2,#0x0
   \   0001D7   7B00         MOV     R3,#0x0
   \   0001D9   12....       LCALL   `??NLME_SetQueuedPollRate::?relay`; Banked call to: NLME_SetQueuedPollRate
   1232                        NLME_SetResponseRate( 0 );
   \   0001DC                ; Setup parameters for call to function NLME_SetResponseRate
   \   0001DC   7A00         MOV     R2,#0x0
   \   0001DE   7B00         MOV     R3,#0x0
   \   0001E0   12....       LCALL   `??NLME_SetResponseRate::?relay`; Banked call to: NLME_SetResponseRate
   \   0001E3   02....       LJMP    ??ZDApp_ProcessOSALMsg_5 & 0xFFFF
   1233                      }
   1234                    }
   1235                    else
   1236                    {
   1237                      if ( (ZG_SECURE_ENABLED) && (devStartMode == MODE_JOIN) )
   \                     ??ZDApp_ProcessOSALMsg_20:
   \   0001E6   90....       MOV     DPTR,#devStartMode
   \   0001E9   E0           MOVX    A,@DPTR
   \   0001EA   707A         JNZ     ??ZDApp_ProcessOSALMsg_5
   1238                      {
   1239                        ZDApp_SavedPollRate = zgPollRate;
   \   0001EC   90....       MOV     DPTR,#zgPollRate
   \   0001EF   12....       LCALL   ??Subroutine58_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   0001F2   90....       MOV     DPTR,#ZDApp_SavedPollRate
   \   0001F5   12....       LCALL   ??Subroutine60_0 & 0xFFFF
   1240                        NLME_SetPollRate( zgRejoinPollRate );
   \                     ??CrossCallReturnLabel_91:
   \   0001F8                ; Setup parameters for call to function NLME_SetPollRate
   \   0001F8   90....       MOV     DPTR,#zgRejoinPollRate
   \   0001FB   12....       LCALL   ?Subroutine26 & 0xFFFF
   1241                      }
   1242                    }
   1243                  }
   \                     ??CrossCallReturnLabel_17:
   \   0001FE   12....       LCALL   `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   \   000201   8063         SJMP    ??ZDApp_ProcessOSALMsg_5
   1244                  else
   1245                  {
   1246                    if ( continueJoining )
   \                     ??ZDApp_ProcessOSALMsg_8:
   \   000203   90....       MOV     DPTR,#continueJoining
   \   000206   E0           MOVX    A,@DPTR
   \   000207   605D         JZ      ??ZDApp_ProcessOSALMsg_5
   1247                    {
   1248              #if defined ( MANAGED_SCAN )
   1249                      ZDApp_NetworkInit( MANAGEDSCAN_DELAY_BETWEEN_SCANS );
   1250              #else
   1251                      zdoDiscCounter++;
   \   000209   90....       MOV     DPTR,#zdoDiscCounter
   \   00020C   E0           MOVX    A,@DPTR
   \   00020D   04           INC     A
   \   00020E   F0           MOVX    @DPTR,A
   1252                      ZDApp_NetworkInit( (uint16)(BEACON_REQUEST_DELAY
   1253                            + ((uint16)(osal_rand()& BEACON_REQ_DELAY_MASK))) );
   \   00020F                ; Setup parameters for call to function osal_rand
   \   00020F   12....       LCALL   `??osal_rand::?relay`; Banked call to: osal_rand
   \   000212                ; Setup parameters for call to function ZDApp_NetworkInit
   \   000212   EA           MOV     A,R2
   \   000213   2464         ADD     A,#0x64
   \   000215   FA           MOV     R2,A
   \   000216   E4           CLR     A
   \   000217   3400         ADDC    A,#0x0
   \   000219   FB           MOV     R3,A
   \   00021A   8042         SJMP    ??ZDApp_ProcessOSALMsg_22
   1254              #endif
   1255                    }
   1256                  }
   1257                }
   1258                break;
   1259          
   1260              case ZDO_NWK_JOIN_IND:
   1261                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \                     ??ZDApp_ProcessOSALMsg_1:
   \   00021C   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00021F   E0           MOVX    A,@DPTR
   \   000220   6401         XRL     A,#0x1
   \   000222   6005         JZ      ??ZDApp_ProcessOSALMsg_23
   \   000224   E0           MOVX    A,@DPTR
   \   000225   6402         XRL     A,#0x2
   \   000227   703D         JNZ     ??ZDApp_ProcessOSALMsg_5
   1262                {
   1263                  ZDApp_ProcessNetworkJoin();
   \                     ??ZDApp_ProcessOSALMsg_23:
   \   000229                ; Setup parameters for call to function ZDApp_ProcessNetworkJoin
   \   000229   12....       LCALL   `??ZDApp_ProcessNetworkJoin::?relay`; Banked call to: ZDApp_ProcessNetworkJoin
   \   00022C   8038         SJMP    ??ZDApp_ProcessOSALMsg_5
   1264                }
   1265                break;
   1266          
   1267              case ZDO_NWK_JOIN_REQ:
   1268                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \                     ??ZDApp_ProcessOSALMsg_2:
   \   00022E   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000231   E0           MOVX    A,@DPTR
   \   000232   6401         XRL     A,#0x1
   \   000234   6005         JZ      ??ZDApp_ProcessOSALMsg_24
   \   000236   E0           MOVX    A,@DPTR
   \   000237   6402         XRL     A,#0x2
   \   000239   702B         JNZ     ??ZDApp_ProcessOSALMsg_5
   1269                {
   1270                  retryCnt = 0;
   \                     ??ZDApp_ProcessOSALMsg_24:
   \   00023B   90....       MOV     DPTR,#retryCnt
   \   00023E   E4           CLR     A
   \   00023F   F0           MOVX    @DPTR,A
   1271                  devStartMode = MODE_RESUME;
   \   000240   90....       MOV     DPTR,#devStartMode
   \   000243   04           INC     A
   \   000244   F0           MOVX    @DPTR,A
   1272                  _tmpRejoinState = true;
   \   000245   90....       MOV     DPTR,#_tmpRejoinState
   \   000248   F0           MOVX    @DPTR,A
   1273                  osal_cpyExtAddr( ZDO_UseExtendedPANID, _NIB.extendedPANID );
   \   000249                ; Setup parameters for call to function sAddrExtCpy
   \   000249   7C..         MOV     R4,#(_NIB + 53) & 0xff
   \   00024B   7D..         MOV     R5,#((_NIB + 53) >> 8) & 0xff
   \   00024D   7A..         MOV     R2,#ZDO_UseExtendedPANID & 0xff
   \   00024F   7B..         MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   000251   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1274                  zgDefaultStartingScanDuration = BEACON_ORDER_60_MSEC;
   \   000254   90....       MOV     DPTR,#zgDefaultStartingScanDuration
   \   000257   7402         MOV     A,#0x2
   \   000259   F0           MOVX    @DPTR,A
   1275                  ZDApp_NetworkInit( 0 );
   \   00025A                ; Setup parameters for call to function ZDApp_NetworkInit
   \   00025A   7A00         MOV     R2,#0x0
   \   00025C   7B00         MOV     R3,#0x0
   \                     ??ZDApp_ProcessOSALMsg_22:
   \   00025E   12....       LCALL   `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
   \   000261   8003         SJMP    ??ZDApp_ProcessOSALMsg_5
   1276                }
   1277                break;
   1278          
   1279              default:
   1280                if ( ZG_SECURE_ENABLED )
   1281                  ZDApp_ProcessSecMsg( msgPtr );
   \                     ??ZDApp_ProcessOSALMsg_6:
   \   000263                ; Setup parameters for call to function ZDApp_ProcessSecMsg
   \   000263   12....       LCALL   `??ZDApp_ProcessSecMsg::?relay`; Banked call to: ZDApp_ProcessSecMsg
   1282                break;
   1283            }
   1284          
   1285          }
   \                     ??ZDApp_ProcessOSALMsg_5:
   \   000266   7403         MOV     A,#0x3
   \   000268   02....       LJMP    ??Subroutine54_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine52_0
   \   000001                ; // Fall through to label ??Subroutine52_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine52_0:
   \   000000   A3           INC     DPTR
   \   000001   E0           MOVX    A,@DPTR
   \   000002   F9           MOV     R1,A
   \   000003   8E82         MOV     DPL,R6
   \   000005   8F83         MOV     DPH,R7
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   FD           MOV     R5,A
   \   000001                REQUIRE ??Subroutine53_0
   \   000001                ; // Fall through to label ??Subroutine53_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine53_0:
   \   000000   EE           MOV     A,R6
   \   000001   240B         ADD     A,#0xb
   \   000003   FA           MOV     R2,A
   \   000004   E4           CLR     A
   \   000005   3F           ADDC    A,R7
   \   000006   FB           MOV     R3,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004                REQUIRE ??Subroutine58_0
   \   000004                ; // Fall through to label ??Subroutine58_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine58_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function ZDApp_NodeProfileSync
   \   000001                ; Setup parameters for call to function osal_msg_send
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   22           RET
   1286          
   1287          /*********************************************************************
   1288           * @fn      ZDApp_ProcessMsgCBs()
   1289           *
   1290           * @brief   Process response messages
   1291           *
   1292           * @param   none
   1293           *
   1294           * @return  none
   1295           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1296          void ZDApp_ProcessMsgCBs( zdoIncomingMsg_t *inMsg )
   \                     ZDApp_ProcessMsgCBs:
   1297          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1298            switch ( inMsg->clusterID )
   \   00000E   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   000011   F5..         MOV     ?V1,A
   \   000013   78..         MOV     R0,#?V0
   \   000015   12....       LCALL   ?US_SWITCH_SPARSE
   \                     `?<Jumptable for ZDApp_ProcessMsgCBs>_0`:
   \   000018   0200         DW        2
   \   00001A   2100         DW        33
   \   00001C   2200         DW        34
   \   00001E   ....         DW        ??ZDApp_ProcessMsgCBs_0
   \   000020   0080         DW        32768
   \   000022   0180         DW        32769
   \   000024   ....         DW        ??ZDApp_ProcessMsgCBs_1
   \   000026   0000         DW        0
   \   000028   ....         DW        ??ZDApp_ProcessMsgCBs_2
   1299            {
   1300          #if defined ( ZDO_NWKADDR_REQUEST ) || defined ( ZDO_IEEEADDR_REQUEST ) || defined ( REFLECTOR )
   1301              case NWK_addr_rsp:
   1302              case IEEE_addr_rsp:
   1303                {
   1304                  ZDO_NwkIEEEAddrResp_t *pAddrRsp;
   1305          
   1306                  pAddrRsp = ZDO_ParseAddrRsp( inMsg );
   \                     ??ZDApp_ProcessMsgCBs_1:
   \   00002A                ; Setup parameters for call to function ZDO_ParseAddrRsp
   \   00002A   12....       LCALL   `??ZDO_ParseAddrRsp::?relay`; Banked call to: ZDO_ParseAddrRsp
   \   00002D   8A..         MOV     ?V0,R2
   \   00002F   8B..         MOV     ?V1,R3
   1307                  if ( pAddrRsp )
   \   000031   EA           MOV     A,R2
   \   000032   45..         ORL     A,?V1
   \   000034   6048         JZ      ??ZDApp_ProcessMsgCBs_2
   1308                  {
   1309                    if ( pAddrRsp->status == ZSuccess )
   \   000036   8A82         MOV     DPL,R2
   \   000038   8B83         MOV     DPH,R3
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   700F         JNZ     ??ZDApp_ProcessMsgCBs_3
   1310                    {
   1311                      ZDO_UpdateAddrManager( pAddrRsp->nwkAddr, pAddrRsp->extAddr );
   \   00003D                ; Setup parameters for call to function ZDO_UpdateAddrManager
   \   00003D   EA           MOV     A,R2
   \   00003E   2403         ADD     A,#0x3
   \   000040   FC           MOV     R4,A
   \   000041   E4           CLR     A
   \   000042   35..         ADDC    A,?V1
   \   000044   FD           MOV     R5,A
   \   000045   A3           INC     DPTR
   \   000046   12....       LCALL   ?Subroutine26 & 0xFFFF
   1312                    }
   \                     ??CrossCallReturnLabel_18:
   \   000049   12....       LCALL   `??ZDO_UpdateAddrManager::?relay`; Banked call to: ZDO_UpdateAddrManager
   1313          
   1314          #if !defined ( ZDP_BIND_SKIP_VALIDATION )
   1315                    // look for pending bind entry for NWK_addr_rsp Only
   1316                    if ( inMsg->clusterID == NWK_addr_rsp )
   \                     ??ZDApp_ProcessMsgCBs_3:
   \   00004C   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   00004F   7004         JNZ     ??ZDApp_ProcessMsgCBs_4
   \   000051   A3           INC     DPTR
   \   000052   E0           MOVX    A,@DPTR
   \   000053   6480         XRL     A,#0x80
   \                     ??ZDApp_ProcessMsgCBs_4:
   \   000055   700C         JNZ     ??ZDApp_ProcessMsgCBs_5
   1317                    {
   1318          #if defined ( REFLECTOR )
   1319                      ZDApp_ProcessPendingBindReq( pAddrRsp->extAddr );
   \   000057                ; Setup parameters for call to function ZDApp_ProcessPendingBindReq
   \   000057   E5..         MOV     A,?V0
   \   000059   2403         ADD     A,#0x3
   \   00005B   FA           MOV     R2,A
   \   00005C   E4           CLR     A
   \   00005D   35..         ADDC    A,?V1
   \   00005F   FB           MOV     R3,A
   \   000060   12....       LCALL   `??ZDApp_ProcessPendingBindReq::?relay`; Banked call to: ZDApp_ProcessPendingBindReq
   1320          #endif
   1321                    }
   1322          #endif
   1323          
   1324                    osal_mem_free( pAddrRsp );
   \                     ??ZDApp_ProcessMsgCBs_5:
   \   000063                ; Setup parameters for call to function osal_mem_free
   \   000063   AA..         MOV     R2,?V0
   \   000065   AB..         MOV     R3,?V1
   \   000067   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   00006A   8012         SJMP    ??ZDApp_ProcessMsgCBs_2
   1325                  }
   1326                }
   1327                break;
   1328          #endif
   1329          
   1330          #if defined ( REFLECTOR )
   1331              case Bind_req:
   1332              case Unbind_req:
   1333                {
   1334                  ZDO_BindUnbindReq_t bindReq;
   1335                  ZDO_ParseBindUnbindReq( inMsg, &bindReq );
   \                     ??ZDApp_ProcessMsgCBs_0:
   \   00006C                ; Setup parameters for call to function ZDO_ParseBindUnbindReq
   \   00006C   AC..         MOV     R4,?XSP + 0
   \   00006E   AD..         MOV     R5,?XSP + 1
   \   000070   12....       LCALL   `??ZDO_ParseBindUnbindReq::?relay`; Banked call to: ZDO_ParseBindUnbindReq
   1336                  ZDO_ProcessBindUnbindReq( inMsg, &bindReq );
   \   000073                ; Setup parameters for call to function ZDO_ProcessBindUnbindReq
   \   000073   AC..         MOV     R4,?XSP + 0
   \   000075   AD..         MOV     R5,?XSP + 1
   \   000077   EE           MOV     A,R6
   \   000078   FA           MOV     R2,A
   \   000079   EF           MOV     A,R7
   \   00007A   FB           MOV     R3,A
   \   00007B   12....       LCALL   `??ZDO_ProcessBindUnbindReq::?relay`; Banked call to: ZDO_ProcessBindUnbindReq
   1337                }
   1338                break;
   1339          #endif
   1340          
   1341          #if ( ZG_BUILD_COORDINATOR_TYPE )
   1342              case Bind_rsp:
   1343              case Unbind_rsp:
   1344                if (ZG_DEVICE_COORDINATOR_TYPE && matchED)
   1345                {
   1346                  ZDMatchSendState(
   1347                       (uint8)((inMsg->clusterID == Bind_rsp) ? ZDMATCH_REASON_BIND_RSP : ZDMATCH_REASON_UNBIND_RSP),
   1348                       ZDO_ParseBindRsp(inMsg), inMsg->TransSeq );
   1349                }
   1350                break;
   1351          
   1352              case End_Device_Bind_req:
   1353                if (ZG_DEVICE_COORDINATOR_TYPE)
   1354                {
   1355                  ZDEndDeviceBind_t bindReq;
   1356                  ZDO_ParseEndDeviceBindReq( inMsg, &bindReq );
   1357                  ZDO_MatchEndDeviceBind( &bindReq );
   1358          
   1359                  // Freeing the cluster lists - if allocated.
   1360                  if ( bindReq.numInClusters )
   1361                    osal_mem_free( bindReq.inClusters );
   1362                  if ( bindReq.numOutClusters )
   1363                    osal_mem_free( bindReq.outClusters );
   1364                }
   1365                break;
   1366          #endif
   1367            }
   1368          }
   \                     ??ZDApp_ProcessMsgCBs_2:
   \   00007E   7415         MOV     A,#0x15
   \   000080   02....       LJMP    ?Subroutine4 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   12....       LCALL   ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   12....       LCALL   ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   EE           MOV     A,R6
   \   000001   240C         ADD     A,#0xc
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   12....       LCALL   ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   000003   F5..         MOV     ?V0,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine66_0
   \   000003                ; // Fall through to label ??Subroutine66_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine66_0:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
   1369          
   1370          /*********************************************************************
   1371           * @fn      ZDApp_RegisterCBs()
   1372           *
   1373           * @brief   Process response messages
   1374           *
   1375           * @param   none
   1376           *
   1377           * @return  none
   1378           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1379          void ZDApp_RegisterCBs( void )
   \                     ZDApp_RegisterCBs:
   1380          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1381          #if defined ( ZDO_IEEEADDR_REQUEST ) || defined ( REFLECTOR )
   1382            ZDO_RegisterForZDOMsg( ZDAppTaskID, IEEE_addr_rsp );
   \   000004                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000004   7A01         MOV     R2,#0x1
   \   000006   7B80         MOV     R3,#-0x80
   \   000008   90....       MOV     DPTR,#ZDAppTaskID
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F9           MOV     R1,A
   \   00000D   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
   1383          #endif
   1384          #if defined ( ZDO_NWKADDR_REQUEST ) || defined ( REFLECTOR )
   1385            ZDO_RegisterForZDOMsg( ZDAppTaskID, NWK_addr_rsp );
   \   000010                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000010   7A00         MOV     R2,#0x0
   \   000012   7B80         MOV     R3,#-0x80
   \   000014   90....       MOV     DPTR,#ZDAppTaskID
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F9           MOV     R1,A
   \   000019   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
   1386          #endif
   1387          #if ZG_BUILD_COORDINATOR_TYPE
   1388            ZDO_RegisterForZDOMsg( ZDAppTaskID, Bind_rsp );
   1389            ZDO_RegisterForZDOMsg( ZDAppTaskID, Unbind_rsp );
   1390            ZDO_RegisterForZDOMsg( ZDAppTaskID, End_Device_Bind_req );
   1391          #endif
   1392          #if defined ( REFLECTOR )
   1393            ZDO_RegisterForZDOMsg( ZDAppTaskID, Bind_req );
   \   00001C                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   00001C   7A21         MOV     R2,#0x21
   \   00001E   7B00         MOV     R3,#0x0
   \   000020   90....       MOV     DPTR,#ZDAppTaskID
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F9           MOV     R1,A
   \   000025   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
   1394            ZDO_RegisterForZDOMsg( ZDAppTaskID, Unbind_req );
   \   000028                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000028   7A22         MOV     R2,#0x22
   \   00002A   7B00         MOV     R3,#0x0
   \   00002C   90....       MOV     DPTR,#ZDAppTaskID
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   F9           MOV     R1,A
   \   000031   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
   1395          #endif
   1396          }
   \   000034   02....       LJMP    ??Subroutine56_0 & 0xFFFF
   1397          
   1398          /*********************************************************************
   1399           * @fn      ZDApp_ProcessSecMsg()
   1400           *
   1401           * @brief   Process the incoming security message.
   1402           *
   1403           * @param   msgPtr - message to process
   1404           *
   1405           * @return  none
   1406           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1407          void ZDApp_ProcessSecMsg( osal_event_hdr_t *msgPtr )
   \                     ZDApp_ProcessSecMsg:
   1408          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1409            switch ( msgPtr->event )
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   E0           MOVX    A,@DPTR
   \   000009   24FC         ADD     A,#-0x4
   \   00000B   6006         JZ      ??ZDApp_ProcessSecMsg_0
   \   00000D   24FC         ADD     A,#-0x4
   \   00000F   6014         JZ      ??ZDApp_ProcessSecMsg_1
   \   000011   8022         SJMP    ??ZDApp_ProcessSecMsg_2
   1410            {
   1411              case ZDO_TRANSPORT_KEY_IND:
   1412                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \                     ??ZDApp_ProcessSecMsg_0:
   \   000013   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000016   E0           MOVX    A,@DPTR
   \   000017   6401         XRL     A,#0x1
   \   000019   6005         JZ      ??ZDApp_ProcessSecMsg_3
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   6402         XRL     A,#0x2
   \   00001E   7015         JNZ     ??ZDApp_ProcessSecMsg_2
   1413                {
   1414                  ZDSecMgrTransportKeyInd( (ZDO_TransportKeyInd_t*)msgPtr );
   \                     ??ZDApp_ProcessSecMsg_3:
   \   000020                ; Setup parameters for call to function ZDSecMgrTransportKeyInd
   \   000020   12....       LCALL   `??ZDSecMgrTransportKeyInd::?relay`; Banked call to: ZDSecMgrTransportKeyInd
   \   000023   8010         SJMP    ??ZDApp_ProcessSecMsg_2
   1415                }
   1416                break;
   1417          
   1418              case ZDO_UPDATE_DEVICE_IND:
   1419                if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1420                {
   1421                  ZDSecMgrUpdateDeviceInd( (ZDO_UpdateDeviceInd_t*)msgPtr );
   1422                }
   1423                break;
   1424          
   1425              case ZDO_REMOVE_DEVICE_IND:
   1426                if ( ZG_BUILD_RTRONLY_TYPE && ( zgDeviceLogicalType == ZG_DEVICETYPE_ROUTER ) )
   1427                {
   1428                  ZDSecMgrRemoveDeviceInd( (ZDO_RemoveDeviceInd_t*)msgPtr );
   1429                }
   1430                break;
   1431          
   1432              case ZDO_REQUEST_KEY_IND:
   1433                if ( ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD ) )
   1434                {
   1435                  if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1436                  {
   1437                    ZDSecMgrRequestKeyInd( (ZDO_RequestKeyInd_t*)msgPtr );
   1438                  }
   1439                }
   1440                break;
   1441          
   1442              case ZDO_SWITCH_KEY_IND:
   1443                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \                     ??ZDApp_ProcessSecMsg_1:
   \   000025   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000028   E0           MOVX    A,@DPTR
   \   000029   6401         XRL     A,#0x1
   \   00002B   6005         JZ      ??ZDApp_ProcessSecMsg_4
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   6402         XRL     A,#0x2
   \   000030   7003         JNZ     ??ZDApp_ProcessSecMsg_2
   1444                {
   1445                  ZDSecMgrSwitchKeyInd( (ZDO_SwitchKeyInd_t*)msgPtr );
   \                     ??ZDApp_ProcessSecMsg_4:
   \   000032                ; Setup parameters for call to function ZDSecMgrSwitchKeyInd
   \   000032   12....       LCALL   `??ZDSecMgrSwitchKeyInd::?relay`; Banked call to: ZDSecMgrSwitchKeyInd
   1446                }
   1447                break;
   1448          
   1449              default:
   1450                // Unsupported messages
   1451                break;
   1452            }
   1453          }
   \                     ??ZDApp_ProcessSecMsg_2:
   \   000035   02....       LJMP    ??Subroutine56_0 & 0xFFFF
   1454          
   1455          /*********************************************************************
   1456           * @fn      ZDApp_ProcessNetworkJoin()
   1457           *
   1458           * @brief
   1459           *
   1460           *   Save off the Network key information.
   1461           *
   1462           * @param   none
   1463           *
   1464           * @return  none
   1465           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1466          void ZDApp_ProcessNetworkJoin( void )
   \                     ZDApp_ProcessNetworkJoin:
   1467          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1468            if ( (devState == DEV_NWK_JOINING) ||
   1469                ((devState == DEV_NWK_ORPHAN)  &&
   1470                 (ZDO_Config_Node_Descriptor.LogicalType == NODETYPE_ROUTER)) )
   \   00000A   90....       MOV     DPTR,#devState
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   6403         XRL     A,#0x3
   \   000010   6015         JZ      ??ZDApp_ProcessNetworkJoin_0
   \   000012   E0           MOVX    A,@DPTR
   \   000013   640A         XRL     A,#0xa
   \   000015   6003         JZ      $+5
   \   000017   02....       LJMP    ??ZDApp_ProcessNetworkJoin_1 & 0xFFFF
   \   00001A   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   5407         ANL     A,#0x7
   \   000020   6401         XRL     A,#0x1
   \   000022   6003         JZ      $+5
   \   000024   02....       LJMP    ??ZDApp_ProcessNetworkJoin_2 & 0xFFFF
   1471            {
   1472              // Result of a Join attempt by this device.
   1473              if ( nwkStatus == ZSuccess )
   \                     ??ZDApp_ProcessNetworkJoin_0:
   \   000027   90....       MOV     DPTR,#nwkStatus
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   7029         JNZ     ??ZDApp_ProcessNetworkJoin_3
   1474              {
   1475                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   00002D                ; Setup parameters for call to function osal_set_event
   \   00002D   7A10         MOV     R2,#0x10
   \   00002F   7B00         MOV     R3,#0x0
   \   000031   90....       MOV     DPTR,#ZDAppTaskID
   \   000034   E0           MOVX    A,@DPTR
   \   000035   F9           MOV     R1,A
   \   000036   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   1476          
   1477          #if defined ( POWER_SAVING )
   1478                osal_pwrmgr_device( PWRMGR_BATTERY );
   1479          #endif
   1480          
   1481                if ( ZG_SECURE_ENABLED && ( ZDApp_RestoreNwkKey() == false ) )
   \   000039                ; Setup parameters for call to function ZDApp_RestoreNwkKey
   \   000039   12....       LCALL   `??ZDApp_RestoreNwkKey::?relay`; Banked call to: ZDApp_RestoreNwkKey
   \   00003C   E9           MOV     A,R1
   \   00003D   7003         JNZ     $+5
   \   00003F   02....       LJMP    ??ZDApp_ProcessNetworkJoin_4 & 0xFFFF
   1482                {
   1483                  // wait for auth from trust center
   1484                  devState = DEV_END_DEVICE_UNAUTH;
   1485          
   1486                  // Start the reset timer for MAX UNAUTH time
   1487                  ZDApp_ResetTimerStart( MAX_DEVICE_UNAUTH_TIMEOUT );
   1488                }
   1489                else
   1490                {
   1491                  if ( ZSTACK_ROUTER_BUILD )
   1492                  {
   1493                    if ( devState == DEV_NWK_ORPHAN
   1494                      && ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   1495                    {
   1496                      // Change NIB state to router for restore
   1497                      _NIB.nwkState = NWK_ROUTER;
   1498                    }
   1499                  }
   1500          
   1501                  if ( devState == DEV_NWK_JOINING )
   \   000042   90....       MOV     DPTR,#devState
   \   000045   E0           MOVX    A,@DPTR
   \   000046   6403         XRL     A,#0x3
   \   000048   7003         JNZ     ??ZDApp_ProcessNetworkJoin_5
   1502                  {
   1503                    ZDApp_AnnounceNewAddress();
   \   00004A                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   00004A   12....       LCALL   `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
   1504                  }
   1505          
   1506                  devState = DEV_END_DEVICE;
   \                     ??ZDApp_ProcessNetworkJoin_5:
   \   00004D   90....       MOV     DPTR,#devState
   \   000050   7406         MOV     A,#0x6
   \   000052   F0           MOVX    @DPTR,A
   1507                  if ( ZSTACK_ROUTER_BUILD )
   \   000053   02....       LJMP    ??ZDApp_ProcessNetworkJoin_6 & 0xFFFF
   1508                  {
   1509                    // NOTE: first two parameters are not used, see NLMEDE.h for details
   1510                    if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   1511                    {
   1512                      NLME_StartRouterRequest( 0, 0, false );
   1513                    }
   1514                  }
   1515                }
   1516              }
   1517              else
   1518              {
   1519                if ( (devStartMode == MODE_RESUME) && (++retryCnt >= MAX_RESUME_RETRY) )
   \                     ??ZDApp_ProcessNetworkJoin_3:
   \   000056   90....       MOV     DPTR,#devStartMode
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   6401         XRL     A,#0x1
   \   00005C   7036         JNZ     ??ZDApp_ProcessNetworkJoin_7
   \   00005E   90....       MOV     DPTR,#retryCnt
   \   000061   E0           MOVX    A,@DPTR
   \   000062   04           INC     A
   \   000063   F0           MOVX    @DPTR,A
   \   000064   C3           CLR     C
   \   000065   9403         SUBB    A,#0x3
   \   000067   402B         JC      ??ZDApp_ProcessNetworkJoin_7
   1520                {
   1521                  if ( _NIB.nwkPanId == 0xFFFF || _NIB.nwkPanId == INVALID_PAN_ID )
   \   000069   90....       MOV     DPTR,#_NIB + 33
   \   00006C   E0           MOVX    A,@DPTR
   \   00006D   F4           CPL     A
   \   00006E   7003         JNZ     ??ZDApp_ProcessNetworkJoin_8
   \   000070   A3           INC     DPTR
   \   000071   E0           MOVX    A,@DPTR
   \   000072   F4           CPL     A
   \                     ??ZDApp_ProcessNetworkJoin_8:
   \   000073   600D         JZ      ??ZDApp_ProcessNetworkJoin_9
   \   000075   90....       MOV     DPTR,#_NIB + 33
   \   000078   E0           MOVX    A,@DPTR
   \   000079   64FE         XRL     A,#0xfe
   \   00007B   7003         JNZ     ??ZDApp_ProcessNetworkJoin_10
   \   00007D   A3           INC     DPTR
   \   00007E   E0           MOVX    A,@DPTR
   \   00007F   F4           CPL     A
   \                     ??ZDApp_ProcessNetworkJoin_10:
   \   000080   7006         JNZ     ??ZDApp_ProcessNetworkJoin_11
   1522                    devStartMode = MODE_JOIN;
   \                     ??ZDApp_ProcessNetworkJoin_9:
   \   000082   90....       MOV     DPTR,#devStartMode
   \   000085   E4           CLR     A
   \   000086   800B         SJMP    ??ZDApp_ProcessNetworkJoin_12
   1523                  else
   1524                  {
   1525                    devStartMode = MODE_REJOIN;
   \                     ??ZDApp_ProcessNetworkJoin_11:
   \   000088   90....       MOV     DPTR,#devStartMode
   \   00008B   7403         MOV     A,#0x3
   \   00008D   F0           MOVX    @DPTR,A
   1526                    _tmpRejoinState = true;
   \   00008E   90....       MOV     DPTR,#_tmpRejoinState
   \   000091   7401         MOV     A,#0x1
   \                     ??ZDApp_ProcessNetworkJoin_12:
   \   000093   F0           MOVX    @DPTR,A
   1527                  }
   1528                }
   1529          
   1530                if ( (NLME_GetShortAddr() != INVALID_NODE_ADDR) ||
   1531                     (_NIB.nwkDevAddress != INVALID_NODE_ADDR) )
   \                     ??ZDApp_ProcessNetworkJoin_7:
   \   000094                ; Setup parameters for call to function NLME_GetShortAddr
   \   000094   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000097   8A..         MOV     ?V0,R2
   \   000099   8B..         MOV     ?V1,R3
   \   00009B   74FE         MOV     A,#-0x2
   \   00009D   65..         XRL     A,?V0
   \   00009F   7004         JNZ     ??ZDApp_ProcessNetworkJoin_13
   \   0000A1   74FF         MOV     A,#-0x1
   \   0000A3   65..         XRL     A,?V1
   \                     ??ZDApp_ProcessNetworkJoin_13:
   \   0000A5   700D         JNZ     ??ZDApp_ProcessNetworkJoin_14
   \   0000A7   90....       MOV     DPTR,#_NIB + 20
   \   0000AA   E0           MOVX    A,@DPTR
   \   0000AB   64FE         XRL     A,#0xfe
   \   0000AD   7003         JNZ     ??ZDApp_ProcessNetworkJoin_15
   \   0000AF   A3           INC     DPTR
   \   0000B0   E0           MOVX    A,@DPTR
   \   0000B1   F4           CPL     A
   \                     ??ZDApp_ProcessNetworkJoin_15:
   \   0000B2   601D         JZ      ??ZDApp_ProcessNetworkJoin_16
   1532                {
   1533                  uint16 addr = INVALID_NODE_ADDR;
   \                     ??ZDApp_ProcessNetworkJoin_14:
   \   0000B4   85..82       MOV     DPL,?XSP + 0
   \   0000B7   85..83       MOV     DPH,?XSP + 1
   \   0000BA   74FE         MOV     A,#-0x2
   \   0000BC   F0           MOVX    @DPTR,A
   \   0000BD   A3           INC     DPTR
   \   0000BE   04           INC     A
   \   0000BF   F0           MOVX    @DPTR,A
   1534                  // Invalidate nwk addr so end device does not use in its data reqs.
   1535                  _NIB.nwkDevAddress = INVALID_NODE_ADDR;
   \   0000C0   90....       MOV     DPTR,#_NIB + 20
   \   0000C3   14           DEC     A
   \   0000C4   F0           MOVX    @DPTR,A
   \   0000C5   A3           INC     DPTR
   \   0000C6   04           INC     A
   \   0000C7   F0           MOVX    @DPTR,A
   1536                  ZMacSetReq( ZMacShortAddress, (uint8 *)&addr );
   \   0000C8                ; Setup parameters for call to function ZMacSetReq
   \   0000C8   AA..         MOV     R2,?XSP + 0
   \   0000CA   AB..         MOV     R3,?XSP + 1
   \   0000CC   7953         MOV     R1,#0x53
   \   0000CE   12....       LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   1537                }
   1538          
   1539                // Clear the neighbor Table and network discovery tables.
   1540                nwkNeighborInitTable();
   \                     ??ZDApp_ProcessNetworkJoin_16:
   \   0000D1                ; Setup parameters for call to function nwkNeighborInitTable
   \   0000D1   12....       LCALL   `??nwkNeighborInitTable::?relay`; Banked call to: nwkNeighborInitTable
   1541                NLME_NwkDiscTerm();
   \   0000D4                ; Setup parameters for call to function NLME_NwkDiscTerm
   \   0000D4   12....       LCALL   `??NLME_NwkDiscTerm::?relay`; Banked call to: NLME_NwkDiscTerm
   1542          
   1543                zdoDiscCounter = 1;
   \   0000D7   90....       MOV     DPTR,#zdoDiscCounter
   \   0000DA   7401         MOV     A,#0x1
   \   0000DC   F0           MOVX    @DPTR,A
   1544          
   1545          //      ZDApp_NetworkInit( (uint16)
   1546          //                         ((NWK_START_DELAY * (osal_rand() & 0x0F)) +
   1547          //                          (NWK_START_DELAY * 5)) );
   1548                ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
   1549                     + ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
   \   0000DD                ; Setup parameters for call to function osal_rand
   \   0000DD   02....       LJMP    ??ZDApp_ProcessNetworkJoin_17 & 0xFFFF
   1550              }
   1551            }
   1552            else if ( devState == DEV_NWK_ORPHAN || devState == DEV_NWK_REJOIN )
   \                     ??ZDApp_ProcessNetworkJoin_1:
   \   0000E0   E0           MOVX    A,@DPTR
   \   0000E1   6404         XRL     A,#0x4
   \   0000E3   6003         JZ      $+5
   \   0000E5   02....       LJMP    ??ZDApp_ProcessNetworkJoin_18 & 0xFFFF
   1553            {
   1554              // results of an orphaning attempt by this device
   1555              if (nwkStatus == ZSuccess)
   \                     ??ZDApp_ProcessNetworkJoin_2:
   \   0000E8   90....       MOV     DPTR,#nwkStatus
   \   0000EB   E0           MOVX    A,@DPTR
   \   0000EC   7050         JNZ     ??ZDApp_ProcessNetworkJoin_19
   1556              {
   1557                // Verify NWK key is available before sending Device_annce
   1558                if ( ZG_SECURE_ENABLED && ( ZDApp_RestoreNwkKey() == false ) )
   \   0000EE                ; Setup parameters for call to function ZDApp_RestoreNwkKey
   \   0000EE   12....       LCALL   `??ZDApp_RestoreNwkKey::?relay`; Banked call to: ZDApp_RestoreNwkKey
   \   0000F1   E9           MOV     A,R1
   \   0000F2   701C         JNZ     ??ZDApp_ProcessNetworkJoin_20
   1559                {
   1560                  osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   0000F4                ; Setup parameters for call to function osal_set_event
   \   0000F4   7A10         MOV     R2,#0x10
   \   0000F6   7B00         MOV     R3,#0x0
   \   0000F8   90....       MOV     DPTR,#ZDAppTaskID
   \   0000FB   E0           MOVX    A,@DPTR
   \   0000FC   F9           MOV     R1,A
   \   0000FD   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   1561          
   1562                  // wait for auth from trust center
   1563                  devState = DEV_END_DEVICE_UNAUTH;
   \                     ??ZDApp_ProcessNetworkJoin_4:
   \   000100   90....       MOV     DPTR,#devState
   \   000103   7405         MOV     A,#0x5
   \   000105   F0           MOVX    @DPTR,A
   1564          
   1565                  // Start the reset timer for MAX UNAUTH time
   1566                  ZDApp_ResetTimerStart( MAX_DEVICE_UNAUTH_TIMEOUT );
   \   000106                ; Setup parameters for call to function ZDApp_ResetTimerStart
   \   000106   7A10         MOV     R2,#0x10
   \   000108   7B27         MOV     R3,#0x27
   \   00010A   12....       LCALL   `??ZDApp_ResetTimerStart::?relay`; Banked call to: ZDApp_ResetTimerStart
   \   00010D   02....       LJMP    ??ZDApp_ProcessNetworkJoin_6 & 0xFFFF
   1567                }
   1568                else
   1569                {
   1570          
   1571                  devState = DEV_END_DEVICE;
   \                     ??ZDApp_ProcessNetworkJoin_20:
   \   000110   12....       LCALL   ?Subroutine10 & 0xFFFF
   1572                  osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \                     ??CrossCallReturnLabel_72:
   \   000113   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   1573                  // setup Power Manager Device
   1574          #if defined ( POWER_SAVING )
   1575                  osal_pwrmgr_device( PWRMGR_BATTERY );
   1576          #endif
   1577          
   1578                  // The receiver is on, turn network layer polling off.
   1579                  if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
   \   000116   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000119   E0           MOVX    A,@DPTR
   \   00011A   A2E3         MOV     C,0xE0 /* A   */.3
   \   00011C   501B         JNC     ??ZDApp_ProcessNetworkJoin_21
   1580                  {
   1581          #if defined ( ZIGBEE_CHILD_AGING )
   1582                    // if Child Table Management process is not enabled
   1583                    if ( zgChildAgingEnable == FALSE )
   \   00011E   90....       MOV     DPTR,#zgChildAgingEnable
   \   000121   E0           MOVX    A,@DPTR
   \   000122   7015         JNZ     ??ZDApp_ProcessNetworkJoin_21
   1584          #endif // ZIGBEE_CHILD_AGING
   1585                    {
   1586                      NLME_SetPollRate( 0 );
   \   000124                ; Setup parameters for call to function NLME_SetPollRate
   \   000124   7A00         MOV     R2,#0x0
   \   000126   7B00         MOV     R3,#0x0
   \   000128   12....       LCALL   `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   1587                      NLME_SetQueuedPollRate( 0 );
   \   00012B                ; Setup parameters for call to function NLME_SetQueuedPollRate
   \   00012B   7A00         MOV     R2,#0x0
   \   00012D   7B00         MOV     R3,#0x0
   \   00012F   12....       LCALL   `??NLME_SetQueuedPollRate::?relay`; Banked call to: NLME_SetQueuedPollRate
   1588                      NLME_SetResponseRate( 0 );
   \   000132                ; Setup parameters for call to function NLME_SetResponseRate
   \   000132   7A00         MOV     R2,#0x0
   \   000134   7B00         MOV     R3,#0x0
   \   000136   12....       LCALL   `??NLME_SetResponseRate::?relay`; Banked call to: NLME_SetResponseRate
   1589                    }
   1590                  }
   1591          
   1592                  if ( ZSTACK_ROUTER_BUILD )
   1593                  {
   1594                    // NOTE: first two parameters are not used, see NLMEDE.h for details
   1595                    if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   1596                    {
   1597                      NLME_StartRouterRequest( 0, 0, false );
   1598                    }
   1599                  }
   1600          
   1601                  ZDApp_AnnounceNewAddress();
   \                     ??ZDApp_ProcessNetworkJoin_21:
   \   000139                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   000139   12....       LCALL   `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
   \   00013C   8073         SJMP    ??ZDApp_ProcessNetworkJoin_6
   1602                }
   1603              }
   1604              else
   1605              {
   1606                if ( devStartMode == MODE_RESUME )
   \                     ??ZDApp_ProcessNetworkJoin_19:
   \   00013E   90....       MOV     DPTR,#devStartMode
   \   000141   E0           MOVX    A,@DPTR
   \   000142   6401         XRL     A,#0x1
   \   000144   703E         JNZ     ??ZDApp_ProcessNetworkJoin_22
   1607                {
   1608                  if ( ++retryCnt <= MAX_RESUME_RETRY )
   \   000146   90....       MOV     DPTR,#retryCnt
   \   000149   E0           MOVX    A,@DPTR
   \   00014A   04           INC     A
   \   00014B   F0           MOVX    @DPTR,A
   \   00014C   C3           CLR     C
   \   00014D   9404         SUBB    A,#0x4
   \   00014F   5026         JNC     ??ZDApp_ProcessNetworkJoin_23
   1609                  {
   1610                    if ( _NIB.nwkPanId == 0xFFFF || _NIB.nwkPanId == INVALID_PAN_ID )
   \   000151   90....       MOV     DPTR,#_NIB + 33
   \   000154   E0           MOVX    A,@DPTR
   \   000155   F4           CPL     A
   \   000156   7003         JNZ     ??ZDApp_ProcessNetworkJoin_24
   \   000158   A3           INC     DPTR
   \   000159   E0           MOVX    A,@DPTR
   \   00015A   F4           CPL     A
   \                     ??ZDApp_ProcessNetworkJoin_24:
   \   00015B   6022         JZ      ??ZDApp_ProcessNetworkJoin_25
   \   00015D   90....       MOV     DPTR,#_NIB + 33
   \   000160   E0           MOVX    A,@DPTR
   \   000161   64FE         XRL     A,#0xfe
   \   000163   7003         JNZ     ??ZDApp_ProcessNetworkJoin_26
   \   000165   A3           INC     DPTR
   \   000166   E0           MOVX    A,@DPTR
   \   000167   F4           CPL     A
   \                     ??ZDApp_ProcessNetworkJoin_26:
   \   000168   6015         JZ      ??ZDApp_ProcessNetworkJoin_25
   1611                      devStartMode = MODE_JOIN;
   1612                    else
   1613                    {
   1614                      devStartMode = MODE_REJOIN;
   \   00016A   90....       MOV     DPTR,#devStartMode
   \   00016D   7403         MOV     A,#0x3
   \   00016F   F0           MOVX    @DPTR,A
   1615                      _tmpRejoinState = true;
   \   000170   90....       MOV     DPTR,#_tmpRejoinState
   \   000173   7401         MOV     A,#0x1
   \   000175   800C         SJMP    ??ZDApp_ProcessNetworkJoin_27
   1616                    }
   1617                  }
   1618                  // Do a normal join to the network after certain times of rejoin retries
   1619                  else if( AIB_apsUseInsecureJoin == true )
   \                     ??ZDApp_ProcessNetworkJoin_23:
   \   000177   90....       MOV     DPTR,#AIB_apsUseInsecureJoin
   \   00017A   E0           MOVX    A,@DPTR
   \   00017B   6401         XRL     A,#0x1
   \   00017D   7005         JNZ     ??ZDApp_ProcessNetworkJoin_22
   1620                  {
   1621                    devStartMode = MODE_JOIN;
   \                     ??ZDApp_ProcessNetworkJoin_25:
   \   00017F   90....       MOV     DPTR,#devStartMode
   \   000182   E4           CLR     A
   \                     ??ZDApp_ProcessNetworkJoin_27:
   \   000183   F0           MOVX    @DPTR,A
   1622                  }
   1623                }
   1624          
   1625                // Clear the neighbor Table and network discovery tables.
   1626                nwkNeighborInitTable();
   \                     ??ZDApp_ProcessNetworkJoin_22:
   \   000184                ; Setup parameters for call to function nwkNeighborInitTable
   \   000184   12....       LCALL   `??nwkNeighborInitTable::?relay`; Banked call to: nwkNeighborInitTable
   1627                NLME_NwkDiscTerm();
   \   000187                ; Setup parameters for call to function NLME_NwkDiscTerm
   \   000187   12....       LCALL   `??NLME_NwkDiscTerm::?relay`; Banked call to: NLME_NwkDiscTerm
   1628          
   1629                // setup a retry for later...
   1630                ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
   1631                     + (osal_rand()& EXTENDED_JOINING_RANDOM_MASK)) );
   \   00018A                ; Setup parameters for call to function osal_rand
   \                     ??ZDApp_ProcessNetworkJoin_17:
   \   00018A   12....       LCALL   `??osal_rand::?relay`; Banked call to: osal_rand
   \   00018D                ; Setup parameters for call to function ZDApp_NetworkInit
   \   00018D   EA           MOV     A,R2
   \   00018E   547F         ANL     A,#0x7f
   \   000190   2464         ADD     A,#0x64
   \   000192   FA           MOV     R2,A
   \   000193   7B00         MOV     R3,#0x0
   \   000195   12....       LCALL   `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
   \   000198   8017         SJMP    ??ZDApp_ProcessNetworkJoin_6
   1632              }
   1633            }
   1634          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
   1635            else
   1636            {
   1637              // Assume from address conflict
   1638              if ( _NIB.nwkAddrAlloc == NWK_ADDRESSING_STOCHASTIC )
   \                     ??ZDApp_ProcessNetworkJoin_18:
   \   00019A   90....       MOV     DPTR,#_NIB + 96
   \   00019D   E0           MOVX    A,@DPTR
   \   00019E   6402         XRL     A,#0x2
   \   0001A0   700F         JNZ     ??ZDApp_ProcessNetworkJoin_6
   1639              {
   1640                // Notify the network
   1641                ZDApp_AnnounceNewAddress();
   \   0001A2                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   0001A2   12....       LCALL   `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
   1642          
   1643                // Notify apps
   1644                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   0001A5                ; Setup parameters for call to function osal_set_event
   \   0001A5   7A10         MOV     R2,#0x10
   \   0001A7   7B00         MOV     R3,#0x0
   \   0001A9   90....       MOV     DPTR,#ZDAppTaskID
   \   0001AC   E0           MOVX    A,@DPTR
   \   0001AD   F9           MOV     R1,A
   \   0001AE   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   1645              }
   1646            }
   1647          #endif
   1648          }
   \                     ??ZDApp_ProcessNetworkJoin_6:
   \   0001B1   02....       LJMP    ?Subroutine8 & 0xFFFF
   1649          
   1650          /*********************************************************************
   1651           * @fn      ZDApp_SaveNwkKey()
   1652           *
   1653           * @brief   Save off the Network key information.
   1654           *
   1655           * @param   none
   1656           *
   1657           * @return  none
   1658           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1659          void ZDApp_SaveNwkKey( void )
   \                     ZDApp_SaveNwkKey:
   1660          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1661            nwkActiveKeyItems keyItems;
   1662          
   1663            SSP_ReadNwkActiveKey( &keyItems );
   \   00000A                ; Setup parameters for call to function SSP_ReadNwkActiveKey
   \   00000A   AA..         MOV     R2,?XSP + 0
   \   00000C   AB..         MOV     R3,?XSP + 1
   \   00000E   12....       LCALL   `??SSP_ReadNwkActiveKey::?relay`; Banked call to: SSP_ReadNwkActiveKey
   1664          
   1665            osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
   1666                          (void *)&keyItems );
   \   000011                ; Setup parameters for call to function osal_nv_write
   \   000011   A8..         MOV     R0,?XSP + 0
   \   000013   A9..         MOV     R1,?XSP + 1
   \   000015   88..         MOV     ?V0,R0
   \   000017   89..         MOV     ?V1,R1
   \   000019   78..         MOV     R0,#?V0
   \   00001B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001E   75..15       MOV     ?V0,#0x15
   \   000021   75..00       MOV     ?V1,#0x0
   \   000024   78..         MOV     R0,#?V0
   \   000026   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000029   7C00         MOV     R4,#0x0
   \   00002B   7D00         MOV     R5,#0x0
   \   00002D   7A82         MOV     R2,#-0x7e
   \   00002F   7B00         MOV     R3,#0x0
   \   000031   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000034   7404         MOV     A,#0x4
   \   000036   12....       LCALL   ?DEALLOC_XSTACK8
   1667          
   1668            nwkFrameCounterChanges = 0;
   \   000039   90....       MOV     DPTR,#nwkFrameCounterChanges
   \   00003C   E4           CLR     A
   \   00003D   F0           MOVX    @DPTR,A
   \   00003E   A3           INC     DPTR
   \   00003F   F0           MOVX    @DPTR,A
   1669          
   1670            // Clear copy in RAM before return.
   1671            osal_memset( &keyItems, 0x00, sizeof(keyItems) );
   \   000040                ; Setup parameters for call to function osal_memset
   \   000040   7C15         MOV     R4,#0x15
   \   000042   FD           MOV     R5,A
   \   000043   F9           MOV     R1,A
   \   000044   AA..         MOV     R2,?XSP + 0
   \   000046   AB..         MOV     R3,?XSP + 1
   \   000048   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1672          
   1673          }
   \   00004B                REQUIRE ?Subroutine9
   \   00004B                ; // Fall through to label ?Subroutine9

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   7415         MOV     A,#0x15
   \   000002   02....       LJMP    ??Subroutine54_0 & 0xFFFF
   1674          
   1675          /*********************************************************************
   1676           * @fn      ZDApp_ForceConcentratorChange()
   1677           *
   1678           * @brief   Force a network concentrator change by resetting 
   1679           *          zgConcentratorEnable and zgConcentratorDiscoveryTime 
   1680           *          from NV and set nwk event.
   1681           *
   1682           * @param   none
   1683           *
   1684           * @return  none
   1685           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1686          void ZDApp_ForceConcentratorChange( void )
   \                     ZDApp_ForceConcentratorChange:
   1687          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1688            osal_nv_read( ZCD_NV_CONCENTRATOR_ENABLE, 0, sizeof(zgConcentratorEnable), &zgConcentratorEnable );
   \   000005                ; Setup parameters for call to function osal_nv_read
   \   000005   75....       MOV     ?V0,#zgConcentratorEnable & 0xff
   \   000008   75....       MOV     ?V1,#(zgConcentratorEnable >> 8) & 0xff
   \   00000B   78..         MOV     R0,#?V0
   \   00000D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000010   75..01       MOV     ?V0,#0x1
   \   000013   75..00       MOV     ?V1,#0x0
   \   000016   78..         MOV     R0,#?V0
   \   000018   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001B   7C00         MOV     R4,#0x0
   \   00001D   7D00         MOV     R5,#0x0
   \   00001F   7A32         MOV     R2,#0x32
   \   000021   7B00         MOV     R3,#0x0
   \   000023   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000026   7404         MOV     A,#0x4
   \   000028   12....       LCALL   ?DEALLOC_XSTACK8
   1689            osal_nv_read( ZCD_NV_CONCENTRATOR_DISCOVERY, 0, sizeof(zgConcentratorDiscoveryTime), &zgConcentratorDiscoveryTime );
   \   00002B                ; Setup parameters for call to function osal_nv_read
   \   00002B   75....       MOV     ?V0,#zgConcentratorDiscoveryTime & 0xff
   \   00002E   75....       MOV     ?V1,#(zgConcentratorDiscoveryTime >> 8) & 0xff
   \   000031   78..         MOV     R0,#?V0
   \   000033   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000036   75..01       MOV     ?V0,#0x1
   \   000039   75..00       MOV     ?V1,#0x0
   \   00003C   78..         MOV     R0,#?V0
   \   00003E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000041   7C00         MOV     R4,#0x0
   \   000043   7D00         MOV     R5,#0x0
   \   000045   7A33         MOV     R2,#0x33
   \   000047   7B00         MOV     R3,#0x0
   \   000049   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00004C   7404         MOV     A,#0x4
   \   00004E   12....       LCALL   ?DEALLOC_XSTACK8
   1690           
   1691            if ( zgConcentratorEnable == TRUE )
   \   000051   90....       MOV     DPTR,#zgConcentratorEnable
   \   000054   E0           MOVX    A,@DPTR
   \   000055   6401         XRL     A,#0x1
   \   000057   7019         JNZ     ??ZDApp_ForceConcentratorChange_0
   1692            {
   1693              // Start next event
   1694              osal_start_timerEx( NWK_TaskID, NWK_MTO_RTG_REQ_EVT, 100 );
   \   000059                ; Setup parameters for call to function osal_start_timerEx
   \   000059   90....       MOV     DPTR,#__Constant_64
   \   00005C   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00005F   7A00         MOV     R2,#0x0
   \   000061   7B08         MOV     R3,#0x8
   \   000063   90....       MOV     DPTR,#NWK_TaskID
   \   000066   E0           MOVX    A,@DPTR
   \   000067   F9           MOV     R1,A
   \   000068   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00006B   7404         MOV     A,#0x4
   \   00006D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000070   800C         SJMP    ??ZDApp_ForceConcentratorChange_1
   1695            }
   1696            else
   1697            {
   1698              // Stop the next event
   1699              osal_stop_timerEx( NWK_TaskID, NWK_MTO_RTG_REQ_EVT );
   \                     ??ZDApp_ForceConcentratorChange_0:
   \   000072                ; Setup parameters for call to function osal_stop_timerEx
   \   000072   7A00         MOV     R2,#0x0
   \   000074   7B08         MOV     R3,#0x8
   \   000076   90....       MOV     DPTR,#NWK_TaskID
   \   000079   E0           MOVX    A,@DPTR
   \   00007A   F9           MOV     R1,A
   \   00007B   12....       LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   1700            }
   1701          }
   \                     ??ZDApp_ForceConcentratorChange_1:
   \   00007E   80..         SJMP    ??Subroutine55_0
   1702          
   1703          /*********************************************************************
   1704           * @fn      ZDApp_ResetNwkKey()
   1705           *
   1706           * @brief   Reset the Network key information in NV.
   1707           *
   1708           * @param   none
   1709           *
   1710           * @return  none
   1711           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1712          void ZDApp_ResetNwkKey( void )
   \                     ZDApp_ResetNwkKey:
   1713          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1714            nwkActiveKeyItems keyItems;
   1715          
   1716            osal_memset( &keyItems, 0, sizeof( nwkActiveKeyItems ) );
   \   00000A                ; Setup parameters for call to function osal_memset
   \   00000A   7C15         MOV     R4,#0x15
   \   00000C   7D00         MOV     R5,#0x0
   \   00000E   7900         MOV     R1,#0x0
   \   000010   AA..         MOV     R2,?XSP + 0
   \   000012   AB..         MOV     R3,?XSP + 1
   \   000014   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1717            osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
   1718                          (void *)&keyItems );
   \   000017                ; Setup parameters for call to function osal_nv_write
   \   000017   A8..         MOV     R0,?XSP + 0
   \   000019   A9..         MOV     R1,?XSP + 1
   \   00001B   88..         MOV     ?V0,R0
   \   00001D   89..         MOV     ?V1,R1
   \   00001F   78..         MOV     R0,#?V0
   \   000021   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000024   75..15       MOV     ?V0,#0x15
   \   000027   75..00       MOV     ?V1,#0x0
   \   00002A   78..         MOV     R0,#?V0
   \   00002C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002F   7C00         MOV     R4,#0x0
   \   000031   7D00         MOV     R5,#0x0
   \   000033   7A82         MOV     R2,#-0x7e
   \   000035   7B00         MOV     R3,#0x0
   \   000037   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00003A   7404         MOV     A,#0x4
   \   00003C   12....       LCALL   ?DEALLOC_XSTACK8
   1719          }
   \   00003F   02....       LJMP    ?Subroutine9 & 0xFFFF
   1720          
   1721          /*********************************************************************
   1722           * @fn      ZDApp_RestoreNwkKey()
   1723           *
   1724           * @brief
   1725           *
   1726           *   Save off the Network key information.
   1727           *
   1728           * @param   none
   1729           *
   1730           * @return  true if restored from NV, false if not
   1731           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1732          uint8 ZDApp_RestoreNwkKey( void )
   \                     ZDApp_RestoreNwkKey:
   1733          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 37
   \   000005   74DB         MOV     A,#-0x25
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1734            nwkActiveKeyItems keyItems;
   1735            uint8 ret = FALSE;
   \   00000A   7E00         MOV     R6,#0x0
   1736          
   1737            // Restore the key information
   1738            if ( osal_nv_read( ZCD_NV_NWKKEY, 0, sizeof(nwkActiveKeyItems), (void*)&keyItems )
   1739                == ZSUCCESS )
   \   00000C                ; Setup parameters for call to function osal_nv_read
   \   00000C   A8..         MOV     R0,?XSP + 0
   \   00000E   A9..         MOV     R1,?XSP + 1
   \   000010   88..         MOV     ?V0,R0
   \   000012   89..         MOV     ?V1,R1
   \   000014   78..         MOV     R0,#?V0
   \   000016   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000019   75..15       MOV     ?V0,#0x15
   \   00001C   8E..         MOV     ?V1,R6
   \   00001E   78..         MOV     R0,#?V0
   \   000020   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000023   7C00         MOV     R4,#0x0
   \   000025   7D00         MOV     R5,#0x0
   \   000027   7A82         MOV     R2,#-0x7e
   \   000029   7B00         MOV     R3,#0x0
   \   00002B   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00002E   7404         MOV     A,#0x4
   \   000030   12....       LCALL   ?DEALLOC_XSTACK8
   \   000033   E9           MOV     A,R1
   \   000034   6003         JZ      $+5
   \   000036   02....       LJMP    ??ZDApp_RestoreNwkKey_0 & 0xFFFF
   1740            {
   1741              uint8 nullKey[SEC_KEY_LEN];
   1742          
   1743              // initialize default value to compare to
   1744              osal_memset( nullKey, 0x00, SEC_KEY_LEN );
   \   000039                ; Setup parameters for call to function osal_memset
   \   000039   7C10         MOV     R4,#0x10
   \   00003B   7D00         MOV     R5,#0x0
   \   00003D   7900         MOV     R1,#0x0
   \   00003F   7415         MOV     A,#0x15
   \   000041   12....       LCALL   ?XSTACK_DISP101_8
   \   000044   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1745          
   1746              // if stored key is different than default value, then a key has been established
   1747              if ( !osal_memcmp( keyItems.active.key, nullKey, SEC_KEY_LEN ) )
   \   000047                ; Setup parameters for call to function osal_memcmp
   \   000047   7415         MOV     A,#0x15
   \   000049   12....       LCALL   ?XSTACK_DISP100_8
   \   00004C   88..         MOV     ?V0,R0
   \   00004E   89..         MOV     ?V1,R1
   \   000050   8E..         MOV     ?V2,R6
   \   000052   78..         MOV     R0,#?V0
   \   000054   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000057   7C10         MOV     R4,#0x10
   \   000059   7D00         MOV     R5,#0x0
   \   00005B   7404         MOV     A,#0x4
   \   00005D   12....       LCALL   ?XSTACK_DISP0_8
   \   000060   A982         MOV     R1,DPL
   \   000062   AA83         MOV     R2,DPH
   \   000064   7B00         MOV     R3,#0x0
   \   000066   12....       LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   000069   7403         MOV     A,#0x3
   \   00006B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00006E   E9           MOV     A,R1
   \   00006F   705B         JNZ     ??ZDApp_RestoreNwkKey_0
   1748              {
   1749                // Increment the frame counter stored in NV
   1750                keyItems.frameCounter += ( MAX_NWK_FRAMECOUNTER_CHANGES +
   1751                                           NWK_FRAMECOUNTER_CHANGES_RESTORE_DELTA );
   \   000071   90....       MOV     DPTR,#__Constant_4e2
   \   000074   78..         MOV     R0,#?V0
   \   000076   12....       LCALL   ?L_MOV_X
   \   000079   7411         MOV     A,#0x11
   \   00007B   12....       LCALL   ?XSTACK_DISP0_8
   \   00007E   78..         MOV     R0,#?V0
   \   000080   12....       LCALL   ?L_ADD_TO_X
   1752          
   1753                nwkFrameCounter = keyItems.frameCounter;
   \   000083   7411         MOV     A,#0x11
   \   000085   12....       LCALL   ?XSTACK_DISP0_8
   \   000088   12....       LCALL   ?XLOAD_R0123
   \   00008B   90....       MOV     DPTR,#nwkFrameCounter
   \   00008E   12....       LCALL   ?XSTORE_R0123
   1754          
   1755                // Save the updated Frame Counter right away
   1756                osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
   1757                               (void *)&keyItems );
   \   000091                ; Setup parameters for call to function osal_nv_write
   \   000091   A8..         MOV     R0,?XSP + 0
   \   000093   A9..         MOV     R1,?XSP + 1
   \   000095   88..         MOV     ?V0,R0
   \   000097   89..         MOV     ?V1,R1
   \   000099   78..         MOV     R0,#?V0
   \   00009B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009E   75..15       MOV     ?V0,#0x15
   \   0000A1   8E..         MOV     ?V1,R6
   \   0000A3   78..         MOV     R0,#?V0
   \   0000A5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A8   7C00         MOV     R4,#0x0
   \   0000AA   7D00         MOV     R5,#0x0
   \   0000AC   7A82         MOV     R2,#-0x7e
   \   0000AE   7B00         MOV     R3,#0x0
   \   0000B0   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0000B3   7404         MOV     A,#0x4
   \   0000B5   12....       LCALL   ?DEALLOC_XSTACK8
   1758          
   1759                nwkFrameCounterChanges = 0;
   \   0000B8   90....       MOV     DPTR,#nwkFrameCounterChanges
   \   0000BB   E4           CLR     A
   \   0000BC   F0           MOVX    @DPTR,A
   \   0000BD   A3           INC     DPTR
   \   0000BE   F0           MOVX    @DPTR,A
   1760          
   1761                ret = TRUE;
   \   0000BF   7E01         MOV     R6,#0x1
   1762          
   1763                // Clear copy in RAM before return.
   1764                osal_memset( &keyItems, 0x00, sizeof(keyItems) );
   \   0000C1                ; Setup parameters for call to function osal_memset
   \   0000C1   7C15         MOV     R4,#0x15
   \   0000C3   FD           MOV     R5,A
   \   0000C4   F9           MOV     R1,A
   \   0000C5   AA..         MOV     R2,?XSP + 0
   \   0000C7   AB..         MOV     R3,?XSP + 1
   \   0000C9   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1765              }
   1766            }
   1767          
   1768            return ( ret );
   \                     ??ZDApp_RestoreNwkKey_0:
   \   0000CC   EE           MOV     A,R6
   \   0000CD   F9           MOV     R1,A
   \   0000CE   7425         MOV     A,#0x25
   \   0000D0   02....       LJMP    ?Subroutine4 & 0xFFFF
   1769          }
   1770          
   1771          /*********************************************************************
   1772           * @fn      ZDApp_ResetTimerStart
   1773           *
   1774           * @brief   Start the reset timer.
   1775           *
   1776           * @param   delay - delay time(ms) before reset
   1777           *
   1778           * @return  none
   1779           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1780          void ZDApp_ResetTimerStart( uint16 delay )
   \                     ZDApp_ResetTimerStart:
   1781          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   1782            if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_DEVICE_RESET ) )
   \   000009                ; Setup parameters for call to function osal_get_timeoutEx
   \   000009   7A04         MOV     R2,#0x4
   \   00000B   7B00         MOV     R3,#0x0
   \   00000D   90....       MOV     DPTR,#ZDAppTaskID
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F9           MOV     R1,A
   \   000012   12....       LCALL   `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   \   000015   EA           MOV     A,R2
   \   000016   4B           ORL     A,R3
   \   000017   4C           ORL     A,R4
   \   000018   4D           ORL     A,R5
   \   000019   701B         JNZ     ??ZDApp_ResetTimerStart_0
   1783            {
   1784              // Start the rest timer
   1785              osal_start_timerEx( ZDAppTaskID, ZDO_DEVICE_RESET, delay );
   \   00001B                ; Setup parameters for call to function osal_start_timerEx
   \   00001B   E4           CLR     A
   \   00001C   F5..         MOV     ?V2,A
   \   00001E   F5..         MOV     ?V3,A
   \   000020   78..         MOV     R0,#?V0
   \   000022   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000025   7A04         MOV     R2,#0x4
   \   000027   7B00         MOV     R3,#0x0
   \   000029   90....       MOV     DPTR,#ZDAppTaskID
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F9           MOV     R1,A
   \   00002E   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000031   7404         MOV     A,#0x4
   \   000033   12....       LCALL   ?DEALLOC_XSTACK8
   1786            }
   1787          }
   \                     ??ZDApp_ResetTimerStart_0:
   \   000036   02....       LJMP    ??Subroutine66_0 & 0xFFFF
   1788          
   1789          /*********************************************************************
   1790           * @fn      ZDApp_ResetTimerCancel
   1791           *
   1792           * @brief   Cancel the reset timer.
   1793           *
   1794           * @param   none
   1795           *
   1796           * @return  none
   1797           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1798          void ZDApp_ResetTimerCancel( void )
   \                     ZDApp_ResetTimerCancel:
   1799          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1800            (void)osal_stop_timerEx(ZDAppTaskID, ZDO_DEVICE_RESET);
   \   000004                ; Setup parameters for call to function osal_stop_timerEx
   \   000004   7A04         MOV     R2,#0x4
   \   000006   7B00         MOV     R3,#0x0
   \   000008   90....       MOV     DPTR,#ZDAppTaskID
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F9           MOV     R1,A
   \   00000D   12....       LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   1801            (void)osal_clear_event(ZDAppTaskID, ZDO_DEVICE_RESET);
   \   000010                ; Setup parameters for call to function osal_clear_event
   \   000010   7A04         MOV     R2,#0x4
   \   000012   7B00         MOV     R3,#0x0
   \   000014   90....       MOV     DPTR,#ZDAppTaskID
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F9           MOV     R1,A
   \   000019   12....       LCALL   `??osal_clear_event::?relay`; Banked call to: osal_clear_event
   1802          }
   \   00001C   02....       LJMP    ??Subroutine56_0 & 0xFFFF
   1803          
   1804          /*********************************************************************
   1805           * @fn      ZDApp_LeaveCtrlInit
   1806           *
   1807           * @brief   Initialize the leave control logic.
   1808           *
   1809           * @param   none
   1810           *
   1811           * @return  none
   1812           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1813          void ZDApp_LeaveCtrlInit( void )
   \                     ZDApp_LeaveCtrlInit:
   1814          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1815            uint8 status;
   1816          
   1817          
   1818            // Initialize control state
   1819            ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_INIT;
   \   000005   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   000008   E4           CLR     A
   \   000009   F0           MOVX    @DPTR,A
   1820          
   1821            status = osal_nv_item_init( ZCD_NV_LEAVE_CTRL,
   1822                                        sizeof(ZDApp_LeaveCtrl),
   1823                                        &ZDApp_LeaveCtrl );
   1824          
   1825            if ( status == ZSUCCESS )
   \   00000A                ; Setup parameters for call to function osal_nv_item_init
   \   00000A   75....       MOV     ?V0,#ZDApp_LeaveCtrl & 0xff
   \   00000D   75....       MOV     ?V1,#(ZDApp_LeaveCtrl >> 8) & 0xff
   \   000010   78..         MOV     R0,#?V0
   \   000012   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000015   7C01         MOV     R4,#0x1
   \   000017   7D00         MOV     R5,#0x0
   \   000019   7A85         MOV     R2,#-0x7b
   \   00001B   7B00         MOV     R3,#0x0
   \   00001D   12....       LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   000020   7402         MOV     A,#0x2
   \   000022   12....       LCALL   ?DEALLOC_XSTACK8
   \   000025   E9           MOV     A,R1
   \   000026   7020         JNZ     ??ZDApp_LeaveCtrlInit_0
   1826            {
   1827              // Read saved control
   1828              osal_nv_read( ZCD_NV_LEAVE_CTRL,
   1829                            0,
   1830                            sizeof( uint8 ),
   1831                            &ZDApp_LeaveCtrl);
   \   000028                ; Setup parameters for call to function osal_nv_read
   \   000028   78..         MOV     R0,#?V0
   \   00002A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002D   75..01       MOV     ?V0,#0x1
   \   000030   75..00       MOV     ?V1,#0x0
   \   000033   78..         MOV     R0,#?V0
   \   000035   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000038   7C00         MOV     R4,#0x0
   \   00003A   7D00         MOV     R5,#0x0
   \   00003C   7A85         MOV     R2,#-0x7b
   \   00003E   7B00         MOV     R3,#0x0
   \   000040   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000043   7404         MOV     A,#0x4
   \   000045   12....       LCALL   ?DEALLOC_XSTACK8
   1832            }
   1833          }
   \                     ??ZDApp_LeaveCtrlInit_0:
   \   000048   02....       LJMP    ??Subroutine55_0 & 0xFFFF
   1834          
   1835          /*********************************************************************
   1836           * @fn      ZDApp_LeaveCtrlSet
   1837           *
   1838           * @brief   Set the leave control logic.
   1839           *
   1840           * @param   ra - reassociate flag
   1841           *
   1842           * @return  none
   1843           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   75....       MOV     ?V0,#ZDApp_LeaveCtrl & 0xff
   \   000003   75....       MOV     ?V1,#(ZDApp_LeaveCtrl >> 8) & 0xff
   \   000006   78..         MOV     R0,#?V0
   \   000008   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00000B   75..01       MOV     ?V0,#0x1
   \   00000E   75..00       MOV     ?V1,#0x0
   \   000011   78..         MOV     R0,#?V0
   \   000013   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000016   7C00         MOV     R4,#0x0
   \   000018   7D00         MOV     R5,#0x0
   \   00001A   7A85         MOV     R2,#-0x7b
   \   00001C   7B00         MOV     R3,#0x0
   \   00001E   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000021   7404         MOV     A,#0x4
   \   000023                REQUIRE ??Subroutine54_0
   \   000023                ; // Fall through to label ??Subroutine54_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1844          void ZDApp_LeaveCtrlSet( uint8 ra )
   \                     ZDApp_LeaveCtrlSet:
   1845          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   1846            ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_SET;
   \   000007   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   00000A   7401         MOV     A,#0x1
   \   00000C   F0           MOVX    @DPTR,A
   1847          
   1848            if ( ra == TRUE )
   \   00000D   6E           XRL     A,R6
   \   00000E   7003         JNZ     ??ZDApp_LeaveCtrlSet_0
   1849            {
   1850              ZDApp_LeaveCtrl |= ZDAPP_LEAVE_CTRL_RA;
   \   000010   7403         MOV     A,#0x3
   \   000012   F0           MOVX    @DPTR,A
   1851            }
   1852          
   1853            // Write the leave control
   1854            osal_nv_write( ZCD_NV_LEAVE_CTRL,
   1855                           0,
   1856                           sizeof( uint8 ),
   1857                           &ZDApp_LeaveCtrl);
   \                     ??ZDApp_LeaveCtrlSet_0:
   \   000013                ; Setup parameters for call to function osal_nv_write
   \   000013   02....       LJMP    ?Subroutine2 & 0xFFFF
   1858          }
   1859          
   1860          /*********************************************************************
   1861           * @fn      ZDApp_LeaveCtrlReset
   1862           *
   1863           * @brief   Re-initialize the leave control logic.
   1864           *
   1865           * @param   none
   1866           *
   1867           * @return  none
   1868           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1869          void ZDApp_LeaveCtrlReset( void )
   \                     ZDApp_LeaveCtrlReset:
   1870          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1871            // Set leave control to initialized state
   1872            ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_INIT;
   \   000005   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   000008   E4           CLR     A
   \   000009   F0           MOVX    @DPTR,A
   1873          
   1874            // Write initialized control
   1875            osal_nv_write( ZCD_NV_LEAVE_CTRL,
   1876                          0,
   1877                          sizeof( uint8 ),
   1878                          &ZDApp_LeaveCtrl);
   \   00000A                ; Setup parameters for call to function osal_nv_write
   \   00000A   02....       LJMP    ?Subroutine2 & 0xFFFF
   1879          }
   1880          
   1881          /*********************************************************************
   1882           * @fn      ZDApp_LeaveCtrlBypass
   1883           *
   1884           * @brief   Check if NV restore should be skipped during a leave reset.
   1885           *
   1886           * @param   none
   1887           *
   1888           * @return  uint8 - (TRUE bypass:FALSE do not bypass)
   1889           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1890          uint8 ZDApp_LeaveCtrlBypass( void )
   \                     ZDApp_LeaveCtrlBypass:
   1891          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1892            uint8 bypass;
   1893          
   1894            if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_SET )
   1895            {
   1896              bypass = TRUE;
   1897            }
   1898            else
   1899            {
   1900              bypass = FALSE;
   1901            }
   1902          
   1903            return bypass;
   \   000004   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   000007   E0           MOVX    A,@DPTR
   \   000008   A2E0         MOV     C,0xE0 /* A   */.0
   \   00000A   E4           CLR     A
   \   00000B   33           RLC     A
   \   00000C   F9           MOV     R1,A
   \   00000D   80..         SJMP    ??Subroutine56_0
   1904          }
   1905          
   1906          /*********************************************************************
   1907           * @fn      ZDApp_LeaveCtrlStartup
   1908           *
   1909           * @brief   Check for startup conditions during a leave reset.
   1910           *
   1911           * @param   state      - devState_t determined by leave control logic
   1912           * @param   startDelay - startup delay
   1913           *
   1914           * @return  none
   1915           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1916          void ZDApp_LeaveCtrlStartup( devStates_t* state, uint16* startDelay )
   \                     ZDApp_LeaveCtrlStartup:
   1917          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1918            *startDelay = 0;
   \   000004   8C82         MOV     DPL,R4
   \   000006   8D83         MOV     DPH,R5
   \   000008   E4           CLR     A
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   A3           INC     DPTR
   \   00000B   F0           MOVX    @DPTR,A
   1919          
   1920            if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_SET )
   \   00000C   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   A2E0         MOV     C,0xE0 /* A   */.0
   \   000012   5019         JNC     ??ZDApp_LeaveCtrlStartup_0
   1921            {
   1922              if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_RA )
   \   000014   A2E1         MOV     C,0xE0 /* A   */.1
   \   000016   500C         JNC     ??ZDApp_LeaveCtrlStartup_1
   1923              {
   1924                *startDelay = LEAVE_RESET_DELAY;
   \   000018   8C82         MOV     DPL,R4
   \   00001A   8D83         MOV     DPH,R5
   \   00001C   7488         MOV     A,#-0x78
   \   00001E   F0           MOVX    @DPTR,A
   \   00001F   A3           INC     DPTR
   \   000020   7413         MOV     A,#0x13
   \   000022   8005         SJMP    ??ZDApp_LeaveCtrlStartup_2
   1925              }
   1926              else
   1927              {
   1928                *state = DEV_HOLD;
   \                     ??ZDApp_LeaveCtrlStartup_1:
   \   000024   8A82         MOV     DPL,R2
   \   000026   8B83         MOV     DPH,R3
   \   000028   E4           CLR     A
   \                     ??ZDApp_LeaveCtrlStartup_2:
   \   000029   F0           MOVX    @DPTR,A
   1929              }
   1930          
   1931              // Reset leave control logic
   1932              ZDApp_LeaveCtrlReset();
   \   00002A                ; Setup parameters for call to function ZDApp_LeaveCtrlReset
   \   00002A   12....       LCALL   `??ZDApp_LeaveCtrlReset::?relay`; Banked call to: ZDApp_LeaveCtrlReset
   1933            }
   1934          }
   \                     ??ZDApp_LeaveCtrlStartup_0:
   \   00002D   80..         SJMP    ??Subroutine56_0
   1935          
   1936          /*********************************************************************
   1937           * @fn      ZDApp_LeaveReset
   1938           *
   1939           * @brief   Setup a device reset due to a leave indication/confirm.
   1940           *
   1941           * @param   ra - reassociate flag
   1942           *
   1943           * @return  none
   1944           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1945          void ZDApp_LeaveReset( uint8 ra )
   \                     ZDApp_LeaveReset:
   1946          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   1947            ZDApp_LeaveCtrlSet( ra );
   \   000005                ; Setup parameters for call to function ZDApp_LeaveCtrlSet
   \   000005   12....       LCALL   `??ZDApp_LeaveCtrlSet::?relay`; Banked call to: ZDApp_LeaveCtrlSet
   1948          
   1949            ZDApp_ResetTimerStart( LEAVE_RESET_DELAY );
   \   000008                ; Setup parameters for call to function ZDApp_ResetTimerStart
   \   000008   7A88         MOV     R2,#-0x78
   \   00000A   7B13         MOV     R3,#0x13
   \   00000C   12....       LCALL   `??ZDApp_ResetTimerStart::?relay`; Banked call to: ZDApp_ResetTimerStart
   1950          }
   \   00000F   02....       LJMP    ??Subroutine57_0 & 0xFFFF
   1951          
   1952          /*********************************************************************
   1953           * @fn      ZDApp_LeaveUpdate
   1954           *
   1955           * @brief   Update local device data related to leaving device.
   1956           *
   1957           * @param   nwkAddr        - NWK address of leaving device
   1958           * @param   extAddr        - EXT address of leaving device
   1959           * @param   removeChildren - remove children of leaving device
   1960           *
   1961           * @return  none
   1962           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1963          void ZDApp_LeaveUpdate( uint16 nwkAddr, uint8* extAddr,
   \                     ZDApp_LeaveUpdate:
   1964                                  uint8 removeChildren )
   1965          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
   1966            // Remove Apps Key for leaving device
   1967            ZDSecMgrDeviceRemoveByExtAddr(extAddr);
   \   000012                ; Setup parameters for call to function ZDSecMgrDeviceRemoveByExtAddr
   \   000012   EE           MOV     A,R6
   \   000013   FA           MOV     R2,A
   \   000014   EF           MOV     A,R7
   \   000015   FB           MOV     R3,A
   \   000016   12....       LCALL   `??ZDSecMgrDeviceRemoveByExtAddr::?relay`; Banked call to: ZDSecMgrDeviceRemoveByExtAddr
   1968          
   1969            // Clear SECURITY bit from Address Manager
   1970            ZDSecMgrAddrClear( extAddr );
   \   000019                ; Setup parameters for call to function ZDSecMgrAddrClear
   \   000019   EE           MOV     A,R6
   \   00001A   FA           MOV     R2,A
   \   00001B   EF           MOV     A,R7
   \   00001C   FB           MOV     R3,A
   \   00001D   12....       LCALL   `??ZDSecMgrAddrClear::?relay`; Banked call to: ZDSecMgrAddrClear
   1971          
   1972            if ( pbindRemoveDev )
   \   000020   90....       MOV     DPTR,#pbindRemoveDev
   \   000023   12....       LCALL   ??Subroutine64_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   000026   6035         JZ      ??ZDApp_LeaveUpdate_0
   1973            {
   1974              zAddrType_t devAddr;
   1975          
   1976              // Remove bind entry and all related data
   1977              devAddr.addrMode = Addr64Bit;
   \   000028   7408         MOV     A,#0x8
   \   00002A   12....       LCALL   ?XSTACK_DISP0_8
   \   00002D   7403         MOV     A,#0x3
   \   00002F   F0           MOVX    @DPTR,A
   1978              osal_memcpy(devAddr.addr.extAddr, extAddr, Z_EXTADDR_LEN);
   \   000030                ; Setup parameters for call to function osal_memcpy
   \   000030   8E..         MOV     ?V4,R6
   \   000032   8F..         MOV     ?V5,R7
   \   000034   75..00       MOV     ?V6,#0x0
   \   000037   78..         MOV     R0,#?V4
   \   000039   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00003C   7C08         MOV     R4,#0x8
   \   00003E   7D00         MOV     R5,#0x0
   \   000040   7403         MOV     A,#0x3
   \   000042   12....       LCALL   ?XSTACK_DISP101_8
   \   000045   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000048   7403         MOV     A,#0x3
   \   00004A   12....       LCALL   ?DEALLOC_XSTACK8
   1979          
   1980              pbindRemoveDev(&devAddr);
   \   00004D                ; Setup parameters for indirect call
   \   00004D   AA..         MOV     R2,?XSP + 0
   \   00004F   AB..         MOV     R3,?XSP + 1
   \   000051   90....       MOV     DPTR,#pbindRemoveDev
   \   000054   E0           MOVX    A,@DPTR
   \   000055   F8           MOV     R0,A
   \   000056   A3           INC     DPTR
   \   000057   12....       LCALL   ??Subroutine65_0 & 0xFFFF
   1981            }
   \                     ??CrossCallReturnLabel_124:
   \   00005A   12....       LCALL   ?CALL_IND
   1982          
   1983            // Remove if child
   1984            if ( ZSTACK_ROUTER_BUILD )
   1985            {
   1986              // Router shall notify the Trust Center that a child device has left the network
   1987              if ( AssocIsChild( nwkAddr ) == TRUE )
   1988              {
   1989                  APSME_UpdateDeviceReq_t req;
   1990          
   1991                  // forward authorization to the Trust Center
   1992                  req.dstAddr    = APSME_TRUSTCENTER_NWKADDR;
   1993                  req.devAddr    = nwkAddr;
   1994                  req.devExtAddr = extAddr;
   1995                  req.status = APSME_UD_DEVICE_LEFT;
   1996          
   1997                  if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
   1998                  {
   1999                    // For ZG_GLOBAL_LINK_KEY the message has to be sent twice one
   2000                    // un-encrypted and one APS encrypted, to make sure that it can interoperate
   2001                    // with legacy Coordinator devices which can only handle one or the other.
   2002                    if ( zgApsLinkKeyType == ZG_GLOBAL_LINK_KEY )
   2003                    {
   2004                      req.apsSecure = FALSE;
   2005          
   2006                      // send and APSME_UPDATE_DEVICE request to the trust center
   2007                      APSME_UpdateDeviceReq( &req );
   2008                    }
   2009          
   2010                    // send the message APS encrypted
   2011                    req.apsSecure = TRUE;
   2012          
   2013                    // send and APSME_UPDATE_DEVICE request to the trust center
   2014                    APSME_UpdateDeviceReq( &req );
   2015                  }
   2016                  else
   2017                  {
   2018                    req.apsSecure = FALSE;
   2019          
   2020                    // send and APSME_UPDATE_DEVICE request to the trust center
   2021                    APSME_UpdateDeviceReq( &req );
   2022                  }
   2023              }
   2024          
   2025              NLME_RemoveChild( extAddr, removeChildren );
   2026            }
   2027          
   2028            // Remove Routing table related entry
   2029            RTG_RemoveRtgEntry( nwkAddr, 0 );
   \                     ??ZDApp_LeaveUpdate_0:
   \   00005D                ; Setup parameters for call to function RTG_RemoveRtgEntry
   \   00005D   7900         MOV     R1,#0x0
   \   00005F   AA..         MOV     R2,?V0
   \   000061   AB..         MOV     R3,?V1
   \   000063   12....       LCALL   `??RTG_RemoveRtgEntry::?relay`; Banked call to: RTG_RemoveRtgEntry
   2030          
   2031            // Remove entry from neighborTable
   2032            nwkNeighborRemove( nwkAddr, _NIB.nwkPanId );
   \   000066                ; Setup parameters for call to function nwkNeighborRemove
   \   000066   90....       MOV     DPTR,#_NIB + 33
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   FC           MOV     R4,A
   \   00006B   A3           INC     DPTR
   \   00006C   E0           MOVX    A,@DPTR
   \   00006D   FD           MOV     R5,A
   \   00006E   AA..         MOV     R2,?V0
   \   000070   AB..         MOV     R3,?V1
   \   000072   12....       LCALL   `??nwkNeighborRemove::?relay`; Banked call to: nwkNeighborRemove
   2033          
   2034            // Schedule to save data to NV
   2035            ZDApp_NwkWriteNVRequest();
   2036          }
   \   000075   7409         MOV     A,#0x9
   \   000077                REQUIRE ?Subroutine5
   \   000077                ; // Fall through to label ?Subroutine5

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F07         MOV     R7,#0x7
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine65_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F583         MOV     DPH,A
   \   000003   8882         MOV     DPL,R0
   \   000005   22           RET
   2037          
   2038          /*********************************************************************
   2039           * @fn      ZDApp_NetworkDiscoveryReq
   2040           *
   2041           * @brief   Request a network discovery.
   2042           *
   2043           * @param  scanChannels -
   2044           * @param  scanDuration -
   2045           *
   2046           * @return  ZStatus_t
   2047           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2048          ZStatus_t ZDApp_NetworkDiscoveryReq( uint32 scanChannels, uint8 scanDuration)
   \                     ZDApp_NetworkDiscoveryReq:
   2049          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   2050            // Setup optional filters - tbd
   2051          
   2052            // Request NLME network discovery
   2053            return NLME_NetworkDiscoveryRequest(scanChannels, scanDuration);
   \   000005                ; Setup parameters for call to function NLME_NetworkDiscoveryRequest
   \   000005   12....       LCALL   `??NLME_NetworkDiscoveryRequest::?relay`; Banked call to: NLME_NetworkDiscoveryRequest
   \   000008   02....       LJMP    ??Subroutine66_0 & 0xFFFF
   2054          }
   2055          
   2056          /*********************************************************************
   2057           * @fn      ZDApp_JoinReq
   2058           *
   2059           * @brief   Request the device to join a parent in a network.
   2060           *
   2061           * @param   channel -
   2062           * @param   panID -
   2063           *
   2064           * @return  ZStatus_t
   2065           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2066          ZStatus_t ZDApp_JoinReq( uint8 channel, uint16 panID, uint8 *extendedPanID,
   \                     ZDApp_JoinReq:
   2067                                   uint16 chosenParent, uint8 parentDepth, uint8 stackProfile )
   2068          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V2,R1
   \   000007   8A..         MOV     ?V0,R2
   \   000009   8B..         MOV     ?V1,R3
   \   00000B   EC           MOV     A,R4
   \   00000C   FE           MOV     R6,A
   \   00000D   ED           MOV     A,R5
   \   00000E   FF           MOV     R7,A
   2069            // Sync up the node with the stack profile (In the case where a pro device
   2070            // joins a non-pro network, or verse versa)
   2071            ZDApp_NodeProfileSync( stackProfile);
   \   00000F                ; Setup parameters for call to function ZDApp_NodeProfileSync
   \   00000F   740F         MOV     A,#0xf
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F9           MOV     R1,A
   \   000016   12....       LCALL   `??ZDApp_NodeProfileSync::?relay`; Banked call to: ZDApp_NodeProfileSync
   2072          
   2073            // Request NLME Join Request
   2074            return NLME_JoinRequest(extendedPanID, panID,channel,
   2075                                    ZDO_Config_Node_Descriptor.CapabilityFlags,
   2076                                    chosenParent, parentDepth);
   \   000019                ; Setup parameters for call to function NLME_JoinRequest
   \   000019   740E         MOV     A,#0xe
   \   00001B   12....       LCALL   ?XSTACK_DISP0_8
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F5..         MOV     ?V3,A
   \   000021   78..         MOV     R0,#?V3
   \   000023   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000026   740D         MOV     A,#0xd
   \   000028   12....       LCALL   ?XSTACK_DISP0_8
   \   00002B   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00002E   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F5..         MOV     ?V3,A
   \   000034   78..         MOV     R0,#?V3
   \   000036   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000039   A9..         MOV     R1,?V2
   \   00003B   AC..         MOV     R4,?V0
   \   00003D   AD..         MOV     R5,?V1
   \   00003F   EE           MOV     A,R6
   \   000040   FA           MOV     R2,A
   \   000041   EF           MOV     A,R7
   \   000042   FB           MOV     R3,A
   \   000043   12....       LCALL   `??NLME_JoinRequest::?relay`; Banked call to: NLME_JoinRequest
   \   000046   7404         MOV     A,#0x4
   \   000048   02....       LJMP    ?Subroutine4 & 0xFFFF
   2077          
   2078          }
   2079          
   2080          /*********************************************************************
   2081           * @fn      ZDApp_DeviceConfigured
   2082           *
   2083           * @brief   Check to see if the local device is configured (i.e., part
   2084           *          of a network).
   2085           *
   2086           * @param   none
   2087           *
   2088           * @return  TRUE if configured. FALSE, otherwise.
   2089           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2090          uint8 ZDApp_DeviceConfigured( void )
   \                     ZDApp_DeviceConfigured:
   2091          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   2092            uint16 nwkAddr = INVALID_NODE_ADDR;
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   74FE         MOV     A,#-0x2
   \   000012   F0           MOVX    @DPTR,A
   \   000013   A3           INC     DPTR
   \   000014   04           INC     A
   \   000015   F0           MOVX    @DPTR,A
   2093          
   2094            osal_nv_read( ZCD_NV_NIB, osal_offsetof( nwkIB_t, nwkDevAddress ),
   2095                          sizeof( uint16), &nwkAddr );
   \   000016                ; Setup parameters for call to function osal_nv_read
   \   000016   A8..         MOV     R0,?XSP + 0
   \   000018   A9..         MOV     R1,?XSP + 1
   \   00001A   88..         MOV     ?V0,R0
   \   00001C   89..         MOV     ?V1,R1
   \   00001E   78..         MOV     R0,#?V0
   \   000020   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000023   75..02       MOV     ?V0,#0x2
   \   000026   75..00       MOV     ?V1,#0x0
   \   000029   78..         MOV     R0,#?V0
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002E   7C14         MOV     R4,#0x14
   \   000030   7D00         MOV     R5,#0x0
   \   000032   7A21         MOV     R2,#0x21
   \   000034   7B00         MOV     R3,#0x0
   \   000036   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000039   7404         MOV     A,#0x4
   \   00003B   12....       LCALL   ?DEALLOC_XSTACK8
   2096          
   2097            // Does the NIB have anything more than default?
   2098            return ( nwkAddr == INVALID_NODE_ADDR ? FALSE : TRUE );
   \   00003E   85..82       MOV     DPL,?XSP + 0
   \   000041   85..83       MOV     DPH,?XSP + 1
   \   000044   E0           MOVX    A,@DPTR
   \   000045   64FE         XRL     A,#0xfe
   \   000047   7003         JNZ     ??ZDApp_DeviceConfigured_0
   \   000049   A3           INC     DPTR
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   F4           CPL     A
   \                     ??ZDApp_DeviceConfigured_0:
   \   00004C   7004         JNZ     ??ZDApp_DeviceConfigured_1
   \   00004E   7900         MOV     R1,#0x0
   \   000050   8002         SJMP    ??ZDApp_DeviceConfigured_2
   \                     ??ZDApp_DeviceConfigured_1:
   \   000052   7901         MOV     R1,#0x1
   \                     ??ZDApp_DeviceConfigured_2:
   \   000054                REQUIRE ?Subroutine8
   \   000054                ; // Fall through to label ?Subroutine8
   2099          }
   2100          
   2101          /*********************************************************************
   2102           * CALLBACK FUNCTIONS
   2103           */
   2104          
   2105          
   2106          /*********************************************************************
   2107           * @fn      ZDApp_SendEventMsg()
   2108           *
   2109           * @brief
   2110           *
   2111           *   Sends a Network Join message
   2112           *
   2113           * @param  cmd - command ID
   2114           * @param  len - length (in bytes) of the buf field
   2115           * @param  buf - buffer for the rest of the message.
   2116           *
   2117           * @return  none
   2118           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2119          void ZDApp_SendEventMsg( uint8 cmd, uint8 len, uint8 *buf )
   \                     ZDApp_SendEventMsg:
   2120          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   \   000007   EA           MOV     A,R2
   2121            ZDApp_SendMsg( ZDAppTaskID, cmd, len, buf );
   \   000008                ; Setup parameters for call to function ZDApp_SendMsg
   \   000008   FB           MOV     R3,A
   \   000009   EE           MOV     A,R6
   \   00000A   FA           MOV     R2,A
   \   00000B   90....       MOV     DPTR,#ZDAppTaskID
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   F9           MOV     R1,A
   \   000010   12....       LCALL   `??ZDApp_SendMsg::?relay`; Banked call to: ZDApp_SendMsg
   2122          }
   \   000013   80..         SJMP    ??Subroutine57_0
   2123          
   2124          /*********************************************************************
   2125           * @fn      ZDApp_SendMsg()
   2126           *
   2127           * @brief   Sends a OSAL message
   2128           *
   2129           * @param  taskID - Where to send the message
   2130           * @param  cmd - command ID
   2131           * @param  len - length (in bytes) of the buf field
   2132           * @param  buf - buffer for the rest of the message.
   2133           *
   2134           * @return  none
   2135           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2136          void ZDApp_SendMsg( uint8 taskID, uint8 cmd, uint8 len, uint8 *buf )
   \                     ZDApp_SendMsg:
   2137          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V3,R1
   \   000007   8A..         MOV     ?V4,R2
   \   000009   8B..         MOV     ?V5,R3
   \   00000B   8C..         MOV     ?V0,R4
   \   00000D   8D..         MOV     ?V1,R5
   2138            osal_event_hdr_t *msgPtr;
   2139          
   2140            // Send the address to the task
   2141            msgPtr = (osal_event_hdr_t *)osal_msg_allocate( len );
   \   00000F                ; Setup parameters for call to function osal_msg_allocate
   \   00000F   AA..         MOV     R2,?V5
   \   000011   7B00         MOV     R3,#0x0
   \   000013   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000016   8A..         MOV     ?V6,R2
   \   000018   8B..         MOV     ?V7,R3
   \   00001A   AE..         MOV     R6,?V6
   \   00001C   AF..         MOV     R7,?V7
   2142            if ( msgPtr )
   \   00001E   EE           MOV     A,R6
   \   00001F   4F           ORL     A,R7
   \   000020   602E         JZ      ??ZDApp_SendMsg_0
   2143            {
   2144              if ( (len > 0) && (buf != NULL) )
   \   000022   E5..         MOV     A,?V5
   \   000024   601A         JZ      ??ZDApp_SendMsg_1
   \   000026   E5..         MOV     A,?V0
   \   000028   45..         ORL     A,?V1
   \   00002A   6014         JZ      ??ZDApp_SendMsg_1
   2145                osal_memcpy( msgPtr, buf, len );
   \   00002C                ; Setup parameters for call to function osal_memcpy
   \   00002C   75..00       MOV     ?V2,#0x0
   \   00002F   78..         MOV     R0,#?V0
   \   000031   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000034   AC..         MOV     R4,?V5
   \   000036   7D00         MOV     R5,#0x0
   \   000038   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00003B   7403         MOV     A,#0x3
   \   00003D   12....       LCALL   ?DEALLOC_XSTACK8
   2146          
   2147              msgPtr->event = cmd;
   \                     ??ZDApp_SendMsg_1:
   \   000040   8E82         MOV     DPL,R6
   \   000042   8F83         MOV     DPH,R7
   \   000044   E5..         MOV     A,?V4
   \   000046   F0           MOVX    @DPTR,A
   2148              osal_msg_send( taskID, (uint8 *)msgPtr );
   \   000047                ; Setup parameters for call to function osal_msg_send
   \   000047   EE           MOV     A,R6
   \   000048   FA           MOV     R2,A
   \   000049   EF           MOV     A,R7
   \   00004A   FB           MOV     R3,A
   \   00004B   A9..         MOV     R1,?V3
   \   00004D   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   2149            }
   2150          }
   \                     ??ZDApp_SendMsg_0:
   \   000050                REQUIRE ?Subroutine6
   \   000050                ; // Fall through to label ?Subroutine6

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   7F08         MOV     R7,#0x8
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
   2151          
   2152          /*********************************************************************
   2153           * Call Back Functions from NWK  - API
   2154           */
   2155          
   2156          /*********************************************************************
   2157           * @fn          ZDO_NetworkDiscoveryConfirmCB
   2158           *
   2159           * @brief       This function returns a choice of PAN to join.
   2160           *
   2161           * @param       status - return status of the nwk discovery confirm
   2162           *
   2163           * @return      ZStatus_t
   2164           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine56_0
   \   000003                ; // Fall through to label ??Subroutine56_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2165          ZStatus_t ZDO_NetworkDiscoveryConfirmCB(uint8 status)
   \                     ZDO_NetworkDiscoveryConfirmCB:
   2166          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 3
   \   000004   74FD         MOV     A,#-0x3
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
   \   000009   E9           MOV     A,R1
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   F0           MOVX    @DPTR,A
   2167            osal_event_hdr_t msg;
   2168          
   2169            // If Scan is initiated by ZDO_MGMT_NWK_DISC_REQ
   2170            // Send ZDO_MGMT_NWK_DISC_RSP back
   2171          #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
   2172            if ( zdappMgmtNwkDiscReqInProgress )
   2173            {
   2174              zdappMgmtNwkDiscReqInProgress = false;
   2175              ZDO_FinishProcessingMgmtNwkDiscReq();
   2176            }
   2177            else
   2178          #endif
   2179            {
   2180              // Pass the confirm to another task if it registers the callback
   2181              // Otherwise, pass the confirm to ZDApp.
   2182              if (zdoCBFunc[ZDO_NWK_DISCOVERY_CNF_CBID] != NULL )
   \   000011   90....       MOV     DPTR,#zdoCBFunc + 4
   \   000014   12....       LCALL   ??Subroutine64_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   000017   6008         JZ      ??ZDO_NetworkDiscoveryConfirmCB_0
   2183              {
   2184                zdoCBFunc[ZDO_NWK_DISCOVERY_CNF_CBID]( (void*)&status );
   \   000019                ; Setup parameters for indirect call
   \   000019   12....       LCALL   ?Subroutine19 & 0xFFFF
   2185              }
   \                     ??CrossCallReturnLabel_130:
   \   00001C   12....       LCALL   ?CALL_IND
   \   00001F   8017         SJMP    ??ZDO_NetworkDiscoveryConfirmCB_1
   2186              else
   2187              {
   2188                // Otherwise, send scan confirm to ZDApp task to proceed
   2189                msg.status = ZDO_SUCCESS;
   \                     ??ZDO_NetworkDiscoveryConfirmCB_0:
   \   000021   7402         MOV     A,#0x2
   \   000023   12....       LCALL   ?XSTACK_DISP0_8
   \   000026   E4           CLR     A
   \   000027   F0           MOVX    @DPTR,A
   2190                ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_DISC_CNF, sizeof(osal_event_hdr_t), (uint8 *)&msg );
   \   000028                ; Setup parameters for call to function ZDApp_SendMsg
   \   000028   04           INC     A
   \   000029   12....       LCALL   ?XSTACK_DISP102_8
   \   00002C   7B02         MOV     R3,#0x2
   \   00002E   7A01         MOV     R2,#0x1
   \   000030   90....       MOV     DPTR,#ZDAppTaskID
   \   000033   E0           MOVX    A,@DPTR
   \   000034   F9           MOV     R1,A
   \   000035   12....       LCALL   `??ZDApp_SendMsg::?relay`; Banked call to: ZDApp_SendMsg
   2191              }
   2192            }
   2193            return (ZSuccess);
   \                     ??ZDO_NetworkDiscoveryConfirmCB_1:
   \   000038   7900         MOV     R1,#0x0
   \   00003A   7403         MOV     A,#0x3
   \   00003C   02....       LJMP    ?Subroutine3 & 0xFFFF
   2194          }  // ZDO_NetworkDiscoveryConfirmCB

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   AA..         MOV     R2,?XSP + 0
   \   000002   AB..         MOV     R3,?XSP + 1
   \   000004                REQUIRE ??Subroutine65_0
   \   000004                ; // Fall through to label ??Subroutine65_0
   2195          
   2196          /*********************************************************************
   2197           * @fn          ZDApp_NwkDescListProcessing
   2198           *
   2199           * @brief       This function process the network discovery result and select
   2200           *              a parent device to join itself.
   2201           *
   2202           * @param       none
   2203           *
   2204           * @return      ZStatus_t
   2205           */
   2206          #define STACK_PROFILE_MAX 2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2207          networkDesc_t* ZDApp_NwkDescListProcessing(void)
   \                     ZDApp_NwkDescListProcessing:
   2208          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   2209            networkDesc_t *pNwkDesc;
   2210            uint8 i, ResultCount = 0;
   \   000005   75..00       MOV     ?V1,#0x0
   2211            uint8 stackProfile;
   2212            uint8 stackProfilePro;
   2213            uint8 selected;
   2214          
   2215            // Count the number of nwk descriptors in the list
   2216            pNwkDesc = nwk_getNwkDescList();
   \   000008                ; Setup parameters for call to function nwk_getNwkDescList
   \   000008   12....       LCALL   `??nwk_getNwkDescList::?relay`; Banked call to: nwk_getNwkDescList
   \   00000B   8A..         MOV     ?V2,R2
   \   00000D   8B..         MOV     ?V3,R3
   \   00000F   AE..         MOV     R6,?V2
   \   000011   AF..         MOV     R7,?V3
   \   000013   8005         SJMP    ??CrossCallReturnLabel_100
   2217            while (pNwkDesc)
   2218            {
   2219              ResultCount++;
   \                     ??ZDApp_NwkDescListProcessing_0:
   \   000015   05..         INC     ?V1
   2220              pNwkDesc = pNwkDesc->nextDesc;
   \   000017   12....       LCALL   ?Subroutine23 & 0xFFFF
   2221            }
   \                     ??CrossCallReturnLabel_100:
   \   00001A   EE           MOV     A,R6
   \   00001B   4F           ORL     A,R7
   \   00001C   70F7         JNZ     ??ZDApp_NwkDescListProcessing_0
   2222          
   2223            // process discovery results
   2224            stackProfilePro = FALSE;
   \   00001E   75..00       MOV     ?V0,#0x0
   2225            selected = FALSE;
   2226          
   2227          
   2228            for ( stackProfile = 0; stackProfile < STACK_PROFILE_MAX; stackProfile++ )
   \   000021   75..00       MOV     ?V2,#0x0
   2229            {
   2230              pNwkDesc = nwk_getNwkDescList();
   \                     ??ZDApp_NwkDescListProcessing_1:
   \   000024                ; Setup parameters for call to function nwk_getNwkDescList
   \   000024   12....       LCALL   `??nwk_getNwkDescList::?relay`; Banked call to: nwk_getNwkDescList
   \   000027   8A..         MOV     ?V4,R2
   \   000029   8B..         MOV     ?V5,R3
   \   00002B   AE..         MOV     R6,?V4
   \   00002D   AF..         MOV     R7,?V5
   2231              for ( i = 0; i < ResultCount; i++, pNwkDesc = pNwkDesc->nextDesc )
   \   00002F   75..00       MOV     ?V3,#0x0
   \   000032   8023         SJMP    ??CrossCallReturnLabel_101
   2232              {
   2233                 if ( nwk_ExtPANIDValid( ZDO_UseExtendedPANID ) == true )
   2234                {
   2235                  // If the extended Pan ID is commissioned to a non zero value
   2236                  // Only join the Pan that has match EPID
   2237                  if ( osal_ExtAddrEqual( ZDO_UseExtendedPANID, pNwkDesc->extendedPANID) == false )
   2238                    continue;
   2239          
   2240                }
   2241                else if ( zgConfigPANID != 0xFFFF )
   2242                {
   2243                  // PAN Id is preconfigured. check if it matches
   2244                  if ( pNwkDesc->panId != zgConfigPANID )
   2245                    continue;
   2246                }
   2247          
   2248                // check that network is allowing joining
   2249                if ( ZSTACK_ROUTER_BUILD )
   2250                {
   2251                  if ( stackProfilePro == FALSE )
   2252                  {
   2253                    if ( !pNwkDesc->routerCapacity )
   2254                    {
   2255                      continue;
   2256                    }
   2257                  }
   2258                  else
   2259                  {
   2260                    if ( !pNwkDesc->deviceCapacity )
   2261                    {
   2262                      continue;
   2263                    }
   2264                  }
   2265                }
   2266                else if ( ZSTACK_END_DEVICE_BUILD )
   2267                {
   2268                  if ( !pNwkDesc->deviceCapacity )
   2269                  {
   2270                    continue;
   2271                  }
   2272                }
   2273          
   2274                // check version of zigbee protocol
   2275                if ( pNwkDesc->version != _NIB.nwkProtocolVersion )
   2276                  continue;
   2277          
   2278                // check version of stack profile
   2279                if ( pNwkDesc->stackProfile != zgStackProfile  )
   2280                {
   2281                  if ( ((zgStackProfile == HOME_CONTROLS) && (pNwkDesc->stackProfile == ZIGBEEPRO_PROFILE))
   2282                      || ((zgStackProfile == ZIGBEEPRO_PROFILE) && (pNwkDesc->stackProfile == HOME_CONTROLS))  )
   \                     ??ZDApp_NwkDescListProcessing_2:
   \   000034   E0           MOVX    A,@DPTR
   \   000035   6402         XRL     A,#0x2
   \   000037   7012         JNZ     ??ZDApp_NwkDescListProcessing_3
   \   000039   8E82         MOV     DPL,R6
   \   00003B   8F83         MOV     DPH,R7
   \   00003D   A3           INC     DPTR
   \   00003E   A3           INC     DPTR
   \   00003F   A3           INC     DPTR
   \   000040   A3           INC     DPTR
   \   000041   A3           INC     DPTR
   \   000042   A3           INC     DPTR
   \   000043   E0           MOVX    A,@DPTR
   \   000044   6401         XRL     A,#0x1
   \   000046   7003         JNZ     ??ZDApp_NwkDescListProcessing_3
   2283                  {
   2284                    stackProfilePro = TRUE;
   \                     ??ZDApp_NwkDescListProcessing_4:
   \   000048   75..01       MOV     ?V0,#0x1
   2285                  }
   2286          
   2287                  if ( stackProfile == 0 )
   \                     ??ZDApp_NwkDescListProcessing_3:
   \   00004B   E5..         MOV     A,?V2
   \   00004D   6003         JZ      $+5
   \   00004F   02....       LJMP    ??ZDApp_NwkDescListProcessing_5 & 0xFFFF
   \                     ??ZDApp_NwkDescListProcessing_6:
   \   000052   05..         INC     ?V3
   \   000054   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   000057   E5..         MOV     A,?V3
   \   000059   C3           CLR     C
   \   00005A   95..         SUBB    A,?V1
   \   00005C   4003         JC      $+5
   \   00005E   02....       LJMP    ??ZDApp_NwkDescListProcessing_7 & 0xFFFF
   \   000061                ; Setup parameters for call to function nwk_ExtPANIDValid
   \   000061   7A..         MOV     R2,#ZDO_UseExtendedPANID & 0xff
   \   000063   7B..         MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   000065   12....       LCALL   `??nwk_ExtPANIDValid::?relay`; Banked call to: nwk_ExtPANIDValid
   \   000068   E9           MOV     A,R1
   \   000069   6401         XRL     A,#0x1
   \   00006B   7013         JNZ     ??ZDApp_NwkDescListProcessing_8
   \   00006D                ; Setup parameters for call to function sAddrExtCmp
   \   00006D   EE           MOV     A,R6
   \   00006E   240B         ADD     A,#0xb
   \   000070   FC           MOV     R4,A
   \   000071   E4           CLR     A
   \   000072   3F           ADDC    A,R7
   \   000073   FD           MOV     R5,A
   \   000074   7A..         MOV     R2,#ZDO_UseExtendedPANID & 0xff
   \   000076   7B..         MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   000078   12....       LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   00007B   E9           MOV     A,R1
   \   00007C   701D         JNZ     ??ZDApp_NwkDescListProcessing_9
   \   00007E   80D2         SJMP    ??ZDApp_NwkDescListProcessing_6
   \                     ??ZDApp_NwkDescListProcessing_8:
   \   000080   90....       MOV     DPTR,#zgConfigPANID
   \   000083   E0           MOVX    A,@DPTR
   \   000084   F4           CPL     A
   \   000085   7003         JNZ     ??ZDApp_NwkDescListProcessing_10
   \   000087   A3           INC     DPTR
   \   000088   E0           MOVX    A,@DPTR
   \   000089   F4           CPL     A
   \                     ??ZDApp_NwkDescListProcessing_10:
   \   00008A   600F         JZ      ??ZDApp_NwkDescListProcessing_9
   \   00008C   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   00008F   90....       MOV     DPTR,#zgConfigPANID
   \   000092   E0           MOVX    A,@DPTR
   \   000093   68           XRL     A,R0
   \   000094   7003         JNZ     ??ZDApp_NwkDescListProcessing_11
   \   000096   A3           INC     DPTR
   \   000097   E0           MOVX    A,@DPTR
   \   000098   69           XRL     A,R1
   \                     ??ZDApp_NwkDescListProcessing_11:
   \   000099   70B7         JNZ     ??ZDApp_NwkDescListProcessing_6
   \                     ??ZDApp_NwkDescListProcessing_9:
   \   00009B   8E82         MOV     DPL,R6
   \   00009D   8F83         MOV     DPH,R7
   \   00009F   A3           INC     DPTR
   \   0000A0   A3           INC     DPTR
   \   0000A1   A3           INC     DPTR
   \   0000A2   A3           INC     DPTR
   \   0000A3   E0           MOVX    A,@DPTR
   \   0000A4   60AC         JZ      ??ZDApp_NwkDescListProcessing_6
   \   0000A6   8E82         MOV     DPL,R6
   \   0000A8   8F83         MOV     DPH,R7
   \   0000AA   A3           INC     DPTR
   \   0000AB   A3           INC     DPTR
   \   0000AC   A3           INC     DPTR
   \   0000AD   A3           INC     DPTR
   \   0000AE   A3           INC     DPTR
   \   0000AF   E0           MOVX    A,@DPTR
   \   0000B0   F8           MOV     R0,A
   \   0000B1   90....       MOV     DPTR,#_NIB + 17
   \   0000B4   E0           MOVX    A,@DPTR
   \   0000B5   68           XRL     A,R0
   \   0000B6   709A         JNZ     ??ZDApp_NwkDescListProcessing_6
   \   0000B8   8E82         MOV     DPL,R6
   \   0000BA   8F83         MOV     DPH,R7
   \   0000BC   A3           INC     DPTR
   \   0000BD   A3           INC     DPTR
   \   0000BE   A3           INC     DPTR
   \   0000BF   A3           INC     DPTR
   \   0000C0   A3           INC     DPTR
   \   0000C1   A3           INC     DPTR
   \   0000C2   E0           MOVX    A,@DPTR
   \   0000C3   F8           MOV     R0,A
   \   0000C4   90....       MOV     DPTR,#zgStackProfile
   \   0000C7   E0           MOVX    A,@DPTR
   \   0000C8   68           XRL     A,R0
   \   0000C9   6039         JZ      ??ZDApp_NwkDescListProcessing_5
   \   0000CB   E0           MOVX    A,@DPTR
   \   0000CC   6401         XRL     A,#0x1
   \   0000CE   6003         JZ      $+5
   \   0000D0   02....       LJMP    ??ZDApp_NwkDescListProcessing_2 & 0xFFFF
   \   0000D3   8E82         MOV     DPL,R6
   \   0000D5   8F83         MOV     DPH,R7
   \   0000D7   A3           INC     DPTR
   \   0000D8   A3           INC     DPTR
   \   0000D9   A3           INC     DPTR
   \   0000DA   A3           INC     DPTR
   \   0000DB   A3           INC     DPTR
   \   0000DC   A3           INC     DPTR
   \   0000DD   E0           MOVX    A,@DPTR
   \   0000DE   6402         XRL     A,#0x2
   \   0000E0   6003         JZ      $+5
   \   0000E2   02....       LJMP    ??ZDApp_NwkDescListProcessing_3 & 0xFFFF
   \   0000E5   02....       LJMP    ??ZDApp_NwkDescListProcessing_4 & 0xFFFF
   2288                  {
   2289                    continue;
   2290                  }
   2291                }
   2292          
   2293                break;
   2294              }
   2295          
   2296              if (i < ResultCount)
   2297              {
   2298               selected = TRUE;
   2299                break;
   2300              }
   2301          
   2302              // break if selected or stack profile pro wasn't found
   2303              if ( (selected == TRUE) || (stackProfilePro == FALSE) )
   \                     ??ZDApp_NwkDescListProcessing_7:
   \   0000E8   E5..         MOV     A,?V0
   \   0000EA   600C         JZ      ??ZDApp_NwkDescListProcessing_12
   2304              {
   2305                break;
   2306              }
   2307            }
   \   0000EC   05..         INC     ?V2
   \   0000EE   E5..         MOV     A,?V2
   \   0000F0   C3           CLR     C
   \   0000F1   9402         SUBB    A,#0x2
   \   0000F3   5003         JNC     $+5
   \   0000F5   02....       LJMP    ??ZDApp_NwkDescListProcessing_1 & 0xFFFF
   2308          
   2309            if ( i == ResultCount )
   \                     ??ZDApp_NwkDescListProcessing_12:
   \   0000F8   E5..         MOV     A,?V1
   \   0000FA   65..         XRL     A,?V3
   \   0000FC   7006         JNZ     ??ZDApp_NwkDescListProcessing_5
   2310            {
   2311              return (NULL);   // couldn't find appropriate PAN to join !
   \   0000FE   7A00         MOV     R2,#0x0
   \   000100   7B00         MOV     R3,#0x0
   \   000102   8004         SJMP    ??ZDApp_NwkDescListProcessing_13
   2312            }
   2313            else
   2314            {
   2315              return (pNwkDesc);
   \                     ??ZDApp_NwkDescListProcessing_5:
   \   000104   EE           MOV     A,R6
   \   000105   FA           MOV     R2,A
   \   000106   EF           MOV     A,R7
   \   000107   FB           MOV     R3,A
   2316            }
   \                     ??ZDApp_NwkDescListProcessing_13:
   \   000108   02....       LJMP    ?Subroutine1 & 0xFFFF
   2317          }// ZDApp_NwkDescListProcessing()

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   12....       LCALL   ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   000003                REQUIRE ??Subroutine61_0
   \   000003                ; // Fall through to label ??Subroutine61_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine61_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FE           MOV     R6,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FF           MOV     R7,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   EE           MOV     A,R6
   \   000001   2414         ADD     A,#0x14
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET
   2318          
   2319          /*********************************************************************
   2320           * @fn          ZDO_NetworkFormationConfirmCB
   2321           *
   2322           * @brief       This function reports the results of the request to
   2323           *              initialize a coordinator in a network.
   2324           *
   2325           * @param       Status - Result of NLME_NetworkFormationRequest()
   2326           *
   2327           * @return      none
   2328           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7B00         MOV     R3,#0x0
   \   000002   90....       MOV     DPTR,#ZDAppTaskID
   \   000005   E0           MOVX    A,@DPTR
   \   000006   F9           MOV     R1,A
   \   000007   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   00000A                REQUIRE ??Subroutine57_0
   \   00000A                ; // Fall through to label ??Subroutine57_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2329          void ZDO_NetworkFormationConfirmCB( ZStatus_t Status )
   \                     ZDO_NetworkFormationConfirmCB:
   2330          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   2331            nwkStatus = (byte)Status;
   \   000006   90....       MOV     DPTR,#nwkStatus
   \   000009   F0           MOVX    @DPTR,A
   2332          
   2333            if ( Status == ZSUCCESS )
   \   00000A   7019         JNZ     ??ZDO_NetworkFormationConfirmCB_0
   2334            {
   2335              // LED on shows Coordinator started
   2336              HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
   \   00000C                ; Setup parameters for call to function HalLedSet
   \   00000C   7A01         MOV     R2,#0x1
   \   00000E   7904         MOV     R1,#0x4
   \   000010   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   2337          
   2338              // LED off forgets HOLD_AUTO_START
   2339              HalLedSet (HAL_LED_4, HAL_LED_MODE_OFF);
   \   000013                ; Setup parameters for call to function HalLedSet
   \   000013   7A00         MOV     R2,#0x0
   \   000015   7908         MOV     R1,#0x8
   \   000017   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   2340          
   2341          #if defined ( ZBIT )
   2342              SIM_SetColor(0xd0ffd0);
   2343          #endif
   2344          
   2345              if ( devState == DEV_HOLD )
   \   00001A   90....       MOV     DPTR,#devState
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   700C         JNZ     ??ZDO_NetworkFormationConfirmCB_1
   2346              {
   2347                // Began with HOLD_AUTO_START
   2348                devState = DEV_COORD_STARTING;
   \   000020   7408         MOV     A,#0x8
   \   000022   F0           MOVX    @DPTR,A
   \   000023   8007         SJMP    ??ZDO_NetworkFormationConfirmCB_1
   2349              }
   2350            }
   2351          #if defined(BLINK_LEDS)
   2352            else
   2353            {
   2354              HalLedSet ( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
   \                     ??ZDO_NetworkFormationConfirmCB_0:
   \   000025                ; Setup parameters for call to function HalLedSet
   \   000025   7A04         MOV     R2,#0x4
   \   000027   7904         MOV     R1,#0x4
   \   000029   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   2355            }
   2356          #endif
   2357          
   2358            osal_set_event( ZDAppTaskID, ZDO_NETWORK_START );
   \                     ??ZDO_NetworkFormationConfirmCB_1:
   \   00002C                ; Setup parameters for call to function osal_set_event
   \   00002C   7A02         MOV     R2,#0x2
   \   00002E   02....       LJMP    ?Subroutine0 & 0xFFFF
   2359          }
   2360          
   2361          /****************************************************************************
   2362           * @fn          ZDApp_beaconIndProcessing
   2363           *
   2364           * @brief       This function processes the incoming beacon indication.
   2365           *
   2366           *              When another task (MT or App) is registered to process
   2367           *              beacon indication themselves, this function will parse the
   2368           *              beacon payload and pass the beacon descriptor to that task
   2369           *              If no other tasks registered, this function will process
   2370           *              the beacon payload and generate the network descriptor link
   2371           *              list.
   2372           *
   2373           * @param
   2374           *
   2375           * @return      none
   2376           *
   2377           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2378          void ZDO_beaconNotifyIndCB( NLME_beaconInd_t *pBeacon )
   \                     ZDO_beaconNotifyIndCB:
   2379          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   2380            // Pass the beacon Indication to another task if it registers the callback
   2381            // Otherwise, process the beacon notification here.
   2382            if (zdoCBFunc[ZDO_BEACON_NOTIFY_IND_CBID] != NULL )
   \   000009   90....       MOV     DPTR,#zdoCBFunc + 6
   \   00000C   12....       LCALL   ??Subroutine64_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_109:
   \   00000F   6009         JZ      ??ZDO_beaconNotifyIndCB_0
   2383            {
   2384              zdoCBFunc[ZDO_BEACON_NOTIFY_IND_CBID]( (void*)pBeacon );
   \   000011                ; Setup parameters for indirect call
   \   000011   12....       LCALL   ??Subroutine65_0 & 0xFFFF
   2385            }
   \                     ??CrossCallReturnLabel_125:
   \   000014   12....       LCALL   ?CALL_IND
   \   000017   02....       LJMP    ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
   2386            else
   2387            {
   2388              networkDesc_t *pNwkDesc;
   2389              networkDesc_t *pLastNwkDesc;
   2390              uint8 found = false;
   2391          
   2392              // Add the network to the Network Descriptor List
   2393              pNwkDesc = NwkDescList;
   \                     ??ZDO_beaconNotifyIndCB_0:
   \   00001A   90....       MOV     DPTR,#NwkDescList
   \   00001D   12....       LCALL   ??Subroutine61_0 & 0xFFFF
   2394              pLastNwkDesc = NwkDescList;
   \                     ??CrossCallReturnLabel_98:
   \   000020   90....       MOV     DPTR,#NwkDescList
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F5..         MOV     ?V2,A
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F5..         MOV     ?V3,A
   \   00002A   802D         SJMP    ??CrossCallReturnLabel_102
   2395              while (pNwkDesc)
   2396              {
   2397                if ((pNwkDesc->panId == pBeacon->panID) &&
   2398                    (pNwkDesc->logicalChannel == pBeacon->logicalChannel))
   \                     ??ZDO_beaconNotifyIndCB_2:
   \   00002C   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   00002F   8A82         MOV     DPL,R2
   \   000031   8B83         MOV     DPH,R3
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   E0           MOVX    A,@DPTR
   \   000036   68           XRL     A,R0
   \   000037   7003         JNZ     ??ZDO_beaconNotifyIndCB_3
   \   000039   A3           INC     DPTR
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   69           XRL     A,R1
   \                     ??ZDO_beaconNotifyIndCB_3:
   \   00003C   7014         JNZ     ??ZDO_beaconNotifyIndCB_4
   \   00003E   8E82         MOV     DPL,R6
   \   000040   8F83         MOV     DPH,R7
   \   000042   A3           INC     DPTR
   \   000043   A3           INC     DPTR
   \   000044   E0           MOVX    A,@DPTR
   \   000045   F8           MOV     R0,A
   \   000046   8A82         MOV     DPL,R2
   \   000048   8B83         MOV     DPH,R3
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   A3           INC     DPTR
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   68           XRL     A,R0
   \   000050   605F         JZ      ??ZDO_beaconNotifyIndCB_5
   2399                {
   2400                  found = true;
   2401                  break;
   2402                }
   2403                pLastNwkDesc = pNwkDesc;
   \                     ??ZDO_beaconNotifyIndCB_4:
   \   000052   8E..         MOV     ?V2,R6
   \   000054   8F..         MOV     ?V3,R7
   2404                pNwkDesc = pNwkDesc->nextDesc;
   \   000056   12....       LCALL   ?Subroutine23 & 0xFFFF
   2405              }
   \                     ??CrossCallReturnLabel_102:
   \   000059   EE           MOV     A,R6
   \   00005A   4F           ORL     A,R7
   \   00005B   70CF         JNZ     ??ZDO_beaconNotifyIndCB_2
   2406          
   2407              // If no existing descriptor found, make a new one and add to the list
   2408              if (found == false)
   2409              {
   2410                pNwkDesc = osal_mem_alloc( sizeof(networkDesc_t)  );
   \   00005D                ; Setup parameters for call to function osal_mem_alloc
   \   00005D   7A16         MOV     R2,#0x16
   \   00005F   7B00         MOV     R3,#0x0
   \   000061   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000064   8A..         MOV     ?V4,R2
   \   000066   8B..         MOV     ?V5,R3
   \   000068   AE..         MOV     R6,?V4
   \   00006A   AF..         MOV     R7,?V5
   2411                if ( !pNwkDesc )
   \   00006C   EE           MOV     A,R6
   \   00006D   4F           ORL     A,R7
   \   00006E   7003         JNZ     $+5
   \   000070   02....       LJMP    ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
   2412                {
   2413                  // Memory alloc failed, discard this beacon
   2414                  return;
   2415                }
   2416          
   2417                // Clear the network descriptor
   2418                osal_memset( pNwkDesc, 0, sizeof(networkDesc_t)  );
   \   000073                ; Setup parameters for call to function osal_memset
   \   000073   7C16         MOV     R4,#0x16
   \   000075   7D00         MOV     R5,#0x0
   \   000077   7900         MOV     R1,#0x0
   \   000079   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   2419          
   2420                // Initialize the descriptor
   2421                pNwkDesc->chosenRouter = INVALID_NODE_ADDR;
   \   00007C   8E82         MOV     DPL,R6
   \   00007E   8F83         MOV     DPH,R7
   \   000080   A3           INC     DPTR
   \   000081   A3           INC     DPTR
   \   000082   A3           INC     DPTR
   \   000083   A3           INC     DPTR
   \   000084   A3           INC     DPTR
   \   000085   A3           INC     DPTR
   \   000086   A3           INC     DPTR
   \   000087   74FE         MOV     A,#-0x2
   \   000089   F0           MOVX    @DPTR,A
   \   00008A   A3           INC     DPTR
   \   00008B   04           INC     A
   \   00008C   12....       LCALL   ?Subroutine12 & 0xFFFF
   2422                pNwkDesc->chosenRouterDepth = 0xFF;
   \                     ??CrossCallReturnLabel_1:
   \   00008F   A3           INC     DPTR
   \   000090   A3           INC     DPTR
   \   000091   A3           INC     DPTR
   \   000092   A3           INC     DPTR
   \   000093   F0           MOVX    @DPTR,A
   2423          
   2424                // Save new entry into the descriptor list
   2425                if ( !NwkDescList )
   \   000094   90....       MOV     DPTR,#NwkDescList
   \   000097   12....       LCALL   ??Subroutine64_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   00009A   7005         JNZ     ??ZDO_beaconNotifyIndCB_6
   2426                {
   2427                  NwkDescList = pNwkDesc;
   \   00009C   90....       MOV     DPTR,#NwkDescList
   \   00009F   800B         SJMP    ??ZDO_beaconNotifyIndCB_7
   2428                }
   2429                else
   2430                {
   2431                  pLastNwkDesc->nextDesc = pNwkDesc;
   \                     ??ZDO_beaconNotifyIndCB_6:
   \   0000A1   E5..         MOV     A,?V2
   \   0000A3   2414         ADD     A,#0x14
   \   0000A5   F582         MOV     DPL,A
   \   0000A7   E4           CLR     A
   \   0000A8   35..         ADDC    A,?V3
   \   0000AA   F583         MOV     DPH,A
   \                     ??ZDO_beaconNotifyIndCB_7:
   \   0000AC   EE           MOV     A,R6
   \   0000AD   F0           MOVX    @DPTR,A
   \   0000AE   A3           INC     DPTR
   \   0000AF   EF           MOV     A,R7
   \   0000B0   F0           MOVX    @DPTR,A
   2432                }
   2433              }
   2434          
   2435              // Update the descriptor with the incoming beacon
   2436              pNwkDesc->stackProfile   = pBeacon->stackProfile;
   \                     ??ZDO_beaconNotifyIndCB_5:
   \   0000B1   85..82       MOV     DPL,?V0
   \   0000B4   85..83       MOV     DPH,?V1
   \   0000B7   A3           INC     DPTR
   \   0000B8   A3           INC     DPTR
   \   0000B9   A3           INC     DPTR
   \   0000BA   A3           INC     DPTR
   \   0000BB   A3           INC     DPTR
   \   0000BC   A3           INC     DPTR
   \   0000BD   A3           INC     DPTR
   \   0000BE   A3           INC     DPTR
   \   0000BF   A3           INC     DPTR
   \   0000C0   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   0000C3   A3           INC     DPTR
   \   0000C4   A3           INC     DPTR
   \   0000C5   A3           INC     DPTR
   \   0000C6   F0           MOVX    @DPTR,A
   2437              pNwkDesc->version        = pBeacon->protocolVersion;
   \   0000C7   E5..         MOV     A,?V0
   \   0000C9   2408         ADD     A,#0x8
   \   0000CB   F8           MOV     R0,A
   \   0000CC   E4           CLR     A
   \   0000CD   35..         ADDC    A,?V1
   \   0000CF   F9           MOV     R1,A
   \   0000D0   8882         MOV     DPL,R0
   \   0000D2   8983         MOV     DPH,R1
   \   0000D4   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   0000D7   12....       LCALL   ?Subroutine13 & 0xFFFF
   2438              pNwkDesc->logicalChannel = pBeacon->logicalChannel;
   \                     ??CrossCallReturnLabel_2:
   \   0000DA   A3           INC     DPTR
   \   0000DB   A3           INC     DPTR
   \   0000DC   E0           MOVX    A,@DPTR
   \   0000DD   8E82         MOV     DPL,R6
   \   0000DF   8F83         MOV     DPH,R7
   \   0000E1   12....       LCALL   ?Subroutine13 & 0xFFFF
   2439              pNwkDesc->panId          = pBeacon->panID;
   \                     ??CrossCallReturnLabel_3:
   \   0000E4   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   0000E7   12....       LCALL   ??Subroutine50_0 & 0xFFFF
   2440              pNwkDesc->updateId       = pBeacon->updateID;
   \                     ??CrossCallReturnLabel_65:
   \   0000EA   E5..         MOV     A,?V0
   \   0000EC   240C         ADD     A,#0xc
   \   0000EE   F582         MOV     DPL,A
   \   0000F0   E4           CLR     A
   \   0000F1   35..         ADDC    A,?V1
   \   0000F3   F583         MOV     DPH,A
   \   0000F5   E0           MOVX    A,@DPTR
   \   0000F6   C0E0         PUSH    A
   \   0000F8   EE           MOV     A,R6
   \   0000F9   2413         ADD     A,#0x13
   \   0000FB   F582         MOV     DPL,A
   \   0000FD   E4           CLR     A
   \   0000FE   3F           ADDC    A,R7
   \   0000FF   F583         MOV     DPH,A
   \   000101   D0E0         POP     A
   \   000103   F0           MOVX    @DPTR,A
   2441          
   2442              // Save the extended PAN ID from the beacon payload only if 1.1 version network
   2443              if ( pBeacon->protocolVersion != ZB_PROT_V1_0 )
   \   000104   8882         MOV     DPL,R0
   \   000106   8983         MOV     DPH,R1
   \   000108   E0           MOVX    A,@DPTR
   \   000109   6401         XRL     A,#0x1
   \   00010B   6010         JZ      ??ZDO_beaconNotifyIndCB_8
   2444              {
   2445                osal_cpyExtAddr( pNwkDesc->extendedPANID, pBeacon->extendedPanID );
   \   00010D                ; Setup parameters for call to function sAddrExtCpy
   \   00010D   E5..         MOV     A,?V0
   \   00010F   240D         ADD     A,#0xd
   \   000111   FC           MOV     R4,A
   \   000112   E4           CLR     A
   \   000113   35..         ADDC    A,?V1
   \   000115   12....       LCALL   ?Subroutine31 & 0xFFFF
   2446              }
   \                     ??CrossCallReturnLabel_79:
   \   000118   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   00011B   800C         SJMP    ??ZDO_beaconNotifyIndCB_9
   2447              else
   2448              {
   2449                osal_memset( pNwkDesc->extendedPANID, 0xFF, Z_EXTADDR_LEN );
   \                     ??ZDO_beaconNotifyIndCB_8:
   \   00011D                ; Setup parameters for call to function osal_memset
   \   00011D   7C08         MOV     R4,#0x8
   \   00011F   7D00         MOV     R5,#0x0
   \   000121   79FF         MOV     R1,#-0x1
   \   000123   12....       LCALL   ??Subroutine53_0 & 0xFFFF
   2450              }
   \                     ??CrossCallReturnLabel_77:
   \   000126   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   2451          
   2452              // check if this device is a better choice to join...
   2453              // ...dont bother checking assocPermit flag is doing a rejoin
   2454              if ( ( pBeacon->LQI > gMIN_TREE_LQI ) &&
   2455                  ( ( pBeacon->permitJoining == TRUE ) || ( _tmpRejoinState ) ) )
   \                     ??ZDO_beaconNotifyIndCB_9:
   \   000129   85..82       MOV     DPL,?V0
   \   00012C   85..83       MOV     DPH,?V1
   \   00012F   A3           INC     DPTR
   \   000130   A3           INC     DPTR
   \   000131   A3           INC     DPTR
   \   000132   A3           INC     DPTR
   \   000133   A3           INC     DPTR
   \   000134   A3           INC     DPTR
   \   000135   A3           INC     DPTR
   \   000136   A3           INC     DPTR
   \   000137   A3           INC     DPTR
   \   000138   A3           INC     DPTR
   \   000139   E0           MOVX    A,@DPTR
   \   00013A   F8           MOV     R0,A
   \   00013B   90....       MOV     DPTR,#gMIN_TREE_LQI
   \   00013E   E0           MOVX    A,@DPTR
   \   00013F   C3           CLR     C
   \   000140   98           SUBB    A,R0
   \   000141   4003         JC      $+5
   \   000143   02....       LJMP    ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
   \   000146   85..82       MOV     DPL,?V0
   \   000149   85..83       MOV     DPH,?V1
   \   00014C   A3           INC     DPTR
   \   00014D   A3           INC     DPTR
   \   00014E   A3           INC     DPTR
   \   00014F   A3           INC     DPTR
   \   000150   A3           INC     DPTR
   \   000151   E0           MOVX    A,@DPTR
   \   000152   6401         XRL     A,#0x1
   \   000154   6009         JZ      ??ZDO_beaconNotifyIndCB_10
   \   000156   90....       MOV     DPTR,#_tmpRejoinState
   \   000159   E0           MOVX    A,@DPTR
   \   00015A   7003         JNZ     $+5
   \   00015C   02....       LJMP    ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
   2456              {
   2457                uint8 selected = FALSE;
   \                     ??ZDO_beaconNotifyIndCB_10:
   \   00015F   7800         MOV     R0,#0x0
   2458                uint8 capacity = FALSE;
   2459          
   2460                if ( _NIB.nwkAddrAlloc == NWK_ADDRESSING_STOCHASTIC )
   \   000161   90....       MOV     DPTR,#_NIB + 96
   \   000164   E0           MOVX    A,@DPTR
   \   000165   6402         XRL     A,#0x2
   \   000167   704B         JNZ     ??ZDO_beaconNotifyIndCB_11
   2461                {
   2462                  if ( ((pBeacon->LQI   > pNwkDesc->chosenRouterLinkQuality) &&
   2463                        (pBeacon->depth < MAX_NODE_DEPTH)) ||
   2464                      ((pBeacon->LQI   == pNwkDesc->chosenRouterLinkQuality) &&
   2465                       (pBeacon->depth < pNwkDesc->chosenRouterDepth)) )
   \   000169   85..82       MOV     DPL,?V0
   \   00016C   85..83       MOV     DPH,?V1
   \   00016F   A3           INC     DPTR
   \   000170   A3           INC     DPTR
   \   000171   A3           INC     DPTR
   \   000172   A3           INC     DPTR
   \   000173   A3           INC     DPTR
   \   000174   A3           INC     DPTR
   \   000175   A3           INC     DPTR
   \   000176   A3           INC     DPTR
   \   000177   12....       LCALL   ?Subroutine41 & 0xFFFF
   2466                  {
   2467                    selected = TRUE;
   2468                  }
   2469                }
   \                     ??CrossCallReturnLabel_76:
   \   00017A   A3           INC     DPTR
   \   00017B   A3           INC     DPTR
   \   00017C   A3           INC     DPTR
   \   00017D   A3           INC     DPTR
   \   00017E   A3           INC     DPTR
   \   00017F   A3           INC     DPTR
   \   000180   A3           INC     DPTR
   \   000181   A3           INC     DPTR
   \   000182   A3           INC     DPTR
   \   000183   E0           MOVX    A,@DPTR
   \   000184   C3           CLR     C
   \   000185   99           SUBB    A,R1
   \   000186   5009         JNC     ??ZDO_beaconNotifyIndCB_12
   \   000188   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   00018B   9414         SUBB    A,#0x14
   \   00018D   403B         JC      ??ZDO_beaconNotifyIndCB_13
   \   00018F   803B         SJMP    ??ZDO_beaconNotifyIndCB_14
   \                     ??ZDO_beaconNotifyIndCB_12:
   \   000191   85..82       MOV     DPL,?V0
   \   000194   85..83       MOV     DPH,?V1
   \   000197   A3           INC     DPTR
   \   000198   A3           INC     DPTR
   \   000199   A3           INC     DPTR
   \   00019A   A3           INC     DPTR
   \   00019B   A3           INC     DPTR
   \   00019C   A3           INC     DPTR
   \   00019D   A3           INC     DPTR
   \   00019E   A3           INC     DPTR
   \   00019F   A3           INC     DPTR
   \   0001A0   A3           INC     DPTR
   \   0001A1   E0           MOVX    A,@DPTR
   \   0001A2   F8           MOV     R0,A
   \   0001A3   8E82         MOV     DPL,R6
   \   0001A5   8F83         MOV     DPH,R7
   \   0001A7   A3           INC     DPTR
   \   0001A8   A3           INC     DPTR
   \   0001A9   A3           INC     DPTR
   \   0001AA   A3           INC     DPTR
   \   0001AB   A3           INC     DPTR
   \   0001AC   A3           INC     DPTR
   \   0001AD   A3           INC     DPTR
   \   0001AE   A3           INC     DPTR
   \   0001AF   A3           INC     DPTR
   \   0001B0   E0           MOVX    A,@DPTR
   \   0001B1   68           XRL     A,R0
   \   0001B2   7055         JNZ     ??ZDO_beaconNotifyIndCB_15
   2470                else
   2471                {
   2472                  if ( pBeacon->depth < pNwkDesc->chosenRouterDepth )
   \                     ??ZDO_beaconNotifyIndCB_11:
   \   0001B4   8E82         MOV     DPL,R6
   \   0001B6   8F83         MOV     DPH,R7
   \   0001B8   A3           INC     DPTR
   \   0001B9   A3           INC     DPTR
   \   0001BA   A3           INC     DPTR
   \   0001BB   A3           INC     DPTR
   \   0001BC   A3           INC     DPTR
   \   0001BD   A3           INC     DPTR
   \   0001BE   A3           INC     DPTR
   \   0001BF   A3           INC     DPTR
   \   0001C0   A3           INC     DPTR
   \   0001C1   A3           INC     DPTR
   \   0001C2   E0           MOVX    A,@DPTR
   \   0001C3   F8           MOV     R0,A
   \   0001C4   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   0001C7   98           SUBB    A,R0
   \   0001C8   503F         JNC     ??ZDO_beaconNotifyIndCB_15
   2473                  {
   2474                    selected = TRUE;
   \                     ??ZDO_beaconNotifyIndCB_13:
   \   0001CA   7801         MOV     R0,#0x1
   2475                  }
   2476                }
   2477          
   2478                if ( ZSTACK_ROUTER_BUILD )
   2479                {
   2480                  capacity = pBeacon->routerCapacity;
   2481                }
   2482                else if ( ZSTACK_END_DEVICE_BUILD )
   2483                {
   2484                  capacity = pBeacon->deviceCapacity;
   2485                }
   2486          
   2487                if ( (capacity) && (selected) )
   \                     ??ZDO_beaconNotifyIndCB_14:
   \   0001CC   85..82       MOV     DPL,?V0
   \   0001CF   85..83       MOV     DPH,?V1
   \   0001D2   A3           INC     DPTR
   \   0001D3   A3           INC     DPTR
   \   0001D4   A3           INC     DPTR
   \   0001D5   A3           INC     DPTR
   \   0001D6   A3           INC     DPTR
   \   0001D7   A3           INC     DPTR
   \   0001D8   A3           INC     DPTR
   \   0001D9   E0           MOVX    A,@DPTR
   \   0001DA   6048         JZ      ??ZDO_beaconNotifyIndCB_16
   \   0001DC   E8           MOV     A,R0
   \   0001DD   A2E0         MOV     C,0xE0 /* A   */.0
   \   0001DF   5038         JNC     ??ZDO_beaconNotifyIndCB_17
   2488                {
   2489                  // this is the new chosen router for joining...
   2490                  pNwkDesc->chosenRouter            = pBeacon->sourceAddr;
   \   0001E1   85..82       MOV     DPL,?V0
   \   0001E4   85..83       MOV     DPH,?V1
   \   0001E7   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   0001EA   12....       LCALL   ?Subroutine11 & 0xFFFF
   2491                  pNwkDesc->chosenRouterLinkQuality = pBeacon->LQI;
   \                     ??CrossCallReturnLabel_96:
   \   0001ED   85..82       MOV     DPL,?V0
   \   0001F0   85..83       MOV     DPH,?V1
   \   0001F3   A3           INC     DPTR
   \   0001F4   A3           INC     DPTR
   \   0001F5   A3           INC     DPTR
   \   0001F6   A3           INC     DPTR
   \   0001F7   A3           INC     DPTR
   \   0001F8   A3           INC     DPTR
   \   0001F9   A3           INC     DPTR
   \   0001FA   A3           INC     DPTR
   \   0001FB   A3           INC     DPTR
   \   0001FC   A3           INC     DPTR
   \   0001FD   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000200   F0           MOVX    @DPTR,A
   2492                  pNwkDesc->chosenRouterDepth       = pBeacon->depth;
   \   000201   12....       LCALL   ?Subroutine45 & 0xFFFF
   2493                }
   \                     ??CrossCallReturnLabel_55:
   \   000204   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000207   A3           INC     DPTR
   \   000208   F0           MOVX    @DPTR,A
   2494          
   2495                if ( pBeacon->deviceCapacity )
   \                     ??ZDO_beaconNotifyIndCB_15:
   \   000209   85..82       MOV     DPL,?V0
   \   00020C   85..83       MOV     DPH,?V1
   \   00020F   A3           INC     DPTR
   \   000210   A3           INC     DPTR
   \   000211   A3           INC     DPTR
   \   000212   A3           INC     DPTR
   \   000213   A3           INC     DPTR
   \   000214   A3           INC     DPTR
   \   000215   A3           INC     DPTR
   \   000216   E0           MOVX    A,@DPTR
   \   000217   600B         JZ      ??ZDO_beaconNotifyIndCB_16
   2496                  pNwkDesc->deviceCapacity = 1;
   \                     ??ZDO_beaconNotifyIndCB_17:
   \   000219   8E82         MOV     DPL,R6
   \   00021B   8F83         MOV     DPH,R7
   \   00021D   A3           INC     DPTR
   \   00021E   A3           INC     DPTR
   \   00021F   A3           INC     DPTR
   \   000220   A3           INC     DPTR
   \   000221   7401         MOV     A,#0x1
   \   000223   F0           MOVX    @DPTR,A
   2497          
   2498                if ( pBeacon->routerCapacity )
   \                     ??ZDO_beaconNotifyIndCB_16:
   \   000224   85..82       MOV     DPL,?V0
   \   000227   85..83       MOV     DPH,?V1
   \   00022A   A3           INC     DPTR
   \   00022B   A3           INC     DPTR
   \   00022C   A3           INC     DPTR
   \   00022D   A3           INC     DPTR
   \   00022E   A3           INC     DPTR
   \   00022F   A3           INC     DPTR
   \   000230   E0           MOVX    A,@DPTR
   \   000231   600A         JZ      ??ZDO_beaconNotifyIndCB_1
   2499                  pNwkDesc->routerCapacity = 1;
   \   000233   8E82         MOV     DPL,R6
   \   000235   8F83         MOV     DPH,R7
   \   000237   A3           INC     DPTR
   \   000238   A3           INC     DPTR
   \   000239   A3           INC     DPTR
   \   00023A   7401         MOV     A,#0x1
   \   00023C   F0           MOVX    @DPTR,A
   2500              }
   2501            }
   2502          }
   \                     ??ZDO_beaconNotifyIndCB_1:
   \   00023D   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   12....       LCALL   ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   C3           CLR     C
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   E5..         MOV     A,?V0
   \   000002   240B         ADD     A,#0xb
   \   000004   F582         MOV     DPL,A
   \   000006   E4           CLR     A
   \   000007   35..         ADDC    A,?V1
   \   000009   F583         MOV     DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   12....       LCALL   ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   12....       LCALL   ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   F0           MOVX    @DPTR,A
   \   000003   85..82       MOV     DPL,?V0
   \   000006   85..83       MOV     DPH,?V1
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   12....       LCALL   ??Subroutine52_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003                REQUIRE ??Subroutine59_0
   \   000003                ; // Fall through to label ??Subroutine59_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine59_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004                REQUIRE ??Subroutine60_0
   \   000004                ; // Fall through to label ??Subroutine60_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   8E82         MOV     DPL,R6
   \   000007   8F83         MOV     DPH,R7
   \   000009   22           RET
   2503          
   2504          /*********************************************************************
   2505           * @fn          ZDO_StartRouterConfirmCB
   2506           *
   2507           * @brief       This function reports the results of the request to
   2508           *              start functioning as a router in a network.
   2509           *
   2510           * @param       Status - Result of NLME_StartRouterRequest()
   2511           *
   2512           * @return      none
   2513           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2514          void ZDO_StartRouterConfirmCB( ZStatus_t Status )
   \                     ZDO_StartRouterConfirmCB:
   2515          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   2516            nwkStatus = (byte)Status;
   \   000006   90....       MOV     DPTR,#nwkStatus
   \   000009   F0           MOVX    @DPTR,A
   2517          
   2518            if ( Status == ZSUCCESS )
   \   00000A   7019         JNZ     ??ZDO_StartRouterConfirmCB_0
   2519            {
   2520              // LED on shows Router started
   2521              HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
   \   00000C                ; Setup parameters for call to function HalLedSet
   \   00000C   7A01         MOV     R2,#0x1
   \   00000E   7904         MOV     R1,#0x4
   \   000010   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   2522              // LED off forgets HOLD_AUTO_START
   2523              HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF);
   \   000013                ; Setup parameters for call to function HalLedSet
   \   000013   7A00         MOV     R2,#0x0
   \   000015   7908         MOV     R1,#0x8
   \   000017   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   2524              if ( devState == DEV_HOLD )
   \   00001A   90....       MOV     DPTR,#devState
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   700C         JNZ     ??ZDO_StartRouterConfirmCB_1
   2525              {
   2526                // Began with HOLD_AUTO_START
   2527                devState = DEV_END_DEVICE;
   \   000020   7406         MOV     A,#0x6
   \   000022   F0           MOVX    @DPTR,A
   \   000023   8007         SJMP    ??ZDO_StartRouterConfirmCB_1
   2528              }
   2529            }
   2530          #if defined(BLINK_LEDS)
   2531            else
   2532            {
   2533              HalLedSet( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
   \                     ??ZDO_StartRouterConfirmCB_0:
   \   000025                ; Setup parameters for call to function HalLedSet
   \   000025   7A04         MOV     R2,#0x4
   \   000027   7904         MOV     R1,#0x4
   \   000029   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   2534            }
   2535          #endif
   2536          
   2537            osal_set_event( ZDAppTaskID, ZDO_ROUTER_START );
   \                     ??ZDO_StartRouterConfirmCB_1:
   \   00002C                ; Setup parameters for call to function osal_set_event
   \   00002C   7A20         MOV     R2,#0x20
   \   00002E   02....       LJMP    ?Subroutine0 & 0xFFFF
   2538          }
   2539          
   2540          /*********************************************************************
   2541           * @fn          ZDO_JoinConfirmCB
   2542           *
   2543           * @brief       This function allows the next higher layer to be notified
   2544           *              of the results of its request to join itself or another
   2545           *              device to a network.
   2546           *
   2547           * @param       Status - Result of NLME_JoinRequest()
   2548           *
   2549           * @return      none
   2550           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2551          void ZDO_JoinConfirmCB( uint16 PanId, ZStatus_t Status )
   \                     ZDO_JoinConfirmCB:
   2552          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0,R1
   2553            (void)PanId;  // remove if this parameter is used.
   2554          
   2555            nwkStatus = (byte)Status;
   \   00000C   E9           MOV     A,R1
   \   00000D   90....       MOV     DPTR,#nwkStatus
   \   000010   F0           MOVX    @DPTR,A
   2556          
   2557            if ( Status == ZSUCCESS )
   \   000011   707E         JNZ     ??ZDO_JoinConfirmCB_0
   2558            {
   2559              if ( ZSTACK_END_DEVICE_BUILD
   2560                || (ZSTACK_ROUTER_BUILD && ((_NIB.CapabilityFlags & ZMAC_ASSOC_CAPINFO_FFD_TYPE) == 0)))
   2561              {
   2562                neighborEntry_t *pItem;
   2563           
   2564                // We don't need the neighbor table entries.  
   2565                // Clear the neighbor Table to remove beacon information
   2566                nwkNeighborInitTable();
   \   000013                ; Setup parameters for call to function nwkNeighborInitTable
   \   000013   12....       LCALL   `??nwkNeighborInitTable::?relay`; Banked call to: nwkNeighborInitTable
   2567           
   2568                // Force a neighbor table entry for the parent
   2569                pItem = nwkNeighborFindEmptySlot();
   \   000016                ; Setup parameters for call to function nwkNeighborFindEmptySlot
   \   000016   12....       LCALL   `??nwkNeighborFindEmptySlot::?relay`; Banked call to: nwkNeighborFindEmptySlot
   \   000019   8A..         MOV     ?V2,R2
   \   00001B   8B..         MOV     ?V3,R3
   \   00001D   AE..         MOV     R6,?V2
   \   00001F   AF..         MOV     R7,?V3
   2570                if ( pItem != NULL )
   \   000021   EE           MOV     A,R6
   \   000022   4F           ORL     A,R7
   \   000023   6053         JZ      ??ZDO_JoinConfirmCB_1
   2571                {
   2572                  osal_memset( pItem, 0x00, sizeof ( neighborEntry_t  )  );
   \   000025                ; Setup parameters for call to function osal_memset
   \   000025   7C17         MOV     R4,#0x17
   \   000027   7D00         MOV     R5,#0x0
   \   000029   7900         MOV     R1,#0x0
   \   00002B   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   2573                  pItem->neighborAddress = _NIB.nwkCoordAddress;
   \   00002E   90....       MOV     DPTR,#_NIB + 23
   \   000031   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000034   12....       LCALL   ??Subroutine60_0 & 0xFFFF
   2574                  osal_cpyExtAddr( pItem ->neighborExtAddr, _NIB. nwkCoordExtAddress );
   \                     ??CrossCallReturnLabel_92:
   \   000037                ; Setup parameters for call to function sAddrExtCpy
   \   000037   7C..         MOV     R4,#(_NIB + 25) & 0xff
   \   000039   7D..         MOV     R5,#((_NIB + 25) >> 8) & 0xff
   \   00003B   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   00003E   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2575                  pItem->panId = _NIB. nwkPanId;
   \   000041   90....       MOV     DPTR,#_NIB + 33
   \   000044   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000047   A3           INC     DPTR
   \   000048   A3           INC     DPTR
   \   000049   A3           INC     DPTR
   \   00004A   12....       LCALL   ?Subroutine11 & 0xFFFF
   2576                  pItem->linkInfo.rxLqi = DEF_LQI;
   \                     ??CrossCallReturnLabel_97:
   \   00004D   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   000050   74AA         MOV     A,#-0x56
   \   000052   F0           MOVX    @DPTR,A
   2577                  pItem->linkInfo.txCounter = DEF_LINK_COUNTER;
   \   000053   90....       MOV     DPTR,#gLINK_DOWN_TRIGGER
   \   000056   E4           CLR     A
   \   000057   93           MOVC    A,@A+DPTR
   \   000058   7900         MOV     R1,#0x0
   \   00005A   2401         ADD     A,#0x1
   \   00005C   F8           MOV     R0,A
   \   00005D   5001         JNC     ??ZDO_JoinConfirmCB_2
   \   00005F   09           INC     R1
   \                     ??ZDO_JoinConfirmCB_2:
   \   000060   7A02         MOV     R2,#0x2
   \   000062   7B00         MOV     R3,#0x0
   \   000064   12....       LCALL   ?S_DIV_MOD
   \   000067   EE           MOV     A,R6
   \   000068   240D         ADD     A,#0xd
   \   00006A   F582         MOV     DPL,A
   \   00006C   E4           CLR     A
   \   00006D   3F           ADDC    A,R7
   \   00006E   F583         MOV     DPH,A
   \   000070   E8           MOV     A,R0
   \   000071   F0           MOVX    @DPTR,A
   2578                  pItem->linkInfo.txCost = DEF_LINK_COST;
   \   000072   12....       LCALL   ?Subroutine38 & 0xFFFF
   2579                }
   2580              }
   \                     ??CrossCallReturnLabel_43:
   \   000075   7401         MOV     A,#0x1
   \   000077   F0           MOVX    @DPTR,A
   2581              
   2582              // LED on shows device joined
   2583              HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
   \                     ??ZDO_JoinConfirmCB_1:
   \   000078                ; Setup parameters for call to function HalLedSet
   \   000078   7A01         MOV     R2,#0x1
   \   00007A   7904         MOV     R1,#0x4
   \   00007C   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   2584              // LED off forgets HOLD_AUTO_START
   2585              HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF);
   \   00007F                ; Setup parameters for call to function HalLedSet
   \   00007F   7A00         MOV     R2,#0x0
   \   000081   7908         MOV     R1,#0x8
   \   000083   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   2586              if ( (devState == DEV_HOLD) )
   \   000086   90....       MOV     DPTR,#devState
   \   000089   E0           MOVX    A,@DPTR
   \   00008A   700C         JNZ     ??ZDO_JoinConfirmCB_3
   2587              {
   2588                // Began with HOLD_AUTO_START
   2589                devState = DEV_NWK_JOINING;
   \   00008C   7403         MOV     A,#0x3
   \   00008E   F0           MOVX    @DPTR,A
   \   00008F   8007         SJMP    ??ZDO_JoinConfirmCB_3
   2590              }
   2591          
   2592              if ( !ZG_SECURE_ENABLED )
   2593              {
   2594                // Notify to save info into NV
   2595                ZDApp_NVUpdate();
   2596              }
   2597            }
   2598            else
   2599            {
   2600          #if defined(BLINK_LEDS)
   2601              HalLedSet ( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
   \                     ??ZDO_JoinConfirmCB_0:
   \   000091                ; Setup parameters for call to function HalLedSet
   \   000091   7A04         MOV     R2,#0x4
   \   000093   7904         MOV     R1,#0x4
   \   000095   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   2602          #endif
   2603            }
   2604          
   2605            // Pass the join confirm to higher layer if callback registered
   2606            if (zdoCBFunc[ZDO_JOIN_CNF_CBID] != NULL )
   \                     ??ZDO_JoinConfirmCB_3:
   \   000098   90....       MOV     DPTR,#zdoCBFunc + 8
   \   00009B   12....       LCALL   ??Subroutine64_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_111:
   \   00009E   6035         JZ      ??ZDO_JoinConfirmCB_4
   2607            {
   2608              zdoJoinCnf_t joinCnf;
   2609          
   2610              joinCnf.status = Status;
   \   0000A0   85..82       MOV     DPL,?XSP + 0
   \   0000A3   85..83       MOV     DPH,?XSP + 1
   \   0000A6   E5..         MOV     A,?V0
   \   0000A8   F0           MOVX    @DPTR,A
   2611              joinCnf.deviceAddr = _NIB.nwkDevAddress;
   \   0000A9   90....       MOV     DPTR,#_NIB + 20
   \   0000AC   12....       LCALL   ??Subroutine58_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   0000AF   7401         MOV     A,#0x1
   \   0000B1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B4   12....       LCALL   ??Subroutine60_0 & 0xFFFF
   2612              joinCnf.parentAddr = _NIB.nwkCoordAddress;
   \                     ??CrossCallReturnLabel_93:
   \   0000B7   90....       MOV     DPTR,#_NIB + 23
   \   0000BA   12....       LCALL   ??Subroutine58_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   0000BD   7403         MOV     A,#0x3
   \   0000BF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C2   12....       LCALL   ??Subroutine60_0 & 0xFFFF
   2613          
   2614              zdoCBFunc[ZDO_JOIN_CNF_CBID]( (void*)&joinCnf );
   \                     ??CrossCallReturnLabel_94:
   \   0000C5                ; Setup parameters for indirect call
   \   0000C5   AA..         MOV     R2,?XSP + 0
   \   0000C7   AB..         MOV     R3,?XSP + 1
   \   0000C9   90....       MOV     DPTR,#zdoCBFunc + 8
   \   0000CC   E0           MOVX    A,@DPTR
   \   0000CD   F8           MOV     R0,A
   \   0000CE   A3           INC     DPTR
   \   0000CF   12....       LCALL   ??Subroutine65_0 & 0xFFFF
   2615            }
   \                     ??CrossCallReturnLabel_126:
   \   0000D2   12....       LCALL   ?CALL_IND
   2616          
   2617            // Notify ZDApp
   2618            ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_JOIN_IND, sizeof(osal_event_hdr_t), (byte*)NULL );
   \                     ??ZDO_JoinConfirmCB_4:
   \   0000D5                ; Setup parameters for call to function ZDApp_SendMsg
   \   0000D5   7C00         MOV     R4,#0x0
   \   0000D7   7D00         MOV     R5,#0x0
   \   0000D9   7B02         MOV     R3,#0x2
   \   0000DB   7A02         MOV     R2,#0x2
   \   0000DD   90....       MOV     DPTR,#ZDAppTaskID
   \   0000E0   E0           MOVX    A,@DPTR
   \   0000E1   F9           MOV     R1,A
   \   0000E2   12....       LCALL   `??ZDApp_SendMsg::?relay`; Banked call to: ZDApp_SendMsg
   2619          
   2620          }
   \   0000E5   7405         MOV     A,#0x5
   \   0000E7   02....       LJMP    ?Subroutine4 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   EE           MOV     A,R6
   \   000001   2402         ADD     A,#0x2
   \   000003   FA           MOV     R2,A
   \   000004   E4           CLR     A
   \   000005   3F           ADDC    A,R7
   \   000006   FB           MOV     R3,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   EE           MOV     A,R6
   \   000001   240E         ADD     A,#0xe
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   EE           MOV     A,R6
   \   000001   240F         ADD     A,#0xf
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET
   2621          
   2622          /*********************************************************************
   2623           * @fn          ZDO_PermitJoinCB
   2624           *
   2625           * @brief      This function is called when there is a change in the
   2626           *             device's permit join status.
   2627           *
   2628           * @param       duration - the new duration
   2629           *
   2630           * @return      none
   2631           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2632          void ZDO_PermitJoinCB( uint8 duration )
   \                     ZDO_PermitJoinCB:
   2633          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 1
   \   000004   74FF         MOV     A,#-0x1
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
   \   000009   E9           MOV     A,R1
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   F0           MOVX    @DPTR,A
   2634            // Pass the Permit Join status to higher layer if callback registered
   2635            if (zdoCBFunc[ZDO_PERMIT_JOIN_CBID] != NULL )
   \   000011   90....       MOV     DPTR,#zdoCBFunc + 14
   \   000014   12....       LCALL   ??Subroutine64_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_112:
   \   000017   6006         JZ      ??ZDO_PermitJoinCB_0
   2636            {
   2637              zdoCBFunc[ZDO_PERMIT_JOIN_CBID]( (void*)&duration );
   \   000019                ; Setup parameters for indirect call
   \   000019   12....       LCALL   ?Subroutine19 & 0xFFFF
   2638            }
   \                     ??CrossCallReturnLabel_131:
   \   00001C   12....       LCALL   ?CALL_IND
   2639          }
   \                     ??ZDO_PermitJoinCB_0:
   \   00001F   7401         MOV     A,#0x1
   \   000021   02....       LJMP    ?Subroutine3 & 0xFFFF
   2640          
   2641          /*********************************************************************
   2642           * @fn          ZDO_AddrChangeIndicationCB
   2643           *
   2644           * @brief       This function notifies the application that this
   2645           *              device's address has changed.  Could happen in
   2646           *              a network with stochastic addressing (PRO).
   2647           *
   2648           * @param       newAddr - the new address
   2649           *
   2650           * @return      none
   2651           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2652          void ZDO_AddrChangeIndicationCB( uint16 newAddr )
   \                     ZDO_AddrChangeIndicationCB:
   2653          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   2654            ZDO_AddrChangeInd_t *pZDOAddrChangeMsg;
   2655            epList_t *pItem = epList;
   \   000009   90....       MOV     DPTR,#epList
   \   00000C   12....       LCALL   ??Subroutine61_0 & 0xFFFF
   2656          
   2657            // Notify to save info into NV
   2658            ZDApp_NVUpdate();
   2659          
   2660            // Notify the applications
   2661            osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \                     ??CrossCallReturnLabel_99:
   \   00000F                ; Setup parameters for call to function osal_set_event
   \   00000F   7A10         MOV     R2,#0x10
   \   000011   7B00         MOV     R3,#0x0
   \   000013   90....       MOV     DPTR,#ZDAppTaskID
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F9           MOV     R1,A
   \   000018   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   00001B   803B         SJMP    ??ZDO_AddrChangeIndicationCB_0
   2662          
   2663            while (pItem != NULL)
   2664            {
   2665              if (pItem->epDesc->endPoint != ZDO_EP)
   \                     ??ZDO_AddrChangeIndicationCB_1:
   \   00001D   8E82         MOV     DPL,R6
   \   00001F   8F83         MOV     DPH,R7
   \   000021   A3           INC     DPTR
   \   000022   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   000025   602A         JZ      ??ZDO_AddrChangeIndicationCB_2
   2666              {
   2667                pZDOAddrChangeMsg = (ZDO_AddrChangeInd_t *)osal_msg_allocate( sizeof( ZDO_AddrChangeInd_t ) );
   \   000027                ; Setup parameters for call to function osal_msg_allocate
   \   000027   7A04         MOV     R2,#0x4
   \   000029   7B00         MOV     R3,#0x0
   \   00002B   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   2668                if (pZDOAddrChangeMsg != NULL)
   \   00002E   EA           MOV     A,R2
   \   00002F   4B           ORL     A,R3
   \   000030   601F         JZ      ??ZDO_AddrChangeIndicationCB_2
   2669                {
   2670                  pZDOAddrChangeMsg->hdr.event = ZDO_ADDR_CHANGE_IND;
   \   000032   8A82         MOV     DPL,R2
   \   000034   8B83         MOV     DPH,R3
   \   000036   74D6         MOV     A,#-0x2a
   \   000038   F0           MOVX    @DPTR,A
   2671                  pZDOAddrChangeMsg->shortAddr = newAddr;
   \   000039   A3           INC     DPTR
   \   00003A   A3           INC     DPTR
   \   00003B   E5..         MOV     A,?V0
   \   00003D   F0           MOVX    @DPTR,A
   \   00003E   A3           INC     DPTR
   \   00003F   E5..         MOV     A,?V1
   \   000041   12....       LCALL   ?Subroutine39 & 0xFFFF
   2672                  osal_msg_send( *(pItem->epDesc->task_id), (uint8 *)pZDOAddrChangeMsg );
   2673                }
   2674              }
   \                     ??CrossCallReturnLabel_46:
   \   000044   E0           MOVX    A,@DPTR
   \   000045   F8           MOV     R0,A
   \   000046   A3           INC     DPTR
   \   000047   12....       LCALL   ??Subroutine65_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_127:
   \   00004A   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   00004D   F9           MOV     R1,A
   \   00004E   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   2675              pItem = pItem->nextDesc;
   \                     ??ZDO_AddrChangeIndicationCB_2:
   \   000051   12....       LCALL   ?Subroutine21 & 0xFFFF
   2676            }
   \                     ??CrossCallReturnLabel_87:
   \   000054   E8           MOV     A,R0
   \   000055   FE           MOV     R6,A
   \   000056   E9           MOV     A,R1
   \   000057   FF           MOV     R7,A
   \                     ??ZDO_AddrChangeIndicationCB_0:
   \   000058   EE           MOV     A,R6
   \   000059   4F           ORL     A,R7
   \   00005A   70C1         JNZ     ??ZDO_AddrChangeIndicationCB_1
   2677          
   2678            // Send out a device announce
   2679            ZDApp_AnnounceNewAddress();
   \   00005C                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   00005C   12....       LCALL   `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
   2680          }
   \   00005F   02....       LJMP    ??Subroutine66_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine62_0
   \   000001                ; // Fall through to label ??Subroutine62_0
   2681          
   2682          /*********************************************************************
   2683           * @fn          ZDO_JoinIndicationCB
   2684           *
   2685           * @brief       This function allows the next higher layer of a
   2686           *              coordinator to be notified of a remote join request.
   2687           *
   2688           * @param       ShortAddress - 16-bit address
   2689           * @param       ExtendedAddress - IEEE (64-bit) address
   2690           * @param       CapabilityFlags - Association Capability Flags
   2691           * @param       type - of joining -
   2692           *                          NWK_ASSOC_JOIN
   2693           *                          NWK_ASSOC_REJOIN_UNSECURE
   2694           *                          NWK_ASSOC_REJOIN_SECURE
   2695           *
   2696           * @return      ZStatus_t
   2697           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2698          ZStatus_t ZDO_JoinIndicationCB(uint16 ShortAddress, uint8 *ExtendedAddress,
   \                     ZDO_JoinIndicationCB:
   2699                                          uint8 CapabilityFlags, uint8 type)
   2700          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   \   000009   7410         MOV     A,#0x10
   \   00000B   12....       LCALL   ?XSTACK_DISP0_8
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   F8           MOV     R0,A
   2701            (void)ExtendedAddress;
   2702          #if ZDO_NV_SAVE_RFDs
   2703            (void)CapabilityFlags;
   2704          
   2705          #else  // if !ZDO_NV_SAVE_RFDs
   2706            if (CapabilityFlags & CAPINFO_DEVICETYPE_FFD)
   2707          #endif
   2708            {
   2709              ZDApp_NVUpdate();  // Notify to save info into NV.
   2710            }
   2711          
   2712            if (ZG_SECURE_ENABLED)  // Send notification to TC of new device.
   2713            {
   2714              if ( type == NWK_ASSOC_JOIN ||
   2715                   type == NWK_ASSOC_REJOIN_UNSECURE ||
   2716                   type == NWK_ASSOC_REJOIN_SECURE )
   \   000010   600D         JZ      ??ZDO_JoinIndicationCB_0
   \   000012   7401         MOV     A,#0x1
   \   000014   68           XRL     A,R0
   \   000015   6008         JZ      ??ZDO_JoinIndicationCB_0
   \   000017   7402         MOV     A,#0x2
   \   000019   68           XRL     A,R0
   \   00001A   6003         JZ      $+5
   \   00001C   02....       LJMP    ??ZDO_JoinIndicationCB_1 & 0xFFFF
   2717              {
   2718                uint16 timeToFire;
   2719                ZDAppNewDevice_t *pNewDevice, *pDeviceList;
   2720          
   2721                pNewDevice = (ZDAppNewDevice_t *) osal_mem_alloc( sizeof(ZDAppNewDevice_t) );
   \                     ??ZDO_JoinIndicationCB_0:
   \   00001F                ; Setup parameters for call to function osal_mem_alloc
   \   00001F   7A06         MOV     R2,#0x6
   \   000021   7B00         MOV     R3,#0x0
   \   000023   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000026   8A..         MOV     ?V2,R2
   \   000028   8B..         MOV     ?V3,R3
   \   00002A   AE..         MOV     R6,?V2
   \   00002C   AF..         MOV     R7,?V3
   2722          
   2723                if ( pNewDevice == NULL )
   \   00002E   EE           MOV     A,R6
   \   00002F   4F           ORL     A,R7
   \   000030   7005         JNZ     ??ZDO_JoinIndicationCB_2
   2724                {
   2725                  // Memory alloc failed
   2726                  return ZMemError;
   \   000032   7910         MOV     R1,#0x10
   \   000034   02....       LJMP    ??ZDO_JoinIndicationCB_3 & 0xFFFF
   2727                }
   2728          
   2729                // Add the new device to the New Device List
   2730                if ( ZDApp_NewDeviceList == NULL )
   \                     ??ZDO_JoinIndicationCB_2:
   \   000037   90....       MOV     DPTR,#ZDApp_NewDeviceList
   \   00003A   12....       LCALL   ??Subroutine64_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_113:
   \   00003D   90....       MOV     DPTR,#ZDApp_NewDeviceList
   \   000040   7006         JNZ     ??ZDO_JoinIndicationCB_4
   2731                {
   2732                  // The list is empty, add the first element
   2733                  ZDApp_NewDeviceList = pNewDevice;
   \   000042   EE           MOV     A,R6
   \   000043   F0           MOVX    @DPTR,A
   \   000044   A3           INC     DPTR
   \   000045   EF           MOV     A,R7
   \   000046   801F         SJMP    ??ZDO_JoinIndicationCB_5
   2734                }
   2735                else
   2736                {
   2737                  pDeviceList = ZDApp_NewDeviceList;
   \                     ??ZDO_JoinIndicationCB_4:
   \   000048   E0           MOVX    A,@DPTR
   \   000049   FA           MOV     R2,A
   \   00004A   A3           INC     DPTR
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   8003         SJMP    ??ZDO_JoinIndicationCB_6
   2738          
   2739                  // Walk the list to last element
   2740                  while ( pDeviceList->next )
   2741                  {
   2742                    pDeviceList = (ZDAppNewDevice_t *) pDeviceList->next;
   \                     ??ZDO_JoinIndicationCB_7:
   \   00004E   E8           MOV     A,R0
   \   00004F   FA           MOV     R2,A
   \   000050   E9           MOV     A,R1
   \                     ??ZDO_JoinIndicationCB_6:
   \   000051   FB           MOV     R3,A
   2743                  }
   \   000052   8A82         MOV     DPL,R2
   \   000054   8B83         MOV     DPH,R3
   \   000056   12....       LCALL   ??Subroutine64_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   000059   70F3         JNZ     ??ZDO_JoinIndicationCB_7
   2744          
   2745                  // Add new device at the end
   2746                  pDeviceList->next = pNewDevice;
   \   00005B   EE           MOV     A,R6
   \   00005C   F8           MOV     R0,A
   \   00005D   EF           MOV     A,R7
   \   00005E   F9           MOV     R1,A
   \   00005F   8A82         MOV     DPL,R2
   \   000061   8B83         MOV     DPH,R3
   \   000063   E8           MOV     A,R0
   \   000064   F0           MOVX    @DPTR,A
   \   000065   A3           INC     DPTR
   \   000066   E9           MOV     A,R1
   \                     ??ZDO_JoinIndicationCB_5:
   \   000067   F0           MOVX    @DPTR,A
   2747                }
   2748          
   2749                // get the remaining time of the timer
   2750                timeToFire = osal_get_timeoutEx( ZDAppTaskID, ZDO_NEW_DEVICE );
   \   000068                ; Setup parameters for call to function osal_get_timeoutEx
   \   000068   7A40         MOV     R2,#0x40
   \   00006A   7B00         MOV     R3,#0x0
   \   00006C   90....       MOV     DPTR,#ZDAppTaskID
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   F9           MOV     R1,A
   \   000071   12....       LCALL   `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   \   000074   8A..         MOV     ?V4,R2
   \   000076   8B..         MOV     ?V5,R3
   2751          
   2752                pNewDevice->next = NULL;
   \   000078   8E82         MOV     DPL,R6
   \   00007A   8F83         MOV     DPH,R7
   \   00007C   E4           CLR     A
   \   00007D   F0           MOVX    @DPTR,A
   \   00007E   A3           INC     DPTR
   \   00007F   12....       LCALL   ?Subroutine39 & 0xFFFF
   2753                pNewDevice->shortAddr = ShortAddress;
   \                     ??CrossCallReturnLabel_47:
   \   000082   E5..         MOV     A,?V0
   \   000084   F0           MOVX    @DPTR,A
   \   000085   A3           INC     DPTR
   \   000086   E5..         MOV     A,?V1
   \   000088   F0           MOVX    @DPTR,A
   2754                pNewDevice->timeDelta = ZDAPP_NEW_DEVICE_TIME - timeToFire;
   \   000089   7458         MOV     A,#0x58
   \   00008B   C3           CLR     C
   \   00008C   95..         SUBB    A,?V4
   \   00008E   F8           MOV     R0,A
   \   00008F   7402         MOV     A,#0x2
   \   000091   95..         SUBB    A,?V5
   \   000093   F9           MOV     R1,A
   \   000094   8E82         MOV     DPL,R6
   \   000096   8F83         MOV     DPH,R7
   \   000098   12....       LCALL   ??Subroutine59_0 & 0xFFFF
   2755          
   2756                // Start the timer only if there is no pending timer
   2757                if ( pNewDevice->timeDelta == ZDAPP_NEW_DEVICE_TIME )
   \                     ??CrossCallReturnLabel_95:
   \   00009B   7458         MOV     A,#0x58
   \   00009D   68           XRL     A,R0
   \   00009E   7003         JNZ     ??ZDO_JoinIndicationCB_8
   \   0000A0   7402         MOV     A,#0x2
   \   0000A2   69           XRL     A,R1
   \                     ??ZDO_JoinIndicationCB_8:
   \   0000A3   7017         JNZ     ??ZDO_JoinIndicationCB_1
   2758                {
   2759                  osal_start_timerEx( ZDAppTaskID, ZDO_NEW_DEVICE, ZDAPP_NEW_DEVICE_TIME );
   \   0000A5                ; Setup parameters for call to function osal_start_timerEx
   \   0000A5   90....       MOV     DPTR,#__Constant_258
   \   0000A8   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   0000AB   7A40         MOV     R2,#0x40
   \   0000AD   7B00         MOV     R3,#0x0
   \   0000AF   90....       MOV     DPTR,#ZDAppTaskID
   \   0000B2   E0           MOVX    A,@DPTR
   \   0000B3   F9           MOV     R1,A
   \   0000B4   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   0000B7   7404         MOV     A,#0x4
   \   0000B9   12....       LCALL   ?DEALLOC_XSTACK8
   2760                }
   2761              }
   2762            }
   2763          
   2764            return ZSuccess;
   \                     ??ZDO_JoinIndicationCB_1:
   \   0000BC   7900         MOV     R1,#0x0
   \                     ??ZDO_JoinIndicationCB_3:
   \   0000BE   02....       LJMP    ?Subroutine6 & 0xFFFF
   2765          }
   2766          
   2767          /*********************************************************************
   2768           * @fn          ZDO_ConcentratorIndicationCB
   2769           *
   2770           * @brief       This function allows the next higher layer of a
   2771           *              device to be notified of existence of the concentrator.
   2772           *
   2773           * @param       nwkAddr - 16-bit NWK address of the concentrator
   2774           * @param       extAddr - pointer to extended Address
   2775           *                        NULL if not available
   2776           * @param       pktCost - PktCost from RREQ
   2777           *
   2778           * @return      void
   2779           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2780          void ZDO_ConcentratorIndicationCB( uint16 nwkAddr, uint8 *extAddr, uint8 pktCost )
   \                     ZDO_ConcentratorIndicationCB:
   2781          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   2782            zdoConcentratorInd_t conInd;
   2783          
   2784            conInd.nwkAddr = nwkAddr;
   \   00000A   12....       LCALL   ?Subroutine14 & 0xFFFF
   2785            conInd.extAddr = extAddr;
   \                     ??CrossCallReturnLabel_69:
   \   00000D   7402         MOV     A,#0x2
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   EC           MOV     A,R4
   \   000013   F0           MOVX    @DPTR,A
   \   000014   A3           INC     DPTR
   \   000015   ED           MOV     A,R5
   \   000016   F0           MOVX    @DPTR,A
   2786            conInd.pktCost = pktCost;
   \   000017   7404         MOV     A,#0x4
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   E9           MOV     A,R1
   \   00001D   F0           MOVX    @DPTR,A
   2787          
   2788            if( zdoCBFunc[ZDO_CONCENTRATOR_IND_CBID] != NULL )
   \   00001E   90....       MOV     DPTR,#zdoCBFunc + 2
   \   000021   12....       LCALL   ??Subroutine64_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   000024   6006         JZ      ??ZDO_ConcentratorIndicationCB_0
   2789            {
   2790              zdoCBFunc[ZDO_CONCENTRATOR_IND_CBID]( (void*)&conInd );
   \   000026                ; Setup parameters for indirect call
   \   000026   12....       LCALL   ?Subroutine19 & 0xFFFF
   2791            }
   \                     ??CrossCallReturnLabel_132:
   \   000029   12....       LCALL   ?CALL_IND
   2792          }
   \                     ??ZDO_ConcentratorIndicationCB_0:
   \   00002C                REQUIRE ?Subroutine7
   \   00002C                ; // Fall through to label ?Subroutine7

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   7405         MOV     A,#0x5
   \   000002                REQUIRE ??Subroutine63_0
   \   000002                ; // Fall through to label ??Subroutine63_0
   2793          
   2794          /*********************************************************************
   2795           * @fn          ZDO_LeaveCnf
   2796           *
   2797           * @brief       This function allows the next higher layer to be
   2798           *              notified of the results of its request for this or
   2799           *              a child device to leave the network.
   2800           *
   2801           * @param       cnf - NLME_LeaveCnf_t
   2802           *
   2803           * @return      none
   2804           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2805          void ZDO_LeaveCnf( NLME_LeaveCnf_t* cnf )
   \                     ZDO_LeaveCnf:
   2806          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   2807            // Check for this device
   2808            if ( osal_ExtAddrEqual( cnf->extAddr,
   2809                                    NLME_GetExtAddr() ) == TRUE )
   \   000009                ; Setup parameters for call to function NLME_GetExtAddr
   \   000009   12....       LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   00000C   8A..         MOV     ?V0,R2
   \   00000E   8B..         MOV     ?V1,R3
   \   000010   AC..         MOV     R4,?V0
   \   000012   AD..         MOV     R5,?V1
   \   000014                ; Setup parameters for call to function sAddrExtCmp
   \   000014   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   000017   12....       LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   00001A   E9           MOV     A,R1
   \   00001B   6401         XRL     A,#0x1
   \   00001D   701F         JNZ     ??ZDO_LeaveCnf_0
   2810            {
   2811              // Pass the leave confirm to higher layer if callback registered
   2812              if ( ( zdoCBFunc[ZDO_LEAVE_CNF_CBID] == NULL ) ||
   2813                   ( (*zdoCBFunc[ZDO_LEAVE_CNF_CBID])( cnf ) == NULL ) )
   \   00001F   90....       MOV     DPTR,#zdoCBFunc + 10
   \   000022   12....       LCALL   ??Subroutine64_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   000025   6011         JZ      ??ZDO_LeaveCnf_1
   \   000027                ; Setup parameters for indirect call
   \   000027   EE           MOV     A,R6
   \   000028   FA           MOV     R2,A
   \   000029   EF           MOV     A,R7
   \   00002A   FB           MOV     R3,A
   \   00002B   12....       LCALL   ??Subroutine65_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_128:
   \   00002E   12....       LCALL   ?CALL_IND
   \   000031   8B..         MOV     ?V1,R3
   \   000033   EA           MOV     A,R2
   \   000034   45..         ORL     A,?V1
   \   000036   7006         JNZ     ??ZDO_LeaveCnf_0
   2814              {
   2815                // Prepare to leave with reset
   2816                ZDApp_LeaveReset( cnf->rejoin );
   \                     ??ZDO_LeaveCnf_1:
   \   000038                ; Setup parameters for call to function ZDApp_LeaveReset
   \   000038   12....       LCALL   ?Subroutine30 & 0xFFFF
   2817              }
   2818            }
   \                     ??CrossCallReturnLabel_26:
   \   00003B   12....       LCALL   `??ZDApp_LeaveReset::?relay`; Banked call to: ZDApp_LeaveReset
   2819            else if ( ZSTACK_ROUTER_BUILD )
   2820            {
   2821              // Remove device address(optionally descendents) from data
   2822              ZDApp_LeaveUpdate( cnf->dstAddr,
   2823                                 cnf->extAddr,
   2824                                 cnf->removeChildren );
   2825            }
   2826          }
   \                     ??ZDO_LeaveCnf_0:
   \   00003E   02....       LJMP    ??Subroutine55_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   12....       LCALL   ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   000003   F9           MOV     R1,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   EE           MOV     A,R6
   \   000001   240B         ADD     A,#0xb
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   22           RET
   2827          
   2828          /*********************************************************************
   2829           * @fn          ZDO_LeaveInd
   2830           *
   2831           * @brief       This function allows the next higher layer of a
   2832           *              device to be notified of a remote leave request or
   2833           *              indication.
   2834           *
   2835           * @param       ind - NLME_LeaveInd_t
   2836           *
   2837           * @return      none
   2838           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2839          void ZDO_LeaveInd( NLME_LeaveInd_t* ind )
   \                     ZDO_LeaveInd:
   2840          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   2841            uint8 leave;
   2842          
   2843          
   2844            // Parent is requesting the leave - NWK layer filters out illegal
   2845            // requests
   2846            if ( ind->request == TRUE )
   \   00000E   8E82         MOV     DPL,R6
   \   000010   8F83         MOV     DPH,R7
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   6401         XRL     A,#0x1
   \   00001F   7023         JNZ     ??ZDO_LeaveInd_0
   2847            {
   2848              // Only respond if we are not rejoining the network
   2849              if ( ind->rejoin == FALSE )
   \   000021   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   000024   7015         JNZ     ??ZDO_LeaveInd_1
   2850              {
   2851                // Notify network of leave
   2852                NLME_LeaveRsp_t rsp;
   2853                rsp.rejoin = ind->rejoin;
   \   000026   7401         MOV     A,#0x1
   \   000028   12....       LCALL   ?XSTACK_DISP0_8
   \   00002B   E4           CLR     A
   \   00002C   F0           MOVX    @DPTR,A
   2854          
   2855                if ( ZSTACK_ROUTER_BUILD )
   2856                {
   2857                  rsp.removeChildren = ind->removeChildren;
   2858                }
   2859                else if ( ZSTACK_END_DEVICE_BUILD )
   2860                {
   2861                  rsp.removeChildren = 0;
   \   00002D   85..82       MOV     DPL,?XSP + 0
   \   000030   85..83       MOV     DPH,?XSP + 1
   \   000033   F0           MOVX    @DPTR,A
   2862                }
   2863          
   2864                NLME_LeaveRsp( &rsp );
   \   000034                ; Setup parameters for call to function NLME_LeaveRsp
   \   000034   AA..         MOV     R2,?XSP + 0
   \   000036   AB..         MOV     R3,?XSP + 1
   \   000038   12....       LCALL   `??NLME_LeaveRsp::?relay`; Banked call to: NLME_LeaveRsp
   2865              }
   2866          
   2867              if ( ZSTACK_END_DEVICE_BUILD )
   2868              {
   2869                // Stop polling and get ready to reset
   2870                NLME_SetPollRate( 0 );
   \                     ??ZDO_LeaveInd_1:
   \   00003B                ; Setup parameters for call to function NLME_SetPollRate
   \   00003B   7A00         MOV     R2,#0x0
   \   00003D   7B00         MOV     R3,#0x0
   \   00003F   12....       LCALL   `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   2871              }
   2872          
   2873              // Prepare to leave with reset
   2874              ZDApp_LeaveReset( ind->rejoin );
   \   000042                ; Setup parameters for call to function ZDApp_LeaveReset
   \   000042   8029         SJMP    ??ZDO_LeaveInd_2
   2875            }
   2876            else
   2877            {
   2878              leave = FALSE;
   2879          
   2880              // Check if this device needs to leave as a child or descendent
   2881              if ( ind->srcAddr == NLME_GetCoordShortAddr() )
   \                     ??ZDO_LeaveInd_0:
   \   000044                ; Setup parameters for call to function NLME_GetCoordShortAddr
   \   000044   12....       LCALL   `??NLME_GetCoordShortAddr::?relay`; Banked call to: NLME_GetCoordShortAddr
   \   000047   8A..         MOV     ?V0,R2
   \   000049   8B..         MOV     ?V1,R3
   \   00004B   A8..         MOV     R0,?V0
   \   00004D   A9..         MOV     R1,?V1
   \   00004F   8E82         MOV     DPL,R6
   \   000051   8F83         MOV     DPH,R7
   \   000053   E0           MOVX    A,@DPTR
   \   000054   68           XRL     A,R0
   \   000055   7003         JNZ     ??ZDO_LeaveInd_3
   \   000057   A3           INC     DPTR
   \   000058   E0           MOVX    A,@DPTR
   \   000059   69           XRL     A,R1
   \                     ??ZDO_LeaveInd_3:
   \   00005A   701A         JNZ     ??ZDO_LeaveInd_4
   2882              {
   2883                if ( ( ind->removeChildren == TRUE               ) ||
   2884                     ( ZDO_Config_Node_Descriptor.LogicalType ==
   2885                       NODETYPE_DEVICE                           )    )
   \   00005C   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   00005F   6401         XRL     A,#0x1
   \   000061   600A         JZ      ??ZDO_LeaveInd_2
   \   000063   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000066   E0           MOVX    A,@DPTR
   \   000067   5407         ANL     A,#0x7
   \   000069   6402         XRL     A,#0x2
   \   00006B   7009         JNZ     ??ZDO_LeaveInd_4
   2886                {
   2887                  leave = TRUE;
   2888                }
   2889              }
   2890              else if ( ind->removeChildren == TRUE )
   2891              {
   2892                // Check NWK address allocation algorithm
   2893                //leave = RTG_ANCESTOR(nwkAddr,thisAddr);
   2894              }
   2895          
   2896              if ( leave == TRUE )
   2897              {
   2898                // Prepare to leave with reset
   2899                ZDApp_LeaveReset( ind->rejoin );
   \                     ??ZDO_LeaveInd_2:
   \   00006D                ; Setup parameters for call to function ZDApp_LeaveReset
   \   00006D   12....       LCALL   ?Subroutine34 & 0xFFFF
   2900              }
   \                     ??CrossCallReturnLabel_34:
   \   000070   F9           MOV     R1,A
   \   000071   12....       LCALL   `??ZDApp_LeaveReset::?relay`; Banked call to: ZDApp_LeaveReset
   \   000074   8014         SJMP    ??ZDO_LeaveInd_5
   2901              else
   2902              {
   2903                // Remove device address(optionally descendents) from data
   2904                ZDApp_LeaveUpdate( ind->srcAddr,
   2905                                   ind->extAddr,
   2906                                   ind->removeChildren );
   \                     ??ZDO_LeaveInd_4:
   \   000076                ; Setup parameters for call to function ZDApp_LeaveUpdate
   \   000076   12....       LCALL   ?Subroutine30 & 0xFFFF
   2907              }
   2908            }
   \                     ??CrossCallReturnLabel_27:
   \   000079   EE           MOV     A,R6
   \   00007A   2402         ADD     A,#0x2
   \   00007C   FC           MOV     R4,A
   \   00007D   E4           CLR     A
   \   00007E   3F           ADDC    A,R7
   \   00007F   FD           MOV     R5,A
   \   000080   8E82         MOV     DPL,R6
   \   000082   8F83         MOV     DPH,R7
   \   000084   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000087   12....       LCALL   `??ZDApp_LeaveUpdate::?relay`; Banked call to: ZDApp_LeaveUpdate
   2909          
   2910            // Pass the leave indication to higher layer if callback registered.
   2911            if (zdoCBFunc[ZDO_LEAVE_IND_CBID] != NULL)
   \                     ??ZDO_LeaveInd_5:
   \   00008A   90....       MOV     DPTR,#zdoCBFunc + 12
   \   00008D   12....       LCALL   ??Subroutine64_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   000090   600A         JZ      ??ZDO_LeaveInd_6
   2912            {
   2913              (void)zdoCBFunc[ZDO_LEAVE_IND_CBID](ind);
   \   000092                ; Setup parameters for indirect call
   \   000092   EE           MOV     A,R6
   \   000093   FA           MOV     R2,A
   \   000094   EF           MOV     A,R7
   \   000095   FB           MOV     R3,A
   \   000096   12....       LCALL   ??Subroutine65_0 & 0xFFFF
   2914            }
   \                     ??CrossCallReturnLabel_129:
   \   000099   12....       LCALL   ?CALL_IND
   2915          }
   \                     ??ZDO_LeaveInd_6:
   \   00009C   02....       LJMP    ?Subroutine8 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   12....       LCALL   ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   000003   22           RET
   2916          
   2917          /*********************************************************************
   2918           * @fn          ZDO_SyncIndicationCB
   2919           *
   2920           * @brief       This function allows the next higher layer of a
   2921           *              coordinator to be notified of a loss of synchronization
   2922           *                          with the parent/child device.
   2923           *
   2924           * @param       type: 0 - child; 1 - parent
   2925           *
   2926           *
   2927           * @return      none
   2928           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2929          void ZDO_SyncIndicationCB( uint8 type, uint16 shortAddr )
   \                     ZDO_SyncIndicationCB:
   2930          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   2931            (void)shortAddr;  // Remove this line if this parameter is used.
   2932          
   2933            if ( ZSTACK_END_DEVICE_BUILD
   2934              || (ZSTACK_ROUTER_BUILD && ((_NIB.CapabilityFlags & ZMAC_ASSOC_CAPINFO_FFD_TYPE) == 0)))
   2935            {
   2936              if ( type == 1 )
   \   000007   7401         MOV     A,#0x1
   \   000009   6E           XRL     A,R6
   \   00000A   7013         JNZ     ??ZDO_SyncIndicationCB_0
   2937              {
   2938                // We lost contact with our parent.  Clear the neighbor Table.
   2939                nwkNeighborInitTable();
   \   00000C                ; Setup parameters for call to function nwkNeighborInitTable
   \   00000C   12....       LCALL   `??nwkNeighborInitTable::?relay`; Banked call to: nwkNeighborInitTable
   2940          
   2941                // Start the rejoin process.
   2942                ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_JOIN_REQ, sizeof(osal_event_hdr_t), NULL );
   \   00000F                ; Setup parameters for call to function ZDApp_SendMsg
   \   00000F   7C00         MOV     R4,#0x0
   \   000011   7D00         MOV     R5,#0x0
   \   000013   7B02         MOV     R3,#0x2
   \   000015   7A03         MOV     R2,#0x3
   \   000017   90....       MOV     DPTR,#ZDAppTaskID
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F9           MOV     R1,A
   \   00001C   12....       LCALL   `??ZDApp_SendMsg::?relay`; Banked call to: ZDApp_SendMsg
   2943              }
   2944            }
   2945          }
   \                     ??ZDO_SyncIndicationCB_0:
   \   00001F   02....       LJMP    ??Subroutine57_0 & 0xFFFF
   2946          
   2947          /*********************************************************************
   2948           * @fn          ZDO_ManytoOneFailureIndicationCB
   2949           *
   2950           * @brief       This function allows the next higher layer of a
   2951           *              concentrator to be notified of a many-to-one route
   2952           *              failure.
   2953           *
   2954           * @param       none
   2955           *
   2956           *
   2957           * @return      none
   2958           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2959          void ZDO_ManytoOneFailureIndicationCB()
   \                     ZDO_ManytoOneFailureIndicationCB:
   2960          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2961            // By default, the concentrator automatically redo many-to-one route
   2962            // discovery to update all many-to-one routes in the network
   2963            // If you want anything processing other than the default,
   2964            // please replace the following code.
   2965          
   2966            RTG_MTORouteReq();
   \   000004                ; Setup parameters for call to function RTG_MTORouteReq
   \   000004   12....       LCALL   `??RTG_MTORouteReq::?relay`; Banked call to: RTG_MTORouteReq
   2967          }
   \   000007   02....       LJMP    ??Subroutine56_0 & 0xFFFF
   2968          
   2969          /*********************************************************************
   2970           * @fn          ZDO_PollConfirmCB
   2971           *
   2972           * @brief       This function allows the next higher layer to be
   2973           *              notified of a Poll Confirm.
   2974           *
   2975           * @param       none
   2976           *
   2977           * @return      none
   2978           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2979          void ZDO_PollConfirmCB( uint8 status )
   \                     ZDO_PollConfirmCB:
   2980          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   2981            (void)status;  // Remove this line if this parameter is used.
   2982            return;
   \   000000   02....       LJMP    ?BRET
   2983          }
   2984          
   2985          /*********************************************************************
   2986           * @fn          ZDO_NetworkStatusCB
   2987           *
   2988           * @brief       Network Status Callback function
   2989           *
   2990           * @param       nwkDstAddr - message's destination address- used to determine
   2991           *                           if the message was intended for this device or
   2992           *                           a sleeping end device.
   2993           * @param       statusCode - message's status code (ie. NWKSTAT_NONTREE_LINK_FAILURE)
   2994           * @param       dstAddr - the destination address related to the status code
   2995           *
   2996           * @return      none
   2997           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2998          void ZDO_NetworkStatusCB( uint16 nwkDstAddr, uint8 statusCode, uint16 dstAddr )
   \                     ZDO_NetworkStatusCB:
   2999          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3000            (void)dstAddr;     // Remove this line if this parameter is used.
   3001          
   3002            if ( (nwkDstAddr == NLME_GetShortAddr())
   3003                && (statusCode == NWKSTAT_NONTREE_LINK_FAILURE) )
   \   000004                ; Setup parameters for call to function NLME_GetShortAddr
   \   000004   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   3004            {
   3005              // Routing error for dstAddr, this is informational and a Route
   3006              // Request should happen automatically.
   3007            }
   3008          }
   \   000007   02....       LJMP    ??Subroutine56_0 & 0xFFFF
   3009          
   3010          /******************************************************************************
   3011           * @fn          ZDApp_NwkWriteNVRequest (stubs AddrMgrWriteNVRequest)
   3012           *
   3013           * @brief       Stub routine implemented by NHLE. NHLE should call
   3014           *              <AddrMgrWriteNV> when appropriate.
   3015           *
   3016           * @param       none
   3017           *
   3018           * @return      none
   3019           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3020          void ZDApp_NwkWriteNVRequest( void )
   \                     AddrMgrWriteNVRequest:
   3021          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   3022          #if defined ( NV_RESTORE )
   3023            if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV ) )
   3024            {
   3025              // Trigger to save info into NV
   3026              ZDApp_NVUpdate();
   3027            }
   3028          #endif
   3029          }
   \   000000   02....       LJMP    ?BRET
   3030          
   3031          /*********************************************************************
   3032           * Call Back Functions from Security  - API
   3033           */
   3034          
   3035           /*********************************************************************
   3036           * @fn          ZDO_UpdateDeviceIndication
   3037           *
   3038           * @brief       This function notifies the "Trust Center" of a
   3039           *              network when a device joins or leaves the network.
   3040           *
   3041           * @param       extAddr - pointer to 64 bit address of new device
   3042           * @param       status  - 0 if a new device joined securely
   3043           *                      - 1 if a new device joined un-securely
   3044           *                      - 2 if a device left the network
   3045           *
   3046           * @return      true if newly joined device should be allowed to
   3047           *                                              remain on network
   3048           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3049          ZStatus_t ZDO_UpdateDeviceIndication( uint8 *extAddr, uint8 status )
   \                     ZDO_UpdateDeviceIndication:
   3050          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   3051            // can implement a network access policy based on the
   3052            // IEEE address of newly joining devices...
   3053            (void)extAddr;
   3054            (void)status;
   3055          
   3056            return ZSuccess;
   \   000000   7900         MOV     R1,#0x0
   \   000002   02....       LJMP    ?BRET
   3057          }
   3058          
   3059          /*********************************************************************
   3060           * @fn          ZDApp_InMsgCB
   3061           *
   3062           * @brief       This function is called to pass up any message that is
   3063           *              not yet supported.  This allows for the developer to
   3064           *              support features themselves..
   3065           *
   3066           * @return      none
   3067           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3068          void ZDApp_InMsgCB( zdoIncomingMsg_t *inMsg )
   \                     ZDApp_InMsgCB:
   3069          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   3070            if ( inMsg->clusterID & ZDO_RESPONSE_BIT )
   \   000009   12....       LCALL   ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   5480         ANL     A,#0x80
   \   000010   703D         JNZ     ??ZDApp_InMsgCB_0
   3071            {
   3072              // Handle the response message
   3073            }
   3074            else
   3075            {
   3076              // Handle the request message by sending a generic "not supported".
   3077              // Device Announce doesn't have a response.
   3078              if ( !(inMsg->wasBroadcast) && inMsg->clusterID != Device_annce )
   \   000012   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   000015   7038         JNZ     ??ZDApp_InMsgCB_0
   \   000017   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   00001A   6413         XRL     A,#0x13
   \   00001C   7002         JNZ     ??ZDApp_InMsgCB_1
   \   00001E   A3           INC     DPTR
   \   00001F   E0           MOVX    A,@DPTR
   \                     ??ZDApp_InMsgCB_1:
   \   000020   602D         JZ      ??ZDApp_InMsgCB_0
   3079              {
   3080                ZDP_GenericRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_NOT_SUPPORTED, 0,
   3081                                (uint16)(inMsg->clusterID | ZDO_RESPONSE_BIT), inMsg->SecurityUse );
   \   000022                ; Setup parameters for call to function ZDP_GenericRsp
   \   000022   12....       LCALL   ?Subroutine33 & 0xFFFF
   3082              }
   3083            }
   \                     ??CrossCallReturnLabel_31:
   \   000025   4480         ORL     A,#0x80
   \   000027   F5..         MOV     ?V1,A
   \   000029   78..         MOV     R0,#?V0
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002E   E4           CLR     A
   \   00002F   F5..         MOV     ?V0,A
   \   000031   F5..         MOV     ?V1,A
   \   000033   78..         MOV     R0,#?V0
   \   000035   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000038   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   FD           MOV     R5,A
   \   00003D   7C84         MOV     R4,#-0x7c
   \   00003F   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   000042   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   000045   E0           MOVX    A,@DPTR
   \   000046   F9           MOV     R1,A
   \   000047   12....       LCALL   `??ZDP_GenericRsp::?relay`; Banked call to: ZDP_GenericRsp
   \   00004A   7404         MOV     A,#0x4
   \   00004C   12....       LCALL   ?DEALLOC_XSTACK8
   3084          }
   \                     ??ZDApp_InMsgCB_0:
   \   00004F   02....       LJMP    ??Subroutine55_0 & 0xFFFF
   3085          
   3086          
   3087          /*********************************************************************
   3088           * @fn      ZDApp_ChangeMatchDescRespPermission()
   3089           *
   3090           * @brief   Changes the Match Descriptor Response permission.
   3091           *
   3092           * @param   endpoint - endpoint to allow responses
   3093           * @param   action - true to allow responses, false to not
   3094           *
   3095           * @return  none
   3096           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3097          void ZDApp_ChangeMatchDescRespPermission( uint8 endpoint, uint8 action )
   \                     ZDApp_ChangeMatchDescRespPermission:
   3098          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   3099            // Store the action
   3100            afSetMatch( endpoint, action );
   \   000005                ; Setup parameters for call to function afSetMatch
   \   000005   12....       LCALL   `??afSetMatch::?relay`; Banked call to: afSetMatch
   3101          }
   \   000008   02....       LJMP    ??Subroutine57_0 & 0xFFFF
   3102          
   3103          /*********************************************************************
   3104           * @fn      ZDApp_NetworkInit()
   3105           *
   3106           * @brief   Used to start the network joining process
   3107           *
   3108           * @param   delay - mSec delay to wait before starting
   3109           *
   3110           * @return  none
   3111           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3112          void ZDApp_NetworkInit( uint16 delay )
   \                     ZDApp_NetworkInit:
   3113          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   3114            if ( delay )
   \   000005   EA           MOV     A,R2
   \   000006   4B           ORL     A,R3
   \   000007   6021         JZ      ??ZDApp_NetworkInit_0
   3115            {
   3116              // Wait awhile before starting the device
   3117              osal_start_timerEx( ZDAppTaskID, ZDO_NETWORK_INIT, delay );
   \   000009                ; Setup parameters for call to function osal_start_timerEx
   \   000009   8A..         MOV     ?V0,R2
   \   00000B   8B..         MOV     ?V1,R3
   \   00000D   E4           CLR     A
   \   00000E   F5..         MOV     ?V2,A
   \   000010   F5..         MOV     ?V3,A
   \   000012   78..         MOV     R0,#?V0
   \   000014   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000017   7A01         MOV     R2,#0x1
   \   000019   7B00         MOV     R3,#0x0
   \   00001B   90....       MOV     DPTR,#ZDAppTaskID
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F9           MOV     R1,A
   \   000020   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000023   7404         MOV     A,#0x4
   \   000025   12....       LCALL   ?DEALLOC_XSTACK8
   \   000028   800C         SJMP    ??ZDApp_NetworkInit_1
   3118            }
   3119            else
   3120            {
   3121              osal_set_event( ZDAppTaskID, ZDO_NETWORK_INIT );
   \                     ??ZDApp_NetworkInit_0:
   \   00002A                ; Setup parameters for call to function osal_set_event
   \   00002A   7A01         MOV     R2,#0x1
   \   00002C   7B00         MOV     R3,#0x0
   \   00002E   90....       MOV     DPTR,#ZDAppTaskID
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F9           MOV     R1,A
   \   000033   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   3122            }
   3123          }
   \                     ??ZDApp_NetworkInit_1:
   \   000036   02....       LJMP    ??Subroutine66_0 & 0xFFFF
   3124          
   3125          /*********************************************************************
   3126           * @fn      ZDApp_NwkStateUpdateCB()
   3127           *
   3128           * @brief   This function notifies that this device's network
   3129           *          state info has been changed.
   3130           *
   3131           * @param   none
   3132           *
   3133           * @return  none
   3134           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3135          void ZDApp_NwkStateUpdateCB( void )
   \                     ZDApp_NwkStateUpdateCB:
   3136          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3137            // Notify to save info into NV
   3138            if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV ) )
   \   000004                ; Setup parameters for call to function osal_get_timeoutEx
   \   000004   7A00         MOV     R2,#0x0
   \   000006   7B01         MOV     R3,#0x1
   \   000008   90....       MOV     DPTR,#ZDAppTaskID
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F9           MOV     R1,A
   \   00000D   12....       LCALL   `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   3139            {
   3140              // Trigger to save info into NV
   3141              ZDApp_NVUpdate();
   3142            }
   3143          }
   \   000010   02....       LJMP    ??Subroutine56_0 & 0xFFFF
   3144          
   3145          /*********************************************************************
   3146           * @fn      ZDApp_NodeProfileSync()
   3147           *
   3148           * @brief   Sync node with stack profile.
   3149           *
   3150           * @param   stackProfile - stack profile of the network to join
   3151           *
   3152           * @return  none
   3153           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3154          void ZDApp_NodeProfileSync( uint8 stackProfile )
   \                     ZDApp_NodeProfileSync:
   3155          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   3156            if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_DEVICETYPE_FFD  )
   \   000007   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   A2E1         MOV     C,0xE0 /* A   */.1
   \   00000D   501B         JNC     ??ZDApp_NodeProfileSync_0
   3157            {
   3158              if ( stackProfile != zgStackProfile )
   \   00000F   90....       MOV     DPTR,#zgStackProfile
   \   000012   E0           MOVX    A,@DPTR
   \   000013   6E           XRL     A,R6
   \   000014   6014         JZ      ??ZDApp_NodeProfileSync_0
   3159              {
   3160                ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_DEVICE;
   \   000016   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   54F8         ANL     A,#0xf8
   \   00001C   F0           MOVX    @DPTR,A
   \   00001D   4402         ORL     A,#0x2
   \   00001F   F0           MOVX    @DPTR,A
   3161                ZDO_Config_Node_Descriptor.CapabilityFlags = CAPINFO_DEVICETYPE_RFD | CAPINFO_POWER_AC | CAPINFO_RCVR_ON_IDLE;
   \   000020   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000023   740C         MOV     A,#0xc
   \   000025   F0           MOVX    @DPTR,A
   3162                NLME_SetBroadcastFilter( ZDO_Config_Node_Descriptor.CapabilityFlags );
   \   000026                ; Setup parameters for call to function NLME_SetBroadcastFilter
   \   000026   F9           MOV     R1,A
   \   000027   12....       LCALL   `??NLME_SetBroadcastFilter::?relay`; Banked call to: NLME_SetBroadcastFilter
   3163              }
   3164            }
   3165          }
   \                     ??ZDApp_NodeProfileSync_0:
   \   00002A   02....       LJMP    ??Subroutine57_0 & 0xFFFF
   3166          
   3167          /*********************************************************************
   3168           * @fn      ZDApp_StartJoiningCycle()
   3169           *
   3170           * @brief   Starts the joining cycle of a device.  This will only
   3171           *          continue an already started (or stopped) joining cycle.
   3172           *
   3173           * @param   none
   3174           *
   3175           * @return  TRUE if joining stopped, FALSE if joining or rejoining
   3176           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3177          uint8 ZDApp_StartJoiningCycle( void )
   \                     ZDApp_StartJoiningCycle:
   3178          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3179            if ( devState == DEV_INIT || devState == DEV_NWK_DISC )
   \   000004   90....       MOV     DPTR,#devState
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6401         XRL     A,#0x1
   \   00000A   6005         JZ      ??ZDApp_StartJoiningCycle_0
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   6402         XRL     A,#0x2
   \   00000F   7011         JNZ     ??ZDApp_StartJoiningCycle_1
   3180            {
   3181              continueJoining = TRUE;
   \                     ??ZDApp_StartJoiningCycle_0:
   \   000011   90....       MOV     DPTR,#continueJoining
   \   000014   7401         MOV     A,#0x1
   \   000016   F0           MOVX    @DPTR,A
   3182              ZDApp_NetworkInit( 0 );
   \   000017                ; Setup parameters for call to function ZDApp_NetworkInit
   \   000017   7A00         MOV     R2,#0x0
   \   000019   7B00         MOV     R3,#0x0
   \   00001B   12....       LCALL   `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
   3183          
   3184              return ( TRUE );
   \   00001E   7901         MOV     R1,#0x1
   \   000020   8002         SJMP    ??ZDApp_StartJoiningCycle_2
   3185            }
   3186            else
   3187              return ( FALSE );
   \                     ??ZDApp_StartJoiningCycle_1:
   \   000022   7900         MOV     R1,#0x0
   \                     ??ZDApp_StartJoiningCycle_2:
   \   000024   02....       LJMP    ??Subroutine56_0 & 0xFFFF
   3188          }
   3189          
   3190          /*********************************************************************
   3191           * @fn      ZDApp_StopJoiningCycle()
   3192           *
   3193           * @brief   Stops the joining or rejoining process of a device.
   3194           *
   3195           * @param   none
   3196           *
   3197           * @return  TRUE if joining stopped, FALSE if joining or rejoining
   3198           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3199          uint8 ZDApp_StopJoiningCycle( void )
   \                     ZDApp_StopJoiningCycle:
   3200          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3201            if ( devState == DEV_INIT || devState == DEV_NWK_DISC )
   \   000004   90....       MOV     DPTR,#devState
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6401         XRL     A,#0x1
   \   00000A   6005         JZ      ??ZDApp_StopJoiningCycle_0
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   6402         XRL     A,#0x2
   \   00000F   7009         JNZ     ??ZDApp_StopJoiningCycle_1
   3202            {
   3203              continueJoining = FALSE;
   \                     ??ZDApp_StopJoiningCycle_0:
   \   000011   90....       MOV     DPTR,#continueJoining
   \   000014   E4           CLR     A
   \   000015   F0           MOVX    @DPTR,A
   3204              return ( TRUE );
   \   000016   7901         MOV     R1,#0x1
   \   000018   8002         SJMP    ??ZDApp_StopJoiningCycle_2
   3205            }
   3206            else
   3207              return ( FALSE );
   \                     ??ZDApp_StopJoiningCycle_1:
   \   00001A   7900         MOV     R1,#0x0
   \                     ??ZDApp_StopJoiningCycle_2:
   \   00001C   02....       LJMP    ??Subroutine56_0 & 0xFFFF
   3208          }
   3209          
   3210          /*********************************************************************
   3211           * @fn      ZDApp_AnnounceNewAddress()
   3212           *
   3213           * @brief   Send Device Announce and hold all transmissions for
   3214           *          new address timeout.
   3215           *
   3216           * @param   none
   3217           *
   3218           * @return  none
   3219           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3220          void ZDApp_AnnounceNewAddress( void )
   \                     ZDApp_AnnounceNewAddress:
   3221          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   3222          #if defined ( ZIGBEE_NWK_UNIQUE_ADDR_CHECK )
   3223            // Turn off data request hold
   3224            APSME_HoldDataRequests( 0 );
   \   000005                ; Setup parameters for call to function APSME_HoldDataRequests
   \   000005   7A00         MOV     R2,#0x0
   \   000007   7B00         MOV     R3,#0x0
   \   000009   12....       LCALL   `??APSME_HoldDataRequests::?relay`; Banked call to: APSME_HoldDataRequests
   3225          #endif
   3226          
   3227            ZDP_DeviceAnnce( NLME_GetShortAddr(), NLME_GetExtAddr(),
   3228                               ZDO_Config_Node_Descriptor.CapabilityFlags, 0 );
   \   00000C                ; Setup parameters for call to function NLME_GetExtAddr
   \   00000C   12....       LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   00000F   8A..         MOV     ?V0,R2
   \   000011   8B..         MOV     ?V1,R3
   \   000013   AE..         MOV     R6,?V0
   \   000015                ; Setup parameters for call to function NLME_GetShortAddr
   \   000015   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000018                ; Setup parameters for call to function ZDP_DeviceAnnce
   \   000018   75..00       MOV     ?V0,#0x0
   \   00001B   78..         MOV     R0,#?V0
   \   00001D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000020   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F9           MOV     R1,A
   \   000025   EE           MOV     A,R6
   \   000026   FC           MOV     R4,A
   \   000027   AD..         MOV     R5,?V1
   \   000029   12....       LCALL   `??ZDP_DeviceAnnce::?relay`; Banked call to: ZDP_DeviceAnnce
   \   00002C   7401         MOV     A,#0x1
   \   00002E   12....       LCALL   ?DEALLOC_XSTACK8
   3229          
   3230          #if defined ( ZIGBEE_NWK_UNIQUE_ADDR_CHECK )
   3231            // Setup the timeout
   3232            APSME_HoldDataRequests( ZDAPP_HOLD_DATA_REQUESTS_TIMEOUT );
   \   000031                ; Setup parameters for call to function APSME_HoldDataRequests
   \   000031   7A00         MOV     R2,#0x0
   \   000033   7B00         MOV     R3,#0x0
   \   000035   12....       LCALL   `??APSME_HoldDataRequests::?relay`; Banked call to: APSME_HoldDataRequests
   3233          #endif
   3234          }
   \   000038   02....       LJMP    ??Subroutine55_0 & 0xFFFF
   3235          
   3236          /*********************************************************************
   3237           * @fn          ZDApp_NVUpdate
   3238           *
   3239           * @brief       Set the NV Update Timer.
   3240           *
   3241           * @param       none
   3242           *
   3243           * @return      none
   3244           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3245          void ZDApp_NVUpdate( void )
   \                     ZDApp_NVUpdate:
   3246          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   3247          #if defined ( NV_RESTORE )
   3248            osal_start_timerEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV, ZDAPP_UPDATE_NWK_NV_TIME );
   3249          #endif
   3250          }
   \   000000   02....       LJMP    ?BRET
   3251          
   3252          /*********************************************************************
   3253           * @fn      ZDApp_CoordStartPANIDConflictCB()
   3254           *
   3255           * @brief   Returns a PAN ID for the network layer to use during
   3256           *          a coordinator start and there is another network with
   3257           *          the intended PANID.
   3258           *
   3259           * @param   panid - the intended PAN ID
   3260           *
   3261           * @return  PANID to try
   3262           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3263          uint16 ZDApp_CoordStartPANIDConflictCB( uint16 panid )
   \                     ZDApp_CoordStartPANIDConflictCB:
   3264          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   3265            return ( panid + 1 );
   \   000000   EA           MOV     A,R2
   \   000001   2401         ADD     A,#0x1
   \   000003   0A           INC     R2
   \   000004   5001         JNC     ??ZDApp_CoordStartPANIDConflictCB_0
   \   000006   0B           INC     R3
   \                     ??ZDApp_CoordStartPANIDConflictCB_0:
   \   000007   02....       LJMP    ?BRET
   3266          }
   3267          
   3268          /*********************************************************************
   3269           * @fn          ZDO_SrcRtgIndCB
   3270           *
   3271           * @brief       This function notifies the ZDO available src route record received.
   3272           *
   3273           * @param       srcAddr - source address of the source route
   3274           * @param       relayCnt - number of devices in the relay list
   3275           * @param       relayList - relay list of the source route
   3276           *
   3277           * @return      none
   3278           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3279          void ZDO_SrcRtgIndCB (uint16 srcAddr, uint8 relayCnt, uint16* pRelayList )
   \                     ZDO_SrcRtgIndCB:
   3280          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   3281            zdoSrcRtg_t srcRtg;
   3282          
   3283            srcRtg.srcAddr = srcAddr;
   \   00000A   12....       LCALL   ?Subroutine14 & 0xFFFF
   3284            srcRtg.relayCnt = relayCnt;
   \                     ??CrossCallReturnLabel_70:
   \   00000D   7402         MOV     A,#0x2
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   E9           MOV     A,R1
   \   000013   F0           MOVX    @DPTR,A
   3285            srcRtg.pRelayList = pRelayList;
   \   000014   7403         MOV     A,#0x3
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   EC           MOV     A,R4
   \   00001A   F0           MOVX    @DPTR,A
   \   00001B   A3           INC     DPTR
   \   00001C   ED           MOV     A,R5
   \   00001D   F0           MOVX    @DPTR,A
   3286          
   3287            if( zdoCBFunc[ZDO_SRC_RTG_IND_CBID] != NULL )
   \   00001E   90....       MOV     DPTR,#zdoCBFunc
   \   000021   12....       LCALL   ??Subroutine64_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   000024   6006         JZ      ??ZDO_SrcRtgIndCB_0
   3288            {
   3289              zdoCBFunc[ZDO_SRC_RTG_IND_CBID]( (void*)&srcRtg );
   \   000026                ; Setup parameters for indirect call
   \   000026   12....       LCALL   ?Subroutine19 & 0xFFFF
   3290            }
   \                     ??CrossCallReturnLabel_133:
   \   000029   12....       LCALL   ?CALL_IND
   3291          }
   \                     ??ZDO_SrcRtgIndCB_0:
   \   00002C   02....       LJMP    ?Subroutine7 & 0xFFFF
   3292          
   3293          /*********************************************************************
   3294           * @fn          ZDApp_InitZdoCBFunc
   3295           *
   3296           * @brief       Call this function to initialize zdoCBFunc[]
   3297           *
   3298           * @param       none
   3299           *
   3300           * @return      none
   3301           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3302          void ZDApp_InitZdoCBFunc( void )
   \                     ZDApp_InitZdoCBFunc:
   3303          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3304            uint8 i;
   3305          
   3306            for ( i=0; i< MAX_ZDO_CB_FUNC; i++ )
   \   000004   7A00         MOV     R2,#0x0
   3307            {
   3308              zdoCBFunc[i] = NULL;
   \                     ??ZDApp_InitZdoCBFunc_0:
   \   000006   EA           MOV     A,R2
   \   000007   25E0         ADD     A,0xE0 /* A   */
   \   000009   12....       LCALL   ?Subroutine44 & 0xFFFF
   3309            }
   \                     ??CrossCallReturnLabel_53:
   \   00000C   E4           CLR     A
   \   00000D   F0           MOVX    @DPTR,A
   \   00000E   A3           INC     DPTR
   \   00000F   F0           MOVX    @DPTR,A
   \   000010   0A           INC     R2
   \   000011   EA           MOV     A,R2
   \   000012   C3           CLR     C
   \   000013   9409         SUBB    A,#0x9
   \   000015   40EF         JC      ??ZDApp_InitZdoCBFunc_0
   3310          }
   \   000017   02....       LJMP    ??Subroutine56_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   F8           MOV     R0,A
   \   000001   E4           CLR     A
   \   000002   33           RLC     A
   \   000003   F9           MOV     R1,A
   \   000004   74..         MOV     A,#zdoCBFunc & 0xff
   \   000006   28           ADD     A,R0
   \   000007   F582         MOV     DPL,A
   \   000009   74..         MOV     A,#(zdoCBFunc >> 8) & 0xff
   \   00000B   39           ADDC    A,R1
   \   00000C   F583         MOV     DPH,A
   \   00000E   22           RET
   3311          
   3312          /*********************************************************************
   3313           * @fn          ZDO_RegisterForZdoCB
   3314           *
   3315           * @brief       Call this function to register the higher layer (for
   3316           *              example, the Application layer or MT layer) with ZDO
   3317           *              callbacks to get notified of some ZDO indication like
   3318           *              existence of a concentrator or receipt of a source
   3319           *              route record.
   3320           *
   3321           * @param       indID - ZDO Indication ID
   3322           * @param       pFn   - Callback function pointer
   3323           *
   3324           * @return      ZSuccess - successful, ZInvalidParameter if not
   3325           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3326          ZStatus_t ZDO_RegisterForZdoCB( uint8 indID, pfnZdoCb pFn )
   \                     ZDO_RegisterForZdoCB:
   3327          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV     A,R1
   \   000005   FC           MOV     R4,A
   3328            // Check the range of the indication ID
   3329            if ( indID < MAX_ZDO_CB_FUNC )
   \   000006   C3           CLR     C
   \   000007   9409         SUBB    A,#0x9
   \   000009   500B         JNC     ??ZDO_RegisterForZdoCB_0
   3330            {
   3331              zdoCBFunc[indID] = pFn;
   \   00000B   EC           MOV     A,R4
   \   00000C   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   00000F   12....       LCALL   ??Subroutine50_0 & 0xFFFF
   3332              return ZSuccess;
   \                     ??CrossCallReturnLabel_66:
   \   000012   7900         MOV     R1,#0x0
   \   000014   8002         SJMP    ??ZDO_RegisterForZdoCB_1
   3333            }
   3334          
   3335            return ZInvalidParameter;
   \                     ??ZDO_RegisterForZdoCB_0:
   \   000016   7902         MOV     R1,#0x2
   \                     ??ZDO_RegisterForZdoCB_1:
   \   000018   02....       LJMP    ??Subroutine56_0 & 0xFFFF
   3336          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   29           ADD     A,R1
   \   000001   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   000004   22           RET
   3337          
   3338          /*********************************************************************
   3339           * @fn          ZDO_DeregisterForZdoCB
   3340           *
   3341           * @brief       Call this function to de-register the higher layer (for
   3342           *              example, the Application layer or MT layer) with ZDO
   3343           *              callbacks to get notified of some ZDO indication like
   3344           *              existence of a concentrator or receipt of a source
   3345           *              route record.
   3346           *
   3347           * @param       indID - ZDO Indication ID
   3348           *
   3349           * @return      ZSuccess - successful, ZInvalidParameter if not
   3350           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3351          ZStatus_t ZDO_DeregisterForZdoCB( uint8 indID )
   \                     ZDO_DeregisterForZdoCB:
   3352          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV     A,R1
   \   000005   FA           MOV     R2,A
   3353            // Check the range of the indication ID
   3354            if ( indID < MAX_ZDO_CB_FUNC )
   \   000006   C3           CLR     C
   \   000007   9409         SUBB    A,#0x9
   \   000009   500B         JNC     ??ZDO_DeregisterForZdoCB_0
   3355            {
   3356              zdoCBFunc[indID] = NULL;
   \   00000B   EA           MOV     A,R2
   \   00000C   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   00000F   E4           CLR     A
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   F0           MOVX    @DPTR,A
   3357              return ZSuccess;
   \   000013   F9           MOV     R1,A
   \   000014   8002         SJMP    ??ZDO_DeregisterForZdoCB_1
   3358            }
   3359          
   3360            return ZInvalidParameter;
   \                     ??ZDO_DeregisterForZdoCB_0:
   \   000016   7902         MOV     R1,#0x2
   \                     ??ZDO_DeregisterForZdoCB_1:
   \   000018   02....       LJMP    ??Subroutine56_0 & 0xFFFF
   3361          }
   3362          
   3363          #if !defined ( ZDP_BIND_SKIP_VALIDATION )
   3364          #if defined ( REFLECTOR )
   3365          /*********************************************************************
   3366           * @fn          ZDApp_SetPendingBindDefault
   3367           *
   3368           * @brief       This function initializes a specific entry of pending
   3369           *              Bind Request.
   3370           *
   3371           * @param       pendBindReq - pointer to the entry in the table
   3372           *
   3373           * @return      none
   3374           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3375          void ZDApp_SetPendingBindDefault( ZDO_PendingBindReq_t *pendBindReq )
   \                     ZDApp_SetPendingBindDefault:
   3376          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   3377            // Set it to an initial value
   3378            osal_memset( pendBindReq, 0xFF, sizeof( ZDO_PendingBindReq_t ) );
   \   000009                ; Setup parameters for call to function osal_memset
   \   000009   7C21         MOV     R4,#0x21
   \   00000B   7D00         MOV     R5,#0x0
   \   00000D   79FF         MOV     R1,#-0x1
   \   00000F   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   3379          
   3380            // We are checking for age 0 for aged-out records
   3381            pendBindReq->age = 0;
   \   000012   EE           MOV     A,R6
   \   000013   2420         ADD     A,#0x20
   \   000015   F582         MOV     DPL,A
   \   000017   E4           CLR     A
   \   000018   3F           ADDC    A,R7
   \   000019   F583         MOV     DPH,A
   \   00001B   E4           CLR     A
   \   00001C   F0           MOVX    @DPTR,A
   3382          }
   \   00001D   02....       LJMP    ??Subroutine57_0 & 0xFFFF
   3383          
   3384          /*********************************************************************
   3385           * @fn          ZDApp_InitPendingBind
   3386           *
   3387           * @brief       This function initializes the buffer that holds
   3388           *              pending Bind Request messages if no valid NWK address
   3389           *              exists in Address Manager and a Network Address Req
   3390           *              has been sent out.
   3391           *
   3392           * @param       none
   3393           *
   3394           * @return      none
   3395           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   000003                REQUIRE ??Subroutine64_0
   \   000003                ; // Fall through to label ??Subroutine64_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3396          void ZDApp_InitPendingBind( void )
   \                     ZDApp_InitPendingBind:
   3397          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   3398            if ( ZDAppPendingBindReq == NULL )
   \   000005   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_119:
   \   000008   7030         JNZ     ??ZDApp_InitPendingBind_0
   3399            {
   3400              if ( ( ZDAppPendingBindReq = osal_mem_alloc( sizeof(ZDO_PendingBindReq_t) * MAX_PENDING_BIND_REQ ) ) != NULL )
   \   00000A                ; Setup parameters for call to function osal_mem_alloc
   \   00000A   7A63         MOV     R2,#0x63
   \   00000C   7B00         MOV     R3,#0x0
   \   00000E   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000011   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   000014   12....       LCALL   ??Subroutine50_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   000017   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_120:
   \   00001A   601E         JZ      ??ZDApp_InitPendingBind_0
   3401              {
   3402                uint8 i;
   3403          
   3404                for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
   \   00001C   7E00         MOV     R6,#0x0
   3405                {
   3406                  // Set to default values
   3407                  ZDApp_SetPendingBindDefault( &ZDAppPendingBindReq[i] );
   \                     ??ZDApp_InitPendingBind_1:
   \   00001E                ; Setup parameters for call to function ZDApp_SetPendingBindDefault
   \   00001E   EE           MOV     A,R6
   \   00001F   75F021       MOV     B,#0x21
   \   000022   A4           MUL     AB
   \   000023   F8           MOV     R0,A
   \   000024   A9F0         MOV     R1,B
   \   000026   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   28           ADD     A,R0
   \   00002B   FA           MOV     R2,A
   \   00002C   A3           INC     DPTR
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   39           ADDC    A,R1
   \   00002F   FB           MOV     R3,A
   \   000030   12....       LCALL   `??ZDApp_SetPendingBindDefault::?relay`; Banked call to: ZDApp_SetPendingBindDefault
   3408                }
   \   000033   0E           INC     R6
   \   000034   EE           MOV     A,R6
   \   000035   C3           CLR     C
   \   000036   9403         SUBB    A,#0x3
   \   000038   40E4         JC      ??ZDApp_InitPendingBind_1
   3409              }
   3410            }
   3411          }
   \                     ??ZDApp_InitPendingBind_0:
   \   00003A   02....       LJMP    ??Subroutine57_0 & 0xFFFF
   3412          
   3413          /*********************************************************************
   3414           * @fn          ZDApp_GetEmptyPendingBindReq
   3415           *
   3416           * @brief       This function looks for an empty entry.
   3417           *
   3418           * @param       none
   3419           *
   3420           * @return      Pointer to entry
   3421           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3422          ZDO_PendingBindReq_t *ZDApp_GetEmptyPendingBindReq( void )
   \                     ZDApp_GetEmptyPendingBindReq:
   3423          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3424            uint8 i;
   3425          
   3426            if ( ZDAppPendingBindReq != NULL )
   \   000004   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_121:
   \   000007   602B         JZ      ??ZDApp_GetEmptyPendingBindReq_0
   3427            {
   3428              for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
   \   000009   7A00         MOV     R2,#0x0
   3429              {
   3430                if ( ZDAppPendingBindReq[i].age == 0 )
   \                     ??ZDApp_GetEmptyPendingBindReq_1:
   \   00000B   EA           MOV     A,R2
   \   00000C   75F021       MOV     B,#0x21
   \   00000F   A4           MUL     AB
   \   000010   F8           MOV     R0,A
   \   000011   ABF0         MOV     R3,B
   \   000013   EB           MOV     A,R3
   \   000014   12....       LCALL   ??Subroutine68_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_134:
   \   000017   7014         JNZ     ??ZDApp_GetEmptyPendingBindReq_2
   3431                {
   3432                  return ( &ZDAppPendingBindReq[i] );
   \   000019   EA           MOV     A,R2
   \   00001A   75F021       MOV     B,#0x21
   \   00001D   A4           MUL     AB
   \   00001E   F8           MOV     R0,A
   \   00001F   EB           MOV     A,R3
   \   000020   F9           MOV     R1,A
   \   000021   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   000024   E0           MOVX    A,@DPTR
   \   000025   28           ADD     A,R0
   \   000026   FA           MOV     R2,A
   \   000027   A3           INC     DPTR
   \   000028   E0           MOVX    A,@DPTR
   \   000029   39           ADDC    A,R1
   \   00002A   FB           MOV     R3,A
   \   00002B   800B         SJMP    ??ZDApp_GetEmptyPendingBindReq_3
   3433                }
   3434              }
   \                     ??ZDApp_GetEmptyPendingBindReq_2:
   \   00002D   0A           INC     R2
   \   00002E   EA           MOV     A,R2
   \   00002F   C3           CLR     C
   \   000030   9403         SUBB    A,#0x3
   \   000032   40D7         JC      ??ZDApp_GetEmptyPendingBindReq_1
   3435            }
   3436          
   3437            // No empty entry was found
   3438            return NULL;
   \                     ??ZDApp_GetEmptyPendingBindReq_0:
   \   000034   7A00         MOV     R2,#0x0
   \   000036   7B00         MOV     R3,#0x0
   \                     ??ZDApp_GetEmptyPendingBindReq_3:
   \   000038   02....       LJMP    ??Subroutine56_0 & 0xFFFF
   3439          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine68_0:
   \   000000   F9           MOV     R1,A
   \   000001   12....       LCALL   ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_139:
   \   000004   2420         ADD     A,#0x20
   \   000006   F582         MOV     DPL,A
   \   000008   E4           CLR     A
   \   000009   39           ADDC    A,R1
   \   00000A   F583         MOV     DPH,A
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   000003   E0           MOVX    A,@DPTR
   \   000004   28           ADD     A,R0
   \   000005   F8           MOV     R0,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   39           ADDC    A,R1
   \   000009   F9           MOV     R1,A
   \   00000A   E8           MOV     A,R0
   \   00000B   22           RET
   3440          
   3441          /*********************************************************************
   3442           * @fn          ZDApp_ProcessPendingBindReq
   3443           *
   3444           * @brief       Process pending entry based on EXT address.
   3445           *
   3446           * @param       extAddr - of device to look up
   3447           *
   3448           * @return      none
   3449           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3450          void ZDApp_ProcessPendingBindReq( uint8 *extAddr )
   \                     ZDApp_ProcessPendingBindReq:
   3451          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V2,R2
   \   00000C   8B..         MOV     ?V3,R3
   3452            uint8 i;
   3453          
   3454            // Loop through all the pending entries for that Ext Address
   3455            // to create Bind Entries and send Bind Rsp
   3456            if ( ZDAppPendingBindReq != NULL )
   \   00000E   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_122:
   \   000011   7003         JNZ     $+5
   \   000013   02....       LJMP    ??ZDApp_ProcessPendingBindReq_0 & 0xFFFF
   3457            {
   3458              for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
   \   000016   75..00       MOV     ?V0,#0x0
   3459              {
   3460                if ( osal_memcmp( ZDAppPendingBindReq[i].bindReq.dstAddress.addr.extAddr,
   3461                                  extAddr, Z_EXTADDR_LEN ) == TRUE )
   \                     ??ZDApp_ProcessPendingBindReq_1:
   \   000019                ; Setup parameters for call to function osal_memcmp
   \   000019   85....       MOV     ?V4,?V2
   \   00001C   85....       MOV     ?V5,?V3
   \   00001F   75..00       MOV     ?V6,#0x0
   \   000022   78..         MOV     R0,#?V4
   \   000024   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000027   7C08         MOV     R4,#0x8
   \   000029   7D00         MOV     R5,#0x0
   \   00002B   E5..         MOV     A,?V0
   \   00002D   75F021       MOV     B,#0x21
   \   000030   A4           MUL     AB
   \   000031   F8           MOV     R0,A
   \   000032   A9F0         MOV     R1,B
   \   000034   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000037   F5..         MOV     ?V4,A
   \   000039   E4           CLR     A
   \   00003A   39           ADDC    A,R1
   \   00003B   A9..         MOV     R1,?V4
   \   00003D   FA           MOV     R2,A
   \   00003E   7B00         MOV     R3,#0x0
   \   000040   12....       LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   000043   7403         MOV     A,#0x3
   \   000045   12....       LCALL   ?DEALLOC_XSTACK8
   \   000048   E9           MOV     A,R1
   \   000049   6401         XRL     A,#0x1
   \   00004B   6003         JZ      $+5
   \   00004D   02....       LJMP    ??ZDApp_ProcessPendingBindReq_2 & 0xFFFF
   3462                {
   3463                  uint8 bindStat = ZDP_TABLE_FULL; // Assume table is full
   \   000050   85..82       MOV     DPL,?XSP + 0
   \   000053   85..83       MOV     DPH,?XSP + 1
   \   000056   748C         MOV     A,#-0x74
   \   000058   F0           MOVX    @DPTR,A
   3464          
   3465                  // Add Bind entry
   3466                  if ( APSME_BindRequest( ZDAppPendingBindReq[i].bindReq.srcEndpoint,
   3467                                          ZDAppPendingBindReq[i].bindReq.clusterID,
   3468                                          &(ZDAppPendingBindReq[i].bindReq.dstAddress),
   3469                                          ZDAppPendingBindReq[i].bindReq.dstEndpoint ) == ZSuccess )
   \   000059   E5..         MOV     A,?V0
   \   00005B   75F021       MOV     B,#0x21
   \   00005E   A4           MUL     AB
   \   00005F   FE           MOV     R6,A
   \   000060   AFF0         MOV     R7,B
   \   000062   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   000065   E0           MOVX    A,@DPTR
   \   000066   2E           ADD     A,R6
   \   000067   FE           MOV     R6,A
   \   000068   A3           INC     DPTR
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   3F           ADDC    A,R7
   \   00006B   FF           MOV     R7,A
   \   00006C                ; Setup parameters for call to function APSME_BindRequest
   \   00006C   12....       LCALL   ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   F5..         MOV     ?V1,A
   \   000072   78..         MOV     R0,#?V1
   \   000074   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000077   EE           MOV     A,R6
   \   000078   240B         ADD     A,#0xb
   \   00007A   FC           MOV     R4,A
   \   00007B   E4           CLR     A
   \   00007C   3F           ADDC    A,R7
   \   00007D   FD           MOV     R5,A
   \   00007E   8E82         MOV     DPL,R6
   \   000080   8F83         MOV     DPH,R7
   \   000082   A3           INC     DPTR
   \   000083   A3           INC     DPTR
   \   000084   A3           INC     DPTR
   \   000085   A3           INC     DPTR
   \   000086   A3           INC     DPTR
   \   000087   A3           INC     DPTR
   \   000088   A3           INC     DPTR
   \   000089   A3           INC     DPTR
   \   00008A   A3           INC     DPTR
   \   00008B   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   00008E   A3           INC     DPTR
   \   00008F   A3           INC     DPTR
   \   000090   A3           INC     DPTR
   \   000091   A3           INC     DPTR
   \   000092   A3           INC     DPTR
   \   000093   A3           INC     DPTR
   \   000094   A3           INC     DPTR
   \   000095   A3           INC     DPTR
   \   000096   E0           MOVX    A,@DPTR
   \   000097   F9           MOV     R1,A
   \   000098   12....       LCALL   `??APSME_BindRequest::?relay`; Banked call to: APSME_BindRequest
   \   00009B   7401         MOV     A,#0x1
   \   00009D   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A0   E9           MOV     A,R1
   \   0000A1   7008         JNZ     ??ZDApp_ProcessPendingBindReq_3
   3470                  {
   3471                    // valid entry
   3472                    bindStat = ZDP_SUCCESS;
   \   0000A3   85..82       MOV     DPL,?XSP + 0
   \   0000A6   85..83       MOV     DPH,?XSP + 1
   \   0000A9   E4           CLR     A
   \   0000AA   F0           MOVX    @DPTR,A
   3473          
   3474                    // Notify to save info into NV
   3475                    ZDApp_NVUpdate();
   3476                  }
   3477          
   3478                  // Send back a response message
   3479                  ZDP_BindRsp( ZDAppPendingBindReq[i].transSeq, &(ZDAppPendingBindReq[i].srcAddr),
   3480                               bindStat, ZDAppPendingBindReq[i].securityUse );
   \                     ??ZDApp_ProcessPendingBindReq_3:
   \   0000AB   E5..         MOV     A,?V0
   \   0000AD   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   0000B0   F5..         MOV     ?V1,A
   \   0000B2   78..         MOV     R0,#?V1
   \   0000B4   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000B7   7401         MOV     A,#0x1
   \   0000B9   12....       LCALL   ?XSTACK_DISP100_8
   \   0000BC   88..         MOV     ?V4,R0
   \   0000BE   89..         MOV     ?V5,R1
   \   0000C0   78..         MOV     R0,#?V4
   \   0000C2   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C5   75..21       MOV     ?V4,#0x21
   \   0000C8   75..80       MOV     ?V5,#-0x80
   \   0000CB   78..         MOV     R0,#?V4
   \   0000CD   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000D0   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   0000D3   5001         JNC     ??ZDApp_ProcessPendingBindReq_4
   \   0000D5   0B           INC     R3
   \                     ??ZDApp_ProcessPendingBindReq_4:
   \   0000D6   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   0000D9   7405         MOV     A,#0x5
   \   0000DB   12....       LCALL   ?DEALLOC_XSTACK8
   3481          
   3482                  // Set the pending request entry to default values
   3483                  ZDApp_SetPendingBindDefault( &ZDAppPendingBindReq[i] );
   \   0000DE                ; Setup parameters for call to function ZDApp_SetPendingBindDefault
   \   0000DE   12....       LCALL   ?Subroutine40 & 0xFFFF
   3484                }
   3485              }
   \                     ??CrossCallReturnLabel_48:
   \   0000E1   12....       LCALL   `??ZDApp_SetPendingBindDefault::?relay`; Banked call to: ZDApp_SetPendingBindDefault
   \                     ??ZDApp_ProcessPendingBindReq_2:
   \   0000E4   05..         INC     ?V0
   \   0000E6   E5..         MOV     A,?V0
   \   0000E8   C3           CLR     C
   \   0000E9   9403         SUBB    A,#0x3
   \   0000EB   5003         JNC     $+5
   \   0000ED   02....       LJMP    ??ZDApp_ProcessPendingBindReq_1 & 0xFFFF
   3486            }
   3487          }
   \                     ??ZDApp_ProcessPendingBindReq_0:
   \   0000F0   7401         MOV     A,#0x1
   \   0000F2   02....       LJMP    ?Subroutine5 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   000003   E0           MOVX    A,@DPTR
   \   000004   2E           ADD     A,R6
   \   000005   FA           MOV     R2,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   3F           ADDC    A,R7
   \   000009   FB           MOV     R3,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   7901         MOV     R1,#0x1
   \   000002   EA           MOV     A,R2
   \   000003   2415         ADD     A,#0x15
   \   000005   FC           MOV     R4,A
   \   000006   E4           CLR     A
   \   000007   3B           ADDC    A,R3
   \   000008   FD           MOV     R5,A
   \   000009   EA           MOV     A,R2
   \   00000A   241F         ADD     A,#0x1f
   \   00000C   FA           MOV     R2,A
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   12....       LCALL   ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_138:
   \   000003   240B         ADD     A,#0xb
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   75F021       MOV     B,#0x21
   \   000003   A4           MUL     AB
   \   000004   FE           MOV     R6,A
   \   000005   AFF0         MOV     R7,B
   \   000007   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   00000A                ; Setup parameters for call to function ZDP_SendData
   \   00000A                ; Setup parameters for call to function ZDP_SendData
   \   00000A   EA           MOV     A,R2
   \   00000B   241E         ADD     A,#0x1e
   \   00000D   F582         MOV     DPL,A
   \   00000F   E4           CLR     A
   \   000010   3B           ADDC    A,R3
   \   000011   F583         MOV     DPH,A
   \   000013   E0           MOVX    A,@DPTR
   \   000014   22           RET
   3488          
   3489          /*********************************************************************
   3490           * @fn          ZDApp_AgeOutPendingBindEntry
   3491           *
   3492           * @brief       Age out pending Bind Req entries.
   3493           *
   3494           * @param       none
   3495           *
   3496           * @return      none
   3497           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3498          void ZDApp_AgeOutPendingBindEntry( void )
   \                     ZDApp_AgeOutPendingBindEntry:
   3499          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 14
   \   000005   74F2         MOV     A,#-0xe
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   3500            uint8 i;
   3501            bool entryFound = FALSE;
   \   00000A   75..00       MOV     ?V0,#0x0
   3502          
   3503            if ( ZDAppPendingBindReq != NULL )
   \   00000D   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_123:
   \   000010   7003         JNZ     $+5
   \   000012   02....       LJMP    ??ZDApp_AgeOutPendingBindEntry_0 & 0xFFFF
   3504            {
   3505              for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
   \   000015   75..00       MOV     ?V1,#0x0
   3506              {
   3507                if ( ZDAppPendingBindReq[i].age > 1 )
   \                     ??ZDApp_AgeOutPendingBindEntry_1:
   \   000018   E5..         MOV     A,?V1
   \   00001A   75F021       MOV     B,#0x21
   \   00001D   A4           MUL     AB
   \   00001E   F8           MOV     R0,A
   \   00001F   AAF0         MOV     R2,B
   \   000021   12....       LCALL   ??Subroutine67_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_135:
   \   000024   C3           CLR     C
   \   000025   9402         SUBB    A,#0x2
   \   000027   E5..         MOV     A,?V1
   \   000029   75F021       MOV     B,#0x21
   \   00002C   400B         JC      ??ZDApp_AgeOutPendingBindEntry_2
   3508                {
   3509                  ZDAppPendingBindReq[i].age--;
   \   00002E   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_136:
   \   000031   14           DEC     A
   \   000032   F0           MOVX    @DPTR,A
   3510          
   3511                  entryFound = TRUE;
   \   000033   75..01       MOV     ?V0,#0x1
   \   000036   02....       LJMP    ??ZDApp_AgeOutPendingBindEntry_3 & 0xFFFF
   3512                }
   3513                else if ( ZDAppPendingBindReq[i].age == 1 )
   \                     ??ZDApp_AgeOutPendingBindEntry_2:
   \   000039   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_137:
   \   00003C   6401         XRL     A,#0x1
   \   00003E   6003         JZ      $+5
   \   000040   02....       LJMP    ??ZDApp_AgeOutPendingBindEntry_3 & 0xFFFF
   3514                {
   3515                  // The record has aged out and has valid data
   3516                  AddrMgrEntry_t entry;
   3517                  uint8 bindStat = ZDP_TABLE_FULL; // Assume table is full
   \   000043   85..82       MOV     DPL,?XSP + 0
   \   000046   85..83       MOV     DPH,?XSP + 1
   \   000049   748C         MOV     A,#-0x74
   \   00004B   F0           MOVX    @DPTR,A
   3518          
   3519                  entry.user = ADDRMGR_USER_BINDING;
   \   00004C   7401         MOV     A,#0x1
   \   00004E   12....       LCALL   ?XSTACK_DISP0_8
   \   000051   7404         MOV     A,#0x4
   \   000053   F0           MOVX    @DPTR,A
   3520          
   3521                  // Remove the entry in address manager so we do not keep entries
   3522                  // with invalid addresses
   3523                  AddrMgrExtAddrSet( entry.extAddr, ZDAppPendingBindReq[i].bindReq.dstAddress.addr.extAddr );
   \   000054                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   000054   E5..         MOV     A,?V1
   \   000056   75F021       MOV     B,#0x21
   \   000059   A4           MUL     AB
   \   00005A   F8           MOV     R0,A
   \   00005B   EA           MOV     A,R2
   \   00005C   F9           MOV     R1,A
   \   00005D   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000060   FC           MOV     R4,A
   \   000061   E4           CLR     A
   \   000062   39           ADDC    A,R1
   \   000063   FD           MOV     R5,A
   \   000064   7404         MOV     A,#0x4
   \   000066   12....       LCALL   ?XSTACK_DISP0_8
   \   000069   AA82         MOV     R2,DPL
   \   00006B   AB83         MOV     R3,DPH
   \   00006D   12....       LCALL   `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
   3524          
   3525                  if ( AddrMgrEntryLookupExt( &entry ) == TRUE )
   \   000070                ; Setup parameters for call to function AddrMgrEntryLookupExt
   \   000070   7401         MOV     A,#0x1
   \   000072   12....       LCALL   ?XSTACK_DISP101_8
   \   000075   12....       LCALL   `??AddrMgrEntryLookupExt::?relay`; Banked call to: AddrMgrEntryLookupExt
   \   000078   E9           MOV     A,R1
   \   000079   6401         XRL     A,#0x1
   \   00007B   7017         JNZ     ??ZDApp_AgeOutPendingBindEntry_4
   3526                  {
   3527                    if ( entry.nwkAddr == INVALID_NODE_ADDR )
   \   00007D   7402         MOV     A,#0x2
   \   00007F   12....       LCALL   ?XSTACK_DISP0_8
   \   000082   E0           MOVX    A,@DPTR
   \   000083   64FE         XRL     A,#0xfe
   \   000085   7003         JNZ     ??ZDApp_AgeOutPendingBindEntry_5
   \   000087   A3           INC     DPTR
   \   000088   E0           MOVX    A,@DPTR
   \   000089   F4           CPL     A
   \                     ??ZDApp_AgeOutPendingBindEntry_5:
   \   00008A   7008         JNZ     ??ZDApp_AgeOutPendingBindEntry_4
   3528                    {
   3529                      // Release the entry that contains an invalid NWK address
   3530                      AddrMgrEntryRelease( &entry );
   \   00008C                ; Setup parameters for call to function AddrMgrEntryRelease
   \   00008C   7401         MOV     A,#0x1
   \   00008E   12....       LCALL   ?XSTACK_DISP101_8
   \   000091   12....       LCALL   `??AddrMgrEntryRelease::?relay`; Banked call to: AddrMgrEntryRelease
   3531                    }
   3532                  }
   3533          
   3534                  // Send the Bind Response with failure status
   3535                  ZDP_BindRsp( ZDAppPendingBindReq[i].transSeq,
   3536                               &(ZDAppPendingBindReq[i].srcAddr),
   3537                               bindStat, ZDAppPendingBindReq[i].securityUse );
   \                     ??ZDApp_AgeOutPendingBindEntry_4:
   \   000094   E5..         MOV     A,?V1
   \   000096   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000099   F5..         MOV     ?V2,A
   \   00009B   78..         MOV     R0,#?V2
   \   00009D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000A0   7401         MOV     A,#0x1
   \   0000A2   12....       LCALL   ?XSTACK_DISP100_8
   \   0000A5   88..         MOV     ?V2,R0
   \   0000A7   89..         MOV     ?V3,R1
   \   0000A9   78..         MOV     R0,#?V2
   \   0000AB   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000AE   75..21       MOV     ?V2,#0x21
   \   0000B1   75..80       MOV     ?V3,#-0x80
   \   0000B4   78..         MOV     R0,#?V2
   \   0000B6   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B9   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   0000BC   5001         JNC     ??ZDApp_AgeOutPendingBindEntry_6
   \   0000BE   0B           INC     R3
   \                     ??ZDApp_AgeOutPendingBindEntry_6:
   \   0000BF   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   0000C2   7405         MOV     A,#0x5
   \   0000C4   12....       LCALL   ?DEALLOC_XSTACK8
   3538          
   3539                  // Clear the record and set to default values
   3540                  ZDApp_SetPendingBindDefault( &ZDAppPendingBindReq[i] );
   \   0000C7                ; Setup parameters for call to function ZDApp_SetPendingBindDefault
   \   0000C7   12....       LCALL   ?Subroutine40 & 0xFFFF
   3541                }
   3542              }
   \                     ??CrossCallReturnLabel_49:
   \   0000CA   12....       LCALL   `??ZDApp_SetPendingBindDefault::?relay`; Banked call to: ZDApp_SetPendingBindDefault
   \                     ??ZDApp_AgeOutPendingBindEntry_3:
   \   0000CD   05..         INC     ?V1
   \   0000CF   E5..         MOV     A,?V1
   \   0000D1   C3           CLR     C
   \   0000D2   9403         SUBB    A,#0x3
   \   0000D4   5003         JNC     $+5
   \   0000D6   02....       LJMP    ??ZDApp_AgeOutPendingBindEntry_1 & 0xFFFF
   3543            }
   3544          
   3545            if ( entryFound == FALSE )
   \   0000D9   E5..         MOV     A,?V0
   \   0000DB   A2E0         MOV     C,0xE0 /* A   */.0
   \   0000DD   400E         JC      ??ZDApp_AgeOutPendingBindEntry_7
   3546            {
   3547              osal_stop_timerEx( ZDAppTaskID, ZDO_PENDING_BIND_REQ_EVT );
   \                     ??ZDApp_AgeOutPendingBindEntry_0:
   \   0000DF                ; Setup parameters for call to function osal_stop_timerEx
   \   0000DF   7A00         MOV     R2,#0x0
   \   0000E1   7B10         MOV     R3,#0x10
   \   0000E3   90....       MOV     DPTR,#ZDAppTaskID
   \   0000E6   E0           MOVX    A,@DPTR
   \   0000E7   F9           MOV     R1,A
   \   0000E8   12....       LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   \   0000EB   8017         SJMP    ??ZDApp_AgeOutPendingBindEntry_8
   3548            }
   3549            else
   3550            {
   3551              osal_start_timerEx( ZDAppTaskID, ZDO_PENDING_BIND_REQ_EVT,
   3552                                  AGE_OUT_PEND_BIND_REQ_DELAY );
   \                     ??ZDApp_AgeOutPendingBindEntry_7:
   \   0000ED                ; Setup parameters for call to function osal_start_timerEx
   \   0000ED   90....       MOV     DPTR,#__Constant_3e8
   \   0000F0   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   0000F3   7A00         MOV     R2,#0x0
   \   0000F5   7B10         MOV     R3,#0x10
   \   0000F7   90....       MOV     DPTR,#ZDAppTaskID
   \   0000FA   E0           MOVX    A,@DPTR
   \   0000FB   F9           MOV     R1,A
   \   0000FC   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   0000FF   7404         MOV     A,#0x4
   \   000101   12....       LCALL   ?DEALLOC_XSTACK8
   3553            }
   3554          }
   \                     ??ZDApp_AgeOutPendingBindEntry_8:
   \   000104   740E         MOV     A,#0xe
   \   000106                REQUIRE ?Subroutine4
   \   000106                ; // Fall through to label ?Subroutine4

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   A4           MUL     AB
   \   000001   F8           MOV     R0,A
   \   000002                REQUIRE ??Subroutine67_0
   \   000002                ; // Fall through to label ??Subroutine67_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine67_0:
   \   000000   EA           MOV     A,R2
   \   000001                REQUIRE ??Subroutine68_0
   \   000001                ; // Fall through to label ??Subroutine68_0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zdoDiscCounter>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for continueJoining>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for devState>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ZDApp_epDesc>`:
   \   000000   00           DB 0
   \   000001   ....         DW ZDAppTaskID
   \   000003   0000         DW 0H
   \   000005   00           DB 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ZDApp_SavedPollRate>`:
   \   000000   E803         DW 1000

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_SecInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SecInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_event_loop::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_event_loop

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ProcessSecEvent::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessSecEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDOInitDevice::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDOInitDevice

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ReadNetworkRestoreState::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ReadNetworkRestoreState

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDAppDetermineDeviceType::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDAppDetermineDeviceType

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_NetworkStartEvt::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NetworkStartEvt

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_DeviceAuthEvt::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_DeviceAuthEvt

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_SaveNetworkStateEvt::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SaveNetworkStateEvt

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_InitUserDesc::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_InitUserDesc

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDAppCheckForHoldKey::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDAppCheckForHoldKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ProcessOSALMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessOSALMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ProcessMsgCBs::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessMsgCBs

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_RegisterCBs::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_RegisterCBs

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ProcessSecMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessSecMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ProcessNetworkJoin::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessNetworkJoin

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_SaveNwkKey::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SaveNwkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ForceConcentratorChange::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ForceConcentratorChange

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ResetNwkKey::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ResetNwkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_RestoreNwkKey::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_RestoreNwkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ResetTimerStart::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ResetTimerStart

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ResetTimerCancel::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ResetTimerCancel

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_LeaveCtrlInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_LeaveCtrlSet::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_LeaveCtrlReset::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlReset

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_LeaveCtrlBypass::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlBypass

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_LeaveCtrlStartup::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlStartup

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_LeaveReset::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveReset

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_LeaveUpdate::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveUpdate

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_NetworkDiscoveryReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NetworkDiscoveryReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_JoinReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_JoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_DeviceConfigured::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_DeviceConfigured

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_SendEventMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SendEventMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_SendMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SendMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_NetworkDiscoveryConfirmCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_NetworkDiscoveryConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_NwkDescListProcessing::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NwkDescListProcessing

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_NetworkFormationConfirmCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_NetworkFormationConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_beaconNotifyIndCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_beaconNotifyIndCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_StartRouterConfirmCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_StartRouterConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_JoinConfirmCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_JoinConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_PermitJoinCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_PermitJoinCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_AddrChangeIndicationCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_AddrChangeIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_JoinIndicationCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_JoinIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ConcentratorIndicationCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ConcentratorIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_LeaveCnf::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_LeaveCnf

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_LeaveInd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_LeaveInd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_SyncIndicationCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_SyncIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ManytoOneFailureIndicationCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ManytoOneFailureIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_PollConfirmCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_PollConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_NetworkStatusCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_NetworkStatusCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??AddrMgrWriteNVRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AddrMgrWriteNVRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_UpdateDeviceIndication::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_UpdateDeviceIndication

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_InMsgCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_InMsgCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ChangeMatchDescRespPermission::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ChangeMatchDescRespPermission

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_NetworkInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NetworkInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_NwkStateUpdateCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NwkStateUpdateCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_NodeProfileSync::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NodeProfileSync

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_StartJoiningCycle::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_StartJoiningCycle

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_StopJoiningCycle::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_StopJoiningCycle

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_AnnounceNewAddress::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_AnnounceNewAddress

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_NVUpdate::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NVUpdate

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_CoordStartPANIDConflictCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_CoordStartPANIDConflictCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_SrcRtgIndCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_SrcRtgIndCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_InitZdoCBFunc::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_InitZdoCBFunc

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_RegisterForZdoCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_RegisterForZdoCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_DeregisterForZdoCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_DeregisterForZdoCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_SetPendingBindDefault::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SetPendingBindDefault

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_InitPendingBind::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_InitPendingBind

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_GetEmptyPendingBindReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_GetEmptyPendingBindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ProcessPendingBindReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessPendingBindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_AgeOutPendingBindEntry::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_AgeOutPendingBindEntry

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Ulazi u if.">`:
   \   000000   556C617A     DB "Ulazi u if."
   \            69207520
   \            69662E00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Ne ulazi u if.">`:
   \   000000   4E652075     DB "Ne ulazi u if."
   \            6C617A69
   \            20752069
   \            662E00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_64:
   \   000000   64000000     DD 100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_4e2:
   \   000000   E2040000     DD 1250

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_258:
   \   000000   58020000     DD 600

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e8:
   \   000000   E8030000     DD 1000
   3555          #endif
   3556          #endif
   3557          
   3558          /*********************************************************************
   3559          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      0   AddrMgrWriteNVRequest
      2      0   ZDAppCheckForHoldKey
        2      0   -> HalKeyRead
        2      0   -> HalLcdWriteString
      2     12   ZDAppDetermineDeviceType
        2      0   -> nwk_ExtPANIDValid
      0     45   ZDApp_AgeOutPendingBindEntry
        0     26   -> AddrMgrEntryLookupExt
        0     26   -> AddrMgrEntryRelease
        0     26   -> AddrMgrExtAddrSet
        0     26   -> ZDApp_SetPendingBindDefault
        0     31   -> ZDP_SendData
        0     30   -> osal_start_timerEx
        0     26   -> osal_stop_timerEx
      0     23   ZDApp_AnnounceNewAddress
        0     10   -> APSME_HoldDataRequests
        0     10   -> NLME_GetExtAddr
        0     10   -> NLME_GetShortAddr
        0     11   -> ZDP_DeviceAnnce
      0      9   ZDApp_ChangeMatchDescRespPermission
        0      9   -> afSetMatch
      0      0   ZDApp_CoordStartPANIDConflictCB
      2      9   ZDApp_DeviceAuthEvt
        2      0   -> NLME_SetPollRate
        2      0   -> ZDApp_AnnounceNewAddress
        2      0   -> ZDApp_ResetTimerCancel
        2      0   -> ZDApp_SaveNwkKey
        2      0   -> osal_set_event
      0     16   ZDApp_DeviceConfigured
        0     16   -> osal_nv_read
      0     14   ZDApp_ForceConcentratorChange
        0     14   -> osal_nv_read
        0     14   -> osal_start_timerEx
        0     10   -> osal_stop_timerEx
      2      0   ZDApp_GetEmptyPendingBindReq
      0     14   ZDApp_InMsgCB
        0     14   -> ZDP_GenericRsp
      0      9   ZDApp_Init
        0      9   -> HalLedBlink
        0      9   -> NLME_GetExtAddr
        0      9   -> ZDApp_InitPendingBind
        0      9   -> ZDApp_InitUserDesc
        0      9   -> ZDApp_InitZdoCBFunc
        0      9   -> ZDApp_RegisterCBs
        0      9   -> ZDOInitDevice
        0      9   -> ZDO_Init
        0      9   -> afRegister
      0     18   ZDApp_InitPendingBind
        0      9   -> ZDApp_SetPendingBindDefault
        0      9   -> osal_mem_alloc
      0     40   ZDApp_InitUserDesc
        0     27   -> osal_memset
        0     29   -> osal_nv_item_init
        0     31   -> osal_nv_read
      2      9   ZDApp_InitZdoCBFunc
      0     20   ZDApp_JoinReq
        0     16   -> NLME_JoinRequest
        0     12   -> ZDApp_NodeProfileSync
      2      0   ZDApp_LeaveCtrlBypass
      0     26   ZDApp_LeaveCtrlInit
        0     12   -> osal_nv_item_init
        0     14   -> osal_nv_read
      0     14   ZDApp_LeaveCtrlReset
        0     14   -> osal_nv_write
      0     23   ZDApp_LeaveCtrlSet
        0     14   -> osal_nv_write
      2     12   ZDApp_LeaveCtrlStartup
        2      0   -> ZDApp_LeaveCtrlReset
      0     21   ZDApp_LeaveReset
        0      9   -> ZDApp_LeaveCtrlSet
        0      9   -> ZDApp_ResetTimerStart
      0     39   ZDApp_LeaveUpdate
        0     24   -> RTG_RemoveRtgEntry
        0     24   -> ZDSecMgrAddrClear
        0     24   -> ZDSecMgrDeviceRemoveByExtAddr
        0     24   -> nwkNeighborRemove
        0     27   -> osal_memcpy
      0      0   ZDApp_NVUpdate
      0     12   ZDApp_NetworkDiscoveryReq
        0     12   -> NLME_NetworkDiscoveryRequest
      0     29   ZDApp_NetworkInit
        0     12   -> osal_set_event
        0     16   -> osal_start_timerEx
      2      0   ZDApp_NetworkStartEvt
        2      0   -> NLME_GetEnergyThreshold
        2      0   -> NLME_SetEnergyThreshold
        2      0   -> osal_pwrmgr_device
        2      0   -> osal_set_event
      0     22   ZDApp_NodeProfileSync
        0      9   -> NLME_SetBroadcastFilter
      0     27   ZDApp_NwkDescListProcessing
        0     14   -> nwk_ExtPANIDValid
        0     14   -> nwk_getNwkDescList
        0     14   -> sAddrExtCmp
      2      0   ZDApp_NwkStateUpdateCB
        2      0   -> osal_get_timeoutEx
      0     46   ZDApp_ProcessMsgCBs
        0     33   -> ZDApp_ProcessPendingBindReq
        0     33   -> ZDO_ParseAddrRsp
        0     33   -> ZDO_ParseBindUnbindReq
        0     33   -> ZDO_ProcessBindUnbindReq
        0     33   -> ZDO_UpdateAddrManager
        0     33   -> osal_mem_free
      0     25   ZDApp_ProcessNetworkJoin
        0     12   -> NLME_GetShortAddr
        0     12   -> NLME_NwkDiscTerm
        0     12   -> NLME_SetPollRate
        0     12   -> NLME_SetQueuedPollRate
        0     12   -> NLME_SetResponseRate
        0     12   -> ZDApp_AnnounceNewAddress
        0     12   -> ZDApp_NetworkInit
        0     12   -> ZDApp_ResetTimerStart
        0     12   -> ZDApp_RestoreNwkKey
        0     12   -> ZMacSetReq
        0     12   -> nwkNeighborInitTable
        0     12   -> osal_rand
        0     12   -> osal_set_event
      0     31   ZDApp_ProcessOSALMsg
        0     17   -> NLME_JoinRequest
        0     13   -> NLME_ReJoinRequest
        0     13   -> NLME_ReJoinRequestUnsecure
        0     13   -> NLME_SetPollRate
        0     13   -> NLME_SetQueuedPollRate
        0     13   -> NLME_SetResponseRate
        0     13   -> ZDApp_NetworkInit
        0     13   -> ZDApp_NodeProfileSync
        0     13   -> ZDApp_NwkDescListProcessing
        0     13   -> ZDApp_ProcessMsgCBs
        0     13   -> ZDApp_ProcessNetworkJoin
        0     13   -> ZDApp_ProcessSecMsg
        0     13   -> ZDApp_RestoreNwkKey
        0     13   -> ZDP_IncomingData
        0     13   -> ZMacSetReq
        0     17   -> osal_nv_read
        0     13   -> osal_rand
        0     13   -> sAddrExtCpy
      0     54   ZDApp_ProcessPendingBindReq
        0     17   -> APSME_BindRequest
        0     16   -> ZDApp_SetPendingBindDefault
        0     21   -> ZDP_SendData
        0     19   -> osal_memcmp
      0     23   ZDApp_ProcessSecEvent
        0      9   -> ZDApp_DeviceAuthEvt
        0      9   -> ZDApp_SaveNwkKey
        0      9   -> ZDSecMgrSaveTCLinkKey
      2     13   ZDApp_ProcessSecMsg
        2      0   -> ZDSecMgrSwitchKeyInd
        2      0   -> ZDSecMgrTransportKeyInd
      0      9   ZDApp_ReadNetworkRestoreState
        0      9   -> zgReadStartupOptions
      2      9   ZDApp_RegisterCBs
        2      0   -> ZDO_RegisterForZDOMsg
      0     35   ZDApp_ResetNwkKey
        0     31   -> osal_memset
        0     35   -> osal_nv_write
      2      0   ZDApp_ResetTimerCancel
        2      0   -> osal_clear_event
        2      0   -> osal_stop_timerEx
      0     28   ZDApp_ResetTimerStart
        0     12   -> osal_get_timeoutEx
        0     16   -> osal_start_timerEx
      0     66   ZDApp_RestoreNwkKey
        0     52   -> osal_memcmp
        0     49   -> osal_memset
        0     53   -> osal_nv_read
        0     53   -> osal_nv_write
      0      0   ZDApp_SaveNetworkStateEvt
      0     44   ZDApp_SaveNwkKey
        0     31   -> SSP_ReadNwkActiveKey
        0     31   -> osal_memset
        0     35   -> osal_nv_write
      0     37   ZDApp_SecInit
        0     25   -> SSP_SwitchNwkKey
        0     25   -> SSP_UpdateNwkKey
        0     25   -> ZDSecMgrInit
        0     25   -> ZDSecMgrReadKeyFromNv
        0     25   -> osal_mem_free
        0     25   -> osal_memset
      0      9   ZDApp_SendEventMsg
        0      9   -> ZDApp_SendMsg
      1     36   ZDApp_SendMsg
        0     19   -> osal_memcpy
        0     16   -> osal_msg_allocate
        0     16   -> osal_msg_send
      0     35   ZDApp_SetPendingBindDefault
        0      9   -> osal_memset
      2      0   ZDApp_StartJoiningCycle
        2      0   -> ZDApp_NetworkInit
      2      0   ZDApp_StopJoiningCycle
      0     18   ZDApp_event_loop
        0     14   -> Onboard_soft_reset
        0     14   -> ZDApp_AgeOutPendingBindEntry
        0     14   -> ZDApp_ProcessOSALMsg
        0     14   -> ZDApp_ProcessSecEvent
        0     14   -> ZDO_StartDevice
        0     14   -> ZDO_UpdateNwkStatus
        0     14   -> osal_msg_deallocate
        0     14   -> osal_msg_receive
        0     14   -> osal_set_event
        0     18   -> osal_start_timerEx
        0     14   -> zgWriteStartupOptions
      0     21   ZDOInitDevice
        0     12   -> NLME_SetBroadcastFilter
        0     12   -> ZDAppDetermineDeviceType
        0     12   -> ZDApp_LeaveCtrlInit
        0     12   -> ZDApp_LeaveCtrlStartup
        0     12   -> ZDApp_NetworkInit
        0     12   -> ZDApp_SecInit
        0     12   -> ZDConfig_InitDescriptors
        0     12   -> osal_rand
        0     12   -> osal_set_event
        0     12   -> zgInitItems
        0     12   -> zgWriteStartupOptions
      0     12   ZDO_AddrChangeIndicationCB
        0     12   -> ZDApp_AnnounceNewAddress
        0     12   -> osal_msg_allocate
        0     12   -> osal_msg_send
        0     12   -> osal_set_event
      1     14   ZDO_ConcentratorIndicationCB
      2      0   ZDO_DeregisterForZdoCB
      1     17   ZDO_JoinConfirmCB
        0     17   -> HalLedSet
        0     17   -> ZDApp_SendMsg
        0     17   -> nwkNeighborFindEmptySlot
        0     17   -> nwkNeighborInitTable
        0     17   -> osal_memset
        0     17   -> sAddrExtCpy
      0     21   ZDO_JoinIndicationCB
        0     16   -> osal_get_timeoutEx
        0     16   -> osal_mem_alloc
        0     20   -> osal_start_timerEx
      0     10   ZDO_LeaveCnf
        0     10   -> NLME_GetExtAddr
        0     10   -> ZDApp_LeaveReset
        0     10   -> sAddrExtCmp
      0     12   ZDO_LeaveInd
        0     12   -> NLME_GetCoordShortAddr
        0     12   -> NLME_LeaveRsp
        0     12   -> NLME_SetPollRate
        0     12   -> ZDApp_LeaveReset
        0     12   -> ZDApp_LeaveUpdate
      2      0   ZDO_ManytoOneFailureIndicationCB
        2      0   -> RTG_MTORouteReq
      3      3   ZDO_NetworkDiscoveryConfirmCB
        2      3   -> ZDApp_SendMsg
      0      9   ZDO_NetworkFormationConfirmCB
        0      9   -> HalLedSet
        0      9   -> osal_set_event
      2      0   ZDO_NetworkStatusCB
        2      0   -> NLME_GetShortAddr
      3      1   ZDO_PermitJoinCB
      0      0   ZDO_PollConfirmCB
      2      0   ZDO_RegisterForZdoCB
      1     14   ZDO_SrcRtgIndCB
      0      9   ZDO_StartRouterConfirmCB
        0      9   -> HalLedSet
        0      9   -> osal_set_event
      0      9   ZDO_SyncIndicationCB
        0      9   -> ZDApp_SendMsg
        0      9   -> nwkNeighborInitTable
      0      0   ZDO_UpdateDeviceIndication
      1     14   ZDO_beaconNotifyIndCB
        0     14   -> osal_mem_alloc
        0     14   -> osal_memset
        0     14   -> sAddrExtCpy


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      15  ?<Constant "Ne ulazi u if.">
      12  ?<Constant "Ulazi u if.">
       2  ?<Initializer for ZDApp_SavedPollRate>
       6  ?<Initializer for ZDApp_epDesc>
       1  ?<Initializer for continueJoining>
       1  ?<Initializer for devState>
       1  ?<Initializer for zdoDiscCounter>
       6  ??Subroutine50_0
      11  ??Subroutine51_0
       8  ??Subroutine52_0
       8  ??Subroutine53_0
       3  ??Subroutine54_0
       5  ??Subroutine55_0
       7  ??Subroutine56_0
       5  ??Subroutine57_0
       6  ??Subroutine58_0
       4  ??Subroutine59_0
       6  ??Subroutine60_0
       6  ??Subroutine61_0
      10  ??Subroutine62_0
       6  ??Subroutine63_0
       8  ??Subroutine64_0
       6  ??Subroutine65_0
       5  ??Subroutine66_0
       1  ??Subroutine67_0
      14  ??Subroutine68_0
      10  ?Subroutine0
       5  ?Subroutine1
       5  ?Subroutine10
       3  ?Subroutine11
       8  ?Subroutine12
      12  ?Subroutine13
       6  ?Subroutine14
       3  ?Subroutine15
       2  ?Subroutine16
      21  ?Subroutine17
       1  ?Subroutine18
       4  ?Subroutine19
      35  ?Subroutine2
       6  ?Subroutine20
       4  ?Subroutine21
      10  ?Subroutine22
       3  ?Subroutine23
       6  ?Subroutine24
      10  ?Subroutine25
       6  ?Subroutine26
       4  ?Subroutine27
       5  ?Subroutine28
       6  ?Subroutine29
       3  ?Subroutine3
       5  ?Subroutine30
       1  ?Subroutine31
       4  ?Subroutine32
       8  ?Subroutine33
       4  ?Subroutine34
      14  ?Subroutine35
       8  ?Subroutine36
      10  ?Subroutine37
      10  ?Subroutine38
       8  ?Subroutine39
       3  ?Subroutine4
      11  ?Subroutine40
       1  ?Subroutine41
      12  ?Subroutine42
       9  ?Subroutine43
      15  ?Subroutine44
      12  ?Subroutine45
      11  ?Subroutine46
       5  ?Subroutine47
      10  ?Subroutine48
      10  ?Subroutine49
       8  ?Subroutine5
       5  ?Subroutine6
       2  ?Subroutine7
       5  ?Subroutine8
       5  ?Subroutine9
       3  AddrMgrWriteNVRequest
       6  AddrMgrWriteNVRequest::?relay
       1  MatchRsps
      47  ZDAppCheckForHoldKey
       6  ZDAppCheckForHoldKey::?relay
      76  ZDAppDetermineDeviceType
       6  ZDAppDetermineDeviceType::?relay
       9  ZDAppNwkAddr
       2  ZDAppPendingBindReq
       1  ZDAppTaskID
     262  ZDApp_AgeOutPendingBindEntry
       6  ZDApp_AgeOutPendingBindEntry::?relay
      59  ZDApp_AnnounceNewAddress
       6  ZDApp_AnnounceNewAddress::?relay
       2  ZDApp_AutoFindMode_epDesc
      11  ZDApp_ChangeMatchDescRespPermission
       6  ZDApp_ChangeMatchDescRespPermission::?relay
      10  ZDApp_CoordStartPANIDConflictCB
       6  ZDApp_CoordStartPANIDConflictCB::?relay
      55  ZDApp_DeviceAuthEvt
       6  ZDApp_DeviceAuthEvt::?relay
      84  ZDApp_DeviceConfigured
       6  ZDApp_DeviceConfigured::?relay
     128  ZDApp_ForceConcentratorChange
       6  ZDApp_ForceConcentratorChange::?relay
      59  ZDApp_GetEmptyPendingBindReq
       6  ZDApp_GetEmptyPendingBindReq::?relay
      82  ZDApp_InMsgCB
       6  ZDApp_InMsgCB::?relay
      88  ZDApp_Init
       6  ZDApp_Init::?relay
      61  ZDApp_InitPendingBind
       6  ZDApp_InitPendingBind::?relay
     111  ZDApp_InitUserDesc
       6  ZDApp_InitUserDesc::?relay
      26  ZDApp_InitZdoCBFunc
       6  ZDApp_InitZdoCBFunc::?relay
      75  ZDApp_JoinReq
       6  ZDApp_JoinReq::?relay
       1  ZDApp_LeaveCtrl
      15  ZDApp_LeaveCtrlBypass
       6  ZDApp_LeaveCtrlBypass::?relay
      75  ZDApp_LeaveCtrlInit
       6  ZDApp_LeaveCtrlInit::?relay
      13  ZDApp_LeaveCtrlReset
       6  ZDApp_LeaveCtrlReset::?relay
      22  ZDApp_LeaveCtrlSet
       6  ZDApp_LeaveCtrlSet::?relay
      47  ZDApp_LeaveCtrlStartup
       6  ZDApp_LeaveCtrlStartup::?relay
      18  ZDApp_LeaveReset
       6  ZDApp_LeaveReset::?relay
     119  ZDApp_LeaveUpdate
       6  ZDApp_LeaveUpdate::?relay
       3  ZDApp_NVUpdate
       6  ZDApp_NVUpdate::?relay
      11  ZDApp_NetworkDiscoveryReq
       6  ZDApp_NetworkDiscoveryReq::?relay
      57  ZDApp_NetworkInit
       6  ZDApp_NetworkInit::?relay
      89  ZDApp_NetworkStartEvt
       6  ZDApp_NetworkStartEvt::?relay
       2  ZDApp_NewDeviceList
      45  ZDApp_NodeProfileSync
       6  ZDApp_NodeProfileSync::?relay
     267  ZDApp_NwkDescListProcessing
       6  ZDApp_NwkDescListProcessing::?relay
      19  ZDApp_NwkStateUpdateCB
       6  ZDApp_NwkStateUpdateCB::?relay
     131  ZDApp_ProcessMsgCBs
       6  ZDApp_ProcessMsgCBs::?relay
     436  ZDApp_ProcessNetworkJoin
       6  ZDApp_ProcessNetworkJoin::?relay
     619  ZDApp_ProcessOSALMsg
       6  ZDApp_ProcessOSALMsg::?relay
     245  ZDApp_ProcessPendingBindReq
       6  ZDApp_ProcessPendingBindReq::?relay
      72  ZDApp_ProcessSecEvent
       6  ZDApp_ProcessSecEvent::?relay
      56  ZDApp_ProcessSecMsg
       6  ZDApp_ProcessSecMsg::?relay
      23  ZDApp_ReadNetworkRestoreState
       6  ZDApp_ReadNetworkRestoreState::?relay
      55  ZDApp_RegisterCBs
       6  ZDApp_RegisterCBs::?relay
      66  ZDApp_ResetNwkKey
       6  ZDApp_ResetNwkKey::?relay
      31  ZDApp_ResetTimerCancel
       6  ZDApp_ResetTimerCancel::?relay
      57  ZDApp_ResetTimerStart
       6  ZDApp_ResetTimerStart::?relay
     211  ZDApp_RestoreNwkKey
       6  ZDApp_RestoreNwkKey::?relay
       3  ZDApp_SaveNetworkStateEvt
       6  ZDApp_SaveNetworkStateEvt::?relay
      75  ZDApp_SaveNwkKey
       6  ZDApp_SaveNwkKey::?relay
       2  ZDApp_SavedPollRate
     134  ZDApp_SecInit
       6  ZDApp_SecInit::?relay
      21  ZDApp_SendEventMsg
       6  ZDApp_SendEventMsg::?relay
      80  ZDApp_SendMsg
       6  ZDApp_SendMsg::?relay
      32  ZDApp_SetPendingBindDefault
       6  ZDApp_SetPendingBindDefault::?relay
      39  ZDApp_StartJoiningCycle
       6  ZDApp_StartJoiningCycle::?relay
      31  ZDApp_StopJoiningCycle
       6  ZDApp_StopJoiningCycle::?relay
       6  ZDApp_epDesc
     200  ZDApp_event_loop
       6  ZDApp_event_loop::?relay
     155  ZDOInitDevice
       6  ZDOInitDevice::?relay
      98  ZDO_AddrChangeIndicationCB
       6  ZDO_AddrChangeIndicationCB::?relay
      44  ZDO_ConcentratorIndicationCB
       6  ZDO_ConcentratorIndicationCB::?relay
      27  ZDO_DeregisterForZdoCB
       6  ZDO_DeregisterForZdoCB::?relay
     234  ZDO_JoinConfirmCB
       6  ZDO_JoinConfirmCB::?relay
     193  ZDO_JoinIndicationCB
       6  ZDO_JoinIndicationCB::?relay
      65  ZDO_LeaveCnf
       6  ZDO_LeaveCnf::?relay
     159  ZDO_LeaveInd
       6  ZDO_LeaveInd::?relay
      10  ZDO_ManytoOneFailureIndicationCB
       6  ZDO_ManytoOneFailureIndicationCB::?relay
      63  ZDO_NetworkDiscoveryConfirmCB
       6  ZDO_NetworkDiscoveryConfirmCB::?relay
      49  ZDO_NetworkFormationConfirmCB
       6  ZDO_NetworkFormationConfirmCB::?relay
      10  ZDO_NetworkStatusCB
       6  ZDO_NetworkStatusCB::?relay
      36  ZDO_PermitJoinCB
       6  ZDO_PermitJoinCB::?relay
       3  ZDO_PollConfirmCB
       6  ZDO_PollConfirmCB::?relay
      27  ZDO_RegisterForZdoCB
       6  ZDO_RegisterForZdoCB::?relay
      47  ZDO_SrcRtgIndCB
       6  ZDO_SrcRtgIndCB::?relay
      49  ZDO_StartRouterConfirmCB
       6  ZDO_StartRouterConfirmCB::?relay
      34  ZDO_SyncIndicationCB
       6  ZDO_SyncIndicationCB::?relay
       5  ZDO_UpdateDeviceIndication
       6  ZDO_UpdateDeviceIndication::?relay
       8  ZDO_UseExtendedPANID
     576  ZDO_beaconNotifyIndCB
       6  ZDO_beaconNotifyIndCB::?relay
       4  __Constant_258
       4  __Constant_3e8
       4  __Constant_4e2
       4  __Constant_64
       1  _tmpRejoinState
       1  continueJoining
       1  devStartMode
       1  devState
       1  nwkStatus
       1  retryCnt
       1  zdappHoldKeys
       1  zdappMgmtNwkDiscReqInProgress
       9  zdappMgmtNwkDiscRspAddr
       1  zdappMgmtNwkDiscRspTransSeq
       1  zdappMgmtNwkDiscStartIndex
       1  zdappMgmtSavedNwkState
      18  zdoCBFunc
       1  zdoDiscCounter

 
 7 037 bytes in segment BANKED_CODE
   432 bytes in segment BANK_RELAYS
    11 bytes in segment XDATA_I
    11 bytes in segment XDATA_ID
    43 bytes in segment XDATA_ROM_C
    62 bytes in segment XDATA_Z
 
   443 bytes of CODE     memory
    27 bytes of CONST    memory (+ 16 bytes shared)
 7 037 bytes of HUGECODE memory
    73 bytes of XDATA    memory

Errors: none
Warnings: none
