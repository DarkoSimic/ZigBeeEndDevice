###############################################################################
#
# IAR C/C++ Compiler V9.30.3.3983 for 8051                20/Apr/2017  12:17:45
# Copyright 2004-2016 IAR Systems AB.
# Evaluation license - IAR Embedded Workbench for 8051, Evaluation version 9.30
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Components\hal\BME280_driver-master\bme280.c
#    Command line       =  
#        -f
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0x0422
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Components\hal\BME280_driver-master\bme280.c
#        -D NWK_AUTO_POLL -D ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC
#        -D LCD_SUPPORTED=DEBUG -D xPOWER_SAVING -lC
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\EndDeviceEB\List
#        -lA
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\EndDeviceEB\List
#        --diag_suppress Pe001,Pa010 -o
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\EndDeviceEB\Obj
#        -e --no_code_motion --debug --core=plain --dptr=16,1
#        --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 16 -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\Source\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Components\hal\BME280_driver-master\
#        -Ohz --require_prototypes
#    List file          =  
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\EndDeviceEB\List\bme280.lst
#    Object file        =  
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\EndDeviceEB\Obj\bme280.r51
#
###############################################################################

C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Components\hal\BME280_driver-master\bme280.c
      1          /*
      2          ****************************************************************************
      3          * Copyright (C) 2015 - 2016 Bosch Sensortec GmbH
      4          *
      5          * bme280.c
      6          * Date: 2016/07/04
      7          * Revision: 2.0.5(Pressure and Temperature compensation code revision is 1.1
      8          *               and Humidity compensation code revision is 1.0)
      9          *
     10          * Usage: Sensor Driver file for BME280 sensor
     11          *
     12          ****************************************************************************
     13          * License:
     14          *
     15          * Redistribution and use in source and binary forms, with or without
     16          * modification, are permitted provided that the following conditions are met:
     17          *
     18          *   Redistributions of source code must retain the above copyright
     19          *   notice, this list of conditions and the following disclaimer.
     20          *
     21          *   Redistributions in binary form must reproduce the above copyright
     22          *   notice, this list of conditions and the following disclaimer in the
     23          *   documentation and/or other materials provided with the distribution.
     24          *
     25          *   Neither the name of the copyright holder nor the names of the
     26          *   contributors may be used to endorse or promote products derived from
     27          *   this software without specific prior written permission.
     28          *
     29          * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
     30          * CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
     31          * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
     32          * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
     33          * DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDER
     34          * OR CONTRIBUTORS BE LIABLE FOR ANY
     35          * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
     36          * OR CONSEQUENTIAL DAMAGES(INCLUDING, BUT NOT LIMITED TO,
     37          * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
     38          * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
     39          * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
     40          * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
     41          * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
     42          * ANY WAY OUT OF THE USE OF THIS
     43          * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
     44          *
     45          * The information provided is believed to be accurate and reliable.
     46          * The copyright holder assumes no responsibility
     47          * for the consequences of use
     48          * of such information nor for any infringement of patents or
     49          * other rights of third parties which may result from its use.
     50          * No license is granted by implication or otherwise under any patent or
     51          * patent rights of the copyright holder.
     52          **************************************************************************/
     53          
     54          #include <stdio.h>
     55          #include <string.h>
     56          #include "bme280.h"
     57          #include "ioCC2530.h"

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1
     58          
     59          typedef uint8_t	        uint8;
     60          
     61          
     62          #define SPI_READ					0x80
     63          #define SPI_WRITE					0x7F
     64          #define SPI_BUFFER_LEN 				        26
     65          #define SPI_BUFFER_LEN_WRITE				4
     66          
     67          #define BME280_DATA_INDEX				1
     68          #define BME280_ADDRESS_INDEX 		                2
     69          
     70          extern void SPIDataPut(uint8 );
     71          
     72          extern uint8 SPIDataGet(void);
     73          
     74          extern void uartSend(char);
     75          
     76          extern void HalLcdWriteString ( char *, uint8 );
     77          
     78          extern void WriteHex(char );
     79          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     80          static struct bme280_t *p_bme280; /**< pointer to BME280 */
   \                     p_bme280:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
     81          //static struct value *p_val;
     82          
     83          /*!
     84           *	@brief This function is used for initialize
     85           *	the bus read and bus write functions
     86           *  and assign the chip id and I2C address of the BME280 sensor
     87           *	chip id is read in the register 0xD0 bit from 0 to 7
     88           *
     89           *	 @param bme280 structure pointer.
     90           *
     91           *	@note While changing the parameter of the bme280_t
     92           *	@note consider the following point:
     93           *	Changing the reference value of the parameter
     94           *	will changes the local copy or local reference
     95           *	make sure your changes will not
     96           *	affect the reference value of the parameter
     97           *	(Better case don't change the reference value of the parameter)
     98           *
     99           *
    100           *
    101           *
    102           *	@return results of bus communication function
    103           *	@retval 0 -> Success
    104           *	@retval -1 -> Error
    105           *
    106           *
    107          */
    108          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    109          void bme280_init_struct(struct bme280_t *bme280)
   \                     bme280_init_struct:
    110          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    111          	p_bme280 = bme280;
   \   000004   90....       MOV     DPTR,#p_bme280
   \   000007   EA           MOV     A,R2
   \   000008   F0           MOVX    @DPTR,A
   \   000009   A3           INC     DPTR
   \   00000A   EB           MOV     A,R3
   \   00000B   F0           MOVX    @DPTR,A
    112          }
   \   00000C   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    113          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    114          BME280_RETURN_FUNCTION_TYPE bme280_init(struct bme280_t *bme280)
   \                     bme280_init:
    115          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    116          	/* used to return the communication result*/
    117          	BME280_RETURN_FUNCTION_TYPE com_rslt = ERROR;
    118          	u8 v_data_u8 = BME280_INIT_VALUE;
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   E4           CLR     A
   \   000011   F0           MOVX    @DPTR,A
    119          	u8 v_chip_id_read_count = BME280_CHIP_ID_READ_COUNT;
   \   000012   7E05         MOV     R6,#0x5
    120          
    121          	/* assign BME280 ptr */
    122          	p_bme280 = bme280;
   \   000014   90....       MOV     DPTR,#p_bme280
   \   000017   EA           MOV     A,R2
   \   000018   F0           MOVX    @DPTR,A
   \   000019   A3           INC     DPTR
   \   00001A   EB           MOV     A,R3
   \   00001B   F0           MOVX    @DPTR,A
    123          	while (v_chip_id_read_count > 0) {
    124          
    125          		/* read Chip Id */
    126          		com_rslt = p_bme280->BME280_BUS_READ_FUNC(p_bme280->dev_addr,
    127          				BME280_CHIP_ID_REG, &v_data_u8,
    128          				BME280_GEN_READ_WRITE_DATA_LENGTH);
   \                     ??bme280_init_0:
   \   00001C                ; Setup parameters for indirect call
   \   00001C   7B01         MOV     R3,#0x1
   \   00001E   AC..         MOV     R4,?XSP + 0
   \   000020   AD..         MOV     R5,?XSP + 1
   \   000022   7AD0         MOV     R2,#-0x30
   \   000024   90....       MOV     DPTR,#p_bme280
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F8           MOV     R0,A
   \   000029   A3           INC     DPTR
   \   00002A   12....       LCALL   ??Subroutine115_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_315:
   \   00002D   12....       LCALL   ?CALL_IND
    129          		/* Check for the correct chip id */
    130          		if (v_data_u8 == BME280_CHIP_ID)
   \   000030   85..82       MOV     DPL,?XSP + 0
   \   000033   85..83       MOV     DPH,?XSP + 1
   \   000036   E0           MOVX    A,@DPTR
   \   000037   6460         XRL     A,#0x60
   \   000039   6010         JZ      ??bme280_init_1
    131          			break;
    132          		v_chip_id_read_count--;
    133          		/* Delay added concerning the low speed of power up system to
    134          		facilitate the proper reading of the chip ID */
    135          		p_bme280->delay_msec(3 * BME280_REGISTER_READ_DELAY);
   \   00003B                ; Setup parameters for indirect call
   \   00003B   90....       MOV     DPTR,#__Constant_3
   \   00003E   12....       LCALL   ?XLOAD_R2345
   \   000041   12....       LCALL   ?Subroutine23 & 0xFFFF
    136          	}
   \                     ??CrossCallReturnLabel_42:
   \   000044   12....       LCALL   ?CALL_IND
   \   000047   1E           DEC     R6
   \   000048   EE           MOV     A,R6
   \   000049   70D1         JNZ     ??bme280_init_0
    137          	/*assign chip ID to the global structure*/
    138          	p_bme280->chip_id = v_data_u8;
   \                     ??bme280_init_1:
   \   00004B   85..82       MOV     DPL,?XSP + 0
   \   00004E   85..83       MOV     DPH,?XSP + 1
   \   000051   E0           MOVX    A,@DPTR
   \   000052   C0E0         PUSH    A
   \   000054   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_173:
   \   000057   2425         ADD     A,#0x25
   \   000059   F582         MOV     DPL,A
   \   00005B   E4           CLR     A
   \   00005C   38           ADDC    A,R0
   \   00005D   F583         MOV     DPH,A
   \   00005F   D0E0         POP     A
   \   000061   F0           MOVX    @DPTR,A
    139          	/*com_rslt status of chip ID read*/
    140          	com_rslt = (v_chip_id_read_count == BME280_INIT_VALUE) ?
    141          			BME280_CHIP_ID_READ_FAIL : BME280_CHIP_ID_READ_SUCCESS;
   \   000062   EE           MOV     A,R6
   \   000063   7004         JNZ     ??bme280_init_2
   \   000065   79FF         MOV     R1,#-0x1
   \   000067   8005         SJMP    ??bme280_init_3
    142          
    143          	if (com_rslt == BME280_CHIP_ID_READ_SUCCESS) {
    144          		/* readout bme280 calibparam structure */
    145          		com_rslt += bme280_get_calib_param();
   \                     ??bme280_init_2:
   \   000069                ; Setup parameters for call to function bme280_get_calib_param
   \   000069   12....       LCALL   `??bme280_get_calib_param::?relay`; Banked call to: bme280_get_calib_param
   \   00006C   E9           MOV     A,R1
   \   00006D   F9           MOV     R1,A
    146          	}
    147          	return com_rslt;
   \                     ??bme280_init_3:
   \   00006E   02....       LJMP    ?Subroutine1 & 0xFFFF
    148          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine65:
   \   000000   12....       LCALL   ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_254:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine93:
   \   000000   12....       LCALL   ?Subroutine102 & 0xFFFF
   \                     ??CrossCallReturnLabel_374:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   12....       LCALL   ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_240:
   \   000003   2431         ADD     A,#0x31
   \   000005   12....       LCALL   ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_334:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine83:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   38           ADDC    A,R0
   \   000004   F583         MOV     DPH,A
   \   000006                REQUIRE ??Subroutine114_0
   \   000006                ; // Fall through to label ??Subroutine114_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine114_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8882         MOV     DPL,R0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine115_0:
   \   000000   12....       LCALL   ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_331:
   \   000003   242F         ADD     A,#0x2f
   \   000005   12....       LCALL   ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_336:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine85:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   C8           XCH     A,R0
   \   000002   2426         ADD     A,#0x26
   \   000004   F582         MOV     DPL,A
   \   000006   E4           CLR     A
   \   000007   38           ADDC    A,R0
   \   000008   F583         MOV     DPH,A
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   F9           MOV     R1,A
   \   00000C   12....       LCALL   ?Subroutine102 & 0xFFFF
   \                     ??CrossCallReturnLabel_375:
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine102:
   \   000000   90....       MOV     DPTR,#p_bme280
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F8           MOV     R0,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   C8           XCH     A,R0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7401         MOV     A,#0x1
   \   000002                REQUIRE ??Subroutine116_0
   \   000002                ; // Fall through to label ??Subroutine116_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine116_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine117_0
   \   000003                ; // Fall through to label ??Subroutine117_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine117_0:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    149          
    150          /*!
    151           *	@brief This API is used to read uncompensated temperature
    152           *	in the registers 0xFA, 0xFB and 0xFC
    153           *	@note 0xFA -> MSB -> bit from 0 to 7
    154           *	@note 0xFB -> LSB -> bit from 0 to 7
    155           *	@note 0xFC -> LSB -> bit from 4 to 7
    156           *
    157           * @param v_uncomp_temperature_s32 : The value of uncompensated temperature
    158           *
    159           *
    160           *
    161           *	@return results of bus communication function
    162           *	@retval 0 -> Success
    163           *	@retval -1 -> Error
    164           *
    165           *
    166          */
    167          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    168          BME280_RETURN_FUNCTION_TYPE bme280_read_uncomp_temperature(
   \                     bme280_read_uncomp_temperature:
    169          s32 *v_uncomp_temperature_s32)
    170          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    171          	/* used to return the communication result*/
    172          	BME280_RETURN_FUNCTION_TYPE com_rslt = ERROR;
    173          	/* Array holding the MSB and LSb value
    174          	a_data_u8r[0] - Temperature MSB
    175          	a_data_u8r[1] - Temperature LSB
    176          	a_data_u8r[2] - Temperature XLSB
    177          	*/
    178          	u8 a_data_u8r[BME280_TEMPERATURE_DATA_SIZE] = {
    179          	BME280_INIT_VALUE, BME280_INIT_VALUE, BME280_INIT_VALUE};
   \   00000E   90....       MOV     DPTR,#`?<Constant {0, 0, 0}>`
   \   000011   AC..         MOV     R4,?XSP + 0
   \   000013   AD..         MOV     R5,?XSP + 1
   \   000015   7403         MOV     A,#0x3
   \   000017   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    180          	/* check the p_bme280 structure pointer as NULL*/
    181          	if (p_bme280 == BME280_NULL) {
   \   00001A   12....       LCALL   ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_129:
   \   00001D   7004         JNZ     ??bme280_read_uncomp_temperature_0
    182          		return E_BME280_NULL_PTR;
   \   00001F   7981         MOV     R1,#-0x7f
   \   000021   803B         SJMP    ??bme280_read_uncomp_temperature_1
    183          		} else {
    184          			com_rslt = p_bme280->BME280_BUS_READ_FUNC(
    185          			p_bme280->dev_addr,
    186          			BME280_TEMPERATURE_MSB_REG,
    187          			a_data_u8r,
    188          			BME280_TEMPERATURE_DATA_LENGTH);
   \                     ??bme280_read_uncomp_temperature_0:
   \   000023                ; Setup parameters for indirect call
   \   000023   7B03         MOV     R3,#0x3
   \   000025   AC..         MOV     R4,?XSP + 0
   \   000027   AD..         MOV     R5,?XSP + 1
   \   000029   7AFA         MOV     R2,#-0x6
   \   00002B   12....       LCALL   ??Subroutine115_0 & 0xFFFF
    189          			*v_uncomp_temperature_s32 = (s32)(((
    190          			(u32) (a_data_u8r[BME280_TEMPERATURE_MSB_DATA]))
    191          			<< BME280_SHIFT_BIT_POSITION_BY_12_BITS) |
    192          			(((u32)(a_data_u8r[BME280_TEMPERATURE_LSB_DATA]))
    193          			<< BME280_SHIFT_BIT_POSITION_BY_04_BITS)
    194          			| ((u32)a_data_u8r[BME280_TEMPERATURE_XLSB_DATA] >>
    195          			BME280_SHIFT_BIT_POSITION_BY_04_BITS));
    196          		}
   \                     ??CrossCallReturnLabel_316:
   \   00002E   12....       LCALL   ?CALL_IND
   \   000031   12....       LCALL   ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   000034   12....       LCALL   ?L_SHL
   \   000037   04           INC     A
   \   000038   12....       LCALL   ?XSTACK_DISP0_8
   \   00003B   12....       LCALL   ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_119:
   \   00003E   12....       LCALL   ?L_SHL
   \   000041   78..         MOV     R0,#?V0
   \   000043   79..         MOV     R1,#?V4
   \   000045   12....       LCALL   ?L_IOR
   \   000048   7402         MOV     A,#0x2
   \   00004A   12....       LCALL   ?XSTACK_DISP0_8
   \   00004D   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   000050   12....       LCALL   ?L_IOR
   \   000053   8E82         MOV     DPL,R6
   \   000055   8F83         MOV     DPH,R7
   \   000057   78..         MOV     R0,#?V0
   \   000059   12....       LCALL   ?L_MOV_TO_X
    197          	return com_rslt;
   \   00005C   EA           MOV     A,R2
   \   00005D   F9           MOV     R1,A
   \                     ??bme280_read_uncomp_temperature_1:
   \   00005E   02....       LJMP    ?Subroutine2 & 0xFFFF
    198          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   12....       LCALL   ?Subroutine97 & 0xFFFF
   \                     ??CrossCallReturnLabel_262:
   \   000003   7404         MOV     A,#0x4
   \   000005   78..         MOV     R0,#?V4
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   E9           MOV     A,R1
   \   000001   FA           MOV     R2,A
   \   000002   85..82       MOV     DPL,?XSP + 0
   \   000005   85..83       MOV     DPH,?XSP + 1
   \   000008   12....       LCALL   ?Subroutine98 & 0xFFFF
   \                     ??CrossCallReturnLabel_263:
   \   00000B   F5..         MOV     ?V3,A
   \   00000D   740C         MOV     A,#0xc
   \   00000F   78..         MOV     R0,#?V0
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   C4           SWAP    A
   \   000002   540F         ANL     A,#0xf
   \   000004   F5..         MOV     ?V4,A
   \   000006   E4           CLR     A
   \   000007   F5..         MOV     ?V5,A
   \   000009   78..         MOV     R0,#?V0
   \   00000B   79..         MOV     R1,#?V4
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine97:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V4,A
   \   000003   E4           CLR     A
   \   000004   F5..         MOV     ?V5,A
   \   000006   F5..         MOV     ?V6,A
   \   000008   F5..         MOV     ?V7,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   90....       MOV     DPTR,#p_bme280
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F8           MOV     R0,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F9           MOV     R1,A
   \   000008   E8           MOV     A,R0
   \   000009   49           ORL     A,R1
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7403         MOV     A,#0x3
   \   000002                REQUIRE ??Subroutine106_0
   \   000002                ; // Fall through to label ??Subroutine106_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine106_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine107_0
   \   000003                ; // Fall through to label ??Subroutine107_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine107_0:
   \   000000   7F08         MOV     R7,#0x8
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine98:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0,A
   \   000003   E4           CLR     A
   \   000004   F5..         MOV     ?V1,A
   \   000006   F5..         MOV     ?V2,A
   \   000008   22           RET
    199          
    200          /*!
    201           * @brief Reads actual temperature from uncompensated temperature
    202           * @note Returns the value in 0.01 degree Centigrade
    203           * Output value of "5123" equals 51.23 DegC.
    204           *
    205           *
    206           *
    207           *  @param  v_uncomp_temperature_s32 : value of uncompensated temperature
    208           *
    209           *
    210           *  @return Returns the actual temperature
    211           *
    212          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    213          s32 bme280_compensate_temperature_int32(s32 v_uncomp_temperature_s32)
   \                     bme280_compensate_temperature_int32:
    214          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V4,R2
   \   000007   8B..         MOV     ?V5,R3
   \   000009   8C..         MOV     ?V6,R4
   \   00000B   8D..         MOV     ?V7,R5
    215          	s32 v_x1_u32r = BME280_INIT_VALUE;
    216          	s32 v_x2_u32r = BME280_INIT_VALUE;
    217          	s32 temperature = BME280_INIT_VALUE;
    218          
    219          	/* calculate x1*/
    220          	v_x1_u32r  =
    221          	((((v_uncomp_temperature_s32
    222          	>> BME280_SHIFT_BIT_POSITION_BY_03_BITS) -
    223          	((s32)p_bme280->cal_param.dig_T1
    224          	<< BME280_SHIFT_BIT_POSITION_BY_01_BIT))) *
    225          	((s32)p_bme280->cal_param.dig_T2)) >>
    226          	BME280_SHIFT_BIT_POSITION_BY_11_BITS;
    227          	/* calculate x2*/
    228          	v_x2_u32r  = (((((v_uncomp_temperature_s32
    229          	>> BME280_SHIFT_BIT_POSITION_BY_04_BITS) -
    230          	((s32)p_bme280->cal_param.dig_T1))
    231          	* ((v_uncomp_temperature_s32 >> BME280_SHIFT_BIT_POSITION_BY_04_BITS) -
    232          	((s32)p_bme280->cal_param.dig_T1)))
    233          	>> BME280_SHIFT_BIT_POSITION_BY_12_BITS) *
    234          	((s32)p_bme280->cal_param.dig_T3))
    235          	>> BME280_SHIFT_BIT_POSITION_BY_14_BITS;
    236          	/* calculate t_fine*/
    237          	p_bme280->cal_param.t_fine = v_x1_u32r + v_x2_u32r;
   \   00000D   12....       LCALL   ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_279:
   \   000010   E0           MOVX    A,@DPTR
   \   000011   12....       LCALL   ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_192:
   \   000014   8A..         MOV     ?V8,R2
   \   000016   8B..         MOV     ?V9,R3
   \   000018   8C..         MOV     ?V10,R4
   \   00001A   8D..         MOV     ?V11,R5
   \   00001C   7404         MOV     A,#0x4
   \   00001E   78..         MOV     R0,#?V8
   \   000020   12....       LCALL   ?SL_SHR
   \   000023   78..         MOV     R0,#?V8
   \   000025   79..         MOV     R1,#?V0
   \   000027   12....       LCALL   ?L_SUB
   \   00002A   7403         MOV     A,#0x3
   \   00002C   78..         MOV     R0,#?V4
   \   00002E   12....       LCALL   ?SL_SHR
   \   000031   04           INC     A
   \   000032   78..         MOV     R0,#?V0
   \   000034   12....       LCALL   ?L_SHL
   \   000037   78..         MOV     R0,#?V4
   \   000039   79..         MOV     R1,#?V0
   \   00003B   12....       LCALL   ?L_SUB
   \   00003E   12....       LCALL   ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_134:
   \   000041   12....       LCALL   ??Subroutine108_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_282:
   \   000044   12....       LCALL   ?L_MUL
   \   000047   740B         MOV     A,#0xb
   \   000049   78..         MOV     R0,#?V4
   \   00004B   12....       LCALL   ?SL_SHR
   \   00004E   85....       MOV     ?V0,?V8
   \   000051   85....       MOV     ?V1,?V9
   \   000054   85....       MOV     ?V2,?V10
   \   000057   85....       MOV     ?V3,?V11
   \   00005A   78..         MOV     R0,#?V0
   \   00005C   79..         MOV     R1,#?V8
   \   00005E   12....       LCALL   ?L_MUL
   \   000061   740C         MOV     A,#0xc
   \   000063   78..         MOV     R0,#?V0
   \   000065   12....       LCALL   ?SL_SHR
   \   000068   12....       LCALL   ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_135:
   \   00006B   A3           INC     DPTR
   \   00006C   A3           INC     DPTR
   \   00006D   12....       LCALL   ?Subroutine103 & 0xFFFF
   \                     ??CrossCallReturnLabel_273:
   \   000070   78..         MOV     R0,#?V0
   \   000072   79..         MOV     R1,#?V8
   \   000074   12....       LCALL   ?L_MUL
   \   000077   740E         MOV     A,#0xe
   \   000079   78..         MOV     R0,#?V0
   \   00007B   12....       LCALL   ?SL_SHR
   \   00007E   78..         MOV     R0,#?V4
   \   000080   79..         MOV     R1,#?V0
   \   000082   12....       LCALL   ?L_ADD
   \   000085   12....       LCALL   ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_149:
   \   000088   78..         MOV     R0,#?V4
   \   00008A   12....       LCALL   ?L_MOV_TO_X
    238          	/* calculate temperature*/
    239          	temperature  = (p_bme280->cal_param.t_fine * 5 + 128)
    240          	>> BME280_SHIFT_BIT_POSITION_BY_08_BITS;
    241          	return temperature;
   \   00008D   90....       MOV     DPTR,#__Constant_5
   \   000090   78..         MOV     R0,#?V0
   \   000092   12....       LCALL   ?L_MOV_X
   \   000095   78..         MOV     R0,#?V4
   \   000097   79..         MOV     R1,#?V0
   \   000099   12....       LCALL   ?L_MUL
   \   00009C   90....       MOV     DPTR,#__Constant_80
   \   00009F   78..         MOV     R0,#?V4
   \   0000A1   12....       LCALL   ?L_ADD_X
   \   0000A4   7408         MOV     A,#0x8
   \   0000A6   78..         MOV     R0,#?V4
   \   0000A8   12....       LCALL   ?SL_SHR
   \   0000AB   AA..         MOV     R2,?V4
   \   0000AD   AB..         MOV     R3,?V5
   \   0000AF   AC..         MOV     R4,?V6
   \   0000B1   AD..         MOV     R5,?V7
   \   0000B3                REQUIRE ?Subroutine3
   \   0000B3                ; // Fall through to label ?Subroutine3
    242          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7F0C         MOV     R7,#0xc
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine66:
   \   000000   90....       MOV     DPTR,#p_bme280
   \   000003                REQUIRE ??Subroutine105_0
   \   000003                ; // Fall through to label ??Subroutine105_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine105_0:
   \   000000   12....       LCALL   ??Subroutine114_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_333:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine108_0:
   \   000000   12....       LCALL   ??Subroutine125_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_383:
   \   000003   78..         MOV     R0,#?V4
   \   000005   79..         MOV     R1,#?V0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   90....       MOV     DPTR,#p_bme280
   \   000003   12....       LCALL   ??Subroutine114_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_332:
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000   12....       LCALL   ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_231:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine84:
   \   000000   12....       LCALL   ?Subroutine102 & 0xFFFF
   \                     ??CrossCallReturnLabel_371:
   \   000003   2421         ADD     A,#0x21
   \   000005   F582         MOV     DPL,A
   \   000007   E4           CLR     A
   \   000008   38           ADDC    A,R0
   \   000009   F583         MOV     DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine67:
   \   000000   F5..         MOV     ?V0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F5..         MOV     ?V1,A
   \   000006   E4           CLR     A
   \   000007   F5..         MOV     ?V2,A
   \   000009   F5..         MOV     ?V3,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine125_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V1,A
   \   000007   33           RLC     A
   \   000008   95E0         SUBB    A,0xE0 /* A   */
   \   00000A   F5..         MOV     ?V2,A
   \   00000C   F5..         MOV     ?V3,A
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine103:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V8,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V9,A
   \   000007   33           RLC     A
   \   000008   95E0         SUBB    A,0xE0 /* A   */
   \   00000A   F5..         MOV     ?V10,A
   \   00000C   F5..         MOV     ?V11,A
   \   00000E   22           RET
    243          
    244          /*!
    245           * @brief Reads actual temperature from uncompensated temperature
    246           * @note Returns the value with 500LSB/DegC centred around 24 DegC
    247           * output value of "5123" equals(5123/500)+24 = 34.246DegC
    248           *
    249           *
    250           *  @param v_uncomp_temperature_s32: value of uncompensated temperature
    251           *
    252           *
    253           *
    254           *  @return Return the actual temperature as s16 output
    255           *
    256          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    257          s16 bme280_compensate_temperature_int32_sixteen_bit_output(
   \                     bme280_compensate_temperature_int32_sixteen_bit_output:
    258          s32 v_uncomp_temperature_s32)
    259          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
    260          	s16 temperature = BME280_INIT_VALUE;
    261          
    262          	bme280_compensate_temperature_int32(
    263          	v_uncomp_temperature_s32);
   \   000005                ; Setup parameters for call to function bme280_compensate_temperature_int32
   \   000005   12....       LCALL   `??bme280_compensate_temperature_int32::?relay`; Banked call to: bme280_compensate_temperature_int32
    264          	temperature  = (s16)((((
    265          	p_bme280->cal_param.t_fine - 122880) * 25) + 128)
    266          	>> BME280_SHIFT_BIT_POSITION_BY_08_BITS);
    267          
    268          	return temperature;
   \   000008   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   00000B   12....       LCALL   ?L_MOV_X
   \   00000E   90....       MOV     DPTR,#__Constant_19
   \   000011   78..         MOV     R0,#?V4
   \   000013   12....       LCALL   ?L_MOV_X
   \   000016   78..         MOV     R0,#?V0
   \   000018   79..         MOV     R1,#?V4
   \   00001A   12....       LCALL   ?L_MUL
   \   00001D   90....       MOV     DPTR,#__Constant_ffd12080
   \   000020   78..         MOV     R0,#?V0
   \   000022   12....       LCALL   ?L_ADD_X
   \   000025   7408         MOV     A,#0x8
   \   000027   78..         MOV     R0,#?V0
   \   000029   12....       LCALL   ?SL_SHR
   \   00002C   AA..         MOV     R2,?V0
   \   00002E   AB..         MOV     R3,?V1
   \   000030   02....       LJMP    ??Subroutine107_0 & 0xFFFF
    269          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   12....       LCALL   ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_230:
   \   000003   78..         MOV     R0,#?V0
   \   000005   22           RET
    270          
    271          /*!
    272           *	@brief This API is used to read uncompensated pressure.
    273           *	in the registers 0xF7, 0xF8 and 0xF9
    274           *	@note 0xF7 -> MSB -> bit from 0 to 7
    275           *	@note 0xF8 -> LSB -> bit from 0 to 7
    276           *	@note 0xF9 -> LSB -> bit from 4 to 7
    277           *
    278           *
    279           *
    280           *	@param v_uncomp_pressure_s32 : The value of uncompensated pressure
    281           *
    282           *
    283           *
    284           *	@return results of bus communication function
    285           *	@retval 0 -> Success
    286           *	@retval -1 -> Error
    287           *
    288           *
    289          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    290          BME280_RETURN_FUNCTION_TYPE bme280_read_uncomp_pressure(
   \                     bme280_read_uncomp_pressure:
    291          s32 *v_uncomp_pressure_s32)
    292          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    293          	/* used to return the communication result*/
    294          	BME280_RETURN_FUNCTION_TYPE com_rslt = ERROR;
    295          	/* Array holding the MSB and LSb value
    296          	a_data_u8[0] - Pressure MSB
    297          	a_data_u8[1] - Pressure LSB
    298          	a_data_u8[2] - Pressure XLSB
    299          	*/
    300          	u8 a_data_u8[BME280_PRESSURE_DATA_SIZE] = {
    301          	BME280_INIT_VALUE, BME280_INIT_VALUE, BME280_INIT_VALUE};
   \   00000E   90....       MOV     DPTR,#`?<Constant {0, 0, 0}>_1`
   \   000011   AC..         MOV     R4,?XSP + 0
   \   000013   AD..         MOV     R5,?XSP + 1
   \   000015   7403         MOV     A,#0x3
   \   000017   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    302          	/* check the p_bme280 structure pointer as NULL*/
    303          	if (p_bme280 == BME280_NULL) {
   \   00001A   12....       LCALL   ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_130:
   \   00001D   7004         JNZ     ??bme280_read_uncomp_pressure_0
    304          		return E_BME280_NULL_PTR;
   \   00001F   7981         MOV     R1,#-0x7f
   \   000021   803B         SJMP    ??bme280_read_uncomp_pressure_1
    305          		} else {
    306          			com_rslt = p_bme280->BME280_BUS_READ_FUNC(
    307          			p_bme280->dev_addr,
    308          			BME280_PRESSURE_MSB_REG,
    309          			a_data_u8, BME280_PRESSURE_DATA_LENGTH);
   \                     ??bme280_read_uncomp_pressure_0:
   \   000023                ; Setup parameters for indirect call
   \   000023   7B03         MOV     R3,#0x3
   \   000025   AC..         MOV     R4,?XSP + 0
   \   000027   AD..         MOV     R5,?XSP + 1
   \   000029   7AF7         MOV     R2,#-0x9
   \   00002B   12....       LCALL   ??Subroutine115_0 & 0xFFFF
    310          			*v_uncomp_pressure_s32 = (s32)((
    311          			((u32)(a_data_u8[BME280_PRESSURE_MSB_DATA]))
    312          			<< BME280_SHIFT_BIT_POSITION_BY_12_BITS) |
    313          			(((u32)(a_data_u8[BME280_PRESSURE_LSB_DATA]))
    314          			<< BME280_SHIFT_BIT_POSITION_BY_04_BITS) |
    315          			((u32)a_data_u8[BME280_PRESSURE_XLSB_DATA] >>
    316          			BME280_SHIFT_BIT_POSITION_BY_04_BITS));
    317          		}
   \                     ??CrossCallReturnLabel_317:
   \   00002E   12....       LCALL   ?CALL_IND
   \   000031   12....       LCALL   ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   000034   12....       LCALL   ?L_SHL
   \   000037   04           INC     A
   \   000038   12....       LCALL   ?XSTACK_DISP0_8
   \   00003B   12....       LCALL   ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_120:
   \   00003E   12....       LCALL   ?L_SHL
   \   000041   78..         MOV     R0,#?V0
   \   000043   79..         MOV     R1,#?V4
   \   000045   12....       LCALL   ?L_IOR
   \   000048   7402         MOV     A,#0x2
   \   00004A   12....       LCALL   ?XSTACK_DISP0_8
   \   00004D   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   000050   12....       LCALL   ?L_IOR
   \   000053   8E82         MOV     DPL,R6
   \   000055   8F83         MOV     DPH,R7
   \   000057   78..         MOV     R0,#?V0
   \   000059   12....       LCALL   ?L_MOV_TO_X
    318          	return com_rslt;
   \   00005C   EA           MOV     A,R2
   \   00005D   F9           MOV     R1,A
   \                     ??bme280_read_uncomp_pressure_1:
   \   00005E   02....       LJMP    ?Subroutine2 & 0xFFFF
    319          }
    320          
    321          /*!
    322           * @brief Reads actual pressure from uncompensated pressure
    323           * @note Returns the value in Pascal(Pa)
    324           * Output value of "96386" equals 96386 Pa =
    325           * 963.86 hPa = 963.86 millibar
    326           *
    327           *
    328           *
    329           *  @param v_uncomp_pressure_s32 : value of uncompensated pressure
    330           *
    331           *
    332           *
    333           *  @return Return the actual pressure output as u32
    334           *
    335          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    336          u32 bme280_compensate_pressure_int32(s32 v_uncomp_pressure_s32)
   \                     bme280_compensate_pressure_int32:
    337          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine12 & 0xFFFF
    338          	s32 v_x1_u32 = BME280_INIT_VALUE;
    339          	s32 v_x2_u32 = BME280_INIT_VALUE;
    340          	u32 v_pressure_u32 = BME280_INIT_VALUE;
    341          
    342          	/* calculate x1*/
    343          	v_x1_u32 = (((s32)p_bme280->cal_param.t_fine)
    344          	>> BME280_SHIFT_BIT_POSITION_BY_01_BIT) - (s32)64000;
   \                     ??CrossCallReturnLabel_15:
   \   00000D   12....       LCALL   ?L_MOV_X
   \   000010   7401         MOV     A,#0x1
   \   000012   78..         MOV     R0,#?V4
   \   000014   12....       LCALL   ?SL_SHR
   \   000017   90....       MOV     DPTR,#__Constant_ffff0600
   \   00001A   78..         MOV     R0,#?V4
   \   00001C   12....       LCALL   ?L_ADD_X
    345          	/* calculate x2*/
    346          	v_x2_u32 = (((v_x1_u32 >> BME280_SHIFT_BIT_POSITION_BY_02_BITS)
    347          	* (v_x1_u32 >> BME280_SHIFT_BIT_POSITION_BY_02_BITS)
    348          	) >> BME280_SHIFT_BIT_POSITION_BY_11_BITS)
    349          	* ((s32)p_bme280->cal_param.dig_P6);
    350          	/* calculate x2*/
    351          	v_x2_u32 = v_x2_u32 + ((v_x1_u32 *
    352          	((s32)p_bme280->cal_param.dig_P5))
    353          	<< BME280_SHIFT_BIT_POSITION_BY_01_BIT);
   \   00001F   85....       MOV     ?V8,?V4
   \   000022   85....       MOV     ?V9,?V5
   \   000025   85....       MOV     ?V10,?V6
   \   000028   85....       MOV     ?V11,?V7
   \   00002B   7402         MOV     A,#0x2
   \   00002D   78..         MOV     R0,#?V8
   \   00002F   12....       LCALL   ?SL_SHR
   \   000032   85....       MOV     ?V0,?V4
   \   000035   85....       MOV     ?V1,?V5
   \   000038   85....       MOV     ?V2,?V6
   \   00003B   85....       MOV     ?V3,?V7
   \   00003E   7402         MOV     A,#0x2
   \   000040   78..         MOV     R0,#?V0
   \   000042   12....       LCALL   ?SL_SHR
   \   000045   78..         MOV     R0,#?V8
   \   000047   79..         MOV     R1,#?V0
   \   000049   12....       LCALL   ?L_MUL
   \   00004C   85....       MOV     ?V0,?V8
   \   00004F   85....       MOV     ?V1,?V9
   \   000052   85....       MOV     ?V2,?V10
   \   000055   85....       MOV     ?V3,?V11
   \   000058   740B         MOV     A,#0xb
   \   00005A   78..         MOV     R0,#?V0
   \   00005C   12....       LCALL   ?SL_SHR
   \   00005F   12....       LCALL   ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_164:
   \   000062   12....       LCALL   ??Subroutine126_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_385:
   \   000065   12....       LCALL   ?L_MUL
   \   000068   C0..         PUSH    ?V0
   \   00006A   C0..         PUSH    ?V1
   \   00006C   C0..         PUSH    ?V2
   \   00006E   C0..         PUSH    ?V3
   \   000070   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_388:
   \   000073   12....       LCALL   ?L_MUL
   \   000076   7401         MOV     A,#0x1
   \   000078   78..         MOV     R0,#?V0
   \   00007A   12....       LCALL   ?L_SHL
   \   00007D   D0..         POP     ?V15
   \   00007F   D0..         POP     ?V14
   \   000081   D0..         POP     ?V13
   \   000083   D0..         POP     ?V12
   \   000085   78..         MOV     R0,#?V12
   \   000087   79..         MOV     R1,#?V0
   \   000089   12....       LCALL   ?L_ADD
    354          	/* calculate x2*/
    355          	v_x2_u32 = (v_x2_u32 >> BME280_SHIFT_BIT_POSITION_BY_02_BITS) +
    356          	(((s32)p_bme280->cal_param.dig_P4)
    357          	<< BME280_SHIFT_BIT_POSITION_BY_16_BITS);
    358          	/* calculate x1*/
    359          	v_x1_u32 = (((p_bme280->cal_param.dig_P3 *
    360          	(((v_x1_u32 >> BME280_SHIFT_BIT_POSITION_BY_02_BITS) *
    361          	(v_x1_u32 >> BME280_SHIFT_BIT_POSITION_BY_02_BITS))
    362          	>> BME280_SHIFT_BIT_POSITION_BY_13_BITS))
    363          	>> BME280_SHIFT_BIT_POSITION_BY_03_BITS) +
    364          	((((s32)p_bme280->cal_param.dig_P2) *
    365          	v_x1_u32) >> BME280_SHIFT_BIT_POSITION_BY_01_BIT))
    366          	>> BME280_SHIFT_BIT_POSITION_BY_18_BITS;
    367          	/* calculate x1*/
    368          	v_x1_u32 = ((((32768 + v_x1_u32)) *
    369          	((s32)p_bme280->cal_param.dig_P1))
    370          	>> BME280_SHIFT_BIT_POSITION_BY_15_BITS);
   \   00008C   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   00008F   740D         MOV     A,#0xd
   \   000091   78..         MOV     R0,#?V8
   \   000093   12....       LCALL   ?SL_SHR
   \   000096   78..         MOV     R0,#?V0
   \   000098   79..         MOV     R1,#?V8
   \   00009A   12....       LCALL   ?L_MUL
   \   00009D   7403         MOV     A,#0x3
   \   00009F   78..         MOV     R0,#?V0
   \   0000A1   12....       LCALL   ?SL_SHR
   \   0000A4   12....       LCALL   ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_167:
   \   0000A7   12....       LCALL   ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_137:
   \   0000AA   79..         MOV     R1,#?V4
   \   0000AC   12....       LCALL   ?L_MUL
   \   0000AF   7401         MOV     A,#0x1
   \   0000B1   78..         MOV     R0,#?V8
   \   0000B3   12....       LCALL   ?SL_SHR
   \   0000B6   78..         MOV     R0,#?V0
   \   0000B8   79..         MOV     R1,#?V8
   \   0000BA   12....       LCALL   ?L_ADD
   \   0000BD   7412         MOV     A,#0x12
   \   0000BF   78..         MOV     R0,#?V0
   \   0000C1   12....       LCALL   ?SL_SHR
   \   0000C4   90....       MOV     DPTR,#__Constant_8000
   \   0000C7   78..         MOV     R0,#?V0
   \   0000C9   12....       LCALL   ?L_ADD_X
   \   0000CC   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   0000CF   12....       LCALL   ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_194:
   \   0000D2   78..         MOV     R0,#?V0
   \   0000D4   79..         MOV     R1,#?V4
   \   0000D6   12....       LCALL   ?L_MUL
   \   0000D9   740F         MOV     A,#0xf
   \   0000DB   78..         MOV     R0,#?V0
   \   0000DD   12....       LCALL   ?SL_SHR
   \   0000E0   85....       MOV     ?V4,?V0
   \   0000E3   85....       MOV     ?V5,?V1
   \   0000E6   85....       MOV     ?V6,?V2
   \   0000E9   85....       MOV     ?V7,?V3
    371          	/* calculate pressure*/
    372          	v_pressure_u32 =
    373          	(((u32)(((s32)1048576) - v_uncomp_pressure_s32)
    374          	- (v_x2_u32 >> BME280_SHIFT_BIT_POSITION_BY_12_BITS))) * 3125;
   \   0000EC   F5..         MOV     ?V8,A
   \   0000EE   F5..         MOV     ?V9,A
   \   0000F0   75..10       MOV     ?V10,#0x10
   \   0000F3   F5..         MOV     ?V11,A
   \   0000F5   85..82       MOV     DPL,?XSP + 0
   \   0000F8   85..83       MOV     DPH,?XSP + 1
   \   0000FB   78..         MOV     R0,#?V8
   \   0000FD   12....       LCALL   ?L_SUB_X
   \   000100   7402         MOV     A,#0x2
   \   000102   78..         MOV     R0,#?V12
   \   000104   12....       LCALL   ?SL_SHR
   \   000107   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_174:
   \   00010A   240C         ADD     A,#0xc
   \   00010C   12....       LCALL   ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_381:
   \   00010F   7410         MOV     A,#0x10
   \   000111   78..         MOV     R0,#?V0
   \   000113   12....       LCALL   ?L_SHL
   \   000116   78..         MOV     R0,#?V12
   \   000118   79..         MOV     R1,#?V0
   \   00011A   12....       LCALL   ?L_ADD
   \   00011D   740C         MOV     A,#0xc
   \   00011F   78..         MOV     R0,#?V12
   \   000121   12....       LCALL   ?SL_SHR
   \   000124   78..         MOV     R0,#?V8
   \   000126   79..         MOV     R1,#?V12
   \   000128   12....       LCALL   ?L_SUB
   \   00012B   90....       MOV     DPTR,#__Constant_c35
   \   00012E   78..         MOV     R0,#?V0
   \   000130   12....       LCALL   ?L_MOV_X
   \   000133   78..         MOV     R0,#?V8
   \   000135   79..         MOV     R1,#?V0
   \   000137   12....       LCALL   ?L_MUL
    375          	if (v_pressure_u32
    376          	< 0x80000000)
   \   00013A   90....       MOV     DPTR,#__Constant_80000000
   \   00013D   78..         MOV     R0,#?V8
   \   00013F   12....       LCALL   ?UL_GE_X
   \   000142   E5..         MOV     A,?V4
   \   000144   45..         ORL     A,?V5
   \   000146   45..         ORL     A,?V6
   \   000148   45..         ORL     A,?V7
   \   00014A   5003         JNC     $+5
   \   00014C   02....       LJMP    ??bme280_compensate_pressure_int32_0 & 0xFFFF
    377          		/* Avoid exception caused by division by zero */
    378          		if (v_x1_u32 != BME280_INIT_VALUE)
   \   00014F   7003         JNZ     $+5
   \   000151   02....       LJMP    ??bme280_compensate_pressure_int32_1 & 0xFFFF
    379          			v_pressure_u32 =
    380          			(v_pressure_u32
    381          			<< BME280_SHIFT_BIT_POSITION_BY_01_BIT) /
    382          			((u32)v_x1_u32);
   \   000154   7401         MOV     A,#0x1
   \   000156   78..         MOV     R0,#?V8
   \   000158   12....       LCALL   ?L_SHL
   \   00015B   78..         MOV     R0,#?V8
   \   00015D   79..         MOV     R1,#?V4
   \   00015F   12....       LCALL   ?UL_DIV_MOD
    383          		else
    384          			return BME280_INVALID_DATA;
    385          	else
    386          		/* Avoid exception caused by division by zero */
    387          		if (v_x1_u32 != BME280_INIT_VALUE)
    388          			v_pressure_u32 = (v_pressure_u32
    389          			/ (u32)v_x1_u32) * 2;
    390          		else
    391          			return BME280_INVALID_DATA;
    392          
    393          		v_x1_u32 = (((s32)p_bme280->cal_param.dig_P9) *
    394          		((s32)(((v_pressure_u32 >> BME280_SHIFT_BIT_POSITION_BY_03_BITS)
    395          		* (v_pressure_u32 >> BME280_SHIFT_BIT_POSITION_BY_03_BITS))
    396          		>> BME280_SHIFT_BIT_POSITION_BY_13_BITS)))
    397          		>> BME280_SHIFT_BIT_POSITION_BY_12_BITS;
    398          		v_x2_u32 = (((s32)(v_pressure_u32
    399          		>> BME280_SHIFT_BIT_POSITION_BY_02_BITS)) *
    400          		((s32)p_bme280->cal_param.dig_P8))
    401          		>> BME280_SHIFT_BIT_POSITION_BY_13_BITS;
    402          		v_pressure_u32 = (u32)((s32)v_pressure_u32 +
    403          		((v_x1_u32 + v_x2_u32 + p_bme280->cal_param.dig_P7)
    404          		>> BME280_SHIFT_BIT_POSITION_BY_04_BITS));
    405          
    406          	return v_pressure_u32;
   \                     ??bme280_compensate_pressure_int32_2:
   \   000162   85....       MOV     ?V12,?V8
   \   000165   85....       MOV     ?V13,?V9
   \   000168   85....       MOV     ?V14,?V10
   \   00016B   85....       MOV     ?V15,?V11
   \   00016E   7403         MOV     A,#0x3
   \   000170   78..         MOV     R0,#?V12
   \   000172   12....       LCALL   ?UL_SHR
   \   000175   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_175:
   \   000178   2416         ADD     A,#0x16
   \   00017A   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_122:
   \   00017D   85....       MOV     ?V0,?V12
   \   000180   85....       MOV     ?V1,?V13
   \   000183   85....       MOV     ?V2,?V14
   \   000186   85....       MOV     ?V3,?V15
   \   000189   78..         MOV     R0,#?V0
   \   00018B   79..         MOV     R1,#?V12
   \   00018D   12....       LCALL   ?L_MUL
   \   000190   740D         MOV     A,#0xd
   \   000192   78..         MOV     R0,#?V0
   \   000194   12....       LCALL   ?UL_SHR
   \   000197   78..         MOV     R0,#?V4
   \   000199   79..         MOV     R1,#?V0
   \   00019B   12....       LCALL   ?L_MUL
   \   00019E   740C         MOV     A,#0xc
   \   0001A0   78..         MOV     R0,#?V4
   \   0001A2   12....       LCALL   ?SL_SHR
   \   0001A5   85....       MOV     ?V0,?V8
   \   0001A8   85....       MOV     ?V1,?V9
   \   0001AB   85....       MOV     ?V2,?V10
   \   0001AE   85....       MOV     ?V3,?V11
   \   0001B1   7402         MOV     A,#0x2
   \   0001B3   78..         MOV     R0,#?V0
   \   0001B5   12....       LCALL   ?UL_SHR
   \   0001B8   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_176:
   \   0001BB   2414         ADD     A,#0x14
   \   0001BD   12....       LCALL   ??Subroutine126_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_386:
   \   0001C0   12....       LCALL   ?L_MUL
   \   0001C3   740D         MOV     A,#0xd
   \   0001C5   78..         MOV     R0,#?V0
   \   0001C7   12....       LCALL   ?SL_SHR
   \   0001CA   78..         MOV     R0,#?V4
   \   0001CC   79..         MOV     R1,#?V0
   \   0001CE   12....       LCALL   ?L_ADD
   \   0001D1   12....       LCALL   ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_170:
   \   0001D4   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_283:
   \   0001D7   12....       LCALL   ?L_ADD
   \   0001DA   7404         MOV     A,#0x4
   \   0001DC   78..         MOV     R0,#?V4
   \   0001DE   12....       LCALL   ?SL_SHR
   \   0001E1   78..         MOV     R0,#?V8
   \   0001E3   79..         MOV     R1,#?V4
   \   0001E5   12....       LCALL   ?L_ADD
   \   0001E8   AA..         MOV     R2,?V8
   \   0001EA   AB..         MOV     R3,?V9
   \   0001EC   AC..         MOV     R4,?V10
   \   0001EE   AD..         MOV     R5,?V11
   \                     ??bme280_compensate_pressure_int32_3:
   \   0001F0   02....       LJMP    ?Subroutine4 & 0xFFFF
   \                     ??bme280_compensate_pressure_int32_0:
   \   0001F3   6011         JZ      ??bme280_compensate_pressure_int32_1
   \   0001F5   78..         MOV     R0,#?V8
   \   0001F7   79..         MOV     R1,#?V4
   \   0001F9   12....       LCALL   ?UL_DIV_MOD
   \   0001FC   7401         MOV     A,#0x1
   \   0001FE   78..         MOV     R0,#?V8
   \   000200   12....       LCALL   ?L_SHL
   \   000203   02....       LJMP    ??bme280_compensate_pressure_int32_2 & 0xFFFF
   \                     ??bme280_compensate_pressure_int32_1:
   \   000206   7A00         MOV     R2,#0x0
   \   000208   7B00         MOV     R3,#0x0
   \   00020A   7C00         MOV     R4,#0x0
   \   00020C   7D00         MOV     R5,#0x0
   \   00020E   80E0         SJMP    ??bme280_compensate_pressure_int32_3
    407          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   12....       LCALL   ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_235:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine87:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   38           ADDC    A,R0
   \   000004   F583         MOV     DPH,A
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F5..         MOV     ?V4,A
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   F5..         MOV     ?V5,A
   \   00000D   33           RLC     A
   \   00000E   95E0         SUBB    A,0xE0 /* A   */
   \   000010   F5..         MOV     ?V6,A
   \   000012   F5..         MOV     ?V7,A
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   38           ADDC    A,R0
   \   000004   F583         MOV     DPH,A
   \   000006                REQUIRE ??Subroutine108_0
   \   000006                ; // Fall through to label ??Subroutine108_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine68:
   \   000000   F5..         MOV     ?V4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F5..         MOV     ?V5,A
   \   000006   E4           CLR     A
   \   000007   F5..         MOV     ?V6,A
   \   000009   F5..         MOV     ?V7,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7404         MOV     A,#0x4
   \   000002   12....       LCALL   ?DEALLOC_XSTACK8
   \   000005                REQUIRE ??Subroutine124_0
   \   000005                ; // Fall through to label ??Subroutine124_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine124_0:
   \   000000   7F10         MOV     R7,#0x10
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine64:
   \   000000   12....       LCALL   ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_253:
   \   000003   2412         ADD     A,#0x12
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine63:
   \   000000   12....       LCALL   ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_252:
   \   000003   2408         ADD     A,#0x8
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine62:
   \   000000   12....       LCALL   ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_251:
   \   000003   2410         ADD     A,#0x10
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   12....       LCALL   ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_233:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   12....       LCALL   ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_244:
   \   000003   2406         ADD     A,#0x6
   \   000005   12....       LCALL   ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_266:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine99:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   38           ADDC    A,R0
   \   000004   F583         MOV     DPH,A
   \   000006   E0           MOVX    A,@DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   12....       LCALL   ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_243:
   \   000003   240A         ADD     A,#0xa
   \   000005   12....       LCALL   ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_382:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine82:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   38           ADDC    A,R0
   \   000004   F583         MOV     DPH,A
   \   000006                REQUIRE ??Subroutine125_0
   \   000006                ; // Fall through to label ??Subroutine125_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine86:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   38           ADDC    A,R0
   \   000004   F583         MOV     DPH,A
   \   000006   12....       LCALL   ?Subroutine103 & 0xFFFF
   \                     ??CrossCallReturnLabel_274:
   \   000009   78..         MOV     R0,#?V8
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   85....       MOV     ?V0,?V4
   \   000003   85....       MOV     ?V1,?V5
   \   000006   85....       MOV     ?V2,?V6
   \   000009   85....       MOV     ?V3,?V7
   \   00000C   12....       LCALL   ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_241:
   \   00000F   240E         ADD     A,#0xe
   \   000011                REQUIRE ??Subroutine126_0
   \   000011                ; // Fall through to label ??Subroutine126_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine126_0:
   \   000000   12....       LCALL   ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_391:
   \   000003   78..         MOV     R0,#?V0
   \   000005   79..         MOV     R1,#?V12
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine88:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   38           ADDC    A,R0
   \   000004   F583         MOV     DPH,A
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F5..         MOV     ?V12,A
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   F5..         MOV     ?V13,A
   \   00000D   33           RLC     A
   \   00000E   95E0         SUBB    A,0xE0 /* A   */
   \   000010   F5..         MOV     ?V14,A
   \   000012   F5..         MOV     ?V15,A
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   12....       LCALL   ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_228:
   \   000003   12....       LCALL   ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_229:
   \   000006   78..         MOV     R0,#?V4
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine81:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   EA           MOV     A,R2
   \   000007   F0           MOVX    @DPTR,A
   \   000008   A3           INC     DPTR
   \   000009   EB           MOV     A,R3
   \   00000A   F0           MOVX    @DPTR,A
   \   00000B   A3           INC     DPTR
   \   00000C   EC           MOV     A,R4
   \   00000D   F0           MOVX    @DPTR,A
   \   00000E   A3           INC     DPTR
   \   00000F   ED           MOV     A,R5
   \   000010   F0           MOVX    @DPTR,A
   \   000011   22           RET
    408          
    409          /*!
    410           *	@brief This API is used to read uncompensated humidity.
    411           *	in the registers 0xF7, 0xF8 and 0xF9
    412           *	@note 0xFD -> MSB -> bit from 0 to 7
    413           *	@note 0xFE -> LSB -> bit from 0 to 7
    414           *
    415           *
    416           *
    417           *	@param v_uncomp_humidity_s32 : The value of uncompensated humidity
    418           *
    419           *
    420           *
    421           *	@return results of bus communication function
    422           *	@retval 0 -> Success
    423           *	@retval -1 -> Error
    424           *
    425           *
    426          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    427          BME280_RETURN_FUNCTION_TYPE bme280_read_uncomp_humidity(
   \                     bme280_read_uncomp_humidity:
    428          s32 *v_uncomp_humidity_s32)
    429          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    430          	/* used to return the communication result*/
    431          	BME280_RETURN_FUNCTION_TYPE com_rslt = ERROR;
    432          	/* Array holding the MSB and LSb value
    433          	a_data_u8[0] - Humidity MSB
    434          	a_data_u8[1] - Humidity LSB
    435          	*/
    436          	u8 a_data_u8[BME280_HUMIDITY_DATA_SIZE] = {
    437          	BME280_INIT_VALUE, BME280_INIT_VALUE};
   \   00000E   90....       MOV     DPTR,#`?<Constant {0, 0}>`
   \   000011   AC..         MOV     R4,?XSP + 0
   \   000013   AD..         MOV     R5,?XSP + 1
   \   000015   7402         MOV     A,#0x2
   \   000017   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    438          	/* check the p_bme280 structure pointer as NULL*/
    439          	if (p_bme280 == BME280_NULL) {
   \   00001A   12....       LCALL   ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_131:
   \   00001D   7004         JNZ     ??bme280_read_uncomp_humidity_0
    440          		return E_BME280_NULL_PTR;
   \   00001F   7981         MOV     R1,#-0x7f
   \   000021   803B         SJMP    ??bme280_read_uncomp_humidity_1
    441          		} else {
    442          			com_rslt = p_bme280->BME280_BUS_READ_FUNC(
    443          			p_bme280->dev_addr,
    444          			BME280_HUMIDITY_MSB_REG, a_data_u8,
    445          			BME280_HUMIDITY_DATA_LENGTH);
   \                     ??bme280_read_uncomp_humidity_0:
   \   000023                ; Setup parameters for indirect call
   \   000023   7B02         MOV     R3,#0x2
   \   000025   AC..         MOV     R4,?XSP + 0
   \   000027   AD..         MOV     R5,?XSP + 1
   \   000029   7AFD         MOV     R2,#-0x3
   \   00002B   12....       LCALL   ??Subroutine115_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_318:
   \   00002E   12....       LCALL   ?CALL_IND
   \   000031   E9           MOV     A,R1
   \   000032   FA           MOV     R2,A
    446          			*v_uncomp_humidity_s32 = (s32)(
    447          			(((u32)(a_data_u8[BME280_HUMIDITY_MSB_DATA]))
    448          			<< BME280_SHIFT_BIT_POSITION_BY_08_BITS)|
    449          			((u32)(a_data_u8[BME280_HUMIDITY_LSB_DATA])));
   \   000033   85..82       MOV     DPL,?XSP + 0
   \   000036   85..83       MOV     DPH,?XSP + 1
   \   000039   12....       LCALL   ?Subroutine60 & 0xFFFF
    450          		}
   \                     ??CrossCallReturnLabel_159:
   \   00003C   F5..         MOV     ?V3,A
   \   00003E   7408         MOV     A,#0x8
   \   000040   78..         MOV     R0,#?V0
   \   000042   12....       LCALL   ?L_SHL
   \   000045   04           INC     A
   \   000046   12....       LCALL   ?XSTACK_DISP0_8
   \   000049   12....       LCALL   ?Subroutine97 & 0xFFFF
   \                     ??CrossCallReturnLabel_261:
   \   00004C   78..         MOV     R0,#?V0
   \   00004E   79..         MOV     R1,#?V4
   \   000050   12....       LCALL   ?L_IOR
   \   000053   8E82         MOV     DPL,R6
   \   000055   8F83         MOV     DPH,R7
   \   000057   78..         MOV     R0,#?V0
   \   000059   12....       LCALL   ?L_MOV_TO_X
    451          	return com_rslt;
   \   00005C   EA           MOV     A,R2
   \   00005D   F9           MOV     R1,A
   \                     ??bme280_read_uncomp_humidity_1:
   \   00005E   7402         MOV     A,#0x2
   \   000060   80..         SJMP    ??Subroutine106_0
    452          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000   12....       LCALL   ?Subroutine98 & 0xFFFF
   \                     ??CrossCallReturnLabel_264:
   \   000003   22           RET
    453          
    454          /*!
    455           * @brief Reads actual humidity from uncompensated humidity
    456           * @note Returns the value in %rH as unsigned 32bit integer
    457           * in Q22.10 format(22 integer 10 fractional bits).
    458           * @note An output value of 42313
    459           * represents 42313 / 1024 = 41.321 %rH
    460           *
    461           *
    462           *
    463           *  @param  v_uncomp_humidity_s32: value of uncompensated humidity
    464           *
    465           *  @return Return the actual relative humidity output as u32
    466           *
    467          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    468          u32 bme280_compensate_humidity_int32(s32 v_uncomp_humidity_s32)
   \                     bme280_compensate_humidity_int32:
    469          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V8,R2
   \   000007   8B..         MOV     ?V9,R3
   \   000009   8C..         MOV     ?V10,R4
   \   00000B   8D..         MOV     ?V11,R5
    470          	s32 v_x1_u32 = BME280_INIT_VALUE;
    471          
    472          	/* calculate x1*/
    473          	v_x1_u32 = (p_bme280->cal_param.t_fine - ((s32)76800));
   \   00000D   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   000010   12....       LCALL   ?L_MOV_X
   \   000013   90....       MOV     DPTR,#__Constant_fffed400
   \   000016   78..         MOV     R0,#?V0
   \   000018   12....       LCALL   ?L_ADD_X
    474          	/* calculate x1*/
    475          	v_x1_u32 = (((((v_uncomp_humidity_s32
    476          	<< BME280_SHIFT_BIT_POSITION_BY_14_BITS) -
    477          	(((s32)p_bme280->cal_param.dig_H4)
    478          	<< BME280_SHIFT_BIT_POSITION_BY_20_BITS) -
    479          	(((s32)p_bme280->cal_param.dig_H5) * v_x1_u32)) +
    480          	((s32)16384)) >> BME280_SHIFT_BIT_POSITION_BY_15_BITS)
    481          	* (((((((v_x1_u32 *
    482          	((s32)p_bme280->cal_param.dig_H6))
    483          	>> BME280_SHIFT_BIT_POSITION_BY_10_BITS) *
    484          	(((v_x1_u32 * ((s32)p_bme280->cal_param.dig_H3))
    485          	>> BME280_SHIFT_BIT_POSITION_BY_11_BITS) + ((s32)32768)))
    486          	>> BME280_SHIFT_BIT_POSITION_BY_10_BITS) + ((s32)2097152)) *
    487          	((s32)p_bme280->cal_param.dig_H2) + 8192) >> 14));
   \   00001B   740E         MOV     A,#0xe
   \   00001D   78..         MOV     R0,#?V8
   \   00001F   12....       LCALL   ?L_SHL
   \   000022   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_177:
   \   000025   241C         ADD     A,#0x1c
   \   000027   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_123:
   \   00002A   7414         MOV     A,#0x14
   \   00002C   78..         MOV     R0,#?V4
   \   00002E   12....       LCALL   ?L_SHL
   \   000031   78..         MOV     R0,#?V8
   \   000033   79..         MOV     R1,#?V4
   \   000035   12....       LCALL   ?L_SUB
   \   000038   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_178:
   \   00003B   241E         ADD     A,#0x1e
   \   00003D   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   000040   79..         MOV     R1,#?V0
   \   000042   12....       LCALL   ?L_MUL
   \   000045   78..         MOV     R0,#?V8
   \   000047   79..         MOV     R1,#?V4
   \   000049   12....       LCALL   ?L_SUB
   \   00004C   90....       MOV     DPTR,#__Constant_4000
   \   00004F   78..         MOV     R0,#?V8
   \   000051   12....       LCALL   ?L_ADD_X
   \   000054   740F         MOV     A,#0xf
   \   000056   78..         MOV     R0,#?V8
   \   000058   12....       LCALL   ?SL_SHR
   \   00005B   85....       MOV     ?V4,?V0
   \   00005E   85....       MOV     ?V5,?V1
   \   000061   85....       MOV     ?V6,?V2
   \   000064   85....       MOV     ?V7,?V3
   \   000067   12....       LCALL   ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_143:
   \   00006A   F5..         MOV     ?V12,A
   \   00006C   33           RLC     A
   \   00006D   95E0         SUBB    A,0xE0 /* A   */
   \   00006F   F5..         MOV     ?V13,A
   \   000071   F5..         MOV     ?V14,A
   \   000073   F5..         MOV     ?V15,A
   \   000075   78..         MOV     R0,#?V4
   \   000077   79..         MOV     R1,#?V12
   \   000079   12....       LCALL   ?L_MUL
   \   00007C   740A         MOV     A,#0xa
   \   00007E   78..         MOV     R0,#?V4
   \   000080   12....       LCALL   ?SL_SHR
   \   000083   12....       LCALL   ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_125:
   \   000086   78..         MOV     R0,#?V0
   \   000088   79..         MOV     R1,#?V12
   \   00008A   12....       LCALL   ?L_MUL
   \   00008D   740B         MOV     A,#0xb
   \   00008F   78..         MOV     R0,#?V0
   \   000091   12....       LCALL   ?SL_SHR
   \   000094   90....       MOV     DPTR,#__Constant_8000
   \   000097   78..         MOV     R0,#?V0
   \   000099   12....       LCALL   ?L_ADD_X
   \   00009C   78..         MOV     R0,#?V4
   \   00009E   79..         MOV     R1,#?V0
   \   0000A0   12....       LCALL   ?L_MUL
   \   0000A3   740A         MOV     A,#0xa
   \   0000A5   78..         MOV     R0,#?V4
   \   0000A7   12....       LCALL   ?SL_SHR
   \   0000AA   90....       MOV     DPTR,#__Constant_200000
   \   0000AD   78..         MOV     R0,#?V4
   \   0000AF   12....       LCALL   ?L_ADD_X
   \   0000B2   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_179:
   \   0000B5   2419         ADD     A,#0x19
   \   0000B7   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_284:
   \   0000BA   12....       LCALL   ?L_MUL
   \   0000BD   90....       MOV     DPTR,#__Constant_2000
   \   0000C0   78..         MOV     R0,#?V4
   \   0000C2   12....       LCALL   ?L_ADD_X
   \   0000C5   740E         MOV     A,#0xe
   \   0000C7   78..         MOV     R0,#?V4
   \   0000C9   12....       LCALL   ?SL_SHR
   \   0000CC   78..         MOV     R0,#?V8
   \   0000CE   79..         MOV     R1,#?V4
   \   0000D0   12....       LCALL   ?L_MUL
   \   0000D3   85....       MOV     ?V0,?V8
   \   0000D6   85....       MOV     ?V1,?V9
   \   0000D9   85....       MOV     ?V2,?V10
   \   0000DC   85....       MOV     ?V3,?V11
    488          	v_x1_u32 = (v_x1_u32 - (((((v_x1_u32
    489          	>> BME280_SHIFT_BIT_POSITION_BY_15_BITS) *
    490          	(v_x1_u32 >> BME280_SHIFT_BIT_POSITION_BY_15_BITS))
    491          	>> BME280_SHIFT_BIT_POSITION_BY_07_BITS) *
    492          	((s32)p_bme280->cal_param.dig_H1))
    493          	>> BME280_SHIFT_BIT_POSITION_BY_04_BITS));
   \   0000DF   740F         MOV     A,#0xf
   \   0000E1   78..         MOV     R0,#?V8
   \   0000E3   12....       LCALL   ?SL_SHR
   \   0000E6   85....       MOV     ?V4,?V8
   \   0000E9   85....       MOV     ?V5,?V9
   \   0000EC   85....       MOV     ?V6,?V10
   \   0000EF   85....       MOV     ?V7,?V11
   \   0000F2   78..         MOV     R0,#?V4
   \   0000F4   79..         MOV     R1,#?V8
   \   0000F6   12....       LCALL   ?L_MUL
   \   0000F9   7407         MOV     A,#0x7
   \   0000FB   78..         MOV     R0,#?V4
   \   0000FD   12....       LCALL   ?SL_SHR
   \   000100   12....       LCALL   ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_127:
   \   000103   78..         MOV     R0,#?V4
   \   000105   79..         MOV     R1,#?V8
   \   000107   12....       LCALL   ?L_MUL
   \   00010A   7404         MOV     A,#0x4
   \   00010C   78..         MOV     R0,#?V4
   \   00010E   12....       LCALL   ?SL_SHR
   \   000111   78..         MOV     R0,#?V0
   \   000113   79..         MOV     R1,#?V4
   \   000115   12....       LCALL   ?L_SUB
    494          	v_x1_u32 = (v_x1_u32 < 0 ? 0 : v_x1_u32);
   \   000118   90....       MOV     DPTR,#__Constant_0
   \   00011B   78..         MOV     R0,#?V0
   \   00011D   12....       LCALL   ?SL_GE_X
   \   000120   401E         JC      ??bme280_compensate_humidity_int32_0
   \   000122   75..00       MOV     ?V0,#0x0
   \   000125   75..00       MOV     ?V1,#0x0
   \   000128   75..00       MOV     ?V2,#0x0
   \   00012B   75..00       MOV     ?V3,#0x0
   \                     ??bme280_compensate_humidity_int32_1:
   \   00012E   740C         MOV     A,#0xc
   \   000130   78..         MOV     R0,#?V0
   \   000132   12....       LCALL   ?SL_SHR
    495          	v_x1_u32 = (v_x1_u32 > 419430400 ?
    496          	419430400 : v_x1_u32);
    497          	return (u32)(v_x1_u32 >> BME280_SHIFT_BIT_POSITION_BY_12_BITS);
   \                     ??bme280_compensate_humidity_int32_2:
   \   000135   AA..         MOV     R2,?V0
   \   000137   AB..         MOV     R3,?V1
   \   000139   AC..         MOV     R4,?V2
   \   00013B   AD..         MOV     R5,?V3
   \   00013D   02....       LJMP    ??Subroutine124_0 & 0xFFFF
   \                     ??bme280_compensate_humidity_int32_0:
   \   000140   90....       MOV     DPTR,#__Constant_19000001
   \   000143   78..         MOV     R0,#?V0
   \   000145   12....       LCALL   ?SL_GE_X
   \   000148   50E4         JNC     ??bme280_compensate_humidity_int32_1
   \   00014A   75..00       MOV     ?V0,#0x0
   \   00014D   75..90       MOV     ?V1,#-0x70
   \   000150   75..01       MOV     ?V2,#0x1
   \   000153   75..00       MOV     ?V3,#0x0
   \   000156   80DD         SJMP    ??bme280_compensate_humidity_int32_2
    498          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   12....       LCALL   ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_234:
   \   000003   78..         MOV     R0,#?V4
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000   12....       LCALL   ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_247:
   \   000003   2420         ADD     A,#0x20
   \   000005   12....       LCALL   ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_269:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   12....       LCALL   ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_246:
   \   000003   2418         ADD     A,#0x18
   \   000005   12....       LCALL   ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_268:
   \   000008   F5..         MOV     ?V8,A
   \   00000A   E4           CLR     A
   \   00000B   F5..         MOV     ?V9,A
   \   00000D   F5..         MOV     ?V10,A
   \   00000F   F5..         MOV     ?V11,A
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   12....       LCALL   ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_245:
   \   000003   241B         ADD     A,#0x1b
   \   000005   12....       LCALL   ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_267:
   \   000008   F5..         MOV     ?V12,A
   \   00000A   E4           CLR     A
   \   00000B   F5..         MOV     ?V13,A
   \   00000D   F5..         MOV     ?V14,A
   \   00000F   F5..         MOV     ?V15,A
   \   000011   22           RET
    499          
    500          /*!
    501           * @brief Reads actual humidity from uncompensated humidity
    502           * @note Returns the value in %rH as unsigned 16bit integer
    503           * @note An output value of 42313
    504           * represents 42313/512 = 82.643 %rH
    505           *
    506           *
    507           *
    508           *  @param v_uncomp_humidity_s32: value of uncompensated humidity
    509           *
    510           *
    511           *  @return Return the actual relative humidity output as u16
    512           *
    513          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    514          u16 bme280_compensate_humidity_int32_sixteen_bit_output(
   \                     bme280_compensate_humidity_int32_sixteen_bit_output:
    515          s32 v_uncomp_humidity_s32)
    516          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
    517          	u32 v_x1_u32 = BME280_INIT_VALUE;
    518          	u16 v_x2_u32 = BME280_INIT_VALUE;
    519          
    520          	v_x1_u32 =  bme280_compensate_humidity_int32(v_uncomp_humidity_s32);
    521          	v_x2_u32 = (u16)(v_x1_u32 >> BME280_SHIFT_BIT_POSITION_BY_01_BIT);
    522          	return v_x2_u32;
   \   000005                ; Setup parameters for call to function bme280_compensate_humidity_int32
   \   000005   12....       LCALL   `??bme280_compensate_humidity_int32::?relay`; Banked call to: bme280_compensate_humidity_int32
   \   000008   8A..         MOV     ?V0,R2
   \   00000A   8B..         MOV     ?V1,R3
   \   00000C   8C..         MOV     ?V2,R4
   \   00000E   8D..         MOV     ?V3,R5
   \   000010   7401         MOV     A,#0x1
   \   000012   78..         MOV     R0,#?V0
   \   000014   12....       LCALL   ?UL_SHR
   \   000017   AA..         MOV     R2,?V0
   \   000019   AB..         MOV     R3,?V1
   \   00001B   80..         SJMP    ??Subroutine109_0
    523          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine109_0:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    524          
    525          /*!
    526           * @brief This API used to read uncompensated
    527           * pressure,temperature and humidity
    528           *
    529           *
    530           *
    531           *
    532           *  @param  v_uncomp_pressure_s32: The value of uncompensated pressure.
    533           *  @param  v_uncomp_temperature_s32: The value of uncompensated temperature
    534           *  @param  v_uncomp_humidity_s32: The value of uncompensated humidity.
    535           *
    536           *
    537           *
    538           *	@return results of bus communication function
    539           *	@retval 0 -> Success
    540           *	@retval -1 -> Error
    541           *
    542           *
    543          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    544          BME280_RETURN_FUNCTION_TYPE bme280_read_uncomp_pressure_temperature_humidity(
   \                     bme280_read_uncomp_pressure_temperature_humidity:
    545          s32 *v_uncomp_pressure_s32,
    546          s32 *v_uncomp_temperature_s32, s32 *v_uncomp_humidity_s32)
    547          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   8C..         MOV     ?V8,R4
   \   000010   8D..         MOV     ?V9,R5
    548          	/* used to return the communication result*/
    549          	BME280_RETURN_FUNCTION_TYPE com_rslt = ERROR;
    550          	/* Array holding the MSB and LSb value of
    551          	a_data_u8[0] - Pressure MSB
    552          	a_data_u8[1] - Pressure LSB
    553          	a_data_u8[1] - Pressure LSB
    554          	a_data_u8[1] - Temperature MSB
    555          	a_data_u8[1] - Temperature LSB
    556          	a_data_u8[1] - Temperature LSB
    557          	a_data_u8[1] - Humidity MSB
    558          	a_data_u8[1] - Humidity LSB
    559          	*/
    560          	u8 a_data_u8[BME280_DATA_FRAME_SIZE] = {
    561          	BME280_INIT_VALUE, BME280_INIT_VALUE,
    562          	BME280_INIT_VALUE, BME280_INIT_VALUE,
    563          	BME280_INIT_VALUE, BME280_INIT_VALUE,
    564          	BME280_INIT_VALUE, BME280_INIT_VALUE};
   \   000012   90....       MOV     DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0}>`
   \   000015   AC..         MOV     R4,?XSP + 0
   \   000017   AD..         MOV     R5,?XSP + 1
   \   000019   7408         MOV     A,#0x8
   \   00001B   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    565          	/* check the p_bme280 structure pointer as NULL*/
    566          	if (p_bme280 == BME280_NULL) {
   \   00001E   12....       LCALL   ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_132:
   \   000021   7005         JNZ     ??bme280_read_uncomp_pressure_temperature_humid_1
    567          		return E_BME280_NULL_PTR;
   \   000023   7981         MOV     R1,#-0x7f
   \   000025   02....       LJMP    ??bme280_read_uncomp_pressure_temperature_humid_2 & 0xFFFF
    568          		} else {
    569          			com_rslt = p_bme280->BME280_BUS_READ_FUNC(
    570          			p_bme280->dev_addr,
    571          			BME280_PRESSURE_MSB_REG,
    572          			a_data_u8, BME280_ALL_DATA_FRAME_LENGTH);
   \                     ??bme280_read_uncomp_pressure_temperature_humid_1:
   \   000028                ; Setup parameters for indirect call
   \   000028   7B08         MOV     R3,#0x8
   \   00002A   AC..         MOV     R4,?XSP + 0
   \   00002C   AD..         MOV     R5,?XSP + 1
   \   00002E   7AF7         MOV     R2,#-0x9
   \   000030   12....       LCALL   ??Subroutine115_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_319:
   \   000033   12....       LCALL   ?CALL_IND
   \   000036   12....       LCALL   ?Subroutine42 & 0xFFFF
    573          			/*Pressure*/
    574          			*v_uncomp_pressure_s32 = (s32)((
    575          			((u32)(a_data_u8[
    576          			BME280_DATA_FRAME_PRESSURE_MSB_BYTE]))
    577          			<< BME280_SHIFT_BIT_POSITION_BY_12_BITS) |
    578          			(((u32)(a_data_u8[
    579          			BME280_DATA_FRAME_PRESSURE_LSB_BYTE]))
    580          			<< BME280_SHIFT_BIT_POSITION_BY_04_BITS) |
    581          			((u32)a_data_u8[
    582          			BME280_DATA_FRAME_PRESSURE_XLSB_BYTE] >>
    583          			BME280_SHIFT_BIT_POSITION_BY_04_BITS));
   \                     ??CrossCallReturnLabel_118:
   \   000039   12....       LCALL   ?L_SHL
   \   00003C   04           INC     A
   \   00003D   12....       LCALL   ?XSTACK_DISP0_8
   \   000040   12....       LCALL   ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_121:
   \   000043   12....       LCALL   ?L_SHL
   \   000046   78..         MOV     R0,#?V0
   \   000048   79..         MOV     R1,#?V4
   \   00004A   12....       LCALL   ?L_IOR
   \   00004D   7402         MOV     A,#0x2
   \   00004F   12....       LCALL   ?XSTACK_DISP0_8
   \   000052   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   000055   12....       LCALL   ?L_IOR
   \   000058   8E82         MOV     DPL,R6
   \   00005A   8F83         MOV     DPH,R7
   \   00005C   78..         MOV     R0,#?V0
   \   00005E   12....       LCALL   ?L_MOV_TO_X
    584          
    585          			/* Temperature */
    586          			*v_uncomp_temperature_s32 = (s32)(((
    587          			(u32) (a_data_u8[
    588          			BME280_DATA_FRAME_TEMPERATURE_MSB_BYTE]))
    589          			<< BME280_SHIFT_BIT_POSITION_BY_12_BITS) |
    590          			(((u32)(a_data_u8[
    591          			BME280_DATA_FRAME_TEMPERATURE_LSB_BYTE]))
    592          			<< BME280_SHIFT_BIT_POSITION_BY_04_BITS)
    593          			| ((u32)a_data_u8[
    594          			BME280_DATA_FRAME_TEMPERATURE_XLSB_BYTE]
    595          			>> BME280_SHIFT_BIT_POSITION_BY_04_BITS));
   \   000061   7403         MOV     A,#0x3
   \   000063   12....       LCALL   ?XSTACK_DISP0_8
   \   000066   12....       LCALL   ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_160:
   \   000069   740C         MOV     A,#0xc
   \   00006B   78..         MOV     R0,#?V0
   \   00006D   12....       LCALL   ?L_SHL
   \   000070   7404         MOV     A,#0x4
   \   000072   12....       LCALL   ?XSTACK_DISP0_8
   \   000075   E0           MOVX    A,@DPTR
   \   000076   F5..         MOV     ?V4,A
   \   000078   7404         MOV     A,#0x4
   \   00007A   78..         MOV     R0,#?V4
   \   00007C   12....       LCALL   ?L_SHL
   \   00007F   78..         MOV     R0,#?V0
   \   000081   79..         MOV     R1,#?V4
   \   000083   12....       LCALL   ?L_IOR
   \   000086   7405         MOV     A,#0x5
   \   000088   12....       LCALL   ?XSTACK_DISP0_8
   \   00008B   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   00008E   12....       LCALL   ?L_IOR
   \   000091   85..82       MOV     DPL,?V8
   \   000094   85..83       MOV     DPH,?V9
   \   000097   78..         MOV     R0,#?V0
   \   000099   12....       LCALL   ?L_MOV_TO_X
    596          
    597          			/*Humidity*/
    598          			*v_uncomp_humidity_s32 = (s32)((
    599          			((u32)(a_data_u8[
    600          			BME280_DATA_FRAME_HUMIDITY_MSB_BYTE]))
    601          			<< BME280_SHIFT_BIT_POSITION_BY_08_BITS)|
    602          			((u32)(a_data_u8[
    603          			BME280_DATA_FRAME_HUMIDITY_LSB_BYTE])));
   \   00009C   7406         MOV     A,#0x6
   \   00009E   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A1   12....       LCALL   ?Subroutine60 & 0xFFFF
    604          		}
   \                     ??CrossCallReturnLabel_161:
   \   0000A4   7408         MOV     A,#0x8
   \   0000A6   78..         MOV     R0,#?V0
   \   0000A8   12....       LCALL   ?L_SHL
   \   0000AB   7407         MOV     A,#0x7
   \   0000AD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B0   E0           MOVX    A,@DPTR
   \   0000B1   F5..         MOV     ?V4,A
   \   0000B3   78..         MOV     R0,#?V0
   \   0000B5   79..         MOV     R1,#?V4
   \   0000B7   12....       LCALL   ?L_IOR
   \   0000BA   741A         MOV     A,#0x1a
   \   0000BC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BF   12....       LCALL   ??Subroutine105_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_277:
   \   0000C2   78..         MOV     R0,#?V0
   \   0000C4   12....       LCALL   ?L_MOV_TO_X
    605          	return com_rslt;
   \   0000C7   EA           MOV     A,R2
   \   0000C8   F9           MOV     R1,A
   \                     ??bme280_read_uncomp_pressure_temperature_humid_2:
   \   0000C9   7408         MOV     A,#0x8
   \   0000CB   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000CE   7F0A         MOV     R7,#0xa
   \   0000D0   02....       LJMP    ?BANKED_LEAVE_XDATA
    606          }
    607          
    608          /*!
    609           * @brief This API used to read true pressure, temperature and humidity
    610           *
    611           *
    612           *
    613           *
    614           *	@param  v_pressure_u32 : The value of compensated pressure.
    615           *	@param  v_temperature_s32 : The value of compensated temperature.
    616           *	@param  v_humidity_u32 : The value of compensated humidity.
    617           *
    618           *
    619           *	@return results of bus communication function
    620           *	@retval 0 -> Success
    621           *	@retval -1 -> Error
    622           *
    623           *
    624          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine109_0
   \   000003                ; // Fall through to label ??Subroutine109_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    625          BME280_RETURN_FUNCTION_TYPE bme280_read_pressure_temperature_humidity(
   \                     bme280_read_pressure_temperature_humidity:
    626          u32 *v_pressure_u32, s32 *v_temperature_s32, u32 *v_humidity_u32)
    627          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V2,R2
   \   00000C   8B..         MOV     ?V3,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
    628          	/* used to return the communication result*/
    629          	BME280_RETURN_FUNCTION_TYPE com_rslt = ERROR;
    630          	s32 v_uncomp_pressure_s32 = BME280_INIT_VALUE;
   \   000012   7408         MOV     A,#0x8
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   12....       LCALL   ?Subroutine19 & 0xFFFF
    631          	s32 v_uncom_temperature_s32 = BME280_INIT_VALUE;
   \                     ??CrossCallReturnLabel_37:
   \   00001A   12....       LCALL   ?XSTACK_DISP0_8
   \   00001D   12....       LCALL   ?Subroutine14 & 0xFFFF
    632          	s32 v_uncom_humidity_s32 = BME280_INIT_VALUE;
   \                     ??CrossCallReturnLabel_17:
   \   000020   12....       LCALL   ??Subroutine121_0 & 0xFFFF
    633          	/* check the p_bme280 structure pointer as NULL*/
    634          	if (p_bme280 == BME280_NULL) {
   \                     ??CrossCallReturnLabel_358:
   \   000023   7004         JNZ     ??bme280_read_pressure_temperature_humidity_0
    635          		return E_BME280_NULL_PTR;
   \   000025   7981         MOV     R1,#-0x7f
   \   000027   8061         SJMP    ??bme280_read_pressure_temperature_humidity_1
    636          		} else {
    637          			/* read the uncompensated pressure,
    638          			temperature and humidity*/
    639          			com_rslt =
    640          			bme280_read_uncomp_pressure_temperature_humidity(
    641          			&v_uncomp_pressure_s32, &v_uncom_temperature_s32,
    642          			&v_uncom_humidity_s32);
   \                     ??bme280_read_pressure_temperature_humidity_0:
   \   000029                ; Setup parameters for call to function bme280_read_uncomp_pressure_temperature_humidity
   \   000029   A8..         MOV     R0,?XSP + 0
   \   00002B   A9..         MOV     R1,?XSP + 1
   \   00002D   88..         MOV     ?V0,R0
   \   00002F   89..         MOV     ?V1,R1
   \   000031   78..         MOV     R0,#?V0
   \   000033   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000036   7406         MOV     A,#0x6
   \   000038   12....       LCALL   ?XSTACK_DISP102_8
   \   00003B   740A         MOV     A,#0xa
   \   00003D   12....       LCALL   ?XSTACK_DISP101_8
   \   000040   12....       LCALL   ??bme280_read_uncomp_pressure_temperature_humid; Banked call to: bme280_read_uncomp_pressure_temperature_humidity
   \   000043   7402         MOV     A,#0x2
   \   000045   12....       LCALL   ?DEALLOC_XSTACK8
   \   000048   E9           MOV     A,R1
   \   000049   F5..         MOV     ?V0,A
    643          			/* read the true pressure, temperature and humidity*/
    644          			*v_temperature_s32 =
    645          			bme280_compensate_temperature_int32(
    646          			v_uncom_temperature_s32);
   \   00004B                ; Setup parameters for call to function bme280_compensate_temperature_int32
   \   00004B   7404         MOV     A,#0x4
   \   00004D   12....       LCALL   ?XSTACK_DISP0_8
   \   000050   12....       LCALL   ?XLOAD_R2345
   \   000053   12....       LCALL   `??bme280_compensate_temperature_int32::?relay`; Banked call to: bme280_compensate_temperature_int32
   \   000056   8E82         MOV     DPL,R6
   \   000058   8F83         MOV     DPH,R7
   \   00005A   12....       LCALL   ?XSTORE_R2345
    647          			*v_pressure_u32 = bme280_compensate_pressure_int32(
    648          			v_uncomp_pressure_s32);
   \   00005D                ; Setup parameters for call to function bme280_compensate_pressure_int32
   \   00005D   7408         MOV     A,#0x8
   \   00005F   12....       LCALL   ?XSTACK_DISP0_8
   \   000062   12....       LCALL   ?XLOAD_R2345
   \   000065   12....       LCALL   `??bme280_compensate_pressure_int32::?relay`; Banked call to: bme280_compensate_pressure_int32
   \   000068   85..82       MOV     DPL,?V2
   \   00006B   85..83       MOV     DPH,?V3
   \   00006E   12....       LCALL   ?XSTORE_R2345
    649          			*v_humidity_u32 = bme280_compensate_humidity_int32(
    650          			v_uncom_humidity_s32);
   \   000071                ; Setup parameters for call to function bme280_compensate_humidity_int32
   \   000071   85..82       MOV     DPL,?XSP + 0
   \   000074   85..83       MOV     DPH,?XSP + 1
   \   000077   12....       LCALL   ?XLOAD_R2345
   \   00007A   12....       LCALL   `??bme280_compensate_humidity_int32::?relay`; Banked call to: bme280_compensate_humidity_int32
   \   00007D   7418         MOV     A,#0x18
   \   00007F   12....       LCALL   ?XSTACK_DISP0_8
   \   000082   12....       LCALL   ??Subroutine105_0 & 0xFFFF
    651          		}
   \                     ??CrossCallReturnLabel_278:
   \   000085   12....       LCALL   ?XSTORE_R2345
    652          	return com_rslt;
   \   000088   A9..         MOV     R1,?V0
   \                     ??bme280_read_pressure_temperature_humidity_1:
   \   00008A   740C         MOV     A,#0xc
   \   00008C   02....       LJMP    ?Subroutine5 & 0xFFFF
    653          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine121_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   90....       MOV     DPTR,#p_bme280
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F8           MOV     R0,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F9           MOV     R1,A
   \   000009   E8           MOV     A,R0
   \   00000A   49           ORL     A,R1
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine79:
   \   000000   E4           CLR     A
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   F0           MOVX    @DPTR,A
   \   000004   A3           INC     DPTR
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   F0           MOVX    @DPTR,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   12....       LCALL   ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_225:
   \   000003   7404         MOV     A,#0x4
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   12....       LCALL   ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_224:
   \   000003   85..82       MOV     DPL,?XSP + 0
   \   000006   85..83       MOV     DPH,?XSP + 1
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   A3           INC     DPTR
   \   00000B   F0           MOVX    @DPTR,A
   \   00000C   A3           INC     DPTR
   \   00000D   F0           MOVX    @DPTR,A
   \   00000E   A3           INC     DPTR
   \   00000F   22           RET
    654          
    655          /*!
    656           *	@brief This API is used to
    657           *	calibration parameters used for calculation in the registers
    658           *
    659           *  parameter | Register address |   bit
    660           *------------|------------------|----------------
    661           *	dig_T1    |  0x88 and 0x89   | from 0 : 7 to 8: 15
    662           *	dig_T2    |  0x8A and 0x8B   | from 0 : 7 to 8: 15
    663           *	dig_T3    |  0x8C and 0x8D   | from 0 : 7 to 8: 15
    664           *	dig_P1    |  0x8E and 0x8F   | from 0 : 7 to 8: 15
    665           *	dig_P2    |  0x90 and 0x91   | from 0 : 7 to 8: 15
    666           *	dig_P3    |  0x92 and 0x93   | from 0 : 7 to 8: 15
    667           *	dig_P4    |  0x94 and 0x95   | from 0 : 7 to 8: 15
    668           *	dig_P5    |  0x96 and 0x97   | from 0 : 7 to 8: 15
    669           *	dig_P6    |  0x98 and 0x99   | from 0 : 7 to 8: 15
    670           *	dig_P7    |  0x9A and 0x9B   | from 0 : 7 to 8: 15
    671           *	dig_P8    |  0x9C and 0x9D   | from 0 : 7 to 8: 15
    672           *	dig_P9    |  0x9E and 0x9F   | from 0 : 7 to 8: 15
    673           *	dig_H1    |         0xA1     | from 0 to 7
    674           *	dig_H2    |  0xE1 and 0xE2   | from 0 : 7 to 8: 15
    675           *	dig_H3    |         0xE3     | from 0 to 7
    676           *	dig_H4    |  0xE4 and 0xE5   | from 4 : 11 to 0: 3
    677           *	dig_H5    |  0xE5 and 0xE6   | from 0 : 3 to 4: 11
    678           *	dig_H6    |         0xE7     | from 0 to 7
    679           *
    680           *	@return results of bus communication function
    681           *	@retval 0 -> Success
    682           *	@retval -1 -> Error
    683           *
    684           *
    685          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    686          BME280_RETURN_FUNCTION_TYPE bme280_get_calib_param(void)
   \                     bme280_get_calib_param:
    687          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 26
   \   000005   74E6         MOV     A,#-0x1a
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    688          	/* used to return the communication result*/
    689          	BME280_RETURN_FUNCTION_TYPE com_rslt = ERROR;
    690          	u8 a_data_u8[BME280_CALIB_DATA_SIZE] = {
    691          	BME280_INIT_VALUE, BME280_INIT_VALUE,
    692          	BME280_INIT_VALUE, BME280_INIT_VALUE, BME280_INIT_VALUE,
    693          	BME280_INIT_VALUE, BME280_INIT_VALUE, BME280_INIT_VALUE,
    694          	BME280_INIT_VALUE, BME280_INIT_VALUE, BME280_INIT_VALUE,
    695          	BME280_INIT_VALUE, BME280_INIT_VALUE, BME280_INIT_VALUE,
    696          	BME280_INIT_VALUE, BME280_INIT_VALUE, BME280_INIT_VALUE,
    697          	BME280_INIT_VALUE, BME280_INIT_VALUE, BME280_INIT_VALUE,
    698          	BME280_INIT_VALUE, BME280_INIT_VALUE, BME280_INIT_VALUE,
    699          	BME280_INIT_VALUE, BME280_INIT_VALUE, BME280_INIT_VALUE};
   \   00000A   90....       MOV     DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0`
   \   00000D   AC..         MOV     R4,?XSP + 0
   \   00000F   AD..         MOV     R5,?XSP + 1
   \   000011   741A         MOV     A,#0x1a
   \   000013   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    700          	/* check the p_bme280 structure pointer as NULL*/
    701          	if (p_bme280 == BME280_NULL) {
   \   000016   12....       LCALL   ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_133:
   \   000019   7005         JNZ     ??bme280_get_calib_param_0
    702          		return E_BME280_NULL_PTR;
   \   00001B   7981         MOV     R1,#-0x7f
   \   00001D   02....       LJMP    ??bme280_get_calib_param_1 & 0xFFFF
    703          		} else {
    704          			com_rslt = p_bme280->BME280_BUS_READ_FUNC(
    705          			p_bme280->dev_addr,
    706          			BME280_TEMPERATURE_CALIB_DIG_T1_LSB_REG,
    707          			a_data_u8,
    708          			BME280_PRESSURE_TEMPERATURE_CALIB_DATA_LENGTH);
   \                     ??bme280_get_calib_param_0:
   \   000020                ; Setup parameters for indirect call
   \   000020   7B1A         MOV     R3,#0x1a
   \   000022   AC..         MOV     R4,?XSP + 0
   \   000024   AD..         MOV     R5,?XSP + 1
   \   000026   7A88         MOV     R2,#-0x78
   \   000028   12....       LCALL   ??Subroutine115_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_320:
   \   00002B   12....       LCALL   ?CALL_IND
   \   00002E   E9           MOV     A,R1
   \   00002F   FE           MOV     R6,A
    709          
    710          			p_bme280->cal_param.dig_T1 = (u16)(((
    711          			(u16)((u8)a_data_u8[
    712          			BME280_TEMPERATURE_CALIB_DIG_T1_MSB])) <<
    713          			BME280_SHIFT_BIT_POSITION_BY_08_BITS)
    714          			| a_data_u8[BME280_TEMPERATURE_CALIB_DIG_T1_LSB]);
   \   000030   7401         MOV     A,#0x1
   \   000032   12....       LCALL   ?XSTACK_DISP0_8
   \   000035   12....       LCALL   ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_196:
   \   000038   12....       LCALL   ?Subroutine94 & 0xFFFF
   \                     ??CrossCallReturnLabel_255:
   \   00003B   12....       LCALL   ??Subroutine110_0 & 0xFFFF
    715          			p_bme280->cal_param.dig_T2 = (s16)(((
    716          			(s16)((s8)a_data_u8[
    717          			BME280_TEMPERATURE_CALIB_DIG_T2_MSB])) <<
    718          			BME280_SHIFT_BIT_POSITION_BY_08_BITS)
    719          			| a_data_u8[BME280_TEMPERATURE_CALIB_DIG_T2_LSB]);
   \                     ??CrossCallReturnLabel_286:
   \   00003E   7403         MOV     A,#0x3
   \   000040   12....       LCALL   ?XSTACK_DISP0_8
   \   000043   E0           MOVX    A,@DPTR
   \   000044   F9           MOV     R1,A
   \   000045   7402         MOV     A,#0x2
   \   000047   12....       LCALL   ?XSTACK_DISP0_8
   \   00004A   12....       LCALL   ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_141:
   \   00004D   12....       LCALL   ??Subroutine110_0 & 0xFFFF
    720          			p_bme280->cal_param.dig_T3 = (s16)(((
    721          			(s16)((s8)a_data_u8[
    722          			BME280_TEMPERATURE_CALIB_DIG_T3_MSB])) <<
    723          			BME280_SHIFT_BIT_POSITION_BY_08_BITS)
    724          			| a_data_u8[BME280_TEMPERATURE_CALIB_DIG_T3_LSB]);
   \                     ??CrossCallReturnLabel_287:
   \   000050   7405         MOV     A,#0x5
   \   000052   12....       LCALL   ?XSTACK_DISP0_8
   \   000055   E0           MOVX    A,@DPTR
   \   000056   F9           MOV     R1,A
   \   000057   7404         MOV     A,#0x4
   \   000059   12....       LCALL   ?XSTACK_DISP0_8
   \   00005C   12....       LCALL   ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_142:
   \   00005F   A3           INC     DPTR
   \   000060   A3           INC     DPTR
   \   000061   12....       LCALL   ??Subroutine110_0 & 0xFFFF
    725          			p_bme280->cal_param.dig_P1 = (u16)(((
    726          			(u16)((u8)a_data_u8[
    727          			BME280_PRESSURE_CALIB_DIG_P1_MSB])) <<
    728          			BME280_SHIFT_BIT_POSITION_BY_08_BITS)
    729          			| a_data_u8[BME280_PRESSURE_CALIB_DIG_P1_LSB]);
   \                     ??CrossCallReturnLabel_288:
   \   000064   7407         MOV     A,#0x7
   \   000066   12....       LCALL   ?XSTACK_DISP0_8
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   F9           MOV     R1,A
   \   00006B   7406         MOV     A,#0x6
   \   00006D   12....       LCALL   ?XSTACK_DISP0_8
   \   000070   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   000073   2406         ADD     A,#0x6
   \   000075   12....       LCALL   ?Subroutine15 & 0xFFFF
    730          			p_bme280->cal_param.dig_P2 = (s16)(((
    731          			(s16)((s8)a_data_u8[
    732          			BME280_PRESSURE_CALIB_DIG_P2_MSB])) <<
    733          			BME280_SHIFT_BIT_POSITION_BY_08_BITS)
    734          			| a_data_u8[BME280_PRESSURE_CALIB_DIG_P2_LSB]);
   \                     ??CrossCallReturnLabel_289:
   \   000078   7409         MOV     A,#0x9
   \   00007A   12....       LCALL   ?XSTACK_DISP0_8
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   F9           MOV     R1,A
   \   00007F   7408         MOV     A,#0x8
   \   000081   12....       LCALL   ?XSTACK_DISP0_8
   \   000084   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   000087   2408         ADD     A,#0x8
   \   000089   12....       LCALL   ?Subroutine15 & 0xFFFF
    735          			p_bme280->cal_param.dig_P3 = (s16)(((
    736          			(s16)((s8)a_data_u8[
    737          			BME280_PRESSURE_CALIB_DIG_P3_MSB])) <<
    738          			BME280_SHIFT_BIT_POSITION_BY_08_BITS)
    739          			| a_data_u8[
    740          			BME280_PRESSURE_CALIB_DIG_P3_LSB]);
   \                     ??CrossCallReturnLabel_290:
   \   00008C   740B         MOV     A,#0xb
   \   00008E   12....       LCALL   ?XSTACK_DISP0_8
   \   000091   E0           MOVX    A,@DPTR
   \   000092   F9           MOV     R1,A
   \   000093   740A         MOV     A,#0xa
   \   000095   12....       LCALL   ?XSTACK_DISP0_8
   \   000098   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   00009B   240A         ADD     A,#0xa
   \   00009D   12....       LCALL   ?Subroutine15 & 0xFFFF
    741          			p_bme280->cal_param.dig_P4 = (s16)(((
    742          			(s16)((s8)a_data_u8[
    743          			BME280_PRESSURE_CALIB_DIG_P4_MSB])) <<
    744          			BME280_SHIFT_BIT_POSITION_BY_08_BITS)
    745          			| a_data_u8[BME280_PRESSURE_CALIB_DIG_P4_LSB]);
   \                     ??CrossCallReturnLabel_291:
   \   0000A0   740D         MOV     A,#0xd
   \   0000A2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A5   E0           MOVX    A,@DPTR
   \   0000A6   F9           MOV     R1,A
   \   0000A7   740C         MOV     A,#0xc
   \   0000A9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AC   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   0000AF   240C         ADD     A,#0xc
   \   0000B1   12....       LCALL   ?Subroutine15 & 0xFFFF
    746          			p_bme280->cal_param.dig_P5 = (s16)(((
    747          			(s16)((s8)a_data_u8[
    748          			BME280_PRESSURE_CALIB_DIG_P5_MSB])) <<
    749          			BME280_SHIFT_BIT_POSITION_BY_08_BITS)
    750          			| a_data_u8[BME280_PRESSURE_CALIB_DIG_P5_LSB]);
   \                     ??CrossCallReturnLabel_292:
   \   0000B4   740F         MOV     A,#0xf
   \   0000B6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B9   E0           MOVX    A,@DPTR
   \   0000BA   F9           MOV     R1,A
   \   0000BB   740E         MOV     A,#0xe
   \   0000BD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C0   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   0000C3   240E         ADD     A,#0xe
   \   0000C5   12....       LCALL   ?Subroutine15 & 0xFFFF
    751          			p_bme280->cal_param.dig_P6 = (s16)(((
    752          			(s16)((s8)a_data_u8[
    753          			BME280_PRESSURE_CALIB_DIG_P6_MSB])) <<
    754          			BME280_SHIFT_BIT_POSITION_BY_08_BITS)
    755          			| a_data_u8[BME280_PRESSURE_CALIB_DIG_P6_LSB]);
   \                     ??CrossCallReturnLabel_293:
   \   0000C8   7411         MOV     A,#0x11
   \   0000CA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CD   E0           MOVX    A,@DPTR
   \   0000CE   F9           MOV     R1,A
   \   0000CF   7410         MOV     A,#0x10
   \   0000D1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D4   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   0000D7   2410         ADD     A,#0x10
   \   0000D9   12....       LCALL   ?Subroutine15 & 0xFFFF
    756          			p_bme280->cal_param.dig_P7 = (s16)(((
    757          			(s16)((s8)a_data_u8[
    758          			BME280_PRESSURE_CALIB_DIG_P7_MSB])) <<
    759          			BME280_SHIFT_BIT_POSITION_BY_08_BITS)
    760          			| a_data_u8[BME280_PRESSURE_CALIB_DIG_P7_LSB]);
   \                     ??CrossCallReturnLabel_294:
   \   0000DC   7413         MOV     A,#0x13
   \   0000DE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E1   E0           MOVX    A,@DPTR
   \   0000E2   F9           MOV     R1,A
   \   0000E3   7412         MOV     A,#0x12
   \   0000E5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E8   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   0000EB   2412         ADD     A,#0x12
   \   0000ED   12....       LCALL   ?Subroutine15 & 0xFFFF
    761          			p_bme280->cal_param.dig_P8 = (s16)(((
    762          			(s16)((s8)a_data_u8[
    763          			BME280_PRESSURE_CALIB_DIG_P8_MSB])) <<
    764          			BME280_SHIFT_BIT_POSITION_BY_08_BITS)
    765          			| a_data_u8[BME280_PRESSURE_CALIB_DIG_P8_LSB]);
   \                     ??CrossCallReturnLabel_295:
   \   0000F0   7415         MOV     A,#0x15
   \   0000F2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F5   E0           MOVX    A,@DPTR
   \   0000F6   F9           MOV     R1,A
   \   0000F7   7414         MOV     A,#0x14
   \   0000F9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FC   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   0000FF   2414         ADD     A,#0x14
   \   000101   12....       LCALL   ?Subroutine15 & 0xFFFF
    766          			p_bme280->cal_param.dig_P9 = (s16)(((
    767          			(s16)((s8)a_data_u8[
    768          			BME280_PRESSURE_CALIB_DIG_P9_MSB])) <<
    769          			BME280_SHIFT_BIT_POSITION_BY_08_BITS)
    770          			| a_data_u8[BME280_PRESSURE_CALIB_DIG_P9_LSB]);
   \                     ??CrossCallReturnLabel_296:
   \   000104   7417         MOV     A,#0x17
   \   000106   12....       LCALL   ?XSTACK_DISP0_8
   \   000109   E0           MOVX    A,@DPTR
   \   00010A   F9           MOV     R1,A
   \   00010B   7416         MOV     A,#0x16
   \   00010D   12....       LCALL   ?XSTACK_DISP0_8
   \   000110   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   000113   2416         ADD     A,#0x16
   \   000115   12....       LCALL   ?Subroutine15 & 0xFFFF
    771          			p_bme280->cal_param.dig_H1 =
    772          			a_data_u8[BME280_HUMIDITY_CALIB_DIG_H1];
   \                     ??CrossCallReturnLabel_297:
   \   000118   7419         MOV     A,#0x19
   \   00011A   12....       LCALL   ?XSTACK_DISP0_8
   \   00011D   E0           MOVX    A,@DPTR
   \   00011E   C0E0         PUSH    A
   \   000120   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_180:
   \   000123   2418         ADD     A,#0x18
   \   000125   F582         MOV     DPL,A
   \   000127   E4           CLR     A
   \   000128   38           ADDC    A,R0
   \   000129   F583         MOV     DPH,A
   \   00012B   D0E0         POP     A
   \   00012D   F0           MOVX    @DPTR,A
    773          			
    774          			com_rslt += p_bme280->BME280_BUS_READ_FUNC(
    775          			p_bme280->dev_addr,
    776          			BME280_HUMIDITY_CALIB_DIG_H2_LSB_REG, a_data_u8,
    777          			BME280_HUMIDITY_CALIB_DATA_LENGTH);
   \   00012E                ; Setup parameters for indirect call
   \   00012E   7B07         MOV     R3,#0x7
   \   000130   AC..         MOV     R4,?XSP + 0
   \   000132   AD..         MOV     R5,?XSP + 1
   \   000134   7AE1         MOV     R2,#-0x1f
   \   000136   90....       MOV     DPTR,#p_bme280
   \   000139   E0           MOVX    A,@DPTR
   \   00013A   F8           MOV     R0,A
   \   00013B   A3           INC     DPTR
   \   00013C   12....       LCALL   ??Subroutine115_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_321:
   \   00013F   12....       LCALL   ?CALL_IND
   \   000142   E9           MOV     A,R1
   \   000143   FC           MOV     R4,A
    778          			p_bme280->cal_param.dig_H2 = (s16)(((
    779          			(s16)((s8)a_data_u8[
    780          			BME280_HUMIDITY_CALIB_DIG_H2_MSB])) <<
    781          			BME280_SHIFT_BIT_POSITION_BY_08_BITS)
    782          			| a_data_u8[BME280_HUMIDITY_CALIB_DIG_H2_LSB]);
   \   000144   7401         MOV     A,#0x1
   \   000146   12....       LCALL   ?XSTACK_DISP0_8
   \   000149   12....       LCALL   ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_197:
   \   00014C   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   00014F   2419         ADD     A,#0x19
   \   000151   12....       LCALL   ?Subroutine15 & 0xFFFF
    783          			p_bme280->cal_param.dig_H3 =
    784          			a_data_u8[BME280_HUMIDITY_CALIB_DIG_H3];
   \                     ??CrossCallReturnLabel_298:
   \   000154   7402         MOV     A,#0x2
   \   000156   12....       LCALL   ?XSTACK_DISP0_8
   \   000159   E0           MOVX    A,@DPTR
   \   00015A   C0E0         PUSH    A
   \   00015C   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_181:
   \   00015F   241B         ADD     A,#0x1b
   \   000161   F582         MOV     DPL,A
   \   000163   E4           CLR     A
   \   000164   38           ADDC    A,R0
   \   000165   F583         MOV     DPH,A
   \   000167   D0E0         POP     A
   \   000169   F0           MOVX    @DPTR,A
    785          			p_bme280->cal_param.dig_H4 = (s16)(((
    786          			(s16)((s8)a_data_u8[
    787          			BME280_HUMIDITY_CALIB_DIG_H4_MSB])) <<
    788          			BME280_SHIFT_BIT_POSITION_BY_04_BITS) |
    789          			(((u8)BME280_MASK_DIG_H4) &
    790          			a_data_u8[BME280_HUMIDITY_CALIB_DIG_H4_LSB]));
   \   00016A   7404         MOV     A,#0x4
   \   00016C   12....       LCALL   ?XSTACK_DISP0_8
   \   00016F   E0           MOVX    A,@DPTR
   \   000170   FA           MOV     R2,A
   \   000171   7403         MOV     A,#0x3
   \   000173   12....       LCALL   ?XSTACK_DISP0_8
   \   000176   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_162:
   \   000179   12....       LCALL   ?S_SHL
   \   00017C   EA           MOV     A,R2
   \   00017D   12....       LCALL   ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_198:
   \   000180   FB           MOV     R3,A
   \   000181   A3           INC     DPTR
   \   000182   E0           MOVX    A,@DPTR
   \   000183   CB           XCH     A,R3
   \   000184   241C         ADD     A,#0x1c
   \   000186   F582         MOV     DPL,A
   \   000188   E4           CLR     A
   \   000189   3B           ADDC    A,R3
   \   00018A   F583         MOV     DPH,A
   \   00018C   E8           MOV     A,R0
   \   00018D   F0           MOVX    @DPTR,A
   \   00018E   A3           INC     DPTR
   \   00018F   E5..         MOV     A,?V1
   \   000191   F0           MOVX    @DPTR,A
    791          			p_bme280->cal_param.dig_H5 = (s16)(((
    792          			(s16)((s8)a_data_u8[
    793          			BME280_HUMIDITY_CALIB_DIG_H5_MSB])) <<
    794          			BME280_SHIFT_BIT_POSITION_BY_04_BITS) |
    795          			(a_data_u8[BME280_HUMIDITY_CALIB_DIG_H4_LSB] >>
    796          			BME280_SHIFT_BIT_POSITION_BY_04_BITS));
   \   000192   7405         MOV     A,#0x5
   \   000194   12....       LCALL   ?XSTACK_DISP0_8
   \   000197   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_163:
   \   00019A   12....       LCALL   ?S_SHL
   \   00019D   EA           MOV     A,R2
   \   00019E   C4           SWAP    A
   \   00019F   12....       LCALL   ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_199:
   \   0001A2   FA           MOV     R2,A
   \   0001A3   A3           INC     DPTR
   \   0001A4   E0           MOVX    A,@DPTR
   \   0001A5   CA           XCH     A,R2
   \   0001A6   241E         ADD     A,#0x1e
   \   0001A8   F582         MOV     DPL,A
   \   0001AA   E4           CLR     A
   \   0001AB   3A           ADDC    A,R2
   \   0001AC   F583         MOV     DPH,A
   \   0001AE   E8           MOV     A,R0
   \   0001AF   F0           MOVX    @DPTR,A
   \   0001B0   A3           INC     DPTR
   \   0001B1   E5..         MOV     A,?V1
   \   0001B3   F0           MOVX    @DPTR,A
    797          			p_bme280->cal_param.dig_H6 =
    798          			(s8)a_data_u8[BME280_HUMIDITY_CALIB_DIG_H6];
   \   0001B4   7406         MOV     A,#0x6
   \   0001B6   12....       LCALL   ?XSTACK_DISP0_8
   \   0001B9   E0           MOVX    A,@DPTR
   \   0001BA   C0E0         PUSH    A
   \   0001BC   12....       LCALL   ?Subroutine65 & 0xFFFF
    799          		}
   \                     ??CrossCallReturnLabel_182:
   \   0001BF   2420         ADD     A,#0x20
   \   0001C1   F582         MOV     DPL,A
   \   0001C3   E4           CLR     A
   \   0001C4   38           ADDC    A,R0
   \   0001C5   F583         MOV     DPH,A
   \   0001C7   D0E0         POP     A
   \   0001C9   F0           MOVX    @DPTR,A
    800          	return com_rslt;
   \   0001CA   EE           MOV     A,R6
   \   0001CB   2C           ADD     A,R4
   \   0001CC   F9           MOV     R1,A
   \                     ??bme280_get_calib_param_1:
   \   0001CD   741A         MOV     A,#0x1a
   \   0001CF   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001D2   7F02         MOV     R7,#0x2
   \   0001D4   02....       LJMP    ?BANKED_LEAVE_XDATA
    801          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine70:
   \   000000   540F         ANL     A,#0xf
   \   000002   F8           MOV     R0,A
   \   000003   E5..         MOV     A,?V0
   \   000005   48           ORL     A,R0
   \   000006   F8           MOV     R0,A
   \   000007   90....       MOV     DPTR,#p_bme280
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine69:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F9           MOV     R1,A
   \   000002   85..82       MOV     DPL,?XSP + 0
   \   000005   85..83       MOV     DPH,?XSP + 1
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0,A
   \   000003   33           RLC     A
   \   000004   95E0         SUBB    A,0xE0 /* A   */
   \   000006   F5..         MOV     ?V1,A
   \   000008   7404         MOV     A,#0x4
   \   00000A   78..         MOV     R0,#?V0
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000   12....       LCALL   ?Subroutine94 & 0xFFFF
   \                     ??CrossCallReturnLabel_256:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine94:
   \   000000   12....       LCALL   ?Subroutine104 & 0xFFFF
   \                     ??CrossCallReturnLabel_276:
   \   000003   F583         MOV     DPH,A
   \   000005   8A82         MOV     DPL,R2
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   12....       LCALL   ?Subroutine104 & 0xFFFF
   \                     ??CrossCallReturnLabel_275:
   \   000003   CA           XCH     A,R2
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine104:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   90....       MOV     DPTR,#p_bme280
   \   000005   E0           MOVX    A,@DPTR
   \   000006   FA           MOV     R2,A
   \   000007   A3           INC     DPTR
   \   000008   E0           MOVX    A,@DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   3A           ADDC    A,R2
   \   000004   F583         MOV     DPH,A
   \   000006                REQUIRE ??Subroutine110_0
   \   000006                ; // Fall through to label ??Subroutine110_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine110_0:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET
    802          
    803          /*!
    804           *	@brief This API is used to get
    805           *	the temperature oversampling setting in the register 0xF4
    806           *	bits from 5 to 7
    807           *
    808           *	value               |   Temperature oversampling
    809           * ---------------------|---------------------------------
    810           *	0x00                | Skipped
    811           *	0x01                | BME280_OVERSAMP_1X
    812           *	0x02                | BME280_OVERSAMP_2X
    813           *	0x03                | BME280_OVERSAMP_4X
    814           *	0x04                | BME280_OVERSAMP_8X
    815           *	0x05,0x06 and 0x07  | BME280_OVERSAMP_16X
    816           *
    817           *
    818           *  @param v_value_u8 : The value of temperature over sampling
    819           *
    820           *
    821           *
    822           *	@return results of bus communication function
    823           *	@retval 0 -> Success
    824           *	@retval -1 -> Error
    825           *
    826           *
    827          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    828          BME280_RETURN_FUNCTION_TYPE bme280_get_oversamp_temperature(
   \                     bme280_get_oversamp_temperature:
    829          u8 *v_value_u8)
    830          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine9 & 0xFFFF
    831          	/* used to return the communication result*/
    832          	BME280_RETURN_FUNCTION_TYPE com_rslt = ERROR;
    833          	u8 v_data_u8 = BME280_INIT_VALUE;
    834          	/* check the p_bme280 structure pointer as NULL*/
    835          	if (p_bme280 == BME280_NULL) {
   \                     ??CrossCallReturnLabel_344:
   \   00000D   7004         JNZ     ??bme280_get_oversamp_temperature_0
    836          		return E_BME280_NULL_PTR;
   \   00000F   7981         MOV     R1,#-0x7f
   \   000011   801C         SJMP    ??bme280_get_oversamp_temperature_1
    837          		} else {
    838          			com_rslt = p_bme280->BME280_BUS_READ_FUNC(
    839          			p_bme280->dev_addr,
    840          			BME280_CTRL_MEAS_REG_OVERSAMP_TEMPERATURE__REG,
    841          			&v_data_u8, BME280_GEN_READ_WRITE_DATA_LENGTH);
   \                     ??bme280_get_oversamp_temperature_0:
   \   000013                ; Setup parameters for indirect call
   \   000013   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_327:
   \   000016   12....       LCALL   ?CALL_IND
   \   000019   E9           MOV     A,R1
   \   00001A   F9           MOV     R1,A
    842          			*v_value_u8 = BME280_GET_BITSLICE(v_data_u8,
    843          			BME280_CTRL_MEAS_REG_OVERSAMP_TEMPERATURE);
   \   00001B   85..82       MOV     DPL,?XSP + 0
   \   00001E   85..83       MOV     DPH,?XSP + 1
   \   000021   E0           MOVX    A,@DPTR
   \   000022   C4           SWAP    A
   \   000023   13           RRC     A
   \   000024   12....       LCALL   ?Subroutine75 & 0xFFFF
    844          
    845          			p_bme280->oversamp_temperature = *v_value_u8;
   \                     ??CrossCallReturnLabel_214:
   \   000027   C0E0         PUSH    A
   \   000029   12....       LCALL   ?Subroutine57 & 0xFFFF
    846          		}
   \                     ??CrossCallReturnLabel_153:
   \   00002C   D0E0         POP     A
   \   00002E   F0           MOVX    @DPTR,A
    847          	return com_rslt;
   \                     ??bme280_get_oversamp_temperature_1:
   \   00002F   02....       LJMP    ?Subroutine1 & 0xFFFF
    848          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine75:
   \   000000   5407         ANL     A,#0x7
   \   000002   F8           MOV     R0,A
   \   000003   8E82         MOV     DPL,R6
   \   000005   8F83         MOV     DPH,R7
   \   000007   F0           MOVX    @DPTR,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   7B01         MOV     R3,#0x1
   \   000002   AC..         MOV     R4,?XSP + 0
   \   000004   AD..         MOV     R5,?XSP + 1
   \   000006   7AF4         MOV     R2,#-0xc
   \   000008                REQUIRE ??Subroutine115_0
   \   000008                ; // Fall through to label ??Subroutine115_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   EA           MOV     A,R2
   \   000001   FE           MOV     R6,A
   \   000002   EB           MOV     A,R3
   \   000003   FF           MOV     R7,A
   \   000004   85..82       MOV     DPL,?XSP + 0
   \   000007   85..83       MOV     DPH,?XSP + 1
   \   00000A                REQUIRE ??Subroutine120_0
   \   00000A                ; // Fall through to label ??Subroutine120_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine120_0:
   \   000000   E4           CLR     A
   \   000001                REQUIRE ??Subroutine121_0
   \   000001                ; // Fall through to label ??Subroutine121_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000   12....       LCALL   ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_250:
   \   000003   2427         ADD     A,#0x27
   \   000005   F582         MOV     DPL,A
   \   000007   E4           CLR     A
   \   000008   38           ADDC    A,R0
   \   000009   F583         MOV     DPH,A
   \   00000B   22           RET
    849          
    850          /*!
    851           *	@brief This API is used to set
    852           *	the temperature oversampling setting in the register 0xF4
    853           *	bits from 5 to 7
    854           *
    855           *	value               |   Temperature oversampling
    856           * ---------------------|---------------------------------
    857           *	0x00                | Skipped
    858           *	0x01                | BME280_OVERSAMP_1X
    859           *	0x02                | BME280_OVERSAMP_2X
    860           *	0x03                | BME280_OVERSAMP_4X
    861           *	0x04                | BME280_OVERSAMP_8X
    862           *	0x05,0x06 and 0x07  | BME280_OVERSAMP_16X
    863           *
    864           *
    865           *  @param v_value_u8 : The value of temperature over sampling
    866           *
    867           *
    868           *
    869           *	@return results of bus communication function
    870           *	@retval 0 -> Success
    871           *	@retval -1 -> Error
    872           *
    873           *
    874          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    875          BME280_RETURN_FUNCTION_TYPE bme280_set_oversamp_temperature(
   \                     bme280_set_oversamp_temperature:
    876          u8 v_value_u8)
    877          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
    878          	/* used to return the communication result*/
    879          	BME280_RETURN_FUNCTION_TYPE com_rslt = ERROR;
    880          	u8 v_data_u8 = BME280_INIT_VALUE;
   \   00000C   85..82       MOV     DPL,?XSP + 0
   \   00000F   85..83       MOV     DPH,?XSP + 1
   \   000012   E4           CLR     A
   \   000013   F0           MOVX    @DPTR,A
    881          	u8 v_prev_pow_mode_u8 = BME280_INIT_VALUE;
   \   000014   7403         MOV     A,#0x3
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   E4           CLR     A
   \   00001A   F0           MOVX    @DPTR,A
    882          	u8 v_pre_ctrl_hum_value_u8 = BME280_INIT_VALUE;
   \   00001B   7402         MOV     A,#0x2
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   E4           CLR     A
   \   000021   F0           MOVX    @DPTR,A
    883          	u8 v_pre_config_value_u8 = BME280_INIT_VALUE;
   \   000022   04           INC     A
   \   000023   12....       LCALL   ?XSTACK_DISP0_8
   \   000026   12....       LCALL   ??Subroutine120_0 & 0xFFFF
    884          	/* check the p_bme280 structure pointer as NULL*/
    885          	if (p_bme280 == BME280_NULL) {
   \                     ??CrossCallReturnLabel_351:
   \   000029   7005         JNZ     ??bme280_set_oversamp_temperature_0
    886          		return E_BME280_NULL_PTR;
   \   00002B   7981         MOV     R1,#-0x7f
   \   00002D   02....       LJMP    ??bme280_set_oversamp_temperature_1 & 0xFFFF
    887          		} else {
    888          			v_data_u8 = p_bme280->ctrl_meas_reg;
    889          			v_data_u8 =
    890          			BME280_SET_BITSLICE(v_data_u8,
    891          			BME280_CTRL_MEAS_REG_OVERSAMP_TEMPERATURE, v_value_u8);
   \                     ??bme280_set_oversamp_temperature_0:
   \   000030   EE           MOV     A,R6
   \   000031   C4           SWAP    A
   \   000032   33           RLC     A
   \   000033   54E0         ANL     A,#0xe0
   \   000035   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   000038   541F         ANL     A,#0x1f
   \   00003A   12....       LCALL   ?Subroutine76 & 0xFFFF
    892          			com_rslt = bme280_get_power_mode(&v_prev_pow_mode_u8);
   \                     ??CrossCallReturnLabel_217:
   \   00003D   12....       LCALL   ?XSTACK_DISP101_8
   \   000040   12....       LCALL   `??bme280_get_power_mode::?relay`; Banked call to: bme280_get_power_mode
    893          			if (v_prev_pow_mode_u8 != BME280_SLEEP_MODE) {
   \   000043   7403         MOV     A,#0x3
   \   000045   12....       LCALL   ?XSTACK_DISP0_8
   \   000048   E0           MOVX    A,@DPTR
   \   000049   604C         JZ      ??bme280_set_oversamp_temperature_2
    894          				com_rslt += bme280_set_soft_rst();
   \   00004B                ; Setup parameters for call to function bme280_set_soft_rst
   \   00004B   12....       LCALL   `??bme280_set_soft_rst::?relay`; Banked call to: bme280_set_soft_rst
    895          				p_bme280->delay_msec(BME280_3MS_DELAY);
   \   00004E                ; Setup parameters for indirect call
   \   00004E   90....       MOV     DPTR,#__Constant_3
   \   000051   12....       LCALL   ?XLOAD_R2345
   \   000054   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   000057   12....       LCALL   ?CALL_IND
    896          				/* write previous value
    897          				of configuration register*/
    898          				v_pre_config_value_u8 = p_bme280->config_reg;
   \   00005A   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   00005D   C0E0         PUSH    A
   \   00005F   7401         MOV     A,#0x1
   \   000061   12....       LCALL   ?XSTACK_DISP0_8
   \   000064   D0E0         POP     A
   \   000066   12....       LCALL   ?Subroutine18 & 0xFFFF
    899          				com_rslt += bme280_write_register(
    900          					BME280_CONFIG_REG,
    901          				&v_pre_config_value_u8,
    902          				BME280_GEN_READ_WRITE_DATA_LENGTH);
   \                     ??CrossCallReturnLabel_28:
   \   000069   12....       LCALL   ?XSTACK_DISP101_8
   \   00006C   79F5         MOV     R1,#-0xb
   \   00006E   12....       LCALL   `??bme280_write_register::?relay`; Banked call to: bme280_write_register
    903          				/* write previous value
    904          				of humidity oversampling*/
    905          				v_pre_ctrl_hum_value_u8 =
    906          				p_bme280->ctrl_hum_reg;
   \   000071   12....       LCALL   ??Subroutine122_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_364:
   \   000074   C0E0         PUSH    A
   \   000076   7402         MOV     A,#0x2
   \   000078   12....       LCALL   ?XSTACK_DISP0_8
   \   00007B   D0E0         POP     A
   \   00007D   F0           MOVX    @DPTR,A
    907          				com_rslt += bme280_write_register(
    908          					BME280_CTRL_HUMIDITY_REG,
    909          				&v_pre_ctrl_hum_value_u8,
    910          				BME280_GEN_READ_WRITE_DATA_LENGTH);
   \   00007E                ; Setup parameters for call to function bme280_write_register
   \   00007E   7C01         MOV     R4,#0x1
   \   000080   7402         MOV     A,#0x2
   \   000082   12....       LCALL   ?XSTACK_DISP101_8
   \   000085   79F2         MOV     R1,#-0xe
   \   000087   12....       LCALL   `??bme280_write_register::?relay`; Banked call to: bme280_write_register
    911          				/* write previous and updated value
    912          				of configuration register*/
    913          				com_rslt += bme280_write_register(
    914          					BME280_CTRL_MEAS_REG,
    915          				&v_data_u8, BME280_GEN_READ_WRITE_DATA_LENGTH);
   \   00008A                ; Setup parameters for call to function bme280_write_register
   \   00008A   7C01         MOV     R4,#0x1
   \   00008C   AA..         MOV     R2,?XSP + 0
   \   00008E   AB..         MOV     R3,?XSP + 1
   \   000090   79F4         MOV     R1,#-0xc
   \   000092   12....       LCALL   `??bme280_write_register::?relay`; Banked call to: bme280_write_register
   \   000095   800E         SJMP    ??bme280_set_oversamp_temperature_3
    916          			} else {
    917          				com_rslt = p_bme280->BME280_BUS_WRITE_FUNC(
    918          				p_bme280->dev_addr,
    919          				BME280_CTRL_MEAS_REG_OVERSAMP_TEMPERATURE__REG,
    920          				&v_data_u8, BME280_GEN_READ_WRITE_DATA_LENGTH);
   \                     ??bme280_set_oversamp_temperature_2:
   \   000097                ; Setup parameters for indirect call
   \   000097   7B01         MOV     R3,#0x1
   \   000099   AC..         MOV     R4,?XSP + 0
   \   00009B   AD..         MOV     R5,?XSP + 1
   \   00009D   7AF4         MOV     R2,#-0xc
   \   00009F   12....       LCALL   ??Subroutine112_0 & 0xFFFF
    921          			}
   \                     ??CrossCallReturnLabel_307:
   \   0000A2   12....       LCALL   ?CALL_IND
    922          				p_bme280->oversamp_temperature = v_value_u8;
   \                     ??bme280_set_oversamp_temperature_3:
   \   0000A5   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_183:
   \   0000A8   2427         ADD     A,#0x27
   \   0000AA   12....       LCALL   ?Subroutine13 & 0xFFFF
    923          				/* read the control measurement register value*/
    924          				com_rslt = bme280_read_register(
    925          					BME280_CTRL_MEAS_REG,
    926          				&v_data_u8, BME280_GEN_READ_WRITE_DATA_LENGTH);
   \                     ??CrossCallReturnLabel_299:
   \   0000AD   12....       LCALL   `??bme280_read_register::?relay`; Banked call to: bme280_read_register
   \   0000B0   E9           MOV     A,R1
   \   0000B1   FF           MOV     R7,A
    927          				p_bme280->ctrl_meas_reg = v_data_u8;
   \   0000B2   85..82       MOV     DPL,?XSP + 0
   \   0000B5   85..83       MOV     DPH,?XSP + 1
   \   0000B8   E0           MOVX    A,@DPTR
   \   0000B9   C0E0         PUSH    A
   \   0000BB   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   0000BE   D0E0         POP     A
   \   0000C0   12....       LCALL   ?Subroutine11 & 0xFFFF
    928          				/* read the control humidity register value*/
    929          				com_rslt += bme280_read_register(
    930          					BME280_CTRL_HUMIDITY_REG,
    931          				&v_data_u8, BME280_GEN_READ_WRITE_DATA_LENGTH);
   \                     ??CrossCallReturnLabel_8:
   \   0000C3   12....       LCALL   `??bme280_read_register::?relay`; Banked call to: bme280_read_register
   \   0000C6   E9           MOV     A,R1
   \   0000C7   F5..         MOV     ?V0,A
    932          				p_bme280->ctrl_hum_reg = v_data_u8;
   \   0000C9   85..82       MOV     DPL,?XSP + 0
   \   0000CC   85..83       MOV     DPH,?XSP + 1
   \   0000CF   E0           MOVX    A,@DPTR
   \   0000D0   C0E0         PUSH    A
   \   0000D2   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   0000D5   D0E0         POP     A
   \   0000D7   12....       LCALL   ?Subroutine10 & 0xFFFF
    933          				/* read the control
    934          				configuration register value*/
    935          				com_rslt += bme280_read_register(
    936          					BME280_CONFIG_REG,
    937          				&v_data_u8, BME280_GEN_READ_WRITE_DATA_LENGTH);
   \                     ??CrossCallReturnLabel_0:
   \   0000DA   12....       LCALL   `??bme280_read_register::?relay`; Banked call to: bme280_read_register
   \   0000DD   E9           MOV     A,R1
   \   0000DE   F8           MOV     R0,A
    938          				p_bme280->config_reg = v_data_u8;
   \   0000DF   85..82       MOV     DPL,?XSP + 0
   \   0000E2   85..83       MOV     DPH,?XSP + 1
   \   0000E5   E0           MOVX    A,@DPTR
   \   0000E6   C0E0         PUSH    A
   \   0000E8   12....       LCALL   ?Subroutine41 & 0xFFFF
    939          		}
   \                     ??CrossCallReturnLabel_110:
   \   0000EB   D0E0         POP     A
   \   0000ED   F0           MOVX    @DPTR,A
    940          	return com_rslt;
   \   0000EE   EF           MOV     A,R7
   \   0000EF   25..         ADD     A,?V0
   \   0000F1   28           ADD     A,R0
   \   0000F2   F9           MOV     R1,A
   \                     ??bme280_set_oversamp_temperature_1:
   \   0000F3                REQUIRE ?Subroutine8
   \   0000F3                ; // Fall through to label ?Subroutine8
    941          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   7404         MOV     A,#0x4
   \   000002   02....       LJMP    ??Subroutine116_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   38           ADDC    A,R0
   \   000004   F583         MOV     DPH,A
   \   000006   EE           MOV     A,R6
   \   000007                REQUIRE ??Subroutine111_0
   \   000007                ; // Fall through to label ??Subroutine111_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine111_0:
   \   000000   12....       LCALL   ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_303:
   \   000003   79F4         MOV     R1,#-0xc
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine76:
   \   000000   12....       LCALL   ?Subroutine101 & 0xFFFF
   \                     ??CrossCallReturnLabel_272:
   \   000003                ; Setup parameters for call to function bme280_get_power_mode
   \   000003                ; Setup parameters for call to function bme280_get_power_mode
   \   000003   7403         MOV     A,#0x3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   F8           MOV     R0,A
   \   000001   12....       LCALL   ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_258:
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   12....       LCALL   ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_238:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   12....       LCALL   ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_342:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine91:
   \   000000   12....       LCALL   ?Subroutine102 & 0xFFFF
   \                     ??CrossCallReturnLabel_376:
   \   000003   242B         ADD     A,#0x2b
   \   000005   F582         MOV     DPL,A
   \   000007   E4           CLR     A
   \   000008   38           ADDC    A,R0
   \   000009   F583         MOV     DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine112_0:
   \   000000   90....       MOV     DPTR,#p_bme280
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F8           MOV     R0,A
   \   000005   A3           INC     DPTR
   \   000006                REQUIRE ??Subroutine113_0
   \   000006                ; // Fall through to label ??Subroutine113_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine113_0:
   \   000000   12....       LCALL   ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_330:
   \   000003   242D         ADD     A,#0x2d
   \   000005   12....       LCALL   ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_335:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   12....       LCALL   ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_304:
   \   000003   79F2         MOV     R1,#-0xe
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine80:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function bme280_read_register
   \   000001                ; Setup parameters for call to function bme280_read_register
   \   000001                ; Setup parameters for call to function bme280_read_register
   \   000001                ; Setup parameters for call to function bme280_read_register
   \   000001                ; Setup parameters for call to function bme280_read_register
   \   000001                ; Setup parameters for call to function bme280_read_register
   \   000001                ; Setup parameters for call to function bme280_read_register
   \   000001                ; Setup parameters for call to function bme280_read_register
   \   000001                ; Setup parameters for call to function bme280_read_register
   \   000001                ; Setup parameters for call to function bme280_read_register
   \   000001                ; Setup parameters for call to function bme280_read_register
   \   000001                ; Setup parameters for call to function bme280_read_register
   \   000001                ; Setup parameters for call to function bme280_read_register
   \   000001                ; Setup parameters for call to function bme280_read_register
   \   000001                ; Setup parameters for call to function bme280_read_register
   \   000001                ; Setup parameters for call to function bme280_read_register
   \   000001                ; Setup parameters for call to function bme280_read_register
   \   000001                ; Setup parameters for call to function bme280_read_register
   \   000001                ; Setup parameters for call to function bme280_read_register
   \   000001   7C01         MOV     R4,#0x1
   \   000003   AA..         MOV     R2,?XSP + 0
   \   000005   AB..         MOV     R3,?XSP + 1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   12....       LCALL   ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_260:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine96:
   \   000000   90....       MOV     DPTR,#p_bme280
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   C9           XCH     A,R1
   \   000008   242C         ADD     A,#0x2c
   \   00000A   F582         MOV     DPL,A
   \   00000C   E4           CLR     A
   \   00000D   39           ADDC    A,R1
   \   00000E   F583         MOV     DPH,A
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   12....       LCALL   ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_369:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine92:
   \   000000   12....       LCALL   ?Subroutine102 & 0xFFFF
   \                     ??CrossCallReturnLabel_377:
   \   000003   242A         ADD     A,#0x2a
   \   000005   F582         MOV     DPL,A
   \   000007   E4           CLR     A
   \   000008   38           ADDC    A,R0
   \   000009   F583         MOV     DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function bme280_write_register
   \   000001                ; Setup parameters for call to function bme280_write_register
   \   000001                ; Setup parameters for call to function bme280_write_register
   \   000001                ; Setup parameters for call to function bme280_write_register
   \   000001                ; Setup parameters for call to function bme280_write_register
   \   000001                ; Setup parameters for call to function bme280_write_register
   \   000001                ; Setup parameters for call to function bme280_write_register
   \   000001                ; Setup parameters for call to function bme280_write_register
   \   000001                ; Setup parameters for call to function bme280_write_register
   \   000001   7C01         MOV     R4,#0x1
   \   000003   EC           MOV     A,R4
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   12....       LCALL   ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_305:
   \   000003   79F5         MOV     R1,#-0xb
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine101:
   \   000000   48           ORL     A,R0
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   F0           MOVX    @DPTR,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine95:
   \   000000   90....       MOV     DPTR,#p_bme280
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   C9           XCH     A,R1
   \   000008   242B         ADD     A,#0x2b
   \   00000A   F582         MOV     DPL,A
   \   00000C   E4           CLR     A
   \   00000D   39           ADDC    A,R1
   \   00000E   F583         MOV     DPH,A
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine90:
   \   000000   12....       LCALL   ?Subroutine102 & 0xFFFF
   \                     ??CrossCallReturnLabel_373:
   \   000003   242C         ADD     A,#0x2c
   \   000005   F582         MOV     DPL,A
   \   000007   E4           CLR     A
   \   000008   38           ADDC    A,R0
   \   000009   F583         MOV     DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine122_0:
   \   000000   12....       LCALL   ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_370:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET
    942          
    943          /*!
    944           *	@brief This API is used to get
    945           *	the pressure oversampling setting in the register 0xF4
    946           *	bits from 2 to 4
    947           *
    948           *	value              | Pressure oversampling
    949           * --------------------|--------------------------
    950           *	0x00               | Skipped
    951           *	0x01               | BME280_OVERSAMP_1X
    952           *	0x02               | BME280_OVERSAMP_2X
    953           *	0x03               | BME280_OVERSAMP_4X
    954           *	0x04               | BME280_OVERSAMP_8X
    955           *	0x05,0x06 and 0x07 | BME280_OVERSAMP_16X
    956           *
    957           *
    958           *  @param v_value_u8 : The value of pressure oversampling
    959           *
    960           *
    961           *
    962           *	@return results of bus communication function
    963           *	@retval 0 -> Success
    964           *	@retval -1 -> Error
    965           *
    966           *
    967          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    968          BME280_RETURN_FUNCTION_TYPE bme280_get_oversamp_pressure(
   \                     bme280_get_oversamp_pressure:
    969          u8 *v_value_u8)
    970          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine9 & 0xFFFF
    971          	/* used to return the communication result*/
    972          	BME280_RETURN_FUNCTION_TYPE com_rslt = ERROR;
    973          	u8 v_data_u8 = BME280_INIT_VALUE;
    974          	/* check the p_bme280 structure pointer as NULL*/
    975          	if (p_bme280 == BME280_NULL) {
   \                     ??CrossCallReturnLabel_345:
   \   00000D   7004         JNZ     ??bme280_get_oversamp_pressure_0
    976          		return E_BME280_NULL_PTR;
   \   00000F   7981         MOV     R1,#-0x7f
   \   000011   8026         SJMP    ??bme280_get_oversamp_pressure_1
    977          		} else {
    978          			com_rslt = p_bme280->BME280_BUS_READ_FUNC(
    979          			p_bme280->dev_addr,
    980          			BME280_CTRL_MEAS_REG_OVERSAMP_PRESSURE__REG,
    981          			&v_data_u8, BME280_GEN_READ_WRITE_DATA_LENGTH);
   \                     ??bme280_get_oversamp_pressure_0:
   \   000013                ; Setup parameters for indirect call
   \   000013   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_328:
   \   000016   12....       LCALL   ?CALL_IND
   \   000019   E9           MOV     A,R1
   \   00001A   F9           MOV     R1,A
    982          			*v_value_u8 = BME280_GET_BITSLICE(
    983          			v_data_u8,
    984          			BME280_CTRL_MEAS_REG_OVERSAMP_PRESSURE);
   \   00001B   85..82       MOV     DPL,?XSP + 0
   \   00001E   85..83       MOV     DPH,?XSP + 1
   \   000021   E0           MOVX    A,@DPTR
   \   000022   13           RRC     A
   \   000023   13           RRC     A
   \   000024   543F         ANL     A,#0x3f
   \   000026   12....       LCALL   ?Subroutine75 & 0xFFFF
    985          
    986          			p_bme280->oversamp_pressure = *v_value_u8;
   \                     ??CrossCallReturnLabel_215:
   \   000029   C0E0         PUSH    A
   \   00002B   12....       LCALL   ?Subroutine65 & 0xFFFF
    987          		}
   \                     ??CrossCallReturnLabel_184:
   \   00002E   2428         ADD     A,#0x28
   \   000030   F582         MOV     DPL,A
   \   000032   E4           CLR     A
   \   000033   38           ADDC    A,R0
   \   000034   F583         MOV     DPH,A
   \   000036   D0E0         POP     A
   \   000038   F0           MOVX    @DPTR,A
    988          	return com_rslt;
   \                     ??bme280_get_oversamp_pressure_1:
   \   000039   02....       LJMP    ?Subroutine1 & 0xFFFF
    989          }
    990          
    991          /*!
    992           *	@brief This API is used to set
    993           *	the pressure oversampling setting in the register 0xF4
    994           *	bits from 2 to 4
    995           *
    996           *	value              | Pressure oversampling
    997           * --------------------|--------------------------
    998           *	0x00               | Skipped
    999           *	0x01               | BME280_OVERSAMP_1X
   1000           *	0x02               | BME280_OVERSAMP_2X
   1001           *	0x03               | BME280_OVERSAMP_4X
   1002           *	0x04               | BME280_OVERSAMP_8X
   1003           *	0x05,0x06 and 0x07 | BME280_OVERSAMP_16X
   1004           *
   1005           *
   1006           *  @param v_value_u8 : The value of pressure oversampling
   1007           *
   1008           *
   1009           *
   1010           *	@return results of bus communication function
   1011           *	@retval 0 -> Success
   1012           *	@retval -1 -> Error
   1013           *
   1014           *
   1015          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1016          BME280_RETURN_FUNCTION_TYPE bme280_set_oversamp_pressure(
   \                     bme280_set_oversamp_pressure:
   1017          u8 v_value_u8)
   1018          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   1019          	/* used to return the communication result*/
   1020          	BME280_RETURN_FUNCTION_TYPE com_rslt = ERROR;
   1021          	u8 v_data_u8 = BME280_INIT_VALUE;
   \   00000C   85..82       MOV     DPL,?XSP + 0
   \   00000F   85..83       MOV     DPH,?XSP + 1
   \   000012   E4           CLR     A
   \   000013   F0           MOVX    @DPTR,A
   1022          	u8 v_prev_pow_mode_u8 = BME280_INIT_VALUE;
   \   000014   7403         MOV     A,#0x3
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   E4           CLR     A
   \   00001A   F0           MOVX    @DPTR,A
   1023          	u8 v_pre_ctrl_hum_value_u8 = BME280_INIT_VALUE;
   \   00001B   7402         MOV     A,#0x2
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   E4           CLR     A
   \   000021   F0           MOVX    @DPTR,A
   1024          	u8 v_pre_config_value_u8 = BME280_INIT_VALUE;
   \   000022   04           INC     A
   \   000023   12....       LCALL   ?XSTACK_DISP0_8
   \   000026   12....       LCALL   ??Subroutine120_0 & 0xFFFF
   1025          	/* check the p_bme280 structure pointer as NULL*/
   1026          	if (p_bme280 == BME280_NULL) {
   \                     ??CrossCallReturnLabel_352:
   \   000029   7005         JNZ     ??bme280_set_oversamp_pressure_0
   1027          		return E_BME280_NULL_PTR;
   \   00002B   7981         MOV     R1,#-0x7f
   \   00002D   02....       LJMP    ??bme280_set_oversamp_pressure_1 & 0xFFFF
   1028          		} else {
   1029          			v_data_u8 = p_bme280->ctrl_meas_reg;
   1030          			v_data_u8 =
   1031          			BME280_SET_BITSLICE(v_data_u8,
   1032          			BME280_CTRL_MEAS_REG_OVERSAMP_PRESSURE, v_value_u8);
   \                     ??bme280_set_oversamp_pressure_0:
   \   000030   EE           MOV     A,R6
   \   000031   33           RLC     A
   \   000032   33           RLC     A
   \   000033   54FC         ANL     A,#0xfc
   \   000035   541C         ANL     A,#0x1c
   \   000037   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   00003A   54E3         ANL     A,#0xe3
   \   00003C   12....       LCALL   ?Subroutine76 & 0xFFFF
   1033          			com_rslt = bme280_get_power_mode(&v_prev_pow_mode_u8);
   \                     ??CrossCallReturnLabel_218:
   \   00003F   12....       LCALL   ?XSTACK_DISP101_8
   \   000042   12....       LCALL   `??bme280_get_power_mode::?relay`; Banked call to: bme280_get_power_mode
   1034          			if (v_prev_pow_mode_u8 != BME280_SLEEP_MODE) {
   \   000045   7403         MOV     A,#0x3
   \   000047   12....       LCALL   ?XSTACK_DISP0_8
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   604C         JZ      ??bme280_set_oversamp_pressure_2
   1035          				com_rslt += bme280_set_soft_rst();
   \   00004D                ; Setup parameters for call to function bme280_set_soft_rst
   \   00004D   12....       LCALL   `??bme280_set_soft_rst::?relay`; Banked call to: bme280_set_soft_rst
   1036          				p_bme280->delay_msec(BME280_3MS_DELAY);
   \   000050                ; Setup parameters for indirect call
   \   000050   90....       MOV     DPTR,#__Constant_3
   \   000053   12....       LCALL   ?XLOAD_R2345
   \   000056   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   000059   12....       LCALL   ?CALL_IND
   1037          				/* write previous value of
   1038          				configuration register*/
   1039          				v_pre_config_value_u8 = p_bme280->config_reg;
   \   00005C   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   00005F   C0E0         PUSH    A
   \   000061   7401         MOV     A,#0x1
   \   000063   12....       LCALL   ?XSTACK_DISP0_8
   \   000066   D0E0         POP     A
   \   000068   12....       LCALL   ?Subroutine18 & 0xFFFF
   1040          				com_rslt = bme280_write_register(
   1041          					BME280_CONFIG_REG,
   1042          				&v_pre_config_value_u8,
   1043          				BME280_GEN_READ_WRITE_DATA_LENGTH);
   \                     ??CrossCallReturnLabel_29:
   \   00006B   12....       LCALL   ?XSTACK_DISP101_8
   \   00006E   79F5         MOV     R1,#-0xb
   \   000070   12....       LCALL   `??bme280_write_register::?relay`; Banked call to: bme280_write_register
   1044          				/* write previous value of
   1045          				humidity oversampling*/
   1046          				v_pre_ctrl_hum_value_u8 =
   1047          				p_bme280->ctrl_hum_reg;
   \   000073   12....       LCALL   ??Subroutine122_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_365:
   \   000076   C0E0         PUSH    A
   \   000078   7402         MOV     A,#0x2
   \   00007A   12....       LCALL   ?XSTACK_DISP0_8
   \   00007D   D0E0         POP     A
   \   00007F   F0           MOVX    @DPTR,A
   1048          				com_rslt += bme280_write_register(
   1049          					BME280_CTRL_HUMIDITY_REG,
   1050          				&v_pre_ctrl_hum_value_u8,
   1051          				BME280_GEN_READ_WRITE_DATA_LENGTH);
   \   000080                ; Setup parameters for call to function bme280_write_register
   \   000080   7C01         MOV     R4,#0x1
   \   000082   7402         MOV     A,#0x2
   \   000084   12....       LCALL   ?XSTACK_DISP101_8
   \   000087   79F2         MOV     R1,#-0xe
   \   000089   12....       LCALL   `??bme280_write_register::?relay`; Banked call to: bme280_write_register
   1052          				/* write previous and updated value of
   1053          				control measurement register*/
   1054          				bme280_write_register(
   1055          					BME280_CTRL_MEAS_REG,
   1056          				&v_data_u8, BME280_GEN_READ_WRITE_DATA_LENGTH);
   \   00008C                ; Setup parameters for call to function bme280_write_register
   \   00008C   7C01         MOV     R4,#0x1
   \   00008E   AA..         MOV     R2,?XSP + 0
   \   000090   AB..         MOV     R3,?XSP + 1
   \   000092   79F4         MOV     R1,#-0xc
   \   000094   12....       LCALL   `??bme280_write_register::?relay`; Banked call to: bme280_write_register
   \   000097   800E         SJMP    ??bme280_set_oversamp_pressure_3
   1057          			} else {
   1058          				com_rslt = p_bme280->BME280_BUS_WRITE_FUNC(
   1059          				p_bme280->dev_addr,
   1060          				BME280_CTRL_MEAS_REG_OVERSAMP_PRESSURE__REG,
   1061          				&v_data_u8, BME280_GEN_READ_WRITE_DATA_LENGTH);
   \                     ??bme280_set_oversamp_pressure_2:
   \   000099                ; Setup parameters for indirect call
   \   000099   7B01         MOV     R3,#0x1
   \   00009B   AC..         MOV     R4,?XSP + 0
   \   00009D   AD..         MOV     R5,?XSP + 1
   \   00009F   7AF4         MOV     R2,#-0xc
   \   0000A1   12....       LCALL   ??Subroutine112_0 & 0xFFFF
   1062          			}
   \                     ??CrossCallReturnLabel_308:
   \   0000A4   12....       LCALL   ?CALL_IND
   1063          				p_bme280->oversamp_pressure = v_value_u8;
   \                     ??bme280_set_oversamp_pressure_3:
   \   0000A7   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_185:
   \   0000AA   2428         ADD     A,#0x28
   \   0000AC   12....       LCALL   ?Subroutine13 & 0xFFFF
   1064          				/* read the control measurement register value*/
   1065          				com_rslt = bme280_read_register(
   1066          					BME280_CTRL_MEAS_REG,
   1067          				&v_data_u8, BME280_GEN_READ_WRITE_DATA_LENGTH);
   \                     ??CrossCallReturnLabel_300:
   \   0000AF   12....       LCALL   `??bme280_read_register::?relay`; Banked call to: bme280_read_register
   \   0000B2   E9           MOV     A,R1
   \   0000B3   FF           MOV     R7,A
   1068          				p_bme280->ctrl_meas_reg = v_data_u8;
   \   0000B4   85..82       MOV     DPL,?XSP + 0
   \   0000B7   85..83       MOV     DPH,?XSP + 1
   \   0000BA   E0           MOVX    A,@DPTR
   \   0000BB   C0E0         PUSH    A
   \   0000BD   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   0000C0   D0E0         POP     A
   \   0000C2   12....       LCALL   ?Subroutine11 & 0xFFFF
   1069          				/* read the control humidity register value*/
   1070          				com_rslt += bme280_read_register(
   1071          					BME280_CTRL_HUMIDITY_REG,
   1072          				&v_data_u8, BME280_GEN_READ_WRITE_DATA_LENGTH);
   \                     ??CrossCallReturnLabel_9:
   \   0000C5   12....       LCALL   `??bme280_read_register::?relay`; Banked call to: bme280_read_register
   \   0000C8   E9           MOV     A,R1
   \   0000C9   F5..         MOV     ?V0,A
   1073          				p_bme280->ctrl_hum_reg = v_data_u8;
   \   0000CB   85..82       MOV     DPL,?XSP + 0
   \   0000CE   85..83       MOV     DPH,?XSP + 1
   \   0000D1   E0           MOVX    A,@DPTR
   \   0000D2   C0E0         PUSH    A
   \   0000D4   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   0000D7   D0E0         POP     A
   \   0000D9   12....       LCALL   ?Subroutine10 & 0xFFFF
   1074          				/* read the control
   1075          				configuration register value*/
   1076          				com_rslt += bme280_read_register(
   1077          					BME280_CONFIG_REG,
   1078          				&v_data_u8, BME280_GEN_READ_WRITE_DATA_LENGTH);
   \                     ??CrossCallReturnLabel_1:
   \   0000DC   12....       LCALL   `??bme280_read_register::?relay`; Banked call to: bme280_read_register
   \   0000DF   E9           MOV     A,R1
   \   0000E0   F8           MOV     R0,A
   1079          				p_bme280->config_reg = v_data_u8;
   \   0000E1   85..82       MOV     DPL,?XSP + 0
   \   0000E4   85..83       MOV     DPH,?XSP + 1
   \   0000E7   E0           MOVX    A,@DPTR
   \   0000E8   C0E0         PUSH    A
   \   0000EA   12....       LCALL   ?Subroutine41 & 0xFFFF
   1080          		}
   \                     ??CrossCallReturnLabel_111:
   \   0000ED   D0E0         POP     A
   \   0000EF   F0           MOVX    @DPTR,A
   1081          	return com_rslt;
   \   0000F0   EF           MOV     A,R7
   \   0000F1   25..         ADD     A,?V0
   \   0000F3   28           ADD     A,R0
   \   0000F4   F9           MOV     R1,A
   \                     ??bme280_set_oversamp_pressure_1:
   \   0000F5   02....       LJMP    ?Subroutine8 & 0xFFFF
   1082          }
   1083          
   1084          /*!
   1085           *	@brief This API is used to get
   1086           *	the humidity oversampling setting in the register 0xF2
   1087           *	bits from 0 to 2
   1088           *
   1089           *	value               | Humidity oversampling
   1090           * ---------------------|-------------------------
   1091           *	0x00                | Skipped
   1092           *	0x01                | BME280_OVERSAMP_1X
   1093           *	0x02                | BME280_OVERSAMP_2X
   1094           *	0x03                | BME280_OVERSAMP_4X
   1095           *	0x04                | BME280_OVERSAMP_8X
   1096           *	0x05,0x06 and 0x07  | BME280_OVERSAMP_16X
   1097           *
   1098           *
   1099           *  @param  v_value_u8 : The value of humidity over sampling
   1100           *
   1101           *
   1102           *
   1103           *	@return results of bus communication function
   1104           *	@retval 0 -> Success
   1105           *	@retval -1 -> Error
   1106           *
   1107           *
   1108          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1109          BME280_RETURN_FUNCTION_TYPE bme280_get_oversamp_humidity(
   \                     bme280_get_oversamp_humidity:
   1110          u8 *v_value_u8)
   1111          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine9 & 0xFFFF
   1112          	/* used to return the communication result*/
   1113          	BME280_RETURN_FUNCTION_TYPE com_rslt = ERROR;
   1114          	u8 v_data_u8 = BME280_INIT_VALUE;
   1115          	/* check the p_bme280 structure pointer as NULL*/
   1116          	if (p_bme280 == BME280_NULL) {
   \                     ??CrossCallReturnLabel_346:
   \   00000D   7004         JNZ     ??bme280_get_oversamp_humidity_0
   1117          		return E_BME280_NULL_PTR;
   \   00000F   7981         MOV     R1,#-0x7f
   \   000011   8022         SJMP    ??bme280_get_oversamp_humidity_1
   1118          		} else {
   1119          			com_rslt = p_bme280->BME280_BUS_READ_FUNC(
   1120          			p_bme280->dev_addr,
   1121          			BME280_CTRL_HUMIDITY_REG_OVERSAMP_HUMIDITY__REG,
   1122          			&v_data_u8, BME280_GEN_READ_WRITE_DATA_LENGTH);
   \                     ??bme280_get_oversamp_humidity_0:
   \   000013                ; Setup parameters for indirect call
   \   000013   7B01         MOV     R3,#0x1
   \   000015   AC..         MOV     R4,?XSP + 0
   \   000017   AD..         MOV     R5,?XSP + 1
   \   000019   7AF2         MOV     R2,#-0xe
   \   00001B   12....       LCALL   ??Subroutine115_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_322:
   \   00001E   12....       LCALL   ?CALL_IND
   \   000021   E9           MOV     A,R1
   \   000022   F9           MOV     R1,A
   1123          			*v_value_u8 = BME280_GET_BITSLICE(
   1124          			v_data_u8,
   1125          			BME280_CTRL_HUMIDITY_REG_OVERSAMP_HUMIDITY);
   \   000023   85..82       MOV     DPL,?XSP + 0
   \   000026   85..83       MOV     DPH,?XSP + 1
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   12....       LCALL   ?Subroutine75 & 0xFFFF
   1126          
   1127          			p_bme280->oversamp_humidity = *v_value_u8;
   \                     ??CrossCallReturnLabel_216:
   \   00002D   C0E0         PUSH    A
   \   00002F   12....       LCALL   ?Subroutine58 & 0xFFFF
   1128          		}
   \                     ??CrossCallReturnLabel_155:
   \   000032   D0E0         POP     A
   \   000034   F0           MOVX    @DPTR,A
   1129          	return com_rslt;
   \                     ??bme280_get_oversamp_humidity_1:
   \   000035   02....       LJMP    ?Subroutine1 & 0xFFFF
   1130          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000   12....       LCALL   ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_237:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine89:
   \   000000   12....       LCALL   ?Subroutine102 & 0xFFFF
   \                     ??CrossCallReturnLabel_372:
   \   000003   2429         ADD     A,#0x29
   \   000005   F582         MOV     DPL,A
   \   000007   E4           CLR     A
   \   000008   38           ADDC    A,R0
   \   000009   F583         MOV     DPH,A
   \   00000B   22           RET
   1131          
   1132          /*!
   1133           *	@brief This API is used to set
   1134           *	the humidity oversampling setting in the register 0xF2
   1135           *	bits from 0 to 2
   1136           *
   1137           *	value               | Humidity oversampling
   1138           * ---------------------|-------------------------
   1139           *	0x00                | Skipped
   1140           *	0x01                | BME280_OVERSAMP_1X
   1141           *	0x02                | BME280_OVERSAMP_2X
   1142           *	0x03                | BME280_OVERSAMP_4X
   1143           *	0x04                | BME280_OVERSAMP_8X
   1144           *	0x05,0x06 and 0x07  | BME280_OVERSAMP_16X
   1145           *
   1146           *
   1147           *  @param  v_value_u8 : The value of humidity over sampling
   1148           *
   1149           *
   1150           *
   1151           * @note The "BME280_CTRL_HUMIDITY_REG_OVERSAMP_HUMIDITY"
   1152           * register sets the humidity
   1153           * data acquisition options of the device.
   1154           * @note changes to this registers only become
   1155           * effective after a write operation to
   1156           * "BME280_CTRL_MEAS_REG" register.
   1157           * @note In the code automated reading and writing of
   1158           *	"BME280_CTRL_HUMIDITY_REG_OVERSAMP_HUMIDITY"
   1159           * @note register first set the
   1160           * "BME280_CTRL_HUMIDITY_REG_OVERSAMP_HUMIDITY"
   1161           *  and then read and write
   1162           *  the "BME280_CTRL_MEAS_REG" register in the function.
   1163           *
   1164           *
   1165           *	@return results of bus communication function
   1166           *	@retval 0 -> Success
   1167           *	@retval -1 -> Error
   1168           *
   1169           *
   1170          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1171          BME280_RETURN_FUNCTION_TYPE bme280_set_oversamp_humidity(
   \                     bme280_set_oversamp_humidity:
   1172          u8 v_value_u8)
   1173          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FF           MOV     R7,A
   1174          	/* used to return the communication result*/
   1175          	BME280_RETURN_FUNCTION_TYPE com_rslt = ERROR;
   1176          	u8 v_data_u8 = BME280_INIT_VALUE;
   \   00000C   85..82       MOV     DPL,?XSP + 0
   \   00000F   85..83       MOV     DPH,?XSP + 1
   \   000012   E4           CLR     A
   \   000013   F0           MOVX    @DPTR,A
   1177          	u8 pre_ctrl_meas_value = BME280_INIT_VALUE;
   \   000014   04           INC     A
   \   000015   12....       LCALL   ?XSTACK_DISP0_8
   \   000018   E4           CLR     A
   \   000019   F0           MOVX    @DPTR,A
   1178          	u8 v_pre_config_value_u8 = BME280_INIT_VALUE;
   \   00001A   7403         MOV     A,#0x3
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   E4           CLR     A
   \   000020   F0           MOVX    @DPTR,A
   1179          	u8 v_prev_pow_mode_u8 = BME280_INIT_VALUE;
   \   000021   7402         MOV     A,#0x2
   \   000023   12....       LCALL   ?XSTACK_DISP0_8
   \   000026   12....       LCALL   ??Subroutine120_0 & 0xFFFF
   1180          	/* check the p_bme280 structure pointer as NULL*/
   1181          	if (p_bme280 == BME280_NULL) {
   \                     ??CrossCallReturnLabel_353:
   \   000029   7005         JNZ     ??bme280_set_oversamp_humidity_0
   1182          		return E_BME280_NULL_PTR;
   \   00002B   7981         MOV     R1,#-0x7f
   \   00002D   02....       LJMP    ??bme280_set_oversamp_humidity_1 & 0xFFFF
   1183          		} else {
   1184          			/* write humidity oversampling*/
   1185          			v_data_u8 = p_bme280->ctrl_hum_reg;
   1186          			v_data_u8 =
   1187          			BME280_SET_BITSLICE(v_data_u8,
   1188          			BME280_CTRL_HUMIDITY_REG_OVERSAMP_HUMIDITY, v_value_u8);
   \                     ??bme280_set_oversamp_humidity_0:
   \   000030   7407         MOV     A,#0x7
   \   000032   5F           ANL     A,R7
   \   000033   F8           MOV     R0,A
   \   000034   90....       MOV     DPTR,#p_bme280
   \   000037   E0           MOVX    A,@DPTR
   \   000038   F9           MOV     R1,A
   \   000039   A3           INC     DPTR
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   C9           XCH     A,R1
   \   00003C   242A         ADD     A,#0x2a
   \   00003E   F582         MOV     DPL,A
   \   000040   E4           CLR     A
   \   000041   39           ADDC    A,R1
   \   000042   F583         MOV     DPH,A
   \   000044   E0           MOVX    A,@DPTR
   \   000045   54F8         ANL     A,#0xf8
   \   000047   12....       LCALL   ?Subroutine74 & 0xFFFF
   1189          			com_rslt = bme280_get_power_mode(&v_prev_pow_mode_u8);
   \                     ??CrossCallReturnLabel_210:
   \   00004A   12....       LCALL   ?XSTACK_DISP101_8
   \   00004D   12....       LCALL   `??bme280_get_power_mode::?relay`; Banked call to: bme280_get_power_mode
   \   000050   E9           MOV     A,R1
   \   000051   FE           MOV     R6,A
   1190          			if (v_prev_pow_mode_u8 != BME280_SLEEP_MODE) {
   \   000052   7402         MOV     A,#0x2
   \   000054   12....       LCALL   ?XSTACK_DISP0_8
   \   000057   E0           MOVX    A,@DPTR
   \   000058   6057         JZ      ??bme280_set_oversamp_humidity_2
   1191          				com_rslt += bme280_set_soft_rst();
   \   00005A                ; Setup parameters for call to function bme280_set_soft_rst
   \   00005A   12....       LCALL   `??bme280_set_soft_rst::?relay`; Banked call to: bme280_set_soft_rst
   \   00005D   E9           MOV     A,R1
   \   00005E   F5..         MOV     ?V0,A
   1192          				p_bme280->delay_msec(BME280_3MS_DELAY);
   \   000060                ; Setup parameters for indirect call
   \   000060   90....       MOV     DPTR,#__Constant_3
   \   000063   12....       LCALL   ?XLOAD_R2345
   \   000066   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   000069   12....       LCALL   ?CALL_IND
   1193          				/* write previous value of
   1194          				configuration register*/
   1195          				v_pre_config_value_u8 = p_bme280->config_reg;
   \   00006C   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   00006F   C0E0         PUSH    A
   \   000071   7403         MOV     A,#0x3
   \   000073   12....       LCALL   ?XSTACK_DISP0_8
   \   000076   D0E0         POP     A
   \   000078   12....       LCALL   ?Subroutine16 & 0xFFFF
   1196          				com_rslt += bme280_write_register(
   1197          					BME280_CONFIG_REG,
   1198          				&v_pre_config_value_u8,
   1199          				BME280_GEN_READ_WRITE_DATA_LENGTH);
   \                     ??CrossCallReturnLabel_19:
   \   00007B   12....       LCALL   ?XSTACK_DISP101_8
   \   00007E   79F5         MOV     R1,#-0xb
   \   000080   12....       LCALL   `??bme280_write_register::?relay`; Banked call to: bme280_write_register
   \   000083   E9           MOV     A,R1
   \   000084   F5..         MOV     ?V1,A
   1200          				/* write the value of control humidity*/
   1201          				com_rslt += bme280_write_register(
   1202          					BME280_CTRL_HUMIDITY_REG,
   1203          				&v_data_u8, BME280_GEN_READ_WRITE_DATA_LENGTH);
   \   000086                ; Setup parameters for call to function bme280_write_register
   \   000086   7C01         MOV     R4,#0x1
   \   000088   AA..         MOV     R2,?XSP + 0
   \   00008A   AB..         MOV     R3,?XSP + 1
   \   00008C   79F2         MOV     R1,#-0xe
   \   00008E   12....       LCALL   `??bme280_write_register::?relay`; Banked call to: bme280_write_register
   \   000091   12....       LCALL   ?Subroutine31 & 0xFFFF
   1204          				/* write previous value of
   1205          				control measurement register*/
   1206          				pre_ctrl_meas_value =
   1207          				p_bme280->ctrl_meas_reg;
   1208          				com_rslt += bme280_write_register(
   1209          					BME280_CTRL_MEAS_REG,
   1210          				&pre_ctrl_meas_value,
   1211          				BME280_GEN_READ_WRITE_DATA_LENGTH);
   1212          			} else {
   \                     ??CrossCallReturnLabel_337:
   \   000094   C0E0         PUSH    A
   \   000096   7401         MOV     A,#0x1
   \   000098   12....       LCALL   ?XSTACK_DISP0_8
   \   00009B   D0E0         POP     A
   \   00009D   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   0000A0   12....       LCALL   ?XSTACK_DISP101_8
   \   0000A3   79F4         MOV     R1,#-0xc
   \   0000A5   12....       LCALL   `??bme280_write_register::?relay`; Banked call to: bme280_write_register
   \   0000A8   E5..         MOV     A,?V0
   \   0000AA   25..         ADD     A,?V1
   \   0000AC   25..         ADD     A,?V2
   \   0000AE   29           ADD     A,R1
   \   0000AF   802B         SJMP    ??bme280_set_oversamp_humidity_3
   1213          				com_rslt +=
   1214          				p_bme280->BME280_BUS_WRITE_FUNC(
   1215          				p_bme280->dev_addr,
   1216          				BME280_CTRL_HUMIDITY_REG_OVERSAMP_HUMIDITY__REG,
   1217          				&v_data_u8, BME280_GEN_READ_WRITE_DATA_LENGTH);
   \                     ??bme280_set_oversamp_humidity_2:
   \   0000B1                ; Setup parameters for indirect call
   \   0000B1   7B01         MOV     R3,#0x1
   \   0000B3   AC..         MOV     R4,?XSP + 0
   \   0000B5   AD..         MOV     R5,?XSP + 1
   \   0000B7   7AF2         MOV     R2,#-0xe
   \   0000B9   12....       LCALL   ??Subroutine112_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_309:
   \   0000BC   12....       LCALL   ?CALL_IND
   \   0000BF   E9           MOV     A,R1
   \   0000C0   F5..         MOV     ?V0,A
   1218          				/* Control humidity write will effective only
   1219          				after the control measurement register*/
   1220          				pre_ctrl_meas_value =
   1221          				p_bme280->ctrl_meas_reg;
   \   0000C2   12....       LCALL   ??Subroutine119_0 & 0xFFFF
   1222          				com_rslt += bme280_write_register(
   1223          					BME280_CTRL_MEAS_REG,
   1224          				&pre_ctrl_meas_value,
   1225          				BME280_GEN_READ_WRITE_DATA_LENGTH);
   1226          			}
   \                     ??CrossCallReturnLabel_341:
   \   0000C5   C0E0         PUSH    A
   \   0000C7   7401         MOV     A,#0x1
   \   0000C9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CC   D0E0         POP     A
   \   0000CE   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   0000D1   12....       LCALL   ?XSTACK_DISP101_8
   \   0000D4   79F4         MOV     R1,#-0xc
   \   0000D6   12....       LCALL   `??bme280_write_register::?relay`; Banked call to: bme280_write_register
   \   0000D9   E9           MOV     A,R1
   \   0000DA   25..         ADD     A,?V0
   \                     ??bme280_set_oversamp_humidity_3:
   \   0000DC   2E           ADD     A,R6
   \   0000DD   FE           MOV     R6,A
   1227          			p_bme280->oversamp_humidity = v_value_u8;
   \   0000DE   12....       LCALL   ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_156:
   \   0000E1   EF           MOV     A,R7
   \   0000E2   12....       LCALL   ??Subroutine111_0 & 0xFFFF
   1228          			/* read the control measurement register value*/
   1229          			com_rslt += bme280_read_register(BME280_CTRL_MEAS_REG,
   1230          			&v_data_u8, BME280_GEN_READ_WRITE_DATA_LENGTH);
   \                     ??CrossCallReturnLabel_301:
   \   0000E5   12....       LCALL   `??bme280_read_register::?relay`; Banked call to: bme280_read_register
   \   0000E8   E9           MOV     A,R1
   \   0000E9   F5..         MOV     ?V0,A
   1231          			p_bme280->ctrl_meas_reg = v_data_u8;
   \   0000EB   85..82       MOV     DPL,?XSP + 0
   \   0000EE   85..83       MOV     DPH,?XSP + 1
   \   0000F1   E0           MOVX    A,@DPTR
   \   0000F2   C0E0         PUSH    A
   \   0000F4   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   0000F7   D0E0         POP     A
   \   0000F9   12....       LCALL   ?Subroutine11 & 0xFFFF
   1232          
   1233          			/* read the control humidity register value*/
   1234          			com_rslt += bme280_read_register(
   1235          			BME280_CTRL_HUMIDITY_REG,
   1236          			&v_data_u8, BME280_GEN_READ_WRITE_DATA_LENGTH);
   \                     ??CrossCallReturnLabel_10:
   \   0000FC   12....       LCALL   `??bme280_read_register::?relay`; Banked call to: bme280_read_register
   \   0000FF   E9           MOV     A,R1
   \   000100   F5..         MOV     ?V1,A
   1237          			p_bme280->ctrl_hum_reg = v_data_u8;
   \   000102   85..82       MOV     DPL,?XSP + 0
   \   000105   85..83       MOV     DPH,?XSP + 1
   \   000108   E0           MOVX    A,@DPTR
   \   000109   C0E0         PUSH    A
   \   00010B   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   00010E   D0E0         POP     A
   \   000110   12....       LCALL   ?Subroutine10 & 0xFFFF
   1238          			/* read the control configuration register value*/
   1239          			com_rslt += bme280_read_register(BME280_CONFIG_REG,
   1240          			&v_data_u8, BME280_GEN_READ_WRITE_DATA_LENGTH);
   \                     ??CrossCallReturnLabel_2:
   \   000113   12....       LCALL   `??bme280_read_register::?relay`; Banked call to: bme280_read_register
   \   000116   E9           MOV     A,R1
   \   000117   F8           MOV     R0,A
   1241          			p_bme280->config_reg = v_data_u8;
   \   000118   85..82       MOV     DPL,?XSP + 0
   \   00011B   85..83       MOV     DPH,?XSP + 1
   \   00011E   E0           MOVX    A,@DPTR
   \   00011F   C0E0         PUSH    A
   \   000121   12....       LCALL   ?Subroutine41 & 0xFFFF
   1242          			
   1243          		}
   \                     ??CrossCallReturnLabel_112:
   \   000124   D0E0         POP     A
   \   000126   F0           MOVX    @DPTR,A
   1244          	return com_rslt;
   \   000127   EE           MOV     A,R6
   \   000128   25..         ADD     A,?V0
   \   00012A   25..         ADD     A,?V1
   \   00012C   28           ADD     A,R0
   \   00012D   F9           MOV     R1,A
   \                     ??bme280_set_oversamp_humidity_1:
   \   00012E   02....       LJMP    ?Subroutine6 & 0xFFFF
   1245          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   7404         MOV     A,#0x4
   \   000002                REQUIRE ??Subroutine118_0
   \   000002                ; // Fall through to label ??Subroutine118_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine118_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F03         MOV     R7,#0x3
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine74:
   \   000000   12....       LCALL   ?Subroutine101 & 0xFFFF
   \                     ??CrossCallReturnLabel_271:
   \   000003                ; Setup parameters for call to function bme280_get_power_mode
   \   000003                ; Setup parameters for call to function bme280_get_power_mode
   \   000003                ; Setup parameters for call to function bme280_get_power_mode
   \   000003                ; Setup parameters for call to function bme280_get_power_mode
   \   000003   7402         MOV     A,#0x2
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   E9           MOV     A,R1
   \   000001   F5..         MOV     ?V2,A
   \   000003                REQUIRE ??Subroutine119_0
   \   000003                ; // Fall through to label ??Subroutine119_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine119_0:
   \   000000   12....       LCALL   ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_343:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function bme280_write_register
   \   000001                ; Setup parameters for call to function bme280_write_register
   \   000001                ; Setup parameters for call to function bme280_write_register
   \   000001                ; Setup parameters for call to function bme280_write_register
   \   000001                ; Setup parameters for call to function bme280_write_register
   \   000001                ; Setup parameters for call to function bme280_write_register
   \   000001   7C01         MOV     R4,#0x1
   \   000003   7403         MOV     A,#0x3
   \   000005   22           RET
   1246          
   1247          /*!
   1248           *	@brief This API used to get the
   1249           *	Operational Mode from the sensor in the register 0xF4 bit 0 and 1
   1250           *
   1251           *
   1252           *
   1253           *	@param v_power_mode_u8 : The value of power mode
   1254           *  value           |    mode
   1255           * -----------------|------------------
   1256           *	0x00            | BME280_SLEEP_MODE
   1257           *	0x01 and 0x02   | BME280_FORCED_MODE
   1258           *	0x03            | BME280_NORMAL_MODE
   1259           *
   1260           *	@return results of bus communication function
   1261           *	@retval 0 -> Success
   1262           *	@retval -1 -> Error
   1263           *
   1264           *
   1265          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1266          BME280_RETURN_FUNCTION_TYPE bme280_get_power_mode(u8 *v_power_mode_u8)
   \                     bme280_get_power_mode:
   1267          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine9 & 0xFFFF
   1268          	/* used to return the communication result*/
   1269          	BME280_RETURN_FUNCTION_TYPE com_rslt = ERROR;
   1270          	u8 v_mode_u8r = BME280_INIT_VALUE;
   1271          	/* check the p_bme280 structure pointer as NULL*/
   1272          	if (p_bme280 == BME280_NULL) {
   \                     ??CrossCallReturnLabel_347:
   \   00000D   7004         JNZ     ??bme280_get_power_mode_0
   1273          		return E_BME280_NULL_PTR;
   \   00000F   7981         MOV     R1,#-0x7f
   \   000011   8016         SJMP    ??bme280_get_power_mode_1
   1274          		} else {
   1275          			com_rslt = p_bme280->BME280_BUS_READ_FUNC(
   1276          			p_bme280->dev_addr,
   1277          			BME280_CTRL_MEAS_REG_POWER_MODE__REG,
   1278          			&v_mode_u8r, BME280_GEN_READ_WRITE_DATA_LENGTH);
   \                     ??bme280_get_power_mode_0:
   \   000013                ; Setup parameters for indirect call
   \   000013   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_329:
   \   000016   12....       LCALL   ?CALL_IND
   \   000019   E9           MOV     A,R1
   \   00001A   F9           MOV     R1,A
   1279          			*v_power_mode_u8 = BME280_GET_BITSLICE(v_mode_u8r,
   1280          			BME280_CTRL_MEAS_REG_POWER_MODE);
   \   00001B   85..82       MOV     DPL,?XSP + 0
   \   00001E   85..83       MOV     DPH,?XSP + 1
   \   000021   E0           MOVX    A,@DPTR
   \   000022   5403         ANL     A,#0x3
   \   000024   8E82         MOV     DPL,R6
   \   000026   8F83         MOV     DPH,R7
   \   000028   F0           MOVX    @DPTR,A
   1281          		}
   1282          	return com_rslt;
   \                     ??bme280_get_power_mode_1:
   \   000029   02....       LJMP    ?Subroutine1 & 0xFFFF
   1283          }
   1284          
   1285          /*!
   1286           *	@brief This API used to set the
   1287           *	Operational Mode from the sensor in the register 0xF4 bit 0 and 1
   1288           *
   1289           *
   1290           *
   1291           *	@param v_power_mode_u8 : The value of power mode
   1292           *  value           |    mode
   1293           * -----------------|------------------
   1294           *	0x00            | BME280_SLEEP_MODE
   1295           *	0x01 and 0x02   | BME280_FORCED_MODE
   1296           *	0x03            | BME280_NORMAL_MODE
   1297           *
   1298           *	@return results of bus communication function
   1299           *	@retval 0 -> Success
   1300           *	@retval -1 -> Error
   1301           *
   1302           *
   1303          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1304          BME280_RETURN_FUNCTION_TYPE bme280_set_power_mode(u8 v_power_mode_u8)
   \                     bme280_set_power_mode:
   1305          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FF           MOV     R7,A
   1306          	/* used to return the communication result*/
   1307          	BME280_RETURN_FUNCTION_TYPE com_rslt = ERROR;
   1308          	u8 v_mode_u8r = BME280_INIT_VALUE;
   \   00000C   7401         MOV     A,#0x1
   \   00000E   12....       LCALL   ?XSTACK_DISP0_8
   \   000011   E4           CLR     A
   \   000012   F0           MOVX    @DPTR,A
   1309          	u8 v_prev_pow_mode_u8 = BME280_INIT_VALUE;
   \   000013   7404         MOV     A,#0x4
   \   000015   12....       LCALL   ?XSTACK_DISP0_8
   \   000018   E4           CLR     A
   \   000019   F0           MOVX    @DPTR,A
   1310          	u8 v_pre_ctrl_hum_value_u8 = BME280_INIT_VALUE;
   \   00001A   7403         MOV     A,#0x3
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   E4           CLR     A
   \   000020   F0           MOVX    @DPTR,A
   1311          	u8 v_pre_config_value_u8 = BME280_INIT_VALUE;
   \   000021   7402         MOV     A,#0x2
   \   000023   12....       LCALL   ?XSTACK_DISP0_8
   \   000026   E4           CLR     A
   \   000027   F0           MOVX    @DPTR,A
   1312          	u8 v_data_u8 = BME280_INIT_VALUE;
   \   000028   85..82       MOV     DPL,?XSP + 0
   \   00002B   85..83       MOV     DPH,?XSP + 1
   \   00002E   12....       LCALL   ??Subroutine121_0 & 0xFFFF
   1313          	/* check the p_bme280 structure pointer as NULL*/
   1314          	if (p_bme280 == BME280_NULL) {
   \                     ??CrossCallReturnLabel_359:
   \   000031   7005         JNZ     ??bme280_set_power_mode_0
   1315          		return E_BME280_NULL_PTR;
   \   000033   7981         MOV     R1,#-0x7f
   \   000035   02....       LJMP    ??bme280_set_power_mode_1 & 0xFFFF
   1316          		} else {
   1317          			if (v_power_mode_u8 <= BME280_NORMAL_MODE) {
   \                     ??bme280_set_power_mode_0:
   \   000038   EF           MOV     A,R7
   \   000039   C3           CLR     C
   \   00003A   9404         SUBB    A,#0x4
   \   00003C   4003         JC      $+5
   \   00003E   02....       LJMP    ??bme280_set_power_mode_2 & 0xFFFF
   1318          				v_mode_u8r = p_bme280->ctrl_meas_reg;
   1319          				v_mode_u8r =
   1320          				BME280_SET_BITSLICE(v_mode_u8r,
   1321          				BME280_CTRL_MEAS_REG_POWER_MODE,
   1322          				v_power_mode_u8);
   \   000041   7403         MOV     A,#0x3
   \   000043   5F           ANL     A,R7
   \   000044   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   000047   54FC         ANL     A,#0xfc
   \   000049   48           ORL     A,R0
   \   00004A   C0E0         PUSH    A
   \   00004C   7401         MOV     A,#0x1
   \   00004E   12....       LCALL   ?XSTACK_DISP0_8
   \   000051   D0E0         POP     A
   \   000053   F0           MOVX    @DPTR,A
   1323          				com_rslt = bme280_get_power_mode(
   1324          					&v_prev_pow_mode_u8);
   \   000054                ; Setup parameters for call to function bme280_get_power_mode
   \   000054   7404         MOV     A,#0x4
   \   000056   12....       LCALL   ?XSTACK_DISP101_8
   \   000059   12....       LCALL   `??bme280_get_power_mode::?relay`; Banked call to: bme280_get_power_mode
   1325          				if (v_prev_pow_mode_u8 != BME280_SLEEP_MODE) {
   \   00005C   7404         MOV     A,#0x4
   \   00005E   12....       LCALL   ?XSTACK_DISP0_8
   \   000061   E0           MOVX    A,@DPTR
   \   000062   604C         JZ      ??bme280_set_power_mode_3
   1326          					com_rslt += bme280_set_soft_rst();
   \   000064                ; Setup parameters for call to function bme280_set_soft_rst
   \   000064   12....       LCALL   `??bme280_set_soft_rst::?relay`; Banked call to: bme280_set_soft_rst
   1327          					p_bme280->delay_msec(BME280_3MS_DELAY);
   \   000067                ; Setup parameters for indirect call
   \   000067   90....       MOV     DPTR,#__Constant_3
   \   00006A   12....       LCALL   ?XLOAD_R2345
   \   00006D   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   000070   12....       LCALL   ?CALL_IND
   1328          					/* write previous value of
   1329          					configuration register*/
   1330          					v_pre_config_value_u8 =
   1331          					p_bme280->config_reg;
   \   000073   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   000076   C0E0         PUSH    A
   \   000078   7402         MOV     A,#0x2
   \   00007A   12....       LCALL   ?XSTACK_DISP0_8
   \   00007D   D0E0         POP     A
   \   00007F   F0           MOVX    @DPTR,A
   1332          					com_rslt = bme280_write_register(
   1333          						BME280_CONFIG_REG,
   1334          					&v_pre_config_value_u8,
   1335          					BME280_GEN_READ_WRITE_DATA_LENGTH);
   \   000080                ; Setup parameters for call to function bme280_write_register
   \   000080   7C01         MOV     R4,#0x1
   \   000082   7402         MOV     A,#0x2
   \   000084   12....       LCALL   ?XSTACK_DISP101_8
   \   000087   79F5         MOV     R1,#-0xb
   \   000089   12....       LCALL   `??bme280_write_register::?relay`; Banked call to: bme280_write_register
   1336          					/* write previous value of
   1337          					humidity oversampling*/
   1338          					v_pre_ctrl_hum_value_u8 =
   1339          					p_bme280->ctrl_hum_reg;
   \   00008C   12....       LCALL   ??Subroutine122_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_366:
   \   00008F   C0E0         PUSH    A
   \   000091   7403         MOV     A,#0x3
   \   000093   12....       LCALL   ?XSTACK_DISP0_8
   \   000096   D0E0         POP     A
   \   000098   12....       LCALL   ?Subroutine16 & 0xFFFF
   1340          					com_rslt += bme280_write_register(
   1341          					BME280_CTRL_HUMIDITY_REG,
   1342          					&v_pre_ctrl_hum_value_u8,
   1343          					BME280_GEN_READ_WRITE_DATA_LENGTH);
   \                     ??CrossCallReturnLabel_20:
   \   00009B   12....       LCALL   ?XSTACK_DISP101_8
   \   00009E   79F2         MOV     R1,#-0xe
   \   0000A0   12....       LCALL   `??bme280_write_register::?relay`; Banked call to: bme280_write_register
   1344          					/* write previous and updated value of
   1345          					control measurement register*/
   1346          					com_rslt += bme280_write_register(
   1347          					BME280_CTRL_MEAS_REG,
   1348          					&v_mode_u8r,
   1349          					BME280_GEN_READ_WRITE_DATA_LENGTH);
   \   0000A3                ; Setup parameters for call to function bme280_write_register
   \   0000A3   7C01         MOV     R4,#0x1
   \   0000A5   EC           MOV     A,R4
   \   0000A6   12....       LCALL   ?XSTACK_DISP101_8
   \   0000A9   79F4         MOV     R1,#-0xc
   \   0000AB   12....       LCALL   `??bme280_write_register::?relay`; Banked call to: bme280_write_register
   \   0000AE   800E         SJMP    ??bme280_set_power_mode_4
   1350          				} else {
   1351          					com_rslt =
   1352          					p_bme280->BME280_BUS_WRITE_FUNC(
   1353          					p_bme280->dev_addr,
   1354          					BME280_CTRL_MEAS_REG_POWER_MODE__REG,
   1355          					&v_mode_u8r,
   1356          					BME280_GEN_READ_WRITE_DATA_LENGTH);
   \                     ??bme280_set_power_mode_3:
   \   0000B0                ; Setup parameters for indirect call
   \   0000B0   7B01         MOV     R3,#0x1
   \   0000B2   EB           MOV     A,R3
   \   0000B3   12....       LCALL   ?XSTACK_DISP102_8
   \   0000B6   7AF4         MOV     R2,#-0xc
   \   0000B8   12....       LCALL   ??Subroutine112_0 & 0xFFFF
   1357          				}
   \                     ??CrossCallReturnLabel_310:
   \   0000BB   12....       LCALL   ?CALL_IND
   1358          				/* read the control measurement register value*/
   1359          				com_rslt = bme280_read_register(
   1360          					BME280_CTRL_MEAS_REG,
   1361          				&v_data_u8, BME280_GEN_READ_WRITE_DATA_LENGTH);
   \                     ??bme280_set_power_mode_4:
   \   0000BE                ; Setup parameters for call to function bme280_read_register
   \   0000BE   7C01         MOV     R4,#0x1
   \   0000C0   AA..         MOV     R2,?XSP + 0
   \   0000C2   AB..         MOV     R3,?XSP + 1
   \   0000C4   79F4         MOV     R1,#-0xc
   \   0000C6   12....       LCALL   `??bme280_read_register::?relay`; Banked call to: bme280_read_register
   \   0000C9   E9           MOV     A,R1
   \   0000CA   FE           MOV     R6,A
   1362          				p_bme280->ctrl_meas_reg = v_data_u8;
   \   0000CB   85..82       MOV     DPL,?XSP + 0
   \   0000CE   85..83       MOV     DPH,?XSP + 1
   \   0000D1   E0           MOVX    A,@DPTR
   \   0000D2   C0E0         PUSH    A
   \   0000D4   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   0000D7   D0E0         POP     A
   \   0000D9   12....       LCALL   ?Subroutine11 & 0xFFFF
   1363          				/* read the control humidity register value*/
   1364          				com_rslt += bme280_read_register(
   1365          					BME280_CTRL_HUMIDITY_REG,
   1366          				&v_data_u8, BME280_GEN_READ_WRITE_DATA_LENGTH);
   \                     ??CrossCallReturnLabel_11:
   \   0000DC   12....       LCALL   `??bme280_read_register::?relay`; Banked call to: bme280_read_register
   \   0000DF   E9           MOV     A,R1
   \   0000E0   F5..         MOV     ?V0,A
   1367          				p_bme280->ctrl_hum_reg = v_data_u8;
   \   0000E2   85..82       MOV     DPL,?XSP + 0
   \   0000E5   85..83       MOV     DPH,?XSP + 1
   \   0000E8   E0           MOVX    A,@DPTR
   \   0000E9   C0E0         PUSH    A
   \   0000EB   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   0000EE   D0E0         POP     A
   \   0000F0   12....       LCALL   ?Subroutine10 & 0xFFFF
   1368          				/* read the config register value*/
   1369          				com_rslt += bme280_read_register(
   1370          					BME280_CONFIG_REG,
   1371          				&v_data_u8, BME280_GEN_READ_WRITE_DATA_LENGTH);
   \                     ??CrossCallReturnLabel_3:
   \   0000F3   12....       LCALL   `??bme280_read_register::?relay`; Banked call to: bme280_read_register
   \   0000F6   E9           MOV     A,R1
   \   0000F7   25..         ADD     A,?V0
   \   0000F9   2E           ADD     A,R6
   \   0000FA   FE           MOV     R6,A
   1372          				p_bme280->config_reg = v_data_u8;
   \   0000FB   85..82       MOV     DPL,?XSP + 0
   \   0000FE   85..83       MOV     DPH,?XSP + 1
   \   000101   E0           MOVX    A,@DPTR
   \   000102   C0E0         PUSH    A
   \   000104   12....       LCALL   ?Subroutine59 & 0xFFFF
   1373          			} else {
   \                     ??CrossCallReturnLabel_157:
   \   000107   D0E0         POP     A
   \   000109   F0           MOVX    @DPTR,A
   \   00010A   8002         SJMP    ??bme280_set_power_mode_5
   1374          			com_rslt = E_BME280_OUT_OF_RANGE;
   \                     ??bme280_set_power_mode_2:
   \   00010C   7EFE         MOV     R6,#-0x2
   1375          			}
   1376          		}
   1377          	return com_rslt;
   \                     ??bme280_set_power_mode_5:
   \   00010E   EE           MOV     A,R6
   \   00010F   F9           MOV     R1,A
   \                     ??bme280_set_power_mode_1:
   \   000110   7405         MOV     A,#0x5
   \   000112   02....       LJMP    ??Subroutine116_0 & 0xFFFF
   1378          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000   12....       LCALL   ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_239:
   \   000003   22           RET
   1379          
   1380          /*!
   1381           * @brief Used to reset the sensor
   1382           * The value 0xB6 is written to the 0xE0
   1383           * register the device is reset using the
   1384           * complete power-on-reset procedure.
   1385           * @note Soft reset can be easily set using bme280_set_softreset().
   1386           * @note Usage Hint : bme280_set_softreset()
   1387           *
   1388           *
   1389           *	@return results of bus communication function
   1390           *	@retval 0 -> Success
   1391           *	@retval -1 -> Error
   1392           *
   1393           *
   1394          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1395          BME280_RETURN_FUNCTION_TYPE bme280_set_soft_rst(void)
   \                     bme280_set_soft_rst:
   1396          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 1
   \   000004   74FF         MOV     A,#-0x1
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
   1397          	/* used to return the communication result*/
   1398          	BME280_RETURN_FUNCTION_TYPE com_rslt = ERROR;
   1399          	u8 v_data_u8 = BME280_SOFT_RESET_CODE;
   \   000009   85..82       MOV     DPL,?XSP + 0
   \   00000C   85..83       MOV     DPH,?XSP + 1
   \   00000F   74B6         MOV     A,#-0x4a
   \   000011   12....       LCALL   ??Subroutine121_0 & 0xFFFF
   1400          	/* check the p_bme280 structure pointer as NULL*/
   1401          	if (p_bme280 == BME280_NULL) {
   \                     ??CrossCallReturnLabel_360:
   \   000014   7004         JNZ     ??bme280_set_soft_rst_0
   1402          		return E_BME280_NULL_PTR;
   \   000016   7981         MOV     R1,#-0x7f
   \   000018   800E         SJMP    ??bme280_set_soft_rst_1
   1403          		} else {
   1404          			com_rslt = p_bme280->BME280_BUS_WRITE_FUNC(
   1405          			p_bme280->dev_addr,
   1406          			BME280_RST_REG, &v_data_u8,
   1407          			BME280_GEN_READ_WRITE_DATA_LENGTH);
   1408          		}
   1409          	return com_rslt;
   \                     ??bme280_set_soft_rst_0:
   \   00001A                ; Setup parameters for indirect call
   \   00001A   7B01         MOV     R3,#0x1
   \   00001C   AC..         MOV     R4,?XSP + 0
   \   00001E   AD..         MOV     R5,?XSP + 1
   \   000020   7AE0         MOV     R2,#-0x20
   \   000022   12....       LCALL   ??Subroutine113_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_306:
   \   000025   12....       LCALL   ?CALL_IND
   \                     ??bme280_set_soft_rst_1:
   \   000028   7401         MOV     A,#0x1
   \   00002A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00002D   02....       LJMP    ?Subroutine0 & 0xFFFF
   1410          }
   1411          
   1412          /*!
   1413           *	@brief This API used to get the sensor
   1414           *	SPI mode(communication type) in the register 0xF5 bit 0
   1415           *
   1416           *
   1417           *
   1418           *	@param v_enable_disable_u8 : The value of SPI enable
   1419           *	value  | Description
   1420           * --------|--------------
   1421           *   0     | Disable
   1422           *   1     | Enable
   1423           *
   1424           *
   1425           *
   1426           *	@return results of bus communication function
   1427           *	@retval 0 -> Success
   1428           *	@retval -1 -> Error
   1429           *
   1430           *
   1431          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1432          BME280_RETURN_FUNCTION_TYPE bme280_get_spi3(u8 *v_enable_disable_u8)
   \                     bme280_get_spi3:
   1433          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine9 & 0xFFFF
   1434          	/* used to return the communication result*/
   1435          	BME280_RETURN_FUNCTION_TYPE com_rslt = ERROR;
   1436          	u8 v_data_u8 = BME280_INIT_VALUE;
   1437          	/* check the p_bme280 structure pointer as NULL*/
   1438          	if (p_bme280 == BME280_NULL) {
   \                     ??CrossCallReturnLabel_348:
   \   00000D   7004         JNZ     ??bme280_get_spi3_0
   1439          		return E_BME280_NULL_PTR;
   \   00000F   7981         MOV     R1,#-0x7f
   \   000011   8020         SJMP    ??bme280_get_spi3_1
   1440          		} else {
   1441          			com_rslt = p_bme280->BME280_BUS_READ_FUNC(
   1442          			p_bme280->dev_addr,
   1443          			BME280_CONFIG_REG_SPI3_ENABLE__REG,
   1444          			&v_data_u8, BME280_GEN_READ_WRITE_DATA_LENGTH);
   \                     ??bme280_get_spi3_0:
   \   000013                ; Setup parameters for indirect call
   \   000013   7B01         MOV     R3,#0x1
   \   000015   AC..         MOV     R4,?XSP + 0
   \   000017   AD..         MOV     R5,?XSP + 1
   \   000019   7AF5         MOV     R2,#-0xb
   \   00001B   12....       LCALL   ??Subroutine115_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_323:
   \   00001E   12....       LCALL   ?CALL_IND
   \   000021   E9           MOV     A,R1
   \   000022   F9           MOV     R1,A
   1445          			*v_enable_disable_u8 = BME280_GET_BITSLICE(
   1446          			v_data_u8,
   1447          			BME280_CONFIG_REG_SPI3_ENABLE);
   \   000023   85..82       MOV     DPL,?XSP + 0
   \   000026   85..83       MOV     DPH,?XSP + 1
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   A2E0         MOV     C,0xE0 /* A   */.0
   \   00002C   E4           CLR     A
   \   00002D   33           RLC     A
   \   00002E   8E82         MOV     DPL,R6
   \   000030   8F83         MOV     DPH,R7
   \   000032   F0           MOVX    @DPTR,A
   1448          		}
   1449          	return com_rslt;
   \                     ??bme280_get_spi3_1:
   \   000033   02....       LJMP    ?Subroutine1 & 0xFFFF
   1450          }
   1451          
   1452          /*!
   1453           *	@brief This API used to set the sensor
   1454           *	SPI mode(communication type) in the register 0xF5 bit 0
   1455           *
   1456           *
   1457           *
   1458           *	@param v_enable_disable_u8 : The value of SPI enable
   1459           *	value  | Description
   1460           * --------|--------------
   1461           *   0     | Disable
   1462           *   1     | Enable
   1463           *
   1464           *
   1465           *
   1466           *	@return results of bus communication function
   1467           *	@retval 0 -> Success
   1468           *	@retval -1 -> Error
   1469           *
   1470           *
   1471          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   7B01         MOV     R3,#0x1
   \   000002   AC..         MOV     R4,?XSP + 0
   \   000004   AD..         MOV     R5,?XSP + 1
   \   000006   7AF5         MOV     R2,#-0xb
   \   000008                REQUIRE ??Subroutine112_0
   \   000008                ; // Fall through to label ??Subroutine112_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1472          BME280_RETURN_FUNCTION_TYPE bme280_set_spi3(u8 v_enable_disable_u8)
   \                     bme280_set_spi3:
   1473          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   1474          	/* used to return the communication result*/
   1475          	BME280_RETURN_FUNCTION_TYPE com_rslt = ERROR;
   1476          	u8 v_data_u8 = BME280_INIT_VALUE;
   \   00000C   85..82       MOV     DPL,?XSP + 0
   \   00000F   85..83       MOV     DPH,?XSP + 1
   \   000012   E4           CLR     A
   \   000013   F0           MOVX    @DPTR,A
   1477          	u8 pre_ctrl_meas_value = BME280_INIT_VALUE;
   \   000014   7403         MOV     A,#0x3
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   E4           CLR     A
   \   00001A   F0           MOVX    @DPTR,A
   1478          	u8 v_prev_pow_mode_u8 = BME280_INIT_VALUE;
   \   00001B   7402         MOV     A,#0x2
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   E4           CLR     A
   \   000021   F0           MOVX    @DPTR,A
   1479          	u8 v_pre_ctrl_hum_value_u8 =  BME280_INIT_VALUE;
   \   000022   04           INC     A
   \   000023   12....       LCALL   ?XSTACK_DISP0_8
   \   000026   12....       LCALL   ??Subroutine120_0 & 0xFFFF
   1480          	/* check the p_bme280 structure pointer as NULL*/
   1481          	if (p_bme280 == BME280_NULL) {
   \                     ??CrossCallReturnLabel_354:
   \   000029   7005         JNZ     ??bme280_set_spi3_0
   1482          		return E_BME280_NULL_PTR;
   \   00002B   7981         MOV     R1,#-0x7f
   \   00002D   02....       LJMP    ??CrossCallReturnLabel_25 & 0xFFFF
   1483          		} else {
   1484          			v_data_u8 = p_bme280->config_reg;
   1485          			v_data_u8 =
   1486          			BME280_SET_BITSLICE(v_data_u8,
   1487          			BME280_CONFIG_REG_SPI3_ENABLE, v_enable_disable_u8);
   \                     ??bme280_set_spi3_0:
   \   000030   EE           MOV     A,R6
   \   000031   A2E0         MOV     C,0xE0 /* A   */.0
   \   000033   E4           CLR     A
   \   000034   33           RLC     A
   \   000035   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   000038   54FE         ANL     A,#0xfe
   \   00003A   12....       LCALL   ?Subroutine74 & 0xFFFF
   1488          			com_rslt = bme280_get_power_mode(&v_prev_pow_mode_u8);
   \                     ??CrossCallReturnLabel_211:
   \   00003D   12....       LCALL   ?XSTACK_DISP101_8
   \   000040   12....       LCALL   `??bme280_get_power_mode::?relay`; Banked call to: bme280_get_power_mode
   \   000043   E9           MOV     A,R1
   \   000044   FF           MOV     R7,A
   1489          			if (v_prev_pow_mode_u8 != BME280_SLEEP_MODE) {
   \   000045   7402         MOV     A,#0x2
   \   000047   12....       LCALL   ?XSTACK_DISP0_8
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   6050         JZ      ??bme280_set_spi3_1
   1490          				com_rslt += bme280_set_soft_rst();
   \   00004D                ; Setup parameters for call to function bme280_set_soft_rst
   \   00004D   12....       LCALL   `??bme280_set_soft_rst::?relay`; Banked call to: bme280_set_soft_rst
   \   000050   E9           MOV     A,R1
   \   000051   F5..         MOV     ?V0,A
   1491          				p_bme280->delay_msec(BME280_3MS_DELAY);
   \   000053                ; Setup parameters for indirect call
   \   000053   90....       MOV     DPTR,#__Constant_3
   \   000056   12....       LCALL   ?XLOAD_R2345
   \   000059   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   00005C   12....       LCALL   ?CALL_IND
   1492          				/* write previous and updated value of
   1493          				configuration register*/
   1494          				com_rslt += bme280_write_register(
   1495          					BME280_CONFIG_REG,
   1496          				&v_data_u8, BME280_GEN_READ_WRITE_DATA_LENGTH);
   \   00005F                ; Setup parameters for call to function bme280_write_register
   \   00005F   7C01         MOV     R4,#0x1
   \   000061   AA..         MOV     R2,?XSP + 0
   \   000063   AB..         MOV     R3,?XSP + 1
   \   000065   79F5         MOV     R1,#-0xb
   \   000067   12....       LCALL   `??bme280_write_register::?relay`; Banked call to: bme280_write_register
   \   00006A   12....       LCALL   ?Subroutine25 & 0xFFFF
   1497          				/* write previous value of
   1498          				humidity oversampling*/
   1499          				v_pre_ctrl_hum_value_u8 =
   1500          				p_bme280->ctrl_hum_reg;
   1501          				com_rslt +=  bme280_write_register(
   1502          					BME280_CTRL_HUMIDITY_REG,
   1503          				&v_pre_ctrl_hum_value_u8,
   1504          				BME280_GEN_READ_WRITE_DATA_LENGTH);
   1505          				/* write previous value of
   1506          				control measurement register*/
   1507          				pre_ctrl_meas_value =
   1508          				p_bme280->ctrl_meas_reg;
   1509          				com_rslt += bme280_write_register(
   1510          					BME280_CTRL_MEAS_REG,
   1511          				&pre_ctrl_meas_value,
   1512          				BME280_GEN_READ_WRITE_DATA_LENGTH);
   1513          			} else {
   \                     ??CrossCallReturnLabel_361:
   \   00006D   C0E0         PUSH    A
   \   00006F   7401         MOV     A,#0x1
   \   000071   12....       LCALL   ?XSTACK_DISP0_8
   \   000074   D0E0         POP     A
   \   000076   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   000079   12....       LCALL   ?XSTACK_DISP101_8
   \   00007C   79F2         MOV     R1,#-0xe
   \   00007E   12....       LCALL   `??bme280_write_register::?relay`; Banked call to: bme280_write_register
   \   000081   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_338:
   \   000084   C0E0         PUSH    A
   \   000086   7403         MOV     A,#0x3
   \   000088   12....       LCALL   ?XSTACK_DISP0_8
   \   00008B   D0E0         POP     A
   \   00008D   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000090   12....       LCALL   ?XSTACK_DISP101_8
   \   000093   79F4         MOV     R1,#-0xc
   \   000095   12....       LCALL   `??bme280_write_register::?relay`; Banked call to: bme280_write_register
   \   000098   12....       LCALL   ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_221:
   \   00009B   8007         SJMP    ??bme280_set_spi3_2
   1514          				com_rslt =
   1515          				p_bme280->BME280_BUS_WRITE_FUNC(
   1516          				p_bme280->dev_addr,
   1517          				BME280_CONFIG_REG_SPI3_ENABLE__REG,
   1518          				&v_data_u8, BME280_GEN_READ_WRITE_DATA_LENGTH);
   \                     ??bme280_set_spi3_1:
   \   00009D                ; Setup parameters for indirect call
   \   00009D   12....       LCALL   ?Subroutine22 & 0xFFFF
   1519          			}
   \                     ??CrossCallReturnLabel_312:
   \   0000A0   12....       LCALL   ?CALL_IND
   \   0000A3   E9           MOV     A,R1
   \                     ??bme280_set_spi3_2:
   \   0000A4   FF           MOV     R7,A
   1520          			/* read the control measurement register value*/
   1521          			com_rslt += bme280_read_register(
   1522          				BME280_CTRL_MEAS_REG,
   1523          			&v_data_u8, BME280_GEN_READ_WRITE_DATA_LENGTH);
   \   0000A5                ; Setup parameters for call to function bme280_read_register
   \   0000A5   7C01         MOV     R4,#0x1
   \   0000A7   AA..         MOV     R2,?XSP + 0
   \   0000A9   AB..         MOV     R3,?XSP + 1
   \   0000AB   79F4         MOV     R1,#-0xc
   \   0000AD   12....       LCALL   `??bme280_read_register::?relay`; Banked call to: bme280_read_register
   \   0000B0   E9           MOV     A,R1
   \   0000B1   F5..         MOV     ?V0,A
   1524          			p_bme280->ctrl_meas_reg = v_data_u8;
   \   0000B3   85..82       MOV     DPL,?XSP + 0
   \   0000B6   85..83       MOV     DPH,?XSP + 1
   \   0000B9   E0           MOVX    A,@DPTR
   \   0000BA   C0E0         PUSH    A
   \   0000BC   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   0000BF   D0E0         POP     A
   \   0000C1   12....       LCALL   ?Subroutine11 & 0xFFFF
   1525          			/* read the control humidity register value*/
   1526          			com_rslt += bme280_read_register(
   1527          				BME280_CTRL_HUMIDITY_REG,
   1528          			&v_data_u8, BME280_GEN_READ_WRITE_DATA_LENGTH);
   \                     ??CrossCallReturnLabel_12:
   \   0000C4   12....       LCALL   `??bme280_read_register::?relay`; Banked call to: bme280_read_register
   \   0000C7   E9           MOV     A,R1
   \   0000C8   F5..         MOV     ?V1,A
   1529          			p_bme280->ctrl_hum_reg = v_data_u8;
   \   0000CA   85..82       MOV     DPL,?XSP + 0
   \   0000CD   85..83       MOV     DPH,?XSP + 1
   \   0000D0   E0           MOVX    A,@DPTR
   \   0000D1   C0E0         PUSH    A
   \   0000D3   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   0000D6   D0E0         POP     A
   \   0000D8   12....       LCALL   ?Subroutine10 & 0xFFFF
   1530          			/* read the control configuration register value*/
   1531          			com_rslt += bme280_read_register(
   1532          				BME280_CONFIG_REG,
   1533          			&v_data_u8, BME280_GEN_READ_WRITE_DATA_LENGTH);
   \                     ??CrossCallReturnLabel_4:
   \   0000DB   12....       LCALL   `??bme280_read_register::?relay`; Banked call to: bme280_read_register
   \   0000DE   E9           MOV     A,R1
   \   0000DF   F8           MOV     R0,A
   1534          			p_bme280->config_reg = v_data_u8;
   \   0000E0   85..82       MOV     DPL,?XSP + 0
   \   0000E3   85..83       MOV     DPH,?XSP + 1
   \   0000E6   E0           MOVX    A,@DPTR
   \   0000E7   C0E0         PUSH    A
   \   0000E9   12....       LCALL   ?Subroutine41 & 0xFFFF
   1535          		}
   \                     ??CrossCallReturnLabel_113:
   \   0000EC   D0E0         POP     A
   \   0000EE   12....       LCALL   ?Subroutine17 & 0xFFFF
   1536          	return com_rslt;
   \                     ??CrossCallReturnLabel_25:
   \   0000F1   02....       LJMP    ?Subroutine6 & 0xFFFF
   1537          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine78:
   \   000000   E5..         MOV     A,?V0
   \   000002   25..         ADD     A,?V1
   \   000004   25..         ADD     A,?V2
   \   000006   29           ADD     A,R1
   \   000007   2F           ADD     A,R7
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   F8           MOV     R0,A
   \   000001   12....       LCALL   ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_259:
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   EF           MOV     A,R7
   \   000002   25..         ADD     A,?V0
   \   000004   25..         ADD     A,?V1
   \   000006   28           ADD     A,R0
   \   000007   F9           MOV     R1,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   E9           MOV     A,R1
   \   000001   F5..         MOV     ?V1,A
   \   000003                REQUIRE ??Subroutine122_0
   \   000003                ; // Fall through to label ??Subroutine122_0
   1538          
   1539          /*!
   1540           *	@brief This API is used to reads filter setting
   1541           *	in the register 0xF5 bit 3 and 4
   1542           *
   1543           *
   1544           *
   1545           *	@param v_value_u8 : The value of IIR filter coefficient
   1546           *
   1547           *	value	    |	Filter coefficient
   1548           * -------------|-------------------------
   1549           *	0x00        | BME280_FILTER_COEFF_OFF
   1550           *	0x01        | BME280_FILTER_COEFF_2
   1551           *	0x02        | BME280_FILTER_COEFF_4
   1552           *	0x03        | BME280_FILTER_COEFF_8
   1553           *	0x04        | BME280_FILTER_COEFF_16
   1554           *
   1555           *	@return results of bus communication function
   1556           *	@retval 0 -> Success
   1557           *	@retval -1 -> Error
   1558           *
   1559           *
   1560          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1561          BME280_RETURN_FUNCTION_TYPE bme280_get_filter(u8 *v_value_u8)
   \                     bme280_get_filter:
   1562          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine9 & 0xFFFF
   1563          	/* used to return the communication result*/
   1564          	BME280_RETURN_FUNCTION_TYPE com_rslt = ERROR;
   1565          	u8 v_data_u8 = BME280_INIT_VALUE;
   1566          	/* check the p_bme280 structure pointer as NULL*/
   1567          	if (p_bme280 == BME280_NULL) {
   \                     ??CrossCallReturnLabel_349:
   \   00000D   7004         JNZ     ??bme280_get_filter_0
   1568          		return E_BME280_NULL_PTR;
   \   00000F   7981         MOV     R1,#-0x7f
   \   000011   8022         SJMP    ??bme280_get_filter_1
   1569          		} else {
   1570          			com_rslt = p_bme280->BME280_BUS_READ_FUNC(
   1571          			p_bme280->dev_addr,
   1572          			BME280_CONFIG_REG_FILTER__REG,
   1573          			&v_data_u8, BME280_GEN_READ_WRITE_DATA_LENGTH);
   \                     ??bme280_get_filter_0:
   \   000013                ; Setup parameters for indirect call
   \   000013   7B01         MOV     R3,#0x1
   \   000015   AC..         MOV     R4,?XSP + 0
   \   000017   AD..         MOV     R5,?XSP + 1
   \   000019   7AF5         MOV     R2,#-0xb
   \   00001B   12....       LCALL   ??Subroutine115_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_324:
   \   00001E   12....       LCALL   ?CALL_IND
   \   000021   E9           MOV     A,R1
   \   000022   F9           MOV     R1,A
   1574          			*v_value_u8 = BME280_GET_BITSLICE(v_data_u8,
   1575          			BME280_CONFIG_REG_FILTER);
   \   000023   85..82       MOV     DPL,?XSP + 0
   \   000026   85..83       MOV     DPH,?XSP + 1
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   13           RRC     A
   \   00002B   13           RRC     A
   \   00002C   543F         ANL     A,#0x3f
   \   00002E   5407         ANL     A,#0x7
   \   000030   8E82         MOV     DPL,R6
   \   000032   8F83         MOV     DPH,R7
   \   000034   F0           MOVX    @DPTR,A
   1576          		}
   1577          	return com_rslt;
   \                     ??bme280_get_filter_1:
   \   000035                REQUIRE ?Subroutine1
   \   000035                ; // Fall through to label ?Subroutine1
   1578          }
   1579          
   1580          /*!
   1581           *	@brief This API is used to write filter setting
   1582           *	in the register 0xF5 bit 3 and 4
   1583           *
   1584           *
   1585           *
   1586           *	@param v_value_u8 : The value of IIR filter coefficient
   1587           *
   1588           *	value	    |	Filter coefficient
   1589           * -------------|-------------------------
   1590           *	0x00        | BME280_FILTER_COEFF_OFF
   1591           *	0x01        | BME280_FILTER_COEFF_2
   1592           *	0x02        | BME280_FILTER_COEFF_4
   1593           *	0x03        | BME280_FILTER_COEFF_8
   1594           *	0x04        | BME280_FILTER_COEFF_16
   1595           *
   1596           *	@return results of bus communication function
   1597           *	@retval 0 -> Success
   1598           *	@retval -1 -> Error
   1599           *
   1600           *
   1601          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1602          BME280_RETURN_FUNCTION_TYPE bme280_set_filter(u8 v_value_u8)
   \                     bme280_set_filter:
   1603          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   1604          	/* used to return the communication result*/
   1605          	BME280_RETURN_FUNCTION_TYPE com_rslt = ERROR;
   1606          	u8 v_data_u8 = BME280_INIT_VALUE;
   \   00000C   85..82       MOV     DPL,?XSP + 0
   \   00000F   85..83       MOV     DPH,?XSP + 1
   \   000012   E4           CLR     A
   \   000013   F0           MOVX    @DPTR,A
   1607          	u8 pre_ctrl_meas_value = BME280_INIT_VALUE;
   \   000014   7403         MOV     A,#0x3
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   E4           CLR     A
   \   00001A   F0           MOVX    @DPTR,A
   1608          	u8 v_prev_pow_mode_u8 = BME280_INIT_VALUE;
   \   00001B   7402         MOV     A,#0x2
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   E4           CLR     A
   \   000021   F0           MOVX    @DPTR,A
   1609          	u8 v_pre_ctrl_hum_value_u8 =  BME280_INIT_VALUE;
   \   000022   04           INC     A
   \   000023   12....       LCALL   ?XSTACK_DISP0_8
   \   000026   12....       LCALL   ??Subroutine120_0 & 0xFFFF
   1610          	/* check the p_bme280 structure pointer as NULL*/
   1611          	if (p_bme280 == BME280_NULL) {
   \                     ??CrossCallReturnLabel_355:
   \   000029   7005         JNZ     ??bme280_set_filter_0
   1612          		return E_BME280_NULL_PTR;
   \   00002B   7981         MOV     R1,#-0x7f
   \   00002D   02....       LJMP    ??CrossCallReturnLabel_26 & 0xFFFF
   1613          		} else {
   1614          			v_data_u8 = p_bme280->config_reg;
   1615          			v_data_u8 =
   1616          			BME280_SET_BITSLICE(v_data_u8,
   1617          			BME280_CONFIG_REG_FILTER, v_value_u8);
   \                     ??bme280_set_filter_0:
   \   000030   EE           MOV     A,R6
   \   000031   33           RLC     A
   \   000032   33           RLC     A
   \   000033   54FC         ANL     A,#0xfc
   \   000035   541C         ANL     A,#0x1c
   \   000037   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   00003A   54E3         ANL     A,#0xe3
   \   00003C   12....       LCALL   ?Subroutine74 & 0xFFFF
   1618          			com_rslt = bme280_get_power_mode(&v_prev_pow_mode_u8);
   \                     ??CrossCallReturnLabel_212:
   \   00003F   12....       LCALL   ?XSTACK_DISP101_8
   \   000042   12....       LCALL   `??bme280_get_power_mode::?relay`; Banked call to: bme280_get_power_mode
   \   000045   E9           MOV     A,R1
   \   000046   FF           MOV     R7,A
   1619          			if (v_prev_pow_mode_u8 != BME280_SLEEP_MODE) {
   \   000047   7402         MOV     A,#0x2
   \   000049   12....       LCALL   ?XSTACK_DISP0_8
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   6050         JZ      ??bme280_set_filter_1
   1620          				com_rslt += bme280_set_soft_rst();
   \   00004F                ; Setup parameters for call to function bme280_set_soft_rst
   \   00004F   12....       LCALL   `??bme280_set_soft_rst::?relay`; Banked call to: bme280_set_soft_rst
   \   000052   E9           MOV     A,R1
   \   000053   F5..         MOV     ?V0,A
   1621          				p_bme280->delay_msec(BME280_3MS_DELAY);
   \   000055                ; Setup parameters for indirect call
   \   000055   90....       MOV     DPTR,#__Constant_3
   \   000058   12....       LCALL   ?XLOAD_R2345
   \   00005B   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   00005E   12....       LCALL   ?CALL_IND
   1622          				/* write previous and updated value of
   1623          				configuration register*/
   1624          				com_rslt += bme280_write_register(
   1625          					BME280_CONFIG_REG,
   1626          				&v_data_u8, BME280_GEN_READ_WRITE_DATA_LENGTH);
   \   000061                ; Setup parameters for call to function bme280_write_register
   \   000061   7C01         MOV     R4,#0x1
   \   000063   AA..         MOV     R2,?XSP + 0
   \   000065   AB..         MOV     R3,?XSP + 1
   \   000067   79F5         MOV     R1,#-0xb
   \   000069   12....       LCALL   `??bme280_write_register::?relay`; Banked call to: bme280_write_register
   \   00006C   12....       LCALL   ?Subroutine25 & 0xFFFF
   1627          				/* write previous value of
   1628          				humidity oversampling*/
   1629          				v_pre_ctrl_hum_value_u8 =
   1630          				p_bme280->ctrl_hum_reg;
   1631          				com_rslt += bme280_write_register(
   1632          					BME280_CTRL_HUMIDITY_REG,
   1633          				&v_pre_ctrl_hum_value_u8,
   1634          				BME280_GEN_READ_WRITE_DATA_LENGTH);
   1635          				/* write previous value of
   1636          				control measurement register*/
   1637          				pre_ctrl_meas_value =
   1638          				p_bme280->ctrl_meas_reg;
   1639          				com_rslt += bme280_write_register(
   1640          					BME280_CTRL_MEAS_REG,
   1641          				&pre_ctrl_meas_value,
   1642          				BME280_GEN_READ_WRITE_DATA_LENGTH);
   1643          			} else {
   \                     ??CrossCallReturnLabel_362:
   \   00006F   C0E0         PUSH    A
   \   000071   7401         MOV     A,#0x1
   \   000073   12....       LCALL   ?XSTACK_DISP0_8
   \   000076   D0E0         POP     A
   \   000078   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   00007B   12....       LCALL   ?XSTACK_DISP101_8
   \   00007E   79F2         MOV     R1,#-0xe
   \   000080   12....       LCALL   `??bme280_write_register::?relay`; Banked call to: bme280_write_register
   \   000083   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_339:
   \   000086   C0E0         PUSH    A
   \   000088   7403         MOV     A,#0x3
   \   00008A   12....       LCALL   ?XSTACK_DISP0_8
   \   00008D   D0E0         POP     A
   \   00008F   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   000092   12....       LCALL   ?XSTACK_DISP101_8
   \   000095   79F4         MOV     R1,#-0xc
   \   000097   12....       LCALL   `??bme280_write_register::?relay`; Banked call to: bme280_write_register
   \   00009A   12....       LCALL   ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_222:
   \   00009D   8007         SJMP    ??bme280_set_filter_2
   1644          				com_rslt =
   1645          				p_bme280->BME280_BUS_WRITE_FUNC(
   1646          				p_bme280->dev_addr,
   1647          				BME280_CONFIG_REG_FILTER__REG,
   1648          				&v_data_u8, BME280_GEN_READ_WRITE_DATA_LENGTH);
   \                     ??bme280_set_filter_1:
   \   00009F                ; Setup parameters for indirect call
   \   00009F   12....       LCALL   ?Subroutine22 & 0xFFFF
   1649          			}
   \                     ??CrossCallReturnLabel_313:
   \   0000A2   12....       LCALL   ?CALL_IND
   \   0000A5   E9           MOV     A,R1
   \                     ??bme280_set_filter_2:
   \   0000A6   FF           MOV     R7,A
   1650          			/* read the control measurement register value*/
   1651          			com_rslt += bme280_read_register(BME280_CTRL_MEAS_REG,
   1652          			&v_data_u8, BME280_GEN_READ_WRITE_DATA_LENGTH);
   \   0000A7                ; Setup parameters for call to function bme280_read_register
   \   0000A7   7C01         MOV     R4,#0x1
   \   0000A9   AA..         MOV     R2,?XSP + 0
   \   0000AB   AB..         MOV     R3,?XSP + 1
   \   0000AD   79F4         MOV     R1,#-0xc
   \   0000AF   12....       LCALL   `??bme280_read_register::?relay`; Banked call to: bme280_read_register
   \   0000B2   E9           MOV     A,R1
   \   0000B3   F5..         MOV     ?V0,A
   1653          			p_bme280->ctrl_meas_reg = v_data_u8;
   \   0000B5   85..82       MOV     DPL,?XSP + 0
   \   0000B8   85..83       MOV     DPH,?XSP + 1
   \   0000BB   E0           MOVX    A,@DPTR
   \   0000BC   C0E0         PUSH    A
   \   0000BE   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   0000C1   D0E0         POP     A
   \   0000C3   12....       LCALL   ?Subroutine11 & 0xFFFF
   1654          			/* read the control humidity register value*/
   1655          			com_rslt += bme280_read_register(
   1656          			BME280_CTRL_HUMIDITY_REG,
   1657          			&v_data_u8, BME280_GEN_READ_WRITE_DATA_LENGTH);
   \                     ??CrossCallReturnLabel_13:
   \   0000C6   12....       LCALL   `??bme280_read_register::?relay`; Banked call to: bme280_read_register
   \   0000C9   E9           MOV     A,R1
   \   0000CA   F5..         MOV     ?V1,A
   1658          			p_bme280->ctrl_hum_reg = v_data_u8;
   \   0000CC   85..82       MOV     DPL,?XSP + 0
   \   0000CF   85..83       MOV     DPH,?XSP + 1
   \   0000D2   E0           MOVX    A,@DPTR
   \   0000D3   C0E0         PUSH    A
   \   0000D5   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   0000D8   D0E0         POP     A
   \   0000DA   12....       LCALL   ?Subroutine10 & 0xFFFF
   1659          			/* read the configuration register value*/
   1660          			com_rslt += bme280_read_register(BME280_CONFIG_REG,
   1661          			&v_data_u8, BME280_GEN_READ_WRITE_DATA_LENGTH);
   \                     ??CrossCallReturnLabel_5:
   \   0000DD   12....       LCALL   `??bme280_read_register::?relay`; Banked call to: bme280_read_register
   \   0000E0   E9           MOV     A,R1
   \   0000E1   F8           MOV     R0,A
   1662          			p_bme280->config_reg = v_data_u8;
   \   0000E2   85..82       MOV     DPL,?XSP + 0
   \   0000E5   85..83       MOV     DPH,?XSP + 1
   \   0000E8   E0           MOVX    A,@DPTR
   \   0000E9   C0E0         PUSH    A
   \   0000EB   12....       LCALL   ?Subroutine41 & 0xFFFF
   1663          		}
   \                     ??CrossCallReturnLabel_114:
   \   0000EE   D0E0         POP     A
   \   0000F0   12....       LCALL   ?Subroutine17 & 0xFFFF
   1664          	return com_rslt;
   \                     ??CrossCallReturnLabel_26:
   \   0000F3                REQUIRE ?Subroutine6
   \   0000F3                ; // Fall through to label ?Subroutine6
   1665          }
   1666          
   1667          /*!
   1668           *	@brief This API used to Read the
   1669           *	standby duration time from the sensor in the register 0xF5 bit 5 to 7
   1670           *
   1671           *	@param v_standby_durn_u8 : The value of standby duration time value.
   1672           *  value       | standby duration
   1673           * -------------|-----------------------
   1674           *    0x00      | BME280_STANDBY_TIME_1_MS
   1675           *    0x01      | BME280_STANDBY_TIME_63_MS
   1676           *    0x02      | BME280_STANDBY_TIME_125_MS
   1677           *    0x03      | BME280_STANDBY_TIME_250_MS
   1678           *    0x04      | BME280_STANDBY_TIME_500_MS
   1679           *    0x05      | BME280_STANDBY_TIME_1000_MS
   1680           *    0x06      | BME280_STANDBY_TIME_2000_MS
   1681           *    0x07      | BME280_STANDBY_TIME_4000_MS
   1682           *
   1683           *
   1684           *	@return results of bus communication function
   1685           *	@retval 0 -> Success
   1686           *	@retval -1 -> Error
   1687           *
   1688           *
   1689          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1690          BME280_RETURN_FUNCTION_TYPE bme280_get_standby_durn(u8 *v_standby_durn_u8)
   \                     bme280_get_standby_durn:
   1691          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine9 & 0xFFFF
   1692          	/* used to return the communication result*/
   1693          	BME280_RETURN_FUNCTION_TYPE com_rslt = ERROR;
   1694          	u8 v_data_u8 = BME280_INIT_VALUE;
   1695          	/* check the p_bme280 structure pointer as NULL*/
   1696          	if (p_bme280 == BME280_NULL) {
   \                     ??CrossCallReturnLabel_350:
   \   00000D   7004         JNZ     ??bme280_get_standby_durn_0
   1697          		return E_BME280_NULL_PTR;
   \   00000F   7981         MOV     R1,#-0x7f
   \   000011   8020         SJMP    ??bme280_get_standby_durn_1
   1698          		} else {
   1699          			com_rslt = p_bme280->BME280_BUS_READ_FUNC(
   1700          			p_bme280->dev_addr,
   1701          			BME280_CONFIG_REG_TSB__REG,
   1702          			&v_data_u8, BME280_GEN_READ_WRITE_DATA_LENGTH);
   \                     ??bme280_get_standby_durn_0:
   \   000013                ; Setup parameters for indirect call
   \   000013   7B01         MOV     R3,#0x1
   \   000015   AC..         MOV     R4,?XSP + 0
   \   000017   AD..         MOV     R5,?XSP + 1
   \   000019   7AF5         MOV     R2,#-0xb
   \   00001B   12....       LCALL   ??Subroutine115_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_325:
   \   00001E   12....       LCALL   ?CALL_IND
   \   000021   E9           MOV     A,R1
   \   000022   F9           MOV     R1,A
   1703          			*v_standby_durn_u8 = BME280_GET_BITSLICE(
   1704          			v_data_u8, BME280_CONFIG_REG_TSB);
   \   000023   85..82       MOV     DPL,?XSP + 0
   \   000026   85..83       MOV     DPH,?XSP + 1
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   C4           SWAP    A
   \   00002B   13           RRC     A
   \   00002C   5407         ANL     A,#0x7
   \   00002E   8E82         MOV     DPL,R6
   \   000030   8F83         MOV     DPH,R7
   \   000032   F0           MOVX    @DPTR,A
   1705          		}
   1706          	return com_rslt;
   \                     ??bme280_get_standby_durn_1:
   \   000033   02....       LJMP    ?Subroutine1 & 0xFFFF
   1707          }
   1708          
   1709          /*!
   1710           *	@brief This API used to write the
   1711           *	standby duration time from the sensor in the register 0xF5 bit 5 to 7
   1712           *
   1713           *	@param v_standby_durn_u8 : The value of standby duration time value.
   1714           *  value       | standby duration
   1715           * -------------|-----------------------
   1716           *    0x00      | BME280_STANDBY_TIME_1_MS
   1717           *    0x01      | BME280_STANDBY_TIME_63_MS
   1718           *    0x02      | BME280_STANDBY_TIME_125_MS
   1719           *    0x03      | BME280_STANDBY_TIME_250_MS
   1720           *    0x04      | BME280_STANDBY_TIME_500_MS
   1721           *    0x05      | BME280_STANDBY_TIME_1000_MS
   1722           *    0x06      | BME280_STANDBY_TIME_2000_MS
   1723           *    0x07      | BME280_STANDBY_TIME_4000_MS
   1724           *
   1725           *	@note Normal mode comprises an automated perpetual
   1726           *	cycling between an (active)
   1727           *	Measurement period and an (inactive) standby period.
   1728           *	@note The standby time is determined by
   1729           *	the contents of the register t_sb.
   1730           *	Standby time can be set using BME280_STANDBY_TIME_125_MS.
   1731           *
   1732           *	@note Usage Hint : bme280_set_standby_durn(BME280_STANDBY_TIME_125_MS)
   1733           *
   1734           *
   1735           *
   1736           *	@return results of bus communication function
   1737           *	@retval 0 -> Success
   1738           *	@retval -1 -> Error
   1739           *
   1740           *
   1741          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1742          BME280_RETURN_FUNCTION_TYPE bme280_set_standby_durn(u8 v_standby_durn_u8)
   \                     bme280_set_standby_durn:
   1743          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   1744          	/* used to return the communication result*/
   1745          	BME280_RETURN_FUNCTION_TYPE com_rslt = ERROR;
   1746          	u8 v_data_u8 = BME280_INIT_VALUE;
   \   00000C   85..82       MOV     DPL,?XSP + 0
   \   00000F   85..83       MOV     DPH,?XSP + 1
   \   000012   E4           CLR     A
   \   000013   F0           MOVX    @DPTR,A
   1747          	u8 pre_ctrl_meas_value = BME280_INIT_VALUE;
   \   000014   7403         MOV     A,#0x3
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   E4           CLR     A
   \   00001A   F0           MOVX    @DPTR,A
   1748          	u8 v_prev_pow_mode_u8 = BME280_INIT_VALUE;
   \   00001B   7402         MOV     A,#0x2
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   E4           CLR     A
   \   000021   F0           MOVX    @DPTR,A
   1749          	u8 v_pre_ctrl_hum_value_u8 = BME280_INIT_VALUE;
   \   000022   04           INC     A
   \   000023   12....       LCALL   ?XSTACK_DISP0_8
   \   000026   12....       LCALL   ??Subroutine120_0 & 0xFFFF
   1750          	/* check the p_bme280 structure pointer as NULL*/
   1751          	if (p_bme280 == BME280_NULL) {
   \                     ??CrossCallReturnLabel_356:
   \   000029   7005         JNZ     ??bme280_set_standby_durn_0
   1752          		return E_BME280_NULL_PTR;
   \   00002B   7981         MOV     R1,#-0x7f
   \   00002D   02....       LJMP    ??CrossCallReturnLabel_27 & 0xFFFF
   1753          		} else {
   1754          			v_data_u8 = p_bme280->config_reg;
   1755          			v_data_u8 =
   1756          			BME280_SET_BITSLICE(v_data_u8,
   1757          			BME280_CONFIG_REG_TSB, v_standby_durn_u8);
   \                     ??bme280_set_standby_durn_0:
   \   000030   EE           MOV     A,R6
   \   000031   C4           SWAP    A
   \   000032   33           RLC     A
   \   000033   54E0         ANL     A,#0xe0
   \   000035   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_109:
   \   000038   541F         ANL     A,#0x1f
   \   00003A   12....       LCALL   ?Subroutine74 & 0xFFFF
   1758          			com_rslt = bme280_get_power_mode(&v_prev_pow_mode_u8);
   \                     ??CrossCallReturnLabel_213:
   \   00003D   12....       LCALL   ?XSTACK_DISP101_8
   \   000040   12....       LCALL   `??bme280_get_power_mode::?relay`; Banked call to: bme280_get_power_mode
   \   000043   E9           MOV     A,R1
   \   000044   FF           MOV     R7,A
   1759          			if (v_prev_pow_mode_u8 != BME280_SLEEP_MODE) {
   \   000045   7402         MOV     A,#0x2
   \   000047   12....       LCALL   ?XSTACK_DISP0_8
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   6050         JZ      ??bme280_set_standby_durn_1
   1760          				com_rslt += bme280_set_soft_rst();
   \   00004D                ; Setup parameters for call to function bme280_set_soft_rst
   \   00004D   12....       LCALL   `??bme280_set_soft_rst::?relay`; Banked call to: bme280_set_soft_rst
   \   000050   E9           MOV     A,R1
   \   000051   F5..         MOV     ?V0,A
   1761          				p_bme280->delay_msec(BME280_3MS_DELAY);
   \   000053                ; Setup parameters for indirect call
   \   000053   90....       MOV     DPTR,#__Constant_3
   \   000056   12....       LCALL   ?XLOAD_R2345
   \   000059   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   00005C   12....       LCALL   ?CALL_IND
   1762          				/* write previous and updated value of
   1763          				configuration register*/
   1764          				com_rslt += bme280_write_register(
   1765          					BME280_CONFIG_REG,
   1766          				&v_data_u8, BME280_GEN_READ_WRITE_DATA_LENGTH);
   \   00005F                ; Setup parameters for call to function bme280_write_register
   \   00005F   7C01         MOV     R4,#0x1
   \   000061   AA..         MOV     R2,?XSP + 0
   \   000063   AB..         MOV     R3,?XSP + 1
   \   000065   79F5         MOV     R1,#-0xb
   \   000067   12....       LCALL   `??bme280_write_register::?relay`; Banked call to: bme280_write_register
   \   00006A   12....       LCALL   ?Subroutine25 & 0xFFFF
   1767          				/* write previous value of
   1768          				humidity oversampling*/
   1769          				v_pre_ctrl_hum_value_u8 =
   1770          				p_bme280->ctrl_hum_reg;
   1771          				com_rslt += bme280_write_register(
   1772          					BME280_CTRL_HUMIDITY_REG,
   1773          				&v_pre_ctrl_hum_value_u8,
   1774          				BME280_GEN_READ_WRITE_DATA_LENGTH);
   1775          				/* write previous value of control
   1776          				measurement register*/
   1777          				pre_ctrl_meas_value =
   1778          				p_bme280->ctrl_meas_reg;
   1779          				com_rslt += bme280_write_register(
   1780          					BME280_CTRL_MEAS_REG,
   1781          				&pre_ctrl_meas_value,
   1782          				BME280_GEN_READ_WRITE_DATA_LENGTH);
   1783          			} else {
   \                     ??CrossCallReturnLabel_363:
   \   00006D   C0E0         PUSH    A
   \   00006F   7401         MOV     A,#0x1
   \   000071   12....       LCALL   ?XSTACK_DISP0_8
   \   000074   D0E0         POP     A
   \   000076   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   000079   12....       LCALL   ?XSTACK_DISP101_8
   \   00007C   79F2         MOV     R1,#-0xe
   \   00007E   12....       LCALL   `??bme280_write_register::?relay`; Banked call to: bme280_write_register
   \   000081   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_340:
   \   000084   C0E0         PUSH    A
   \   000086   7403         MOV     A,#0x3
   \   000088   12....       LCALL   ?XSTACK_DISP0_8
   \   00008B   D0E0         POP     A
   \   00008D   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   000090   12....       LCALL   ?XSTACK_DISP101_8
   \   000093   79F4         MOV     R1,#-0xc
   \   000095   12....       LCALL   `??bme280_write_register::?relay`; Banked call to: bme280_write_register
   \   000098   12....       LCALL   ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_223:
   \   00009B   8007         SJMP    ??bme280_set_standby_durn_2
   1784          				com_rslt =
   1785          				p_bme280->BME280_BUS_WRITE_FUNC(
   1786          				p_bme280->dev_addr,
   1787          				BME280_CONFIG_REG_TSB__REG,
   1788          				&v_data_u8, BME280_GEN_READ_WRITE_DATA_LENGTH);
   \                     ??bme280_set_standby_durn_1:
   \   00009D                ; Setup parameters for indirect call
   \   00009D   12....       LCALL   ?Subroutine22 & 0xFFFF
   1789          			}
   \                     ??CrossCallReturnLabel_314:
   \   0000A0   12....       LCALL   ?CALL_IND
   \   0000A3   E9           MOV     A,R1
   \                     ??bme280_set_standby_durn_2:
   \   0000A4   FF           MOV     R7,A
   1790          			/* read the control measurement register value*/
   1791          			com_rslt += bme280_read_register(BME280_CTRL_MEAS_REG,
   1792          			&v_data_u8, BME280_GEN_READ_WRITE_DATA_LENGTH);
   \   0000A5                ; Setup parameters for call to function bme280_read_register
   \   0000A5   7C01         MOV     R4,#0x1
   \   0000A7   AA..         MOV     R2,?XSP + 0
   \   0000A9   AB..         MOV     R3,?XSP + 1
   \   0000AB   79F4         MOV     R1,#-0xc
   \   0000AD   12....       LCALL   `??bme280_read_register::?relay`; Banked call to: bme280_read_register
   \   0000B0   E9           MOV     A,R1
   \   0000B1   F5..         MOV     ?V0,A
   1793          			p_bme280->ctrl_meas_reg = v_data_u8;
   \   0000B3   85..82       MOV     DPL,?XSP + 0
   \   0000B6   85..83       MOV     DPH,?XSP + 1
   \   0000B9   E0           MOVX    A,@DPTR
   \   0000BA   C0E0         PUSH    A
   \   0000BC   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   0000BF   D0E0         POP     A
   \   0000C1   12....       LCALL   ?Subroutine11 & 0xFFFF
   1794          			/* read the control humidity register value*/
   1795          			com_rslt += bme280_read_register(
   1796          			BME280_CTRL_HUMIDITY_REG,
   1797          			&v_data_u8, BME280_GEN_READ_WRITE_DATA_LENGTH);
   \                     ??CrossCallReturnLabel_14:
   \   0000C4   12....       LCALL   `??bme280_read_register::?relay`; Banked call to: bme280_read_register
   \   0000C7   E9           MOV     A,R1
   \   0000C8   F5..         MOV     ?V1,A
   1798          			p_bme280->ctrl_hum_reg = v_data_u8;
   \   0000CA   85..82       MOV     DPL,?XSP + 0
   \   0000CD   85..83       MOV     DPH,?XSP + 1
   \   0000D0   E0           MOVX    A,@DPTR
   \   0000D1   C0E0         PUSH    A
   \   0000D3   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   0000D6   D0E0         POP     A
   \   0000D8   12....       LCALL   ?Subroutine10 & 0xFFFF
   1799          			/* read the configuration register value*/
   1800          			com_rslt += bme280_read_register(BME280_CONFIG_REG,
   1801          			&v_data_u8, BME280_GEN_READ_WRITE_DATA_LENGTH);
   \                     ??CrossCallReturnLabel_6:
   \   0000DB   12....       LCALL   `??bme280_read_register::?relay`; Banked call to: bme280_read_register
   \   0000DE   E9           MOV     A,R1
   \   0000DF   F8           MOV     R0,A
   1802          			p_bme280->config_reg = v_data_u8;
   \   0000E0   85..82       MOV     DPL,?XSP + 0
   \   0000E3   85..83       MOV     DPH,?XSP + 1
   \   0000E6   E0           MOVX    A,@DPTR
   \   0000E7   C0E0         PUSH    A
   \   0000E9   12....       LCALL   ?Subroutine41 & 0xFFFF
   1803          		}
   \                     ??CrossCallReturnLabel_115:
   \   0000EC   D0E0         POP     A
   \   0000EE   12....       LCALL   ?Subroutine17 & 0xFFFF
   1804          	return com_rslt;
   \                     ??CrossCallReturnLabel_27:
   \   0000F1   02....       LJMP    ?Subroutine6 & 0xFFFF
   1805          }
   1806          
   1807          /*
   1808           * @brief Writes the working mode to the sensor
   1809           *
   1810           *
   1811           *
   1812           *
   1813           *  @param v_work_mode_u8 : Mode to be set
   1814           *  value    | Working mode
   1815           * ----------|--------------------
   1816           *   0       | BME280_ULTRALOWPOWER_MODE
   1817           *   1       | BME280_LOWPOWER_MODE
   1818           *   2       | BME280_STANDARDRESOLUTION_MODE
   1819           *   3       | BME280_HIGHRESOLUTION_MODE
   1820           *   4       | BME280_ULTRAHIGHRESOLUTION_MODE
   1821           *
   1822           *	@return results of bus communication function
   1823           *	@retval 0 -> Success
   1824           *	@retval -1 -> Error
   1825           *
   1826           *
   1827          */
   1828          /*BME280_RETURN_FUNCTION_TYPE bme280_set_work_mode(u8 v_work_mode_u8)
   1829          {
   1830          BME280_RETURN_FUNCTION_TYPE com_rslt = ERROR;
   1831          u8 v_data_u8 = BME280_INIT_VALUE;
   1832          if (p_bme280 == BME280_NULL) {
   1833          	return E_BME280_NULL_PTR;
   1834          } else {
   1835          	if (v_work_mode_u8 <= BME280_ULTRAHIGHRESOLUTION_MODE) {
   1836          		com_rslt = p_bme280->BME280_BUS_READ_FUNC(
   1837          			p_bme280->dev_addr,	BME280_CTRL_MEAS_REG,
   1838          			&v_data_u8, BME280_GEN_READ_WRITE_DATA_LENGTH);
   1839          		if (com_rslt == SUCCESS) {
   1840          			switch (v_work_mode_u8) {
   1841          			case BME280_ULTRALOWPOWER_MODE:
   1842          				p_bme280->oversamp_temperature =
   1843          				BME280_ULTRALOWPOWER_OSRS_T;
   1844          				p_bme280->osrs_p =
   1845          				BME280_ULTRALOWPOWER_OSRS_P;
   1846          				break;
   1847          			case BME280_LOWPOWER_MODE:
   1848          				p_bme280->oversamp_temperature =
   1849          				BME280_LOWPOWER_OSRS_T;
   1850          				p_bme280->osrs_p = BME280_LOWPOWER_OSRS_P;
   1851          				break;
   1852          			case BME280_STANDARDRESOLUTION_MODE:
   1853          				p_bme280->oversamp_temperature =
   1854          				BME280_STANDARDRESOLUTION_OSRS_T;
   1855          				p_bme280->osrs_p =
   1856          				BME280_STANDARDRESOLUTION_OSRS_P;
   1857          				break;
   1858          			case BME280_HIGHRESOLUTION_MODE:
   1859          				p_bme280->oversamp_temperature =
   1860          				BME280_HIGHRESOLUTION_OSRS_T;
   1861          				p_bme280->osrs_p = BME280_HIGHRESOLUTION_OSRS_P;
   1862          				break;
   1863          			case BME280_ULTRAHIGHRESOLUTION_MODE:
   1864          				p_bme280->oversamp_temperature =
   1865          				BME280_ULTRAHIGHRESOLUTION_OSRS_T;
   1866          				p_bme280->osrs_p =
   1867          				BME280_ULTRAHIGHRESOLUTION_OSRS_P;
   1868          				break;
   1869          			}
   1870          			v_data_u8 = BME280_SET_BITSLICE(v_data_u8,
   1871          				BME280_CTRL_MEAS_REG_OVERSAMP_TEMPERATURE,
   1872          				p_bme280->oversamp_temperature);
   1873          			v_data_u8 = BME280_SET_BITSLICE(v_data_u8,
   1874          				BME280_CTRL_MEAS_REG_OVERSAMP_PRESSURE,
   1875          				p_bme280->osrs_p);
   1876          			com_rslt += p_bme280->BME280_BUS_WRITE_FUNC(
   1877          				p_bme280->dev_addr,	BME280_CTRL_MEAS_REG,
   1878          				&v_data_u8, BME280_GEN_READ_WRITE_DATA_LENGTH);
   1879          		}
   1880          	} else {
   1881          		com_rslt = E_BME280_OUT_OF_RANGE;
   1882          	}
   1883          }
   1884          return com_rslt;
   1885          }*/
   1886          
   1887          /*!
   1888           * @brief This API used to read uncompensated
   1889           * temperature,pressure and humidity in forced mode
   1890           *
   1891           *
   1892           *	@param v_uncom_pressure_s32: The value of uncompensated pressure
   1893           *	@param v_uncom_temperature_s32: The value of uncompensated temperature
   1894           *	@param v_uncom_humidity_s32: The value of uncompensated humidity
   1895           *
   1896           *
   1897           *	@return results of bus communication function
   1898           *	@retval 0 -> Success
   1899           *	@retval -1 -> Error
   1900           *
   1901           *
   1902          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1903          BME280_RETURN_FUNCTION_TYPE
   1904          bme280_get_forced_uncomp_pressure_temperature_humidity(
   \                     bme280_get_forced_uncomp_pressure_temperature_humidity:
   1905          s32 *v_uncom_pressure_s32,
   1906          s32 *v_uncom_temperature_s32, s32 *v_uncom_humidity_s32)
   1907          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV     A,#-0x6
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V4,R2
   \   00000C   8B..         MOV     ?V5,R3
   \   00000E   8C..         MOV     ?V0,R4
   \   000010   8D..         MOV     ?V1,R5
   1908          	/* used to return the communication result*/
   1909          	BME280_RETURN_FUNCTION_TYPE com_rslt = ERROR;
   1910          	u8 v_data_u8 = BME280_INIT_VALUE;
   \   000012   85..82       MOV     DPL,?XSP + 0
   \   000015   85..83       MOV     DPH,?XSP + 1
   \   000018   E4           CLR     A
   \   000019   F0           MOVX    @DPTR,A
   1911          	u8 v_waittime_u8 = BME280_INIT_VALUE;
   \   00001A   7405         MOV     A,#0x5
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   E4           CLR     A
   \   000020   F0           MOVX    @DPTR,A
   1912          	u8 v_prev_pow_mode_u8 = BME280_INIT_VALUE;
   \   000021   7404         MOV     A,#0x4
   \   000023   12....       LCALL   ?XSTACK_DISP0_8
   \   000026   E4           CLR     A
   \   000027   F0           MOVX    @DPTR,A
   1913          	u8 v_mode_u8r = BME280_INIT_VALUE;
   \   000028   7402         MOV     A,#0x2
   \   00002A   12....       LCALL   ?XSTACK_DISP0_8
   \   00002D   E4           CLR     A
   \   00002E   F0           MOVX    @DPTR,A
   1914          	u8 pre_ctrl_config_value = BME280_INIT_VALUE;
   \   00002F   7403         MOV     A,#0x3
   \   000031   12....       LCALL   ?XSTACK_DISP0_8
   \   000034   E4           CLR     A
   \   000035   F0           MOVX    @DPTR,A
   1915          	u8 v_pre_ctrl_hum_value_u8 = BME280_INIT_VALUE;
   \   000036   04           INC     A
   \   000037   12....       LCALL   ?XSTACK_DISP0_8
   \   00003A   12....       LCALL   ??Subroutine120_0 & 0xFFFF
   1916          	/* check the p_bme280 structure pointer as NULL*/
   1917          	if (p_bme280 == BME280_NULL) {
   \                     ??CrossCallReturnLabel_357:
   \   00003D   7005         JNZ     ??bme280_get_forced_uncomp_pressure_temperature_1
   1918          		return E_BME280_NULL_PTR;
   \   00003F   7981         MOV     R1,#-0x7f
   \   000041   02....       LJMP    ??bme280_get_forced_uncomp_pressure_temperature_2 & 0xFFFF
   1919          		} else {
   1920          			v_mode_u8r = p_bme280->ctrl_meas_reg;
   1921          			v_mode_u8r =
   1922          			BME280_SET_BITSLICE(v_mode_u8r,
   1923          			BME280_CTRL_MEAS_REG_POWER_MODE, BME280_FORCED_MODE);
   \                     ??bme280_get_forced_uncomp_pressure_temperature_1:
   \   000044   E0           MOVX    A,@DPTR
   \   000045   C8           XCH     A,R0
   \   000046   242B         ADD     A,#0x2b
   \   000048   12....       LCALL   ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_265:
   \   00004B   54FC         ANL     A,#0xfc
   \   00004D   4401         ORL     A,#0x1
   \   00004F   C0E0         PUSH    A
   \   000051   7402         MOV     A,#0x2
   \   000053   12....       LCALL   ?XSTACK_DISP0_8
   \   000056   D0E0         POP     A
   \   000058   F0           MOVX    @DPTR,A
   1924          			com_rslt = bme280_get_power_mode(&v_prev_pow_mode_u8);
   \   000059                ; Setup parameters for call to function bme280_get_power_mode
   \   000059   7404         MOV     A,#0x4
   \   00005B   12....       LCALL   ?XSTACK_DISP101_8
   \   00005E   12....       LCALL   `??bme280_get_power_mode::?relay`; Banked call to: bme280_get_power_mode
   \   000061   E9           MOV     A,R1
   \   000062   FE           MOV     R6,A
   1925          			if (v_prev_pow_mode_u8 != BME280_SLEEP_MODE) {
   \   000063   7404         MOV     A,#0x4
   \   000065   12....       LCALL   ?XSTACK_DISP0_8
   \   000068   E0           MOVX    A,@DPTR
   \   000069   6059         JZ      ??bme280_get_forced_uncomp_pressure_temperature_3
   1926          				com_rslt += bme280_set_soft_rst();
   \   00006B                ; Setup parameters for call to function bme280_set_soft_rst
   \   00006B   12....       LCALL   `??bme280_set_soft_rst::?relay`; Banked call to: bme280_set_soft_rst
   \   00006E   E9           MOV     A,R1
   \   00006F   FF           MOV     R7,A
   1927          				p_bme280->delay_msec(BME280_3MS_DELAY);
   \   000070                ; Setup parameters for indirect call
   \   000070   90....       MOV     DPTR,#__Constant_3
   \   000073   12....       LCALL   ?XLOAD_R2345
   \   000076   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   000079   12....       LCALL   ?CALL_IND
   1928          				/* write previous and updated value of
   1929          				configuration register*/
   1930          				pre_ctrl_config_value = p_bme280->config_reg;
   \   00007C   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   00007F   C0E0         PUSH    A
   \   000081   7403         MOV     A,#0x3
   \   000083   12....       LCALL   ?XSTACK_DISP0_8
   \   000086   D0E0         POP     A
   \   000088   12....       LCALL   ?Subroutine16 & 0xFFFF
   1931          				com_rslt += bme280_write_register(
   1932          					BME280_CONFIG_REG,
   1933          				&pre_ctrl_config_value,
   1934          				BME280_GEN_READ_WRITE_DATA_LENGTH);
   \                     ??CrossCallReturnLabel_24:
   \   00008B   12....       LCALL   ?XSTACK_DISP101_8
   \   00008E   79F5         MOV     R1,#-0xb
   \   000090   12....       LCALL   `??bme280_write_register::?relay`; Banked call to: bme280_write_register
   \   000093   E9           MOV     A,R1
   \   000094   F5..         MOV     ?V2,A
   1935          				/* write previous value of
   1936          				humidity oversampling*/
   1937          				v_pre_ctrl_hum_value_u8 =
   1938          				p_bme280->ctrl_hum_reg;
   \   000096   12....       LCALL   ??Subroutine122_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_367:
   \   000099   C0E0         PUSH    A
   \   00009B   7401         MOV     A,#0x1
   \   00009D   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A0   D0E0         POP     A
   \   0000A2   12....       LCALL   ?Subroutine18 & 0xFFFF
   1939          				com_rslt += bme280_write_register(
   1940          					BME280_CTRL_HUMIDITY_REG,
   1941          				&v_pre_ctrl_hum_value_u8,
   1942          				BME280_GEN_READ_WRITE_DATA_LENGTH);
   \                     ??CrossCallReturnLabel_35:
   \   0000A5   12....       LCALL   ?XSTACK_DISP101_8
   \   0000A8   79F2         MOV     R1,#-0xe
   \   0000AA   12....       LCALL   `??bme280_write_register::?relay`; Banked call to: bme280_write_register
   \   0000AD   E9           MOV     A,R1
   \   0000AE   F5..         MOV     ?V3,A
   1943          				/* write the force mode  */
   1944          				com_rslt += bme280_write_register(
   1945          					BME280_CTRL_MEAS_REG,
   1946          				&v_mode_u8r, BME280_GEN_READ_WRITE_DATA_LENGTH);
   \   0000B0                ; Setup parameters for call to function bme280_write_register
   \   0000B0   7C01         MOV     R4,#0x1
   \   0000B2   7402         MOV     A,#0x2
   \   0000B4   12....       LCALL   ?XSTACK_DISP101_8
   \   0000B7   79F4         MOV     R1,#-0xc
   \   0000B9   12....       LCALL   `??bme280_write_register::?relay`; Banked call to: bme280_write_register
   \   0000BC   EF           MOV     A,R7
   \   0000BD   25..         ADD     A,?V2
   \   0000BF   25..         ADD     A,?V3
   \   0000C1   29           ADD     A,R1
   \   0000C2   8027         SJMP    ??bme280_get_forced_uncomp_pressure_temperature_4
   1947          			} else {
   1948          				/* write previous value of
   1949          				humidity oversampling*/
   1950          				v_pre_ctrl_hum_value_u8 =
   1951          				p_bme280->ctrl_hum_reg;
   \                     ??bme280_get_forced_uncomp_pressure_temperature_3:
   \   0000C4   12....       LCALL   ??Subroutine122_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_368:
   \   0000C7   C0E0         PUSH    A
   \   0000C9   7401         MOV     A,#0x1
   \   0000CB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CE   D0E0         POP     A
   \   0000D0   12....       LCALL   ?Subroutine18 & 0xFFFF
   1952          				com_rslt += bme280_write_register(
   1953          					BME280_CTRL_HUMIDITY_REG,
   1954          				&v_pre_ctrl_hum_value_u8,
   1955          				BME280_GEN_READ_WRITE_DATA_LENGTH);
   \                     ??CrossCallReturnLabel_36:
   \   0000D3   12....       LCALL   ?XSTACK_DISP101_8
   \   0000D6   79F2         MOV     R1,#-0xe
   \   0000D8   12....       LCALL   `??bme280_write_register::?relay`; Banked call to: bme280_write_register
   \   0000DB   E9           MOV     A,R1
   \   0000DC   FF           MOV     R7,A
   1956          				/* write the force mode  */
   1957          				com_rslt += bme280_write_register(
   1958          					BME280_CTRL_MEAS_REG,
   1959          				&v_mode_u8r, BME280_GEN_READ_WRITE_DATA_LENGTH);
   \   0000DD                ; Setup parameters for call to function bme280_write_register
   \   0000DD   7C01         MOV     R4,#0x1
   \   0000DF   7402         MOV     A,#0x2
   \   0000E1   12....       LCALL   ?XSTACK_DISP101_8
   \   0000E4   79F4         MOV     R1,#-0xc
   \   0000E6   12....       LCALL   `??bme280_write_register::?relay`; Banked call to: bme280_write_register
   \   0000E9   E9           MOV     A,R1
   \   0000EA   2F           ADD     A,R7
   \                     ??bme280_get_forced_uncomp_pressure_temperature_4:
   \   0000EB   2E           ADD     A,R6
   \   0000EC   FE           MOV     R6,A
   1960          			}
   1961          			bme280_compute_wait_time(&v_waittime_u8);
   \   0000ED                ; Setup parameters for call to function bme280_compute_wait_time
   \   0000ED   7405         MOV     A,#0x5
   \   0000EF   12....       LCALL   ?XSTACK_DISP101_8
   \   0000F2   12....       LCALL   `??bme280_compute_wait_time::?relay`; Banked call to: bme280_compute_wait_time
   1962          			p_bme280->delay_msec(v_waittime_u8);
   \   0000F5                ; Setup parameters for indirect call
   \   0000F5   7405         MOV     A,#0x5
   \   0000F7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FA   E0           MOVX    A,@DPTR
   \   0000FB   FA           MOV     R2,A
   \   0000FC   E4           CLR     A
   \   0000FD   FB           MOV     R3,A
   \   0000FE   FC           MOV     R4,A
   \   0000FF   FD           MOV     R5,A
   \   000100   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   000103   12....       LCALL   ?CALL_IND
   1963          			/* read the force-mode value of pressure
   1964          			temperature and humidity*/
   1965          			com_rslt +=
   1966          			bme280_read_uncomp_pressure_temperature_humidity(
   1967          			v_uncom_pressure_s32, v_uncom_temperature_s32,
   1968          			v_uncom_humidity_s32);
   \   000106                ; Setup parameters for call to function bme280_read_uncomp_pressure_temperature_humidity
   \   000106   7414         MOV     A,#0x14
   \   000108   12....       LCALL   ?XSTACK_DISP0_8
   \   00010B   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00010E   AC..         MOV     R4,?V0
   \   000110   AD..         MOV     R5,?V1
   \   000112   AA..         MOV     R2,?V4
   \   000114   AB..         MOV     R3,?V5
   \   000116   12....       LCALL   ??bme280_read_uncomp_pressure_temperature_humid; Banked call to: bme280_read_uncomp_pressure_temperature_humidity
   \   000119   7402         MOV     A,#0x2
   \   00011B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00011E   E9           MOV     A,R1
   \   00011F   F5..         MOV     ?V0,A
   1969          
   1970          			/* read the control humidity register value*/
   1971          			com_rslt += bme280_read_register(
   1972          			BME280_CTRL_HUMIDITY_REG,
   1973          			&v_data_u8, BME280_GEN_READ_WRITE_DATA_LENGTH);
   \   000121                ; Setup parameters for call to function bme280_read_register
   \   000121   7C01         MOV     R4,#0x1
   \   000123   AA..         MOV     R2,?XSP + 0
   \   000125   AB..         MOV     R3,?XSP + 1
   \   000127   79F2         MOV     R1,#-0xe
   \   000129   12....       LCALL   `??bme280_read_register::?relay`; Banked call to: bme280_read_register
   \   00012C   E9           MOV     A,R1
   \   00012D   FF           MOV     R7,A
   1974          			p_bme280->ctrl_hum_reg = v_data_u8;
   \   00012E   85..82       MOV     DPL,?XSP + 0
   \   000131   85..83       MOV     DPH,?XSP + 1
   \   000134   E0           MOVX    A,@DPTR
   \   000135   C0E0         PUSH    A
   \   000137   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   00013A   D0E0         POP     A
   \   00013C   12....       LCALL   ?Subroutine10 & 0xFFFF
   1975          			/* read the configuration register value*/
   1976          			com_rslt += bme280_read_register(BME280_CONFIG_REG,
   1977          			&v_data_u8, BME280_GEN_READ_WRITE_DATA_LENGTH);
   \                     ??CrossCallReturnLabel_7:
   \   00013F   12....       LCALL   `??bme280_read_register::?relay`; Banked call to: bme280_read_register
   \   000142   E9           MOV     A,R1
   \   000143   F5..         MOV     ?V1,A
   1978          			p_bme280->config_reg = v_data_u8;
   \   000145   85..82       MOV     DPL,?XSP + 0
   \   000148   85..83       MOV     DPH,?XSP + 1
   \   00014B   E0           MOVX    A,@DPTR
   \   00014C   C0E0         PUSH    A
   \   00014E   12....       LCALL   ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_158:
   \   000151   D0E0         POP     A
   \   000153   12....       LCALL   ??Subroutine111_0 & 0xFFFF
   1979          
   1980          			/* read the control measurement register value*/
   1981          			com_rslt += bme280_read_register(BME280_CTRL_MEAS_REG,
   1982          			&v_data_u8, BME280_GEN_READ_WRITE_DATA_LENGTH);
   \                     ??CrossCallReturnLabel_302:
   \   000156   12....       LCALL   `??bme280_read_register::?relay`; Banked call to: bme280_read_register
   \   000159   E9           MOV     A,R1
   \   00015A   F8           MOV     R0,A
   1983          			p_bme280->ctrl_meas_reg = v_data_u8;
   \   00015B   85..82       MOV     DPL,?XSP + 0
   \   00015E   85..83       MOV     DPH,?XSP + 1
   \   000161   E0           MOVX    A,@DPTR
   \   000162   C0E0         PUSH    A
   \   000164   12....       LCALL   ?Subroutine95 & 0xFFFF
   1984          		}
   \                     ??CrossCallReturnLabel_257:
   \   000167   D0E0         POP     A
   \   000169   F0           MOVX    @DPTR,A
   1985          	return com_rslt;
   \   00016A   EE           MOV     A,R6
   \   00016B   25..         ADD     A,?V0
   \   00016D   2F           ADD     A,R7
   \   00016E   25..         ADD     A,?V1
   \   000170   28           ADD     A,R0
   \   000171   F9           MOV     R1,A
   \                     ??bme280_get_forced_uncomp_pressure_temperature_2:
   \   000172   7406         MOV     A,#0x6
   \   000174   12....       LCALL   ?DEALLOC_XSTACK8
   \   000177                REQUIRE ?Subroutine7
   \   000177                ; // Fall through to label ?Subroutine7
   1986          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   7F06         MOV     R7,#0x6
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
   1987          
   1988          /*!
   1989           * @brief
   1990           *	This API write the data to
   1991           *	the given register
   1992           *
   1993           *
   1994           *	@param v_addr_u8 -> Address of the register
   1995           *	@param v_data_u8 -> The data from the register
   1996           *	@param v_len_u8 -> no of bytes to read
   1997           *
   1998           *
   1999           *	@return results of bus communication function
   2000           *	@retval 0 -> Success
   2001           *	@retval -1 -> Error
   2002           *
   2003           *
   2004           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2005          BME280_RETURN_FUNCTION_TYPE bme280_write_register(u8 v_addr_u8,
   \                     bme280_write_register:
   2006          u8 *v_data_u8, u8 v_len_u8)
   2007          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FF           MOV     R7,A
   \   000007   EA           MOV     A,R2
   \   000008   F8           MOV     R0,A
   \   000009   EB           MOV     A,R3
   \   00000A   F9           MOV     R1,A
   \   00000B   EC           MOV     A,R4
   \   00000C   FE           MOV     R6,A
   2008          	/* used to return the communication result*/
   2009          	BME280_RETURN_FUNCTION_TYPE com_rslt = ERROR;
   2010          	/* check the p_bme280 structure pointer as NULL*/
   2011          	
   2012          	if (p_bme280 == BME280_NULL) {
   \   00000D   90....       MOV     DPTR,#p_bme280
   \   000010   E0           MOVX    A,@DPTR
   \   000011   FA           MOV     R2,A
   \   000012   A3           INC     DPTR
   \   000013   E0           MOVX    A,@DPTR
   \   000014   FB           MOV     R3,A
   \   000015   EA           MOV     A,R2
   \   000016   4B           ORL     A,R3
   \   000017   7004         JNZ     ??bme280_write_register_0
   2013          		return E_BME280_NULL_PTR;
   \   000019   7981         MOV     R1,#-0x7f
   \   00001B   800E         SJMP    ??bme280_write_register_1
   2014          		} else {
   2015          			
   2016          			com_rslt = p_bme280->BME280_BUS_WRITE_FUNC(
   2017          			p_bme280->dev_addr,
   2018          			v_addr_u8, v_data_u8, v_len_u8);
   2019          		}
   2020          	return com_rslt;
   \                     ??bme280_write_register_0:
   \   00001D                ; Setup parameters for indirect call
   \   00001D   EE           MOV     A,R6
   \   00001E   FB           MOV     R3,A
   \   00001F   E8           MOV     A,R0
   \   000020   FC           MOV     R4,A
   \   000021   E9           MOV     A,R1
   \   000022   FD           MOV     R5,A
   \   000023   EF           MOV     A,R7
   \   000024   FA           MOV     R2,A
   \   000025   12....       LCALL   ??Subroutine112_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_311:
   \   000028   12....       LCALL   ?CALL_IND
   \                     ??bme280_write_register_1:
   \   00002B   02....       LJMP    ??Subroutine117_0 & 0xFFFF
   2021          }
   2022          
   2023          /*!
   2024           * @brief
   2025           *	This API reads the data from
   2026           *	the given register
   2027           *
   2028           *
   2029           *	@param v_addr_u8 -> Address of the register
   2030           *	@param v_data_u8 -> The data from the register
   2031           *	@param v_len_u8 -> no of bytes to read
   2032           *
   2033           *
   2034           *	@return results of bus communication function
   2035           *	@retval 0 -> Success
   2036           *	@retval -1 -> Error
   2037           *
   2038           *
   2039           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2040          BME280_RETURN_FUNCTION_TYPE bme280_read_register(u8 v_addr_u8,
   \                     bme280_read_register:
   2041          u8 *v_data_u8, u8 v_len_u8)
   2042          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FF           MOV     R7,A
   \   000007   EA           MOV     A,R2
   \   000008   F8           MOV     R0,A
   \   000009   EB           MOV     A,R3
   \   00000A   F9           MOV     R1,A
   \   00000B   EC           MOV     A,R4
   \   00000C   FE           MOV     R6,A
   2043          	/* used to return the communication result*/
   2044          	BME280_RETURN_FUNCTION_TYPE com_rslt = ERROR;
   2045          	/* check the p_bme280 structure pointer as NULL*/
   2046          	if (p_bme280 == BME280_NULL) {
   \   00000D   90....       MOV     DPTR,#p_bme280
   \   000010   E0           MOVX    A,@DPTR
   \   000011   FA           MOV     R2,A
   \   000012   A3           INC     DPTR
   \   000013   E0           MOVX    A,@DPTR
   \   000014   FB           MOV     R3,A
   \   000015   EA           MOV     A,R2
   \   000016   4B           ORL     A,R3
   \   000017   7004         JNZ     ??bme280_read_register_0
   2047          		return E_BME280_NULL_PTR;
   \   000019   7981         MOV     R1,#-0x7f
   \   00001B   8014         SJMP    ??bme280_read_register_1
   2048          		} else {
   2049          			com_rslt = p_bme280->BME280_BUS_READ_FUNC(
   2050          			p_bme280->dev_addr,
   2051          			v_addr_u8, v_data_u8, v_len_u8);
   2052          		}
   2053          	return com_rslt;
   \                     ??bme280_read_register_0:
   \   00001D                ; Setup parameters for indirect call
   \   00001D   EE           MOV     A,R6
   \   00001E   FB           MOV     R3,A
   \   00001F   E8           MOV     A,R0
   \   000020   FC           MOV     R4,A
   \   000021   E9           MOV     A,R1
   \   000022   FD           MOV     R5,A
   \   000023   EF           MOV     A,R7
   \   000024   FA           MOV     R2,A
   \   000025   90....       MOV     DPTR,#p_bme280
   \   000028   E0           MOVX    A,@DPTR
   \   000029   F8           MOV     R0,A
   \   00002A   A3           INC     DPTR
   \   00002B   12....       LCALL   ??Subroutine115_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_326:
   \   00002E   12....       LCALL   ?CALL_IND
   \                     ??bme280_read_register_1:
   \   000031   02....       LJMP    ??Subroutine117_0 & 0xFFFF
   2054          }
   2055          
   2056          #ifdef BME280_ENABLE_FLOAT
   2057          
   2058          /*!
   2059           * @brief Reads actual temperature from uncompensated temperature
   2060           * @note returns the value in Degree centigrade
   2061           * @note Output value of "51.23" equals 51.23 DegC.
   2062           *
   2063           *
   2064           *
   2065           *  @param v_uncom_temperature_s32 : value of uncompensated temperature
   2066           *
   2067           *
   2068           *
   2069           *  @return  Return the actual temperature in floating point
   2070           *
   2071          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2072          double bme280_compensate_temperature_double(s32 v_uncom_temperature_s32)
   \                     bme280_compensate_temperature_double:
   2073          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V8,R2
   \   000007   8B..         MOV     ?V9,R3
   \   000009   8C..         MOV     ?V10,R4
   \   00000B   8D..         MOV     ?V11,R5
   2074          	double v_x1_u32 = BME280_INIT_VALUE;
   2075          	double v_x2_u32 = BME280_INIT_VALUE;
   2076          	double temperature = BME280_INIT_VALUE;
   2077          
   2078          	v_x1_u32  = (((double)v_uncom_temperature_s32) / 16384.0 -
   2079          	((double)p_bme280->cal_param.dig_T1) / 1024.0) *
   2080          	((double)p_bme280->cal_param.dig_T2);
   \   00000D   12....       LCALL   ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_280:
   \   000010   E0           MOVX    A,@DPTR
   \   000011   12....       LCALL   ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_195:
   \   000014   78..         MOV     R0,#?V4
   \   000016   12....       LCALL   ?UL_TO_FLT
   \   000019   78..         MOV     R0,#?V8
   \   00001B   12....       LCALL   ?L_TO_FLT
   \   00001E   85....       MOV     ?V0,?V8
   \   000021   85....       MOV     ?V1,?V9
   \   000024   85....       MOV     ?V2,?V10
   \   000027   85....       MOV     ?V3,?V11
   \   00002A   90....       MOV     DPTR,#__Constant_38800000
   \   00002D   78..         MOV     R0,#?V12
   \   00002F   12....       LCALL   ?L_MOV_X
   \   000032   78..         MOV     R0,#?V0
   \   000034   79..         MOV     R1,#?V12
   \   000036   12....       LCALL   ?FLT_MUL
   \   000039   C0..         PUSH    ?V0
   \   00003B   C0..         PUSH    ?V1
   \   00003D   C0..         PUSH    ?V2
   \   00003F   C0..         PUSH    ?V3
   \   000041   85....       MOV     ?V0,?V4
   \   000044   85....       MOV     ?V1,?V5
   \   000047   85....       MOV     ?V2,?V6
   \   00004A   85....       MOV     ?V3,?V7
   \   00004D   90....       MOV     DPTR,#__Constant_3a800000
   \   000050   78..         MOV     R0,#?V12
   \   000052   12....       LCALL   ?L_MOV_X
   \   000055   78..         MOV     R0,#?V0
   \   000057   79..         MOV     R1,#?V12
   \   000059   12....       LCALL   ?FLT_MUL
   \   00005C   D0..         POP     ?V15
   \   00005E   D0..         POP     ?V14
   \   000060   D0..         POP     ?V13
   \   000062   D0..         POP     ?V12
   \   000064   78..         MOV     R0,#?V12
   \   000066   79..         MOV     R1,#?V0
   \   000068   12....       LCALL   ?FLT_SUB
   \   00006B   12....       LCALL   ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_281:
   \   00006E   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_379:
   \   000071   12....       LCALL   ?L_TO_FLT
   \   000074   78..         MOV     R0,#?V12
   \   000076   79..         MOV     R1,#?V0
   \   000078   12....       LCALL   ?FLT_MUL
   2081          	v_x2_u32  = ((((double)v_uncom_temperature_s32) / 131072.0 -
   2082          	((double)p_bme280->cal_param.dig_T1) / 8192.0) *
   2083          	(((double)v_uncom_temperature_s32) / 131072.0 -
   2084          	((double)p_bme280->cal_param.dig_T1) / 8192.0)) *
   2085          	((double)p_bme280->cal_param.dig_T3);
   \   00007B   90....       MOV     DPTR,#__Constant_37000000
   \   00007E   78..         MOV     R0,#?V0
   \   000080   12....       LCALL   ?L_MOV_X
   \   000083   78..         MOV     R0,#?V8
   \   000085   79..         MOV     R1,#?V0
   \   000087   12....       LCALL   ?FLT_MUL
   \   00008A   90....       MOV     DPTR,#__Constant_39000000
   \   00008D   78..         MOV     R0,#?V0
   \   00008F   12....       LCALL   ?L_MOV_X
   \   000092   78..         MOV     R0,#?V4
   \   000094   79..         MOV     R1,#?V0
   \   000096   12....       LCALL   ?FLT_MUL
   \   000099   78..         MOV     R0,#?V8
   \   00009B   79..         MOV     R1,#?V4
   \   00009D   12....       LCALL   ?FLT_SUB
   \   0000A0   85....       MOV     ?V4,?V8
   \   0000A3   85....       MOV     ?V5,?V9
   \   0000A6   85....       MOV     ?V6,?V10
   \   0000A9   85....       MOV     ?V7,?V11
   \   0000AC   78..         MOV     R0,#?V4
   \   0000AE   79..         MOV     R1,#?V8
   \   0000B0   12....       LCALL   ?FLT_MUL
   \   0000B3   12....       LCALL   ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_136:
   \   0000B6   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_380:
   \   0000B9   12....       LCALL   ?L_TO_FLT
   \   0000BC   78..         MOV     R0,#?V4
   \   0000BE   79..         MOV     R1,#?V0
   \   0000C0   12....       LCALL   ?FLT_MUL
   2086          	p_bme280->cal_param.t_fine = (s32)(v_x1_u32 + v_x2_u32);
   \   0000C3   78..         MOV     R0,#?V12
   \   0000C5   79..         MOV     R1,#?V4
   \   0000C7   12....       LCALL   ?FLT_ADD
   \   0000CA   85....       MOV     ?V0,?V12
   \   0000CD   85....       MOV     ?V1,?V13
   \   0000D0   85....       MOV     ?V2,?V14
   \   0000D3   85....       MOV     ?V3,?V15
   \   0000D6   78..         MOV     R0,#?V0
   \   0000D8   12....       LCALL   ?FLT_TO_L
   \   0000DB   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   0000DE   12....       LCALL   ?L_MOV_TO_X
   2087          	temperature  = (v_x1_u32 + v_x2_u32) / 5120.0;
   2088          
   2089          
   2090          	return temperature;
   \   0000E1   90....       MOV     DPTR,#__Constant_45a00000
   \   0000E4   78..         MOV     R0,#?V0
   \   0000E6   12....       LCALL   ?L_MOV_X
   \   0000E9   78..         MOV     R0,#?V12
   \   0000EB   79..         MOV     R1,#?V0
   \   0000ED   12....       LCALL   ?FLT_DIV
   \   0000F0   AA..         MOV     R2,?V12
   \   0000F2   AB..         MOV     R3,?V13
   \   0000F4   AC..         MOV     R4,?V14
   \   0000F6   AD..         MOV     R5,?V15
   \   0000F8   80..         SJMP    ??Subroutine124_0
   2091          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine123_0
   \   000002                ; // Fall through to label ??Subroutine123_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine123_0:
   \   000000   12....       LCALL   ??Subroutine125_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_384:
   \   000003   78..         MOV     R0,#?V0
   \   000005   22           RET
   2092          
   2093          /*!
   2094           * @brief Reads actual pressure from uncompensated pressure
   2095           * @note Returns pressure in Pa as double.
   2096           * @note Output value of "96386.2"
   2097           * equals 96386.2 Pa = 963.862 hPa.
   2098           *
   2099           *
   2100           *  @param v_uncom_pressure_s32 : value of uncompensated pressure
   2101           *
   2102           *
   2103           *  @return  Return the actual pressure in floating point
   2104           *
   2105          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2106          double bme280_compensate_pressure_double(s32 v_uncom_pressure_s32)
   \                     bme280_compensate_pressure_double:
   2107          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine81 & 0xFFFF
   2108          	double v_x1_u32 = BME280_INIT_VALUE;
   2109          	double v_x2_u32 = BME280_INIT_VALUE;
   2110          	double pressure = BME280_INIT_VALUE;
   2111          
   2112          	v_x1_u32 = ((double)p_bme280->cal_param.t_fine /
   2113          	2.0) - 64000.0;
   \                     ??CrossCallReturnLabel_227:
   \   00000D   12....       LCALL   ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_150:
   \   000010   78..         MOV     R0,#?V8
   \   000012   12....       LCALL   ?L_MOV_X
   \   000015   78..         MOV     R0,#?V8
   \   000017   12....       LCALL   ?L_TO_FLT
   \   00001A   90....       MOV     DPTR,#__Constant_3f000000
   \   00001D   78..         MOV     R0,#?V0
   \   00001F   12....       LCALL   ?L_MOV_X
   \   000022   78..         MOV     R0,#?V8
   \   000024   79..         MOV     R1,#?V0
   \   000026   12....       LCALL   ?FLT_MUL
   \   000029   90....       MOV     DPTR,#__Constant_c77a0000
   \   00002C   78..         MOV     R0,#?V0
   \   00002E   12....       LCALL   ?L_MOV_X
   \   000031   78..         MOV     R0,#?V8
   \   000033   79..         MOV     R1,#?V0
   \   000035   12....       LCALL   ?FLT_ADD
   2114          	v_x2_u32 = v_x1_u32 * v_x1_u32 *
   2115          	((double)p_bme280->cal_param.dig_P6) / 32768.0;
   2116          	v_x2_u32 = v_x2_u32 + v_x1_u32 *
   2117          	((double)p_bme280->cal_param.dig_P5) * 2.0;
   2118          	v_x2_u32 = (v_x2_u32 / 4.0) +
   2119          	(((double)p_bme280->cal_param.dig_P4) * 65536.0);
   \   000038   85....       MOV     ?V0,?V8
   \   00003B   85....       MOV     ?V1,?V9
   \   00003E   85....       MOV     ?V2,?V10
   \   000041   85....       MOV     ?V3,?V11
   \   000044   78..         MOV     R0,#?V0
   \   000046   79..         MOV     R1,#?V8
   \   000048   12....       LCALL   ?FLT_MUL
   \   00004B   12....       LCALL   ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_165:
   \   00004E   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   000051   12....       LCALL   ?L_TO_FLT
   \   000054   78..         MOV     R0,#?V0
   \   000056   79..         MOV     R1,#?V4
   \   000058   12....       LCALL   ?FLT_MUL
   \   00005B   90....       MOV     DPTR,#__Constant_38000000
   \   00005E   78..         MOV     R0,#?V4
   \   000060   12....       LCALL   ?L_MOV_X
   \   000063   78..         MOV     R0,#?V0
   \   000065   79..         MOV     R1,#?V4
   \   000067   12....       LCALL   ?FLT_MUL
   \   00006A   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_186:
   \   00006D   240E         ADD     A,#0xe
   \   00006F   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   000072   12....       LCALL   ?L_TO_FLT
   \   000075   78..         MOV     R0,#?V4
   \   000077   79..         MOV     R1,#?V8
   \   000079   12....       LCALL   ?FLT_MUL
   \   00007C   90....       MOV     DPTR,#__Constant_40000000
   \   00007F   78..         MOV     R0,#?V12
   \   000081   12....       LCALL   ?L_MOV_X
   \   000084   78..         MOV     R0,#?V4
   \   000086   79..         MOV     R1,#?V12
   \   000088   12....       LCALL   ?FLT_MUL
   \   00008B   78..         MOV     R0,#?V0
   \   00008D   79..         MOV     R1,#?V4
   \   00008F   12....       LCALL   ?FLT_ADD
   \   000092   90....       MOV     DPTR,#__Constant_3e800000
   \   000095   78..         MOV     R0,#?V4
   \   000097   12....       LCALL   ?L_MOV_X
   \   00009A   78..         MOV     R0,#?V0
   \   00009C   79..         MOV     R1,#?V4
   \   00009E   12....       LCALL   ?FLT_MUL
   \   0000A1   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_187:
   \   0000A4   240C         ADD     A,#0xc
   \   0000A6   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   0000A9   12....       LCALL   ?L_TO_FLT
   \   0000AC   90....       MOV     DPTR,#__Constant_47800000
   \   0000AF   78..         MOV     R0,#?V12
   \   0000B1   12....       LCALL   ?L_MOV_X
   \   0000B4   78..         MOV     R0,#?V4
   \   0000B6   79..         MOV     R1,#?V12
   \   0000B8   12....       LCALL   ?FLT_MUL
   \   0000BB   78..         MOV     R0,#?V0
   \   0000BD   79..         MOV     R1,#?V4
   \   0000BF   12....       LCALL   ?FLT_ADD
   2120          	v_x1_u32 = (((double)p_bme280->cal_param.dig_P3) *
   2121          	v_x1_u32 * v_x1_u32 / 524288.0 +
   2122          	((double)p_bme280->cal_param.dig_P2) * v_x1_u32) / 524288.0;
   2123          	v_x1_u32 = (1.0 + v_x1_u32 / 32768.0) *
   2124          	((double)p_bme280->cal_param.dig_P1);
   \   0000C2   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_188:
   \   0000C5   240A         ADD     A,#0xa
   \   0000C7   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   0000CA   12....       LCALL   ?L_TO_FLT
   \   0000CD   78..         MOV     R0,#?V4
   \   0000CF   79..         MOV     R1,#?V8
   \   0000D1   12....       LCALL   ?FLT_MUL
   \   0000D4   78..         MOV     R0,#?V4
   \   0000D6   79..         MOV     R1,#?V8
   \   0000D8   12....       LCALL   ?FLT_MUL
   \   0000DB   90....       MOV     DPTR,#__Constant_36000000
   \   0000DE   78..         MOV     R0,#?V12
   \   0000E0   12....       LCALL   ?L_MOV_X
   \   0000E3   78..         MOV     R0,#?V4
   \   0000E5   79..         MOV     R1,#?V12
   \   0000E7   12....       LCALL   ?FLT_MUL
   \   0000EA   12....       LCALL   ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_168:
   \   0000ED   12....       LCALL   ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_139:
   \   0000F0   12....       LCALL   ?L_TO_FLT
   \   0000F3   78..         MOV     R0,#?V12
   \   0000F5   79..         MOV     R1,#?V8
   \   0000F7   12....       LCALL   ?FLT_MUL
   \   0000FA   78..         MOV     R0,#?V4
   \   0000FC   79..         MOV     R1,#?V12
   \   0000FE   12....       LCALL   ?FLT_ADD
   \   000101   90....       MOV     DPTR,#__Constant_2e800000
   \   000104   78..         MOV     R0,#?V8
   \   000106   12....       LCALL   ?L_MOV_X
   \   000109   78..         MOV     R0,#?V4
   \   00010B   79..         MOV     R1,#?V8
   \   00010D   12....       LCALL   ?FLT_MUL
   \   000110   90....       MOV     DPTR,#__Constant_3f800000
   \   000113   78..         MOV     R0,#?V8
   \   000115   12....       LCALL   ?L_MOV_X
   \   000118   78..         MOV     R0,#?V4
   \   00011A   79..         MOV     R1,#?V8
   \   00011C   12....       LCALL   ?FLT_ADD
   \   00011F   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   000122   F5..         MOV     ?V8,A
   \   000124   A3           INC     DPTR
   \   000125   E0           MOVX    A,@DPTR
   \   000126   F5..         MOV     ?V9,A
   \   000128   E4           CLR     A
   \   000129   F5..         MOV     ?V10,A
   \   00012B   F5..         MOV     ?V11,A
   \   00012D   78..         MOV     R0,#?V8
   \   00012F   12....       LCALL   ?UL_TO_FLT
   \   000132   78..         MOV     R0,#?V4
   \   000134   79..         MOV     R1,#?V8
   \   000136   12....       LCALL   ?FLT_MUL
   \   000139   85....       MOV     ?V8,?V4
   \   00013C   85....       MOV     ?V9,?V5
   \   00013F   85....       MOV     ?V10,?V6
   \   000142   85....       MOV     ?V11,?V7
   2125          	pressure = 1048576.0 - (double)v_uncom_pressure_s32;
   \   000145   75..00       MOV     ?V4,#0x0
   \   000148   75..00       MOV     ?V5,#0x0
   \   00014B   75..80       MOV     ?V6,#-0x80
   \   00014E   75..49       MOV     ?V7,#0x49
   \   000151   85..82       MOV     DPL,?XSP + 0
   \   000154   85..83       MOV     DPH,?XSP + 1
   \   000157   78..         MOV     R0,#?V12
   \   000159   12....       LCALL   ?L_MOV_X
   \   00015C   78..         MOV     R0,#?V12
   \   00015E   12....       LCALL   ?L_TO_FLT
   \   000161   78..         MOV     R0,#?V4
   \   000163   79..         MOV     R1,#?V12
   \   000165   12....       LCALL   ?FLT_SUB
   2126          	/* Avoid exception caused by division by zero */
   2127          	if ((v_x1_u32 > 0) || (v_x1_u32 < 0))
   \   000168   90....       MOV     DPTR,#__Constant_1
   \   00016B   78..         MOV     R0,#?V12
   \   00016D   12....       LCALL   ?L_MOV_X
   \   000170   78..         MOV     R0,#?V8
   \   000172   79..         MOV     R1,#?V12
   \   000174   12....       LCALL   ?FLT_GE
   \   000177   4014         JC      ??bme280_compensate_pressure_double_0
   \   000179   90....       MOV     DPTR,#__Constant_0
   \   00017C   78..         MOV     R0,#?V12
   \   00017E   12....       LCALL   ?L_MOV_X
   \   000181   78..         MOV     R0,#?V8
   \   000183   79..         MOV     R1,#?V12
   \   000185   12....       LCALL   ?FLT_LT
   \   000188   4003         JC      $+5
   \   00018A   02....       LJMP    ??bme280_compensate_pressure_double_1 & 0xFFFF
   2128          		pressure = (pressure - (v_x2_u32 / 4096.0)) * 6250.0 / v_x1_u32;
   \                     ??bme280_compensate_pressure_double_0:
   \   00018D   90....       MOV     DPTR,#__Constant_39800000
   \   000190   78..         MOV     R0,#?V12
   \   000192   12....       LCALL   ?L_MOV_X
   \   000195   78..         MOV     R0,#?V0
   \   000197   79..         MOV     R1,#?V12
   \   000199   12....       LCALL   ?FLT_MUL
   \   00019C   78..         MOV     R0,#?V4
   \   00019E   79..         MOV     R1,#?V0
   \   0001A0   12....       LCALL   ?FLT_SUB
   \   0001A3   90....       MOV     DPTR,#__Constant_45c35000
   \   0001A6   78..         MOV     R0,#?V0
   \   0001A8   12....       LCALL   ?L_MOV_X
   \   0001AB   78..         MOV     R0,#?V4
   \   0001AD   79..         MOV     R1,#?V0
   \   0001AF   12....       LCALL   ?FLT_MUL
   \   0001B2   78..         MOV     R0,#?V4
   \   0001B4   79..         MOV     R1,#?V8
   \   0001B6   12....       LCALL   ?FLT_DIV
   2129          	else
   2130          		return BME280_INVALID_DATA;
   2131          	v_x1_u32 = ((double)p_bme280->cal_param.dig_P9) *
   2132          	pressure * pressure / 2147483648.0;
   2133          	v_x2_u32 = pressure * ((double)p_bme280->cal_param.dig_P8) / 32768.0;
   2134          	pressure = pressure + (v_x1_u32 + v_x2_u32 +
   2135          	((double)p_bme280->cal_param.dig_P7)) / 16.0;
   2136          
   2137          	return pressure;
   \   0001B9   12....       LCALL   ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_151:
   \   0001BC   12....       LCALL   ??Subroutine123_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_378:
   \   0001BF   12....       LCALL   ?L_TO_FLT
   \   0001C2   78..         MOV     R0,#?V0
   \   0001C4   79..         MOV     R1,#?V4
   \   0001C6   12....       LCALL   ?FLT_MUL
   \   0001C9   78..         MOV     R0,#?V0
   \   0001CB   79..         MOV     R1,#?V4
   \   0001CD   12....       LCALL   ?FLT_MUL
   \   0001D0   90....       MOV     DPTR,#__Constant_30000000
   \   0001D3   78..         MOV     R0,#?V8
   \   0001D5   12....       LCALL   ?L_MOV_X
   \   0001D8   78..         MOV     R0,#?V0
   \   0001DA   79..         MOV     R1,#?V8
   \   0001DC   12....       LCALL   ?FLT_MUL
   \   0001DF   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   0001E2   12....       LCALL   ?L_TO_FLT
   \   0001E5   78..         MOV     R0,#?V8
   \   0001E7   79..         MOV     R1,#?V4
   \   0001E9   12....       LCALL   ?FLT_MUL
   \   0001EC   90....       MOV     DPTR,#__Constant_38000000
   \   0001EF   78..         MOV     R0,#?V12
   \   0001F1   12....       LCALL   ?L_MOV_X
   \   0001F4   78..         MOV     R0,#?V8
   \   0001F6   79..         MOV     R1,#?V12
   \   0001F8   12....       LCALL   ?FLT_MUL
   \   0001FB   78..         MOV     R0,#?V0
   \   0001FD   79..         MOV     R1,#?V8
   \   0001FF   12....       LCALL   ?FLT_ADD
   \   000202   12....       LCALL   ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_171:
   \   000205   12....       LCALL   ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_138:
   \   000208   12....       LCALL   ?L_TO_FLT
   \   00020B   78..         MOV     R0,#?V0
   \   00020D   79..         MOV     R1,#?V8
   \   00020F   12....       LCALL   ?FLT_ADD
   \   000212   90....       MOV     DPTR,#__Constant_3d800000
   \   000215   78..         MOV     R0,#?V8
   \   000217   12....       LCALL   ?L_MOV_X
   \   00021A   78..         MOV     R0,#?V0
   \   00021C   79..         MOV     R1,#?V8
   \   00021E   12....       LCALL   ?FLT_MUL
   \   000221   78..         MOV     R0,#?V0
   \   000223   79..         MOV     R1,#?V4
   \   000225   12....       LCALL   ?FLT_ADD
   \   000228   AA..         MOV     R2,?V0
   \   00022A   AB..         MOV     R3,?V1
   \   00022C   AC..         MOV     R4,?V2
   \   00022E   AD..         MOV     R5,?V3
   \   000230   8008         SJMP    ??bme280_compensate_pressure_double_2
   \                     ??bme280_compensate_pressure_double_1:
   \   000232   7A00         MOV     R2,#0x0
   \   000234   7B00         MOV     R3,#0x0
   \   000236   7C00         MOV     R4,#0x0
   \   000238   7D00         MOV     R5,#0x0
   \                     ??bme280_compensate_pressure_double_2:
   \   00023A   02....       LJMP    ?Subroutine4 & 0xFFFF
   2138          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   12....       LCALL   ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_390:
   \   000003   78..         MOV     R0,#?V12
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000   12....       LCALL   ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_249:
   \   000003   2416         ADD     A,#0x16
   \   000005   F582         MOV     DPL,A
   \   000007   E4           CLR     A
   \   000008   38           ADDC    A,R0
   \   000009   F583         MOV     DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   12....       LCALL   ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_242:
   \   000003   2414         ADD     A,#0x14
   \   000005   12....       LCALL   ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_232:
   \   000008   22           RET
   2139          
   2140          /*!
   2141           * @brief Reads actual humidity from uncompensated humidity
   2142           * @note returns the value in relative humidity (%rH)
   2143           * @note Output value of "42.12" equals 42.12 %rH
   2144           *
   2145           *  @param v_uncom_humidity_s32 : value of uncompensated humidity
   2146           *
   2147           *
   2148           *
   2149           *  @return Return the actual humidity in floating point
   2150           *
   2151          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2152          double bme280_compensate_humidity_double(s32 v_uncom_humidity_s32)
   \                     bme280_compensate_humidity_double:
   2153          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V4,R2
   \   000007   8B..         MOV     ?V5,R3
   \   000009   8C..         MOV     ?V6,R4
   \   00000B   8D..         MOV     ?V7,R5
   2154          	double var_h = BME280_INIT_VALUE;
   2155          
   2156          	var_h = (((double)p_bme280->cal_param.t_fine) - 76800.0);
   \   00000D   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   000010   12....       LCALL   ?L_MOV_X
   \   000013   78..         MOV     R0,#?V0
   \   000015   12....       LCALL   ?L_TO_FLT
   \   000018   90....       MOV     DPTR,#__Constant_c7960000
   \   00001B   78..         MOV     R0,#?V8
   \   00001D   12....       LCALL   ?L_MOV_X
   \   000020   78..         MOV     R0,#?V0
   \   000022   79..         MOV     R1,#?V8
   \   000024   12....       LCALL   ?FLT_ADD
   2157          	if ((var_h > 0) || (var_h < 0))
   \   000027   90....       MOV     DPTR,#__Constant_1
   \   00002A   78..         MOV     R0,#?V8
   \   00002C   12....       LCALL   ?L_MOV_X
   \   00002F   78..         MOV     R0,#?V0
   \   000031   79..         MOV     R1,#?V8
   \   000033   12....       LCALL   ?FLT_GE
   \   000036   4014         JC      ??bme280_compensate_humidity_double_0
   \   000038   90....       MOV     DPTR,#__Constant_0
   \   00003B   78..         MOV     R0,#?V8
   \   00003D   12....       LCALL   ?L_MOV_X
   \   000040   78..         MOV     R0,#?V0
   \   000042   79..         MOV     R1,#?V8
   \   000044   12....       LCALL   ?FLT_LT
   \   000047   4003         JC      $+5
   \   000049   02....       LJMP    ??bme280_compensate_humidity_double_1 & 0xFFFF
   2158          		var_h = (v_uncom_humidity_s32 -
   2159          		(((double)p_bme280->cal_param.dig_H4) * 64.0 +
   2160          		((double)p_bme280->cal_param.dig_H5) / 16384.0 * var_h))*
   2161          		(((double)p_bme280->cal_param.dig_H2) / 65536.0 *
   2162          		(1.0 + ((double) p_bme280->cal_param.dig_H6)
   2163          		/ 67108864.0 * var_h * (1.0 + ((double)
   2164          		p_bme280->cal_param.dig_H3) / 67108864.0 * var_h)));
   \                     ??bme280_compensate_humidity_double_0:
   \   00004C   78..         MOV     R0,#?V4
   \   00004E   12....       LCALL   ?L_TO_FLT
   \   000051   C0..         PUSH    ?V4
   \   000053   C0..         PUSH    ?V5
   \   000055   C0..         PUSH    ?V6
   \   000057   C0..         PUSH    ?V7
   \   000059   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_189:
   \   00005C   241C         ADD     A,#0x1c
   \   00005E   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   000061   12....       LCALL   ?L_TO_FLT
   \   000064   90....       MOV     DPTR,#__Constant_42800000
   \   000067   78..         MOV     R0,#?V8
   \   000069   12....       LCALL   ?L_MOV_X
   \   00006C   78..         MOV     R0,#?V4
   \   00006E   79..         MOV     R1,#?V8
   \   000070   12....       LCALL   ?FLT_MUL
   \   000073   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_190:
   \   000076   241E         ADD     A,#0x1e
   \   000078   12....       LCALL   ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_140:
   \   00007B   12....       LCALL   ?L_TO_FLT
   \   00007E   90....       MOV     DPTR,#__Constant_38800000
   \   000081   78..         MOV     R0,#?V8
   \   000083   12....       LCALL   ?L_MOV_X
   \   000086   78..         MOV     R0,#?V12
   \   000088   79..         MOV     R1,#?V8
   \   00008A   12....       LCALL   ?FLT_MUL
   \   00008D   78..         MOV     R0,#?V12
   \   00008F   79..         MOV     R1,#?V0
   \   000091   12....       LCALL   ?FLT_MUL
   \   000094   78..         MOV     R0,#?V4
   \   000096   79..         MOV     R1,#?V12
   \   000098   12....       LCALL   ?FLT_ADD
   \   00009B   D0..         POP     ?V11
   \   00009D   D0..         POP     ?V10
   \   00009F   D0..         POP     ?V9
   \   0000A1   D0..         POP     ?V8
   \   0000A3   78..         MOV     R0,#?V8
   \   0000A5   79..         MOV     R1,#?V4
   \   0000A7   12....       LCALL   ?FLT_SUB
   \   0000AA   C0..         PUSH    ?V8
   \   0000AC   C0..         PUSH    ?V9
   \   0000AE   C0..         PUSH    ?V10
   \   0000B0   C0..         PUSH    ?V11
   \   0000B2   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_191:
   \   0000B5   2419         ADD     A,#0x19
   \   0000B7   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   0000BA   12....       LCALL   ?L_TO_FLT
   \   0000BD   90....       MOV     DPTR,#__Constant_37800000
   \   0000C0   78..         MOV     R0,#?V8
   \   0000C2   12....       LCALL   ?L_MOV_X
   \   0000C5   78..         MOV     R0,#?V4
   \   0000C7   79..         MOV     R1,#?V8
   \   0000C9   12....       LCALL   ?FLT_MUL
   \   0000CC   C0..         PUSH    ?V4
   \   0000CE   C0..         PUSH    ?V5
   \   0000D0   C0..         PUSH    ?V6
   \   0000D2   C0..         PUSH    ?V7
   \   0000D4   12....       LCALL   ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_144:
   \   0000D7   F5..         MOV     ?V4,A
   \   0000D9   12....       LCALL   ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_400:
   \   0000DC   78..         MOV     R0,#?V4
   \   0000DE   12....       LCALL   ?L_TO_FLT
   \   0000E1   90....       MOV     DPTR,#__Constant_32800000
   \   0000E4   78..         MOV     R0,#?V8
   \   0000E6   12....       LCALL   ?L_MOV_X
   \   0000E9   78..         MOV     R0,#?V4
   \   0000EB   79..         MOV     R1,#?V8
   \   0000ED   12....       LCALL   ?FLT_MUL
   \   0000F0   78..         MOV     R0,#?V4
   \   0000F2   79..         MOV     R1,#?V0
   \   0000F4   12....       LCALL   ?FLT_MUL
   \   0000F7   12....       LCALL   ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_126:
   \   0000FA   78..         MOV     R0,#?V12
   \   0000FC   12....       LCALL   ?UL_TO_FLT
   \   0000FF   90....       MOV     DPTR,#__Constant_32800000
   \   000102   78..         MOV     R0,#?V8
   \   000104   12....       LCALL   ?L_MOV_X
   \   000107   78..         MOV     R0,#?V12
   \   000109   79..         MOV     R1,#?V8
   \   00010B   12....       LCALL   ?FLT_MUL
   \   00010E   78..         MOV     R0,#?V12
   \   000110   79..         MOV     R1,#?V0
   \   000112   12....       LCALL   ?FLT_MUL
   \   000115   90....       MOV     DPTR,#__Constant_3f800000
   \   000118   78..         MOV     R0,#?V0
   \   00011A   12....       LCALL   ?L_MOV_X
   \   00011D   78..         MOV     R0,#?V12
   \   00011F   79..         MOV     R1,#?V0
   \   000121   12....       LCALL   ?FLT_ADD
   \   000124   78..         MOV     R0,#?V4
   \   000126   79..         MOV     R1,#?V12
   \   000128   12....       LCALL   ?FLT_MUL
   \   00012B   90....       MOV     DPTR,#__Constant_3f800000
   \   00012E   78..         MOV     R0,#?V0
   \   000130   12....       LCALL   ?L_MOV_X
   \   000133   78..         MOV     R0,#?V4
   \   000135   79..         MOV     R1,#?V0
   \   000137   12....       LCALL   ?FLT_ADD
   \   00013A   D0..         POP     ?V11
   \   00013C   D0..         POP     ?V10
   \   00013E   D0..         POP     ?V9
   \   000140   D0..         POP     ?V8
   \   000142   78..         MOV     R0,#?V8
   \   000144   79..         MOV     R1,#?V4
   \   000146   12....       LCALL   ?FLT_MUL
   \   000149   D0..         POP     ?V3
   \   00014B   D0..         POP     ?V2
   \   00014D   D0..         POP     ?V1
   \   00014F   D0..         POP     ?V0
   \   000151   78..         MOV     R0,#?V0
   \   000153   79..         MOV     R1,#?V8
   \   000155   12....       LCALL   ?FLT_MUL
   2165          	else
   2166          		return BME280_INVALID_DATA;
   2167          	var_h = var_h * (1.0 - ((double)
   2168          	p_bme280->cal_param.dig_H1)*var_h / 524288.0);
   \   000158   75..00       MOV     ?V4,#0x0
   \   00015B   75..00       MOV     ?V5,#0x0
   \   00015E   75..80       MOV     ?V6,#-0x80
   \   000161   75..3F       MOV     ?V7,#0x3f
   \   000164   12....       LCALL   ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_128:
   \   000167   78..         MOV     R0,#?V8
   \   000169   12....       LCALL   ?UL_TO_FLT
   \   00016C   78..         MOV     R0,#?V8
   \   00016E   79..         MOV     R1,#?V0
   \   000170   12....       LCALL   ?FLT_MUL
   \   000173   90....       MOV     DPTR,#__Constant_36000000
   \   000176   78..         MOV     R0,#?V12
   \   000178   12....       LCALL   ?L_MOV_X
   \   00017B   78..         MOV     R0,#?V8
   \   00017D   79..         MOV     R1,#?V12
   \   00017F   12....       LCALL   ?FLT_MUL
   \   000182   78..         MOV     R0,#?V4
   \   000184   79..         MOV     R1,#?V8
   \   000186   12....       LCALL   ?FLT_SUB
   \   000189   78..         MOV     R0,#?V4
   \   00018B   79..         MOV     R1,#?V0
   \   00018D   12....       LCALL   ?FLT_MUL
   \   000190   85....       MOV     ?V0,?V4
   \   000193   85....       MOV     ?V1,?V5
   \   000196   85....       MOV     ?V2,?V6
   \   000199   85....       MOV     ?V3,?V7
   2169          	if (var_h > 100.0)
   \   00019C   90....       MOV     DPTR,#__Constant_42c80001
   \   00019F   78..         MOV     R0,#?V4
   \   0001A1   12....       LCALL   ?L_MOV_X
   \   0001A4   78..         MOV     R0,#?V0
   \   0001A6   79..         MOV     R1,#?V4
   \   0001A8   12....       LCALL   ?FLT_GE
   \   0001AB   5018         JNC     ??bme280_compensate_humidity_double_2
   2170          		var_h = 100.0;
   \   0001AD   75..00       MOV     ?V0,#0x0
   \   0001B0   75..00       MOV     ?V1,#0x0
   \   0001B3   75..C8       MOV     ?V2,#-0x38
   \   0001B6   75..42       MOV     ?V3,#0x42
   \   0001B9   8027         SJMP    ??bme280_compensate_humidity_double_3
   \                     ??bme280_compensate_humidity_double_1:
   \   0001BB   7A00         MOV     R2,#0x0
   \   0001BD   7B00         MOV     R3,#0x0
   \   0001BF   7C00         MOV     R4,#0x0
   \   0001C1   7D00         MOV     R5,#0x0
   \   0001C3   8025         SJMP    ??bme280_compensate_humidity_double_4
   2171          	else if (var_h < 0.0)
   \                     ??bme280_compensate_humidity_double_2:
   \   0001C5   90....       MOV     DPTR,#__Constant_0
   \   0001C8   78..         MOV     R0,#?V4
   \   0001CA   12....       LCALL   ?L_MOV_X
   \   0001CD   78..         MOV     R0,#?V0
   \   0001CF   79..         MOV     R1,#?V4
   \   0001D1   12....       LCALL   ?FLT_LT
   \   0001D4   500C         JNC     ??bme280_compensate_humidity_double_3
   2172          		var_h = 0.0;
   \   0001D6   75..00       MOV     ?V0,#0x0
   \   0001D9   75..00       MOV     ?V1,#0x0
   \   0001DC   75..00       MOV     ?V2,#0x0
   \   0001DF   75..00       MOV     ?V3,#0x0
   2173          	return var_h;
   \                     ??bme280_compensate_humidity_double_3:
   \   0001E2   AA..         MOV     R2,?V0
   \   0001E4   AB..         MOV     R3,?V1
   \   0001E6   AC..         MOV     R4,?V2
   \   0001E8   AD..         MOV     R5,?V3
   \                     ??bme280_compensate_humidity_double_4:
   \   0001EA   02....       LJMP    ??Subroutine124_0 & 0xFFFF
   2174          
   2175          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine100:
   \   000000   33           RLC     A
   \   000001   95E0         SUBB    A,0xE0 /* A   */
   \   000003   F5..         MOV     ?V5,A
   \   000005   F5..         MOV     ?V6,A
   \   000007   F5..         MOV     ?V7,A
   \   000009   22           RET
   2176          #endif
   2177          
   2178          #if defined(BME280_ENABLE_INT64) && defined(BME280_64BITSUPPORT_PRESENT)
   2179          /*!
   2180           * @brief Reads actual pressure from uncompensated pressure
   2181           * @note Returns the value in Pa as unsigned 32 bit
   2182           * integer in Q24.8 format (24 integer bits and
   2183           * 8 fractional bits).
   2184           * @note Output value of "24674867"
   2185           * represents 24674867 / 256 = 96386.2 Pa = 963.862 hPa
   2186           *
   2187           *
   2188           *
   2189           *  @param  v_uncom_pressure_s32 : value of uncompensated temperature
   2190           *
   2191           *
   2192           *  @return Return the actual pressure in u32
   2193           *
   2194          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2195          u32 bme280_compensate_pressure_int64(s32 v_uncom_pressure_s32)
   \                     bme280_compensate_pressure_int64:
   2196          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine12 & 0xFFFF
   2197          	s64 v_x1_s64r = BME280_INIT_VALUE;
   2198          	s64 v_x2_s64r = BME280_INIT_VALUE;
   2199          	s64 pressure = BME280_INIT_VALUE;
   2200          
   2201          	v_x1_s64r = ((s64)p_bme280->cal_param.t_fine)
   2202          	- 128000;
   \                     ??CrossCallReturnLabel_16:
   \   00000D   12....       LCALL   ?L_MOV_X
   \   000010   90....       MOV     DPTR,#__Constant_fffe0c00
   \   000013   78..         MOV     R0,#?V4
   \   000015   12....       LCALL   ?L_ADD_X
   2203          	v_x2_s64r = v_x1_s64r * v_x1_s64r *
   2204          	(s64)p_bme280->cal_param.dig_P6;
   2205          	v_x2_s64r = v_x2_s64r + ((v_x1_s64r *
   2206          	(s64)p_bme280->cal_param.dig_P5)
   2207          	<< BME280_SHIFT_BIT_POSITION_BY_17_BITS);
   2208          	v_x2_s64r = v_x2_s64r +
   2209          	(((s64)p_bme280->cal_param.dig_P4)
   2210          	<< BME280_SHIFT_BIT_POSITION_BY_35_BITS);
                 	   ^
Warning[Pe063]: shift count is too large
   \   000018   85....       MOV     ?V8,?V4
   \   00001B   85....       MOV     ?V9,?V5
   \   00001E   85....       MOV     ?V10,?V6
   \   000021   85....       MOV     ?V11,?V7
   \   000024   78..         MOV     R0,#?V8
   \   000026   79..         MOV     R1,#?V4
   \   000028   12....       LCALL   ?L_MUL
   \   00002B   85....       MOV     ?V0,?V8
   \   00002E   85....       MOV     ?V1,?V9
   \   000031   85....       MOV     ?V2,?V10
   \   000034   85....       MOV     ?V3,?V11
   \   000037   12....       LCALL   ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_166:
   \   00003A   12....       LCALL   ??Subroutine126_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_387:
   \   00003D   12....       LCALL   ?L_MUL
   \   000040   C0..         PUSH    ?V0
   \   000042   C0..         PUSH    ?V1
   \   000044   C0..         PUSH    ?V2
   \   000046   C0..         PUSH    ?V3
   \   000048   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_389:
   \   00004B   12....       LCALL   ?L_MUL
   \   00004E   7411         MOV     A,#0x11
   \   000050   78..         MOV     R0,#?V0
   \   000052   12....       LCALL   ?L_SHL
   \   000055   D0..         POP     ?V15
   \   000057   D0..         POP     ?V14
   \   000059   D0..         POP     ?V13
   \   00005B   D0..         POP     ?V12
   \   00005D   78..         MOV     R0,#?V12
   \   00005F   79..         MOV     R1,#?V0
   \   000061   12....       LCALL   ?L_ADD
   2211          	v_x1_s64r = ((v_x1_s64r * v_x1_s64r *
   2212          	(s64)p_bme280->cal_param.dig_P3)
   2213          	>> BME280_SHIFT_BIT_POSITION_BY_08_BITS) +
   2214          	((v_x1_s64r * (s64)p_bme280->cal_param.dig_P2)
   2215          	<< BME280_SHIFT_BIT_POSITION_BY_12_BITS);
   2216          	v_x1_s64r = (((((s64)1)
   2217          	<< BME280_SHIFT_BIT_POSITION_BY_47_BITS) + v_x1_s64r)) *
                 	^
Warning[Pe063]: shift count is too large
   2218          	((s64)p_bme280->cal_param.dig_P1)
   2219          	>> BME280_SHIFT_BIT_POSITION_BY_33_BITS;
                 	   ^
Warning[Pe063]: shift count is too large
   \   000064   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   000067   78..         MOV     R0,#?V8
   \   000069   79..         MOV     R1,#?V0
   \   00006B   12....       LCALL   ?L_MUL
   \   00006E   7408         MOV     A,#0x8
   \   000070   78..         MOV     R0,#?V8
   \   000072   12....       LCALL   ?SL_SHR
   \   000075   12....       LCALL   ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_169:
   \   000078   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_285:
   \   00007B   12....       LCALL   ?L_MUL
   \   00007E   740C         MOV     A,#0xc
   \   000080   78..         MOV     R0,#?V4
   \   000082   12....       LCALL   ?L_SHL
   \   000085   78..         MOV     R0,#?V8
   \   000087   79..         MOV     R1,#?V4
   \   000089   12....       LCALL   ?L_ADD
   \   00008C   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   00008F   12....       LCALL   ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_193:
   \   000092   78..         MOV     R0,#?V8
   \   000094   79..         MOV     R1,#?V0
   \   000096   12....       LCALL   ?L_MUL
   \   000099   741F         MOV     A,#0x1f
   \   00009B   78..         MOV     R0,#?V8
   \   00009D   12....       LCALL   ?SL_SHR
   \   0000A0   85....       MOV     ?V4,?V8
   \   0000A3   85....       MOV     ?V5,?V9
   \   0000A6   85....       MOV     ?V6,?V10
   \   0000A9   85....       MOV     ?V7,?V11
   2220          	pressure = 1048576 - v_uncom_pressure_s32;
   2221          	/* Avoid exception caused by division by zero */
   2222          	if (v_x1_s64r != BME280_INIT_VALUE)
   \   0000AC   E5..         MOV     A,?V4
   \   0000AE   45..         ORL     A,?V5
   \   0000B0   45..         ORL     A,?V6
   \   0000B2   45..         ORL     A,?V7
   \   0000B4   7003         JNZ     $+5
   \   0000B6   02....       LJMP    ??bme280_compensate_pressure_int64_0 & 0xFFFF
   2223          		#if defined __KERNEL__
   2224          			pressure = div64_s64((((pressure
   2225          			<< BME280_SHIFT_BIT_POSITION_BY_31_BITS) - v_x2_s64r)
   2226          			* 3125), v_x1_s64r);
   2227          		#else
   2228          			pressure = (((pressure
   2229          			<< BME280_SHIFT_BIT_POSITION_BY_31_BITS) - v_x2_s64r)
   2230          			* 3125) / v_x1_s64r;
   \   0000B9   75..00       MOV     ?V0,#0x0
   \   0000BC   75..00       MOV     ?V1,#0x0
   \   0000BF   75..10       MOV     ?V2,#0x10
   \   0000C2   85..82       MOV     DPL,?XSP + 0
   \   0000C5   85..83       MOV     DPH,?XSP + 1
   \   0000C8   78..         MOV     R0,#?V0
   \   0000CA   12....       LCALL   ?L_SUB_X
   \   0000CD   741F         MOV     A,#0x1f
   \   0000CF   78..         MOV     R0,#?V0
   \   0000D1   12....       LCALL   ?L_SHL
   \   0000D4   78..         MOV     R0,#?V0
   \   0000D6   79..         MOV     R1,#?V12
   \   0000D8   12....       LCALL   ?L_SUB
   \   0000DB   90....       MOV     DPTR,#__Constant_c35
   \   0000DE   78..         MOV     R0,#?V8
   \   0000E0   12....       LCALL   ?L_MOV_X
   \   0000E3   78..         MOV     R0,#?V0
   \   0000E5   79..         MOV     R1,#?V8
   \   0000E7   12....       LCALL   ?L_MUL
   \   0000EA   78..         MOV     R0,#?V0
   \   0000EC   79..         MOV     R1,#?V4
   \   0000EE   12....       LCALL   ?L_DIV_MOD
   \   0000F1   85....       MOV     ?V4,?V0
   \   0000F4   85....       MOV     ?V5,?V1
   \   0000F7   85....       MOV     ?V6,?V2
   \   0000FA   85....       MOV     ?V7,?V3
   2231          		#endif
   2232          	else
   2233          		return BME280_INVALID_DATA;
   2234          	v_x1_s64r = (((s64)p_bme280->cal_param.dig_P9) *
   2235          	(pressure >> BME280_SHIFT_BIT_POSITION_BY_13_BITS) *
   2236          	(pressure >> BME280_SHIFT_BIT_POSITION_BY_13_BITS))
   2237          	>> BME280_SHIFT_BIT_POSITION_BY_25_BITS;
   2238          	v_x2_s64r = (((s64)p_bme280->cal_param.dig_P8) *
   2239          	pressure) >> BME280_SHIFT_BIT_POSITION_BY_19_BITS;
   2240          	pressure = (((pressure + v_x1_s64r +
   2241          	v_x2_s64r) >> BME280_SHIFT_BIT_POSITION_BY_08_BITS) +
   2242          	(((s64)p_bme280->cal_param.dig_P7)
   2243          	<< BME280_SHIFT_BIT_POSITION_BY_04_BITS));
   2244          
   2245          	return (u32)pressure;
   \   0000FD   85....       MOV     ?V12,?V4
   \   000100   85....       MOV     ?V13,?V5
   \   000103   85....       MOV     ?V14,?V6
   \   000106   85....       MOV     ?V15,?V7
   \   000109   740D         MOV     A,#0xd
   \   00010B   78..         MOV     R0,#?V12
   \   00010D   12....       LCALL   ?SL_SHR
   \   000110   12....       LCALL   ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_152:
   \   000113   E0           MOVX    A,@DPTR
   \   000114   F5..         MOV     ?V0,A
   \   000116   A3           INC     DPTR
   \   000117   E0           MOVX    A,@DPTR
   \   000118   85....       MOV     ?V8,?V0
   \   00011B   F5..         MOV     ?V9,A
   \   00011D   33           RLC     A
   \   00011E   95E0         SUBB    A,0xE0 /* A   */
   \   000120   F5..         MOV     ?V10,A
   \   000122   F5..         MOV     ?V11,A
   \   000124   78..         MOV     R0,#?V8
   \   000126   79..         MOV     R1,#?V12
   \   000128   12....       LCALL   ?L_MUL
   \   00012B   78..         MOV     R0,#?V8
   \   00012D   79..         MOV     R1,#?V12
   \   00012F   12....       LCALL   ?L_MUL
   \   000132   7419         MOV     A,#0x19
   \   000134   78..         MOV     R0,#?V8
   \   000136   12....       LCALL   ?SL_SHR
   \   000139   85....       MOV     ?V0,?V4
   \   00013C   78..         MOV     R0,#?V0
   \   00013E   79..         MOV     R1,#?V8
   \   000140   12....       LCALL   ?L_ADD
   \   000143   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   000146   79..         MOV     R1,#?V4
   \   000148   12....       LCALL   ?L_MUL
   \   00014B   7413         MOV     A,#0x13
   \   00014D   78..         MOV     R0,#?V8
   \   00014F   12....       LCALL   ?SL_SHR
   \   000152   78..         MOV     R0,#?V0
   \   000154   79..         MOV     R1,#?V8
   \   000156   12....       LCALL   ?L_ADD
   \   000159   7408         MOV     A,#0x8
   \   00015B   78..         MOV     R0,#?V0
   \   00015D   12....       LCALL   ?SL_SHR
   \   000160   12....       LCALL   ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_172:
   \   000163   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_124:
   \   000166   7404         MOV     A,#0x4
   \   000168   78..         MOV     R0,#?V4
   \   00016A   12....       LCALL   ?L_SHL
   \   00016D   78..         MOV     R0,#?V0
   \   00016F   79..         MOV     R1,#?V4
   \   000171   12....       LCALL   ?L_ADD
   \   000174   AA..         MOV     R2,?V0
   \   000176   AB..         MOV     R3,?V1
   \   000178   AC..         MOV     R4,?V2
   \   00017A   AD..         MOV     R5,?V3
   \   00017C   8008         SJMP    ??bme280_compensate_pressure_int64_1
   \                     ??bme280_compensate_pressure_int64_0:
   \   00017E   7A00         MOV     R2,#0x0
   \   000180   7B00         MOV     R3,#0x0
   \   000182   7C00         MOV     R4,#0x0
   \   000184   7D00         MOV     R5,#0x0
   \                     ??bme280_compensate_pressure_int64_1:
   \   000186   02....       LJMP    ?Subroutine4 & 0xFFFF
   2246          }
   2247          
   2248          /*!
   2249           * @brief Reads actual pressure from uncompensated pressure
   2250           * @note Returns the value in Pa.
   2251           * @note Output value of "12337434"
   2252           * @note represents 12337434 / 128 = 96386.2 Pa = 963.862 hPa
   2253           *
   2254           *
   2255           *
   2256           *  @param v_uncom_pressure_s32 : value of uncompensated pressure
   2257           *
   2258           *
   2259           *  @return the actual pressure in u32
   2260           *
   2261          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2262          u32 bme280_compensate_pressure_int64_twentyfour_bit_output(
   \                     bme280_compensate_pressure_int64_twentyfour_bit_output:
   2263          s32 v_uncom_pressure_s32)
   2264          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   2265          	u32 pressure = BME280_INIT_VALUE;
   2266          
   2267          	pressure = bme280_compensate_pressure_int64(
   2268          	v_uncom_pressure_s32);
   2269          	pressure = (u32)(pressure >> BME280_SHIFT_BIT_POSITION_BY_01_BIT);
   2270          	return pressure;
   \   000005                ; Setup parameters for call to function bme280_compensate_pressure_int64
   \   000005   12....       LCALL   `??bme280_compensate_pressure_int64::?relay`; Banked call to: bme280_compensate_pressure_int64
   \   000008   8A..         MOV     ?V0,R2
   \   00000A   8B..         MOV     ?V1,R3
   \   00000C   8C..         MOV     ?V2,R4
   \   00000E   8D..         MOV     ?V3,R5
   \   000010   7401         MOV     A,#0x1
   \   000012   78..         MOV     R0,#?V0
   \   000014   12....       LCALL   ?UL_SHR
   \   000017   AA..         MOV     R2,?V0
   \   000019   AB..         MOV     R3,?V1
   \   00001B   AC..         MOV     R4,?V2
   \   00001D   AD..         MOV     R5,?V3
   \   00001F   02....       LJMP    ??Subroutine109_0 & 0xFFFF
   2271          }
   2272          #endif
   2273          
   2274          /*!
   2275           * @brief Computing waiting time for sensor data read
   2276           *
   2277           *
   2278           *
   2279           *
   2280           *  @param v_delaytime_u8 : The value of delay time for force mode
   2281           *
   2282           *
   2283           *	@retval 0 -> Success
   2284           *
   2285           *
   2286           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2287          BME280_RETURN_FUNCTION_TYPE bme280_compute_wait_time(u8
   \                     bme280_compute_wait_time:
   2288          *v_delaytime_u8)
   2289          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FC           MOV     R4,A
   \   000007   EB           MOV     A,R3
   \   000008   FD           MOV     R5,A
   2290          	/* used to return the communication result*/
   2291          	BME280_RETURN_FUNCTION_TYPE com_rslt = SUCCESS;
   2292          
   2293          	*v_delaytime_u8 = (T_INIT_MAX +
   2294          	T_MEASURE_PER_OSRS_MAX *
   2295          	(((1 <<
   2296          	p_bme280->oversamp_temperature)
   2297          	>> BME280_SHIFT_BIT_POSITION_BY_01_BIT)
   2298          	+ ((1 << p_bme280->oversamp_pressure)
   2299          	>> BME280_SHIFT_BIT_POSITION_BY_01_BIT) +
   2300          	((1 << p_bme280->oversamp_humidity)
   2301          	>> BME280_SHIFT_BIT_POSITION_BY_01_BIT))
   2302          	+ ((p_bme280->oversamp_pressure > 0) ?
   2303          	T_SETUP_PRESSURE_MAX : 0) +
   2304          	((p_bme280->oversamp_humidity > 0) ?
   2305          	T_SETUP_HUMIDITY_MAX : 0) + 15) / 16;
   \   000009   12....       LCALL   ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_145:
   \   00000C   6005         JZ      ??bme280_compute_wait_time_0
   \   00000E   75..0A       MOV     ?V0,#0xa
   \   000011   8003         SJMP    ??bme280_compute_wait_time_1
   \                     ??bme280_compute_wait_time_0:
   \   000013   75..00       MOV     ?V0,#0x0
   \                     ??bme280_compute_wait_time_1:
   \   000016   12....       LCALL   ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_147:
   \   000019   6004         JZ      ??bme280_compute_wait_time_2
   \   00001B   7E0A         MOV     R6,#0xa
   \   00001D   8002         SJMP    ??bme280_compute_wait_time_3
   \                     ??bme280_compute_wait_time_2:
   \   00001F   7E00         MOV     R6,#0x0
   \                     ??bme280_compute_wait_time_3:
   \   000021   75..01       MOV     ?V2,#0x1
   \   000024   75..00       MOV     ?V3,#0x0
   \   000027   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_154:
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   78..         MOV     R0,#?V2
   \   00002D   12....       LCALL   ?S_SHL
   \   000030   04           INC     A
   \   000031   78..         MOV     R0,#?V2
   \   000033   12....       LCALL   ?SS_SHR
   \   000036   75..01       MOV     ?V4,#0x1
   \   000039   F5..         MOV     ?V5,A
   \   00003B   12....       LCALL   ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_146:
   \   00003E   78..         MOV     R0,#?V4
   \   000040   12....       LCALL   ?S_SHL
   \   000043   04           INC     A
   \   000044   78..         MOV     R0,#?V4
   \   000046   12....       LCALL   ?SS_SHR
   \   000049   E5..         MOV     A,?V2
   \   00004B   25..         ADD     A,?V4
   \   00004D   FA           MOV     R2,A
   \   00004E   E5..         MOV     A,?V3
   \   000050   35..         ADDC    A,?V5
   \   000052   FB           MOV     R3,A
   \   000053   75..01       MOV     ?V2,#0x1
   \   000056   75..00       MOV     ?V3,#0x0
   \   000059   12....       LCALL   ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_148:
   \   00005C   78..         MOV     R0,#?V2
   \   00005E   12....       LCALL   ?S_SHL
   \   000061   04           INC     A
   \   000062   78..         MOV     R0,#?V2
   \   000064   12....       LCALL   ?SS_SHR
   \   000067   EA           MOV     A,R2
   \   000068   25..         ADD     A,?V2
   \   00006A   F8           MOV     R0,A
   \   00006B   EB           MOV     A,R3
   \   00006C   35..         ADDC    A,?V3
   \   00006E   F9           MOV     R1,A
   \   00006F   E8           MOV     A,R0
   \   000070   75F025       MOV     B,#0x25
   \   000073   A4           MUL     AB
   \   000074   F8           MOV     R0,A
   \   000075   AAF0         MOV     R2,B
   \   000077   75F025       MOV     B,#0x25
   \   00007A   E9           MOV     A,R1
   \   00007B   A4           MUL     AB
   \   00007C   2A           ADD     A,R2
   \   00007D   F9           MOV     R1,A
   \   00007E   E8           MOV     A,R0
   \   00007F   25..         ADD     A,?V0
   \   000081   F8           MOV     R0,A
   \   000082   E4           CLR     A
   \   000083   39           ADDC    A,R1
   \   000084   F9           MOV     R1,A
   \   000085   E8           MOV     A,R0
   \   000086   2E           ADD     A,R6
   \   000087   F8           MOV     R0,A
   \   000088   E4           CLR     A
   \   000089   39           ADDC    A,R1
   \   00008A   F9           MOV     R1,A
   \   00008B   E8           MOV     A,R0
   \   00008C   2423         ADD     A,#0x23
   \   00008E   F8           MOV     R0,A
   \   00008F   5001         JNC     ??bme280_compute_wait_time_4
   \   000091   09           INC     R1
   \                     ??bme280_compute_wait_time_4:
   \   000092   7A10         MOV     R2,#0x10
   \   000094   7B00         MOV     R3,#0x0
   \   000096   12....       LCALL   ?S_DIV_MOD
   \   000099   E8           MOV     A,R0
   \   00009A   8C82         MOV     DPL,R4
   \   00009C   8D83         MOV     DPH,R5
   \   00009E   F0           MOVX    @DPTR,A
   2306          	return com_rslt;
   \   00009F   7900         MOV     R1,#0x0
   \   0000A1   02....       LJMP    ?Subroutine7 & 0xFFFF
   2307          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000   12....       LCALL   ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_236:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000   12....       LCALL   ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_248:
   \   000003   2428         ADD     A,#0x28
   \   000005   12....       LCALL   ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_270:
   \   000008   22           RET
   2308          
   2309          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2310          s16 bme280_data_readout_template(struct bme280_t *bme280, struct value *val)
   \                     bme280_data_readout_template:
   2311          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
   2312          	/* The variable used to assign the standby time*/
   2313          	u8 v_stand_by_time_u8 = BME280_INIT_VALUE;
   \   000012   85..82       MOV     DPL,?XSP + 0
   \   000015   85..83       MOV     DPH,?XSP + 1
   \   000018   E4           CLR     A
   \   000019   F0           MOVX    @DPTR,A
   2314          	/* The variable used to read uncompensated temperature*/
   2315          	s32 v_data_uncomp_temp_s32 = BME280_INIT_VALUE;
   \   00001A   7409         MOV     A,#0x9
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   12....       LCALL   ?Subroutine20 & 0xFFFF
   2316          	/* The variable used to read uncompensated pressure*/
   2317          	s32 v_data_uncomp_pres_s32 = BME280_INIT_VALUE;
   \                     ??CrossCallReturnLabel_39:
   \   000022   7405         MOV     A,#0x5
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   12....       LCALL   ?Subroutine20 & 0xFFFF
   2318          	/* The variable used to read uncompensated pressure*/
   2319          	s32 v_data_uncomp_hum_s32 = BME280_INIT_VALUE;
   \                     ??CrossCallReturnLabel_40:
   \   00002A   04           INC     A
   \   00002B   12....       LCALL   ?XSTACK_DISP0_8
   \   00002E   12....       LCALL   ?Subroutine20 & 0xFFFF
   2320          	/* The variable used to read compensated temperature*/
   2321          	s32 v_comp_temp_s32[2] = {BME280_INIT_VALUE, BME280_INIT_VALUE};
   2322          	/* The variable used to read compensated pressure*/
   2323          	u32 v_comp_press_u32[2] = {BME280_INIT_VALUE, BME280_INIT_VALUE};
   2324          	/* The variable used to read compensated humidity*/
   2325          	u32 v_comp_humidity_u32[2] = {BME280_INIT_VALUE, BME280_INIT_VALUE};
   2326          
   2327          	/* result of communication results*/
   2328          	s32 com_rslt = ERROR;
   2329          
   2330          	SPI_routine(bme280);
   \                     ??CrossCallReturnLabel_41:
   \   000031                ; Setup parameters for call to function SPI_routine
   \   000031   12....       LCALL   `??SPI_routine::?relay`; Banked call to: SPI_routine
   2331          
   2332          	com_rslt = bme280_init(bme280);
   \   000034                ; Setup parameters for call to function bme280_init
   \   000034   AA..         MOV     R2,?V0
   \   000036   AB..         MOV     R3,?V1
   \   000038   12....       LCALL   `??bme280_init::?relay`; Banked call to: bme280_init
   \   00003B   E9           MOV     A,R1
   \   00003C   F5..         MOV     ?V13,A
   2333          	
   2334          	/*	For reading the pressure, humidity and temperature data it is required to
   2335          	 *	set the OSS setting of humidity, pressure and temperature
   2336          	 * The "BME280_CTRLHUM_REG_OSRSH" register sets the humidity
   2337          	 * data acquisition options of the device.
   2338          	 * changes to this registers only become effective after a write operation to
   2339          	 * "BME280_CTRLMEAS_REG" register.
   2340          	 * In the code automated reading and writing of "BME280_CTRLHUM_REG_OSRSH"
   2341          	 * register first set the "BME280_CTRLHUM_REG_OSRSH" and then read and write
   2342          	 * the "BME280_CTRLMEAS_REG" register in the function*/
   2343          	com_rslt += bme280_set_oversamp_humidity(BME280_OVERSAMP_1X);
   \   00003E                ; Setup parameters for call to function bme280_set_oversamp_humidity
   \   00003E   7901         MOV     R1,#0x1
   \   000040   12....       LCALL   `??bme280_set_oversamp_humidity::?relay`; Banked call to: bme280_set_oversamp_humidity
   \   000043   E9           MOV     A,R1
   \   000044   F5..         MOV     ?V12,A
   2344          
   2345          	/* set the pressure oversampling*/
   2346          	com_rslt += bme280_set_oversamp_pressure(BME280_OVERSAMP_2X);
   \   000046                ; Setup parameters for call to function bme280_set_oversamp_pressure
   \   000046   7902         MOV     R1,#0x2
   \   000048   12....       LCALL   `??bme280_set_oversamp_pressure::?relay`; Banked call to: bme280_set_oversamp_pressure
   \   00004B   E9           MOV     A,R1
   \   00004C   F5..         MOV     ?V11,A
   2347          
   2348          	/* set the temperature oversampling*/
   2349          	com_rslt += bme280_set_oversamp_temperature(BME280_OVERSAMP_4X);
   \   00004E                ; Setup parameters for call to function bme280_set_oversamp_temperature
   \   00004E   7903         MOV     R1,#0x3
   \   000050   12....       LCALL   `??bme280_set_oversamp_temperature::?relay`; Banked call to: bme280_set_oversamp_temperature
   \   000053   E9           MOV     A,R1
   \   000054   F5..         MOV     ?V10,A
   2350          
   2351          
   2352          	/* This API used to Write the standby time of the sensor input
   2353          	 *	value have to be given
   2354          	 *	Normal mode comprises an automated perpetual cycling between an (active)
   2355          	 *	Measurement period and an (inactive) standby period.
   2356          	 *	The standby time is determined by the contents of the register t_sb.
   2357          	 *	Standby time can be set using BME280_STANDBYTIME_125_MS.
   2358          	 *	Usage Hint : bme280_set_standbydur(BME280_STANDBYTIME_125_MS)*/
   2359            com_rslt += bme280_set_standby_durn(BME280_STANDBY_TIME_125_MS);
   \   000056                ; Setup parameters for call to function bme280_set_standby_durn
   \   000056   7902         MOV     R1,#0x2
   \   000058   12....       LCALL   `??bme280_set_standby_durn::?relay`; Banked call to: bme280_set_standby_durn
   \   00005B   E9           MOV     A,R1
   \   00005C   F5..         MOV     ?V9,A
   2360          	
   2361          	/* This API used to read back the written value of standby time*/
   2362          	com_rslt += bme280_get_standby_durn(&v_stand_by_time_u8);
   \   00005E                ; Setup parameters for call to function bme280_get_standby_durn
   \   00005E   AA..         MOV     R2,?XSP + 0
   \   000060   AB..         MOV     R3,?XSP + 1
   \   000062   12....       LCALL   `??bme280_get_standby_durn::?relay`; Banked call to: bme280_get_standby_durn
   \   000065   E9           MOV     A,R1
   \   000066   F5..         MOV     ?V8,A
   2363          		
   2364          	/* Set the power mode as NORMAL*/
   2365          	com_rslt += bme280_set_power_mode(BME280_NORMAL_MODE);
   \   000068                ; Setup parameters for call to function bme280_set_power_mode
   \   000068   7903         MOV     R1,#0x3
   \   00006A   12....       LCALL   `??bme280_set_power_mode::?relay`; Banked call to: bme280_set_power_mode
   \   00006D   E9           MOV     A,R1
   \   00006E   F5..         MOV     ?V3,A
   2366          	
   2367          	//
   2368          	// Delay 126 [ms]
   2369          	//
   2370          	BME280_delay_msek(126);
   \   000070                ; Setup parameters for call to function BME280_delay_msek
   \   000070   90....       MOV     DPTR,#__Constant_7e
   \   000073   12....       LCALL   ?XLOAD_R2345
   \   000076   12....       LCALL   `??BME280_delay_msek::?relay`; Banked call to: BME280_delay_msek
   2371          
   2372          /*------------------------------------------------------------------*
   2373          ************ START READ UNCOMPENSATED PRESSURE, TEMPERATURE
   2374          AND HUMIDITY DATA ********
   2375          *---------------------------------------------------------------------*/
   2376          	/* API is used to read the uncompensated temperature*/
   2377          	com_rslt += bme280_read_uncomp_temperature(&v_data_uncomp_temp_s32);
   \   000079                ; Setup parameters for call to function bme280_read_uncomp_temperature
   \   000079   7409         MOV     A,#0x9
   \   00007B   12....       LCALL   ?XSTACK_DISP101_8
   \   00007E   12....       LCALL   `??bme280_read_uncomp_temperature::?relay`; Banked call to: bme280_read_uncomp_temperature
   \   000081   E9           MOV     A,R1
   \   000082   F5..         MOV     ?V2,A
   2378          
   2379          	/* API is used to read the uncompensated pressure*/
   2380          	com_rslt += bme280_read_uncomp_pressure(&v_data_uncomp_pres_s32);
   \   000084                ; Setup parameters for call to function bme280_read_uncomp_pressure
   \   000084   7405         MOV     A,#0x5
   \   000086   12....       LCALL   ?XSTACK_DISP101_8
   \   000089   12....       LCALL   `??bme280_read_uncomp_pressure::?relay`; Banked call to: bme280_read_uncomp_pressure
   \   00008C   E9           MOV     A,R1
   \   00008D   F5..         MOV     ?V1,A
   2381          
   2382          	/* API is used to read the uncompensated humidity*/
   2383          	com_rslt += bme280_read_uncomp_humidity(&v_data_uncomp_hum_s32);
   \   00008F                ; Setup parameters for call to function bme280_read_uncomp_humidity
   \   00008F   7401         MOV     A,#0x1
   \   000091   12....       LCALL   ?XSTACK_DISP101_8
   \   000094   12....       LCALL   `??bme280_read_uncomp_humidity::?relay`; Banked call to: bme280_read_uncomp_humidity
   \   000097   E9           MOV     A,R1
   \   000098   F5..         MOV     ?V0,A
   2384          
   2385          //	com_rslt += bme280_read_uncomp_pressure_temperature_humidity(
   2386          //	&v_data_uncomp_temp_s32, &v_data_uncomp_pres_s32, &v_data_uncomp_hum_s32);
   2387            /*--------------------------------------------------------------------*
   2388          ************ END READ UNCOMPENSATED PRESSURE AND TEMPERATURE********
   2389          *-------------------------------------------------------------------------*/
   2390          
   2391          /*------------------------------------------------------------------*
   2392          ************ START READ COMPENSATED PRESSURE, TEMPERATURE
   2393          AND HUMIDITY DATA ********
   2394          *---------------------------------------------------------------------*/
   2395          	/* API is used to compute the compensated temperature*/
   2396          	v_comp_temp_s32[0] = bme280_compensate_temperature_int32(
   2397          			v_data_uncomp_temp_s32);
   \   00009A                ; Setup parameters for call to function bme280_compensate_temperature_int32
   \   00009A   7409         MOV     A,#0x9
   \   00009C   12....       LCALL   ?XSTACK_DISP0_8
   \   00009F   12....       LCALL   ?XLOAD_R2345
   \   0000A2   12....       LCALL   `??bme280_compensate_temperature_int32::?relay`; Banked call to: bme280_compensate_temperature_int32
   \   0000A5   EA           MOV     A,R2
   \   0000A6   F8           MOV     R0,A
   \   0000A7   EB           MOV     A,R3
   \   0000A8   F9           MOV     R1,A
   \   0000A9   EC           MOV     A,R4
   \   0000AA   FA           MOV     R2,A
   \   0000AB   ED           MOV     A,R5
   \   0000AC   FB           MOV     R3,A
   \   0000AD   7411         MOV     A,#0x11
   \   0000AF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B2   12....       LCALL   ?XSTORE_R0123
   2398          
   2399          	/* API is used to compute the compensated pressure*/
   2400          	v_comp_press_u32[0] = bme280_compensate_pressure_int32(
   2401          			v_data_uncomp_pres_s32);
   \   0000B5                ; Setup parameters for call to function bme280_compensate_pressure_int32
   \   0000B5   7405         MOV     A,#0x5
   \   0000B7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BA   12....       LCALL   ?XLOAD_R2345
   \   0000BD   12....       LCALL   `??bme280_compensate_pressure_int32::?relay`; Banked call to: bme280_compensate_pressure_int32
   \   0000C0   740D         MOV     A,#0xd
   \   0000C2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C5   12....       LCALL   ?XSTORE_R2345
   2402          
   2403          	/* API is used to compute the compensated humidity*/
   2404          	v_comp_humidity_u32[0] = bme280_compensate_humidity_int32(
   2405          			v_data_uncomp_hum_s32);
   \   0000C8                ; Setup parameters for call to function bme280_compensate_humidity_int32
   \   0000C8   7401         MOV     A,#0x1
   \   0000CA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CD   12....       LCALL   ?XLOAD_R2345
   \   0000D0   12....       LCALL   `??bme280_compensate_humidity_int32::?relay`; Banked call to: bme280_compensate_humidity_int32
   \   0000D3   8A..         MOV     ?V4,R2
   \   0000D5   8B..         MOV     ?V5,R3
   \   0000D7   8C..         MOV     ?V6,R4
   \   0000D9   8D..         MOV     ?V7,R5
   2406          
   2407          //		/* API is used to read the compensated temperature, humidity and pressure*/
   2408          //	com_rslt += bme280_read_pressure_temperature_humidity(
   2409          //	&v_comp_press_u32[1], &v_comp_temp_s32[1],  &v_comp_humidity_u32[1]);
   2410          /*--------------------------------------------------------------------*
   2411          ************ END READ COMPENSATED PRESSURE, TEMPERATURE AND HUMIDITY ********
   2412          *-------------------------------------------------------------------------*/
   2413          		val->temp = v_comp_temp_s32[0];
   \   0000DB   7411         MOV     A,#0x11
   \   0000DD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E0   12....       LCALL   ?XLOAD_R0123
   \   0000E3   8E82         MOV     DPL,R6
   \   0000E5   8F83         MOV     DPH,R7
   \   0000E7   12....       LCALL   ?XSTORE_R0123
   2414          		val->press = v_comp_press_u32[0];
   \   0000EA   740D         MOV     A,#0xd
   \   0000EC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EF   12....       LCALL   ?XLOAD_R0123
   \   0000F2   8E82         MOV     DPL,R6
   \   0000F4   8F83         MOV     DPH,R7
   \   0000F6   A3           INC     DPTR
   \   0000F7   A3           INC     DPTR
   \   0000F8   A3           INC     DPTR
   \   0000F9   A3           INC     DPTR
   \   0000FA   12....       LCALL   ?XSTORE_R0123
   2415          		val->humid = v_comp_humidity_u32[0];
   \   0000FD   8E82         MOV     DPL,R6
   \   0000FF   8F83         MOV     DPH,R7
   \   000101   A3           INC     DPTR
   \   000102   A3           INC     DPTR
   \   000103   A3           INC     DPTR
   \   000104   A3           INC     DPTR
   \   000105   A3           INC     DPTR
   \   000106   A3           INC     DPTR
   \   000107   A3           INC     DPTR
   \   000108   A3           INC     DPTR
   \   000109   78..         MOV     R0,#?V4
   \   00010B   12....       LCALL   ?L_MOV_TO_X
   2416          		
   2417          //		Value.temp = v_comp_temp_s32[1];
   2418          //		Value.press = v_comp_press_u32[1];
   2419          //		Value.humid = v_comp_humidity_u32[1];
   2420          /*-----------------------------------------------------------------------*
   2421          ************************* START DE-INITIALIZATION ***********************
   2422          *-------------------------------------------------------------------------*/
   2423          	/*	For de-initialization it is required to set the mode of
   2424          	 *	the sensor as "SLEEP"
   2425          	 *	the device reaches the lowest power consumption only
   2426          	 *	In SLEEP mode no measurements are performed
   2427          	 *	All registers are accessible
   2428          	 *	by using the below API able to set the power mode as SLEEP*/
   2429          	 /* Set the power mode as SLEEP*/
   2430          //	com_rslt += bme280_set_power_mode(BME280_SLEEP_MODE);
   2431          /*---------------------------------------------------------------------*
   2432          ************************* END DE-INITIALIZATION **********************
   2433          *---------------------------------------------------------------------*/
   2434          
   2435          	return com_rslt;
   \   00010E   E5..         MOV     A,?V13
   \   000110   F8           MOV     R0,A
   \   000111   33           RLC     A
   \   000112   95E0         SUBB    A,0xE0 /* A   */
   \   000114   F9           MOV     R1,A
   \   000115   E5..         MOV     A,?V12
   \   000117   12....       LCALL   ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_200:
   \   00011A   E5..         MOV     A,?V11
   \   00011C   12....       LCALL   ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_201:
   \   00011F   E5..         MOV     A,?V10
   \   000121   12....       LCALL   ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_202:
   \   000124   E5..         MOV     A,?V9
   \   000126   12....       LCALL   ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_203:
   \   000129   E5..         MOV     A,?V8
   \   00012B   12....       LCALL   ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_204:
   \   00012E   E5..         MOV     A,?V3
   \   000130   12....       LCALL   ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_205:
   \   000133   E5..         MOV     A,?V2
   \   000135   12....       LCALL   ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_206:
   \   000138   E5..         MOV     A,?V1
   \   00013A   12....       LCALL   ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_207:
   \   00013D   E5..         MOV     A,?V0
   \   00013F   FA           MOV     R2,A
   \   000140   33           RLC     A
   \   000141   95E0         SUBB    A,0xE0 /* A   */
   \   000143   FB           MOV     R3,A
   \   000144   E8           MOV     A,R0
   \   000145   2A           ADD     A,R2
   \   000146   FA           MOV     R2,A
   \   000147   E9           MOV     A,R1
   \   000148   3B           ADDC    A,R3
   \   000149   FB           MOV     R3,A
   \   00014A   7415         MOV     A,#0x15
   \   00014C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00014F   7F0E         MOV     R7,#0xe
   \   000151   02....       LJMP    ?BANKED_LEAVE_XDATA
   2436          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine72:
   \   000000   FA           MOV     R2,A
   \   000001   33           RLC     A
   \   000002   95E0         SUBB    A,0xE0 /* A   */
   \   000004   FB           MOV     R3,A
   \   000005   E8           MOV     A,R0
   \   000006   2A           ADD     A,R2
   \   000007   F8           MOV     R0,A
   \   000008   E9           MOV     A,R1
   \   000009   3B           ADDC    A,R3
   \   00000A   F9           MOV     R1,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   12....       LCALL   ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_226:
   \   000003   22           RET
   2437          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2438          s8 SPI_routine(struct bme280_t *bme280) 
   \                     SPI_routine:
   2439          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2440          /*--------------------------------------------------------------------------*
   2441           *  By using bme280 the following structure parameter can be accessed
   2442           *	Bus write function pointer: BME280_WR_FUNC_PTR
   2443           *	Bus read function pointer: BME280_RD_FUNC_PTR
   2444           *	Delay function pointer: delay_msec
   2445           *--------------------------------------------------------------------------*/
   2446          	bme280->bus_write = BME280_SPI_bus_write;
   \   000004   EA           MOV     A,R2
   \   000005   242D         ADD     A,#0x2d
   \   000007   F582         MOV     DPL,A
   \   000009   E4           CLR     A
   \   00000A   3B           ADDC    A,R3
   \   00000B   F583         MOV     DPH,A
   \   00000D   74..         MOV     A,#`??BME280_SPI_bus_write::?relay` & 0xff
   \   00000F   F0           MOVX    @DPTR,A
   \   000010   A3           INC     DPTR
   \   000011   74..         MOV     A,#(`??BME280_SPI_bus_write::?relay` >> 8) & 0xff
   \   000013   F0           MOVX    @DPTR,A
   2447          	bme280->bus_read = BME280_SPI_bus_read;
   \   000014   EA           MOV     A,R2
   \   000015   242F         ADD     A,#0x2f
   \   000017   F582         MOV     DPL,A
   \   000019   E4           CLR     A
   \   00001A   3B           ADDC    A,R3
   \   00001B   F583         MOV     DPH,A
   \   00001D   74..         MOV     A,#`??BME280_SPI_bus_read::?relay` & 0xff
   \   00001F   F0           MOVX    @DPTR,A
   \   000020   A3           INC     DPTR
   \   000021   74..         MOV     A,#(`??BME280_SPI_bus_read::?relay` >> 8) & 0xff
   \   000023   F0           MOVX    @DPTR,A
   2448          	bme280->delay_msec = BME280_delay_msek;
   \   000024   EA           MOV     A,R2
   \   000025   2431         ADD     A,#0x31
   \   000027   F582         MOV     DPL,A
   \   000029   E4           CLR     A
   \   00002A   3B           ADDC    A,R3
   \   00002B   F583         MOV     DPH,A
   \   00002D   74..         MOV     A,#`??BME280_delay_msek::?relay` & 0xff
   \   00002F   F0           MOVX    @DPTR,A
   \   000030   A3           INC     DPTR
   \   000031   74..         MOV     A,#(`??BME280_delay_msek::?relay` >> 8) & 0xff
   \   000033   F0           MOVX    @DPTR,A
   2449          
   2450          	return BME280_INIT_VALUE;
   \   000034   7900         MOV     R1,#0x0
   \   000036                REQUIRE ?Subroutine0
   \   000036                ; // Fall through to label ?Subroutine0
   2451          }
   2452          
   2453          /*	\Brief: The function is used as SPI bus read
   2454           *	\Return : Status of the SPI read
   2455           *	\param dev_addr : The device address of the sensor
   2456           *	\param reg_addr : Address of the first register, will data is going to be read
   2457           *	\param reg_data : This data read from the sensor, which is hold in an array
   2458           *	\param cnt : The no of byte of data to be read */
   2459          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2460          s8 BME280_SPI_bus_read(u8 dev_addr, u8 reg_addr, u8 *reg_data, u8 cnt)
   \                     BME280_SPI_bus_read:
   2461          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 26
   \   000005   74E6         MOV     A,#-0x1a
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V1,R2
   \   00000C   EC           MOV     A,R4
   \   00000D   FE           MOV     R6,A
   \   00000E   ED           MOV     A,R5
   \   00000F   FF           MOV     R7,A
   \   000010   8B..         MOV     ?V2,R3
   2462          	s32 iError = BME280_INIT_VALUE;
   2463          	
   2464                  
   2465                  int init = 0;
   2466          	unsigned long ulTmp;
   2467          	unsigned char array [SPI_BUFFER_LEN] = {0};
   \   000012   90....       MOV     DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_1`
   \   000015   AC..         MOV     R4,?XSP + 0
   \   000017   AD..         MOV     R5,?XSP + 1
   \   000019   741A         MOV     A,#0x1a
   \   00001B   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   2468          	unsigned char stringpos; 
   2469          	
   2470          	//cleanFIFO();
   2471          	
   2472          	array[init] = reg_addr | SPI_READ;
   \   00001E   7480         MOV     A,#-0x80
   \   000020   45..         ORL     A,?V1
   \   000022   85..82       MOV     DPL,?XSP + 0
   \   000025   85..83       MOV     DPH,?XSP + 1
   \   000028   F0           MOVX    @DPTR,A
   2473          	
   2474          	/*
   2475          	 * CS = '0'
   2476          	 */
   2477          	P1_3 = 0;  
   \   000029   C293         CLR     0x90.3
   2478                  BME280_delay_msek(100);
   \   00002B                ; Setup parameters for call to function BME280_delay_msek
   \   00002B   90....       MOV     DPTR,#__Constant_64
   \   00002E   12....       LCALL   ?XLOAD_R2345
   \   000031   12....       LCALL   `??BME280_delay_msek::?relay`; Banked call to: BME280_delay_msek
   2479          	
   2480                  SPIDataPut( array[init]);
   \   000034                ; Setup parameters for call to function SPIDataPut
   \   000034   85..82       MOV     DPL,?XSP + 0
   \   000037   85..83       MOV     DPH,?XSP + 1
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   F9           MOV     R1,A
   \   00003C   12....       LCALL   `??SPIDataPut::?relay`; Banked call to: SPIDataPut
   2481          	//while((U1CSR & 0x01) == 0x01)
   2482                  //{
   2483                  //}
   2484          	ulTmp = SPIDataGet();
   \   00003F                ; Setup parameters for call to function SPIDataGet
   \   00003F   12....       LCALL   `??SPIDataGet::?relay`; Banked call to: SPIDataGet
   2485          	
   2486          	for (stringpos = init; stringpos < cnt; stringpos++) 
   \   000042   75..00       MOV     ?V0,#0x0
   \   000045   801A         SJMP    ??BME280_SPI_bus_read_0
   2487          	{
   2488          		SPIDataPut(0xAA);
   \                     ??BME280_SPI_bus_read_1:
   \   000047                ; Setup parameters for call to function SPIDataPut
   \   000047   79AA         MOV     R1,#-0x56
   \   000049   12....       LCALL   `??SPIDataPut::?relay`; Banked call to: SPIDataPut
   2489          		//while((U1CSR & 0x01) == 0x01)
   2490                          //{
   2491                          //}
   2492          		
   2493          		ulTmp = SPIDataGet();
   2494          		array[stringpos + BME280_DATA_INDEX] = ulTmp & 0xff;
   \   00004C                ; Setup parameters for call to function SPIDataGet
   \   00004C   12....       LCALL   `??SPIDataGet::?relay`; Banked call to: SPIDataGet
   \   00004F   E9           MOV     A,R1
   \   000050   12....       LCALL   ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_219:
   \   000053   E9           MOV     A,R1
   \   000054   F0           MOVX    @DPTR,A
   2495          		*(reg_data + stringpos) = array[stringpos+BME280_DATA_INDEX];
   \   000055   EE           MOV     A,R6
   \   000056   28           ADD     A,R0
   \   000057   F582         MOV     DPL,A
   \   000059   E4           CLR     A
   \   00005A   3F           ADDC    A,R7
   \   00005B   F583         MOV     DPH,A
   \   00005D   E9           MOV     A,R1
   \   00005E   F0           MOVX    @DPTR,A
   2496                  }
   \   00005F   05..         INC     ?V0
   \                     ??BME280_SPI_bus_read_0:
   \   000061   E5..         MOV     A,?V0
   \   000063   C3           CLR     C
   \   000064   95..         SUBB    A,?V2
   \   000066   40DF         JC      ??BME280_SPI_bus_read_1
   2497          	
   2498          	/*
   2499          	 * CS = '1'
   2500          	 */
   2501                  
   2502                  
   2503                  
   2504                  BME280_delay_msek(100);
   \   000068                ; Setup parameters for call to function BME280_delay_msek
   \   000068   90....       MOV     DPTR,#__Constant_64
   \   00006B   12....       LCALL   ?XLOAD_R2345
   \   00006E   12....       LCALL   `??BME280_delay_msek::?relay`; Banked call to: BME280_delay_msek
   2505          	P1_3 = 1;
   \   000071   D293         SETB    0x90.3
   2506          	
   2507                  
   2508                  
   2509          	//bme280ReadSPI(reg_addr, reg_data, cnt);
   2510          
   2511          
   2512          	return (s8)iError;
   \   000073   7900         MOV     R1,#0x0
   \   000075   741A         MOV     A,#0x1a
   \   000077   02....       LJMP    ??Subroutine118_0 & 0xFFFF
   \   00007A                REQUIRE _A_P1
   2513          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine77:
   \   000000   FA           MOV     R2,A
   \   000001   A8..         MOV     R0,?V0
   \   000003   85..82       MOV     DPL,?XSP + 0
   \   000006   85..83       MOV     DPH,?XSP + 1
   \   000009   E582         MOV     A,DPL
   \   00000B   28           ADD     A,R0
   \   00000C   F582         MOV     DPL,A
   \   00000E   E4           CLR     A
   \   00000F   3583         ADDC    A,DPH
   \   000011   F583         MOV     DPH,A
   \   000013   A3           INC     DPTR
   \   000014   22           RET
   2514          
   2515          /*	\Brief: The function is used as SPI bus write
   2516           *	\Return : Status of the SPI write
   2517           *	\param dev_addr : The device address of the sensor
   2518           *	\param reg_addr : Address of the first register, will data is going to be written
   2519           *	\param reg_data : It is a value hold in the array,
   2520           *		will be used for write the value into the register
   2521           *	\param cnt : The no of byte of data to be write
   2522           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2523          s8 BME280_SPI_bus_write(u8 dev_addr, u8 reg_addr, u8 *reg_data, u8 cnt)
   \                     BME280_SPI_bus_write:
   2524          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V1,R2
   \   00000C   EC           MOV     A,R4
   \   00000D   FE           MOV     R6,A
   \   00000E   ED           MOV     A,R5
   \   00000F   FF           MOV     R7,A
   \   000010   8B..         MOV     ?V2,R3
   2525          	s32 iError = BME280_INIT_VALUE;
   2526                  
   2527                  unsigned char init = 0;
   2528          	unsigned char array[SPI_BUFFER_LEN_WRITE * BME280_ADDRESS_INDEX];
   2529          	unsigned char	stringpos = 0;
   \   000012   75..00       MOV     ?V3,#0x0
   2530          	unsigned char index = 0;
   2531          	
   2532          	/*
   2533          	 * CS = '0'
   2534          	 */
   2535          	P1_3 = 0;
   \   000015   C293         CLR     0x90.3
   2536          	BME280_delay_msek(100);
   \   000017                ; Setup parameters for call to function BME280_delay_msek
   \   000017   90....       MOV     DPTR,#__Constant_64
   \   00001A   12....       LCALL   ?XLOAD_R2345
   \   00001D   12....       LCALL   `??BME280_delay_msek::?relay`; Banked call to: BME280_delay_msek
   2537                  
   2538          	for (stringpos = init; stringpos < cnt; stringpos++) 
   \   000020   8038         SJMP    ??BME280_SPI_bus_write_0
   2539          	{
   2540          		/* the operation of (reg_addr++)&0x7F done as per the
   2541          		SPI communication protocol specified in the data sheet
   2542          		*/
   2543          		index = stringpos * BME280_ADDRESS_INDEX;
   \                     ??BME280_SPI_bus_write_1:
   \   000022   E5..         MOV     A,?V3
   \   000024   C3           CLR     C
   \   000025   33           RLC     A
   \   000026   F5..         MOV     ?V0,A
   2544          		array[index] = (reg_addr) & SPI_WRITE;
   \   000028   747F         MOV     A,#0x7f
   \   00002A   55..         ANL     A,?V1
   \   00002C   F9           MOV     R1,A
   \   00002D   AA..         MOV     R2,?V0
   \   00002F   85..82       MOV     DPL,?XSP + 0
   \   000032   85..83       MOV     DPH,?XSP + 1
   \   000035   E582         MOV     A,DPL
   \   000037   2A           ADD     A,R2
   \   000038   F582         MOV     DPL,A
   \   00003A   E4           CLR     A
   \   00003B   3583         ADDC    A,DPH
   \   00003D   F583         MOV     DPH,A
   \   00003F   E9           MOV     A,R1
   \   000040   F0           MOVX    @DPTR,A
   \   000041                ; Setup parameters for call to function SPIDataPut
   2545          		SPIDataPut( array[index]);
   \   000041   12....       LCALL   `??SPIDataPut::?relay`; Banked call to: SPIDataPut
   2546          		
   2547                          
   2548                          //while((U1CSR & 0x01) == 0x01)
   2549                          //{
   2550                          //}
   2551          		
   2552                          array[index + BME280_DATA_INDEX] = *(reg_data + stringpos);
   \   000044   A8..         MOV     R0,?V3
   \   000046   EE           MOV     A,R6
   \   000047   28           ADD     A,R0
   \   000048   F582         MOV     DPL,A
   \   00004A   E4           CLR     A
   \   00004B   3F           ADDC    A,R7
   \   00004C   F583         MOV     DPH,A
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   12....       LCALL   ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_220:
   \   000052   EA           MOV     A,R2
   \   000053   F0           MOVX    @DPTR,A
   2553          		SPIDataPut( array[index + BME280_DATA_INDEX]);
   \   000054                ; Setup parameters for call to function SPIDataPut
   \   000054   F9           MOV     R1,A
   \   000055   12....       LCALL   `??SPIDataPut::?relay`; Banked call to: SPIDataPut
   2554          		//while((U1CSR & 0x01) == 0x01)
   2555                          //{
   2556                          //}
   2557          	}
   \   000058   05..         INC     ?V3
   \                     ??BME280_SPI_bus_write_0:
   \   00005A   E5..         MOV     A,?V3
   \   00005C   C3           CLR     C
   \   00005D   95..         SUBB    A,?V2
   \   00005F   40C1         JC      ??BME280_SPI_bus_write_1
   2558          	
   2559          	/*
   2560          	 * CS = '1'
   2561          	 */
   2562                  
   2563                  BME280_delay_msek(100);
   \   000061                ; Setup parameters for call to function BME280_delay_msek
   \   000061   90....       MOV     DPTR,#__Constant_64
   \   000064   12....       LCALL   ?XLOAD_R2345
   \   000067   12....       LCALL   `??BME280_delay_msek::?relay`; Banked call to: BME280_delay_msek
   2564          	P1_3 = 1;
   \   00006A   D293         SETB    0x90.3
   2565          	
   2566          	//bme280SendSPI(reg_addr, reg_data, cnt);
   2567          	
   2568                 
   2569                  
   2570          	return (s8)iError;
   \   00006C   7900         MOV     R1,#0x0
   \   00006E   7408         MOV     A,#0x8
   \   000070   02....       LJMP    ?Subroutine5 & 0xFFFF
   \   000073                REQUIRE _A_P1
   2571          }
   2572          
   2573          /*	Brief : The delay routine
   2574           *	\param : delay in ms
   2575           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2576          void BME280_delay_msek(u32 msek)
   \                     BME280_delay_msek:
   2577          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 0
   2578                unsigned long i;
   2579                for(i=0;i<msek*50;i++)
   \   000005   75..00       MOV     ?V8,#0x0
   \   000008   75..00       MOV     ?V9,#0x0
   \   00000B   75..00       MOV     ?V10,#0x0
   \   00000E   75..00       MOV     ?V11,#0x0
   \   000011   8009         SJMP    ??BME280_delay_msek_0
   2580                {
   2581                  asm("NOP");
   \                     ??BME280_delay_msek_1:
   \   000013   00           NOP
   2582                }
   \   000014   90....       MOV     DPTR,#__Constant_1
   \   000017   78..         MOV     R0,#?V8
   \   000019   12....       LCALL   ?L_ADD_X
   \                     ??BME280_delay_msek_0:
   \   00001C   8A..         MOV     ?V0,R2
   \   00001E   8B..         MOV     ?V1,R3
   \   000020   8C..         MOV     ?V2,R4
   \   000022   8D..         MOV     ?V3,R5
   \   000024   90....       MOV     DPTR,#__Constant_32
   \   000027   78..         MOV     R0,#?V12
   \   000029   12....       LCALL   ?L_MOV_X
   \   00002C   78..         MOV     R0,#?V0
   \   00002E   79..         MOV     R1,#?V12
   \   000030   12....       LCALL   ?L_MUL
   \   000033   78..         MOV     R0,#?V0
   \   000035   79..         MOV     R1,#?V8
   \   000037   12....       LCALL   ?UL_GT
   \   00003A   40D7         JC      ??BME280_delay_msek_1
   2583          	//SysCtlDelay(msek * 16000 / 3);
   2584          }
   \   00003C   02....       LJMP    ??Subroutine124_0 & 0xFFFF
   2585          
   2586          //*****************************************************************************
   2587          //
   2588          //! Read and compensate temperature, pressure and humidity and saving those 
   2589          //! values in struct value
   2590          //
   2591          //*****************************************************************************

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2592          s32 bme280_data_readout(struct bme280_t *bme280, struct value *val)
   \                     bme280_data_readout:
   2593          {	
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000   74E9         MOV     A,#-0x17
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 23
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EC           MOV     A,R4
   \   00000B   FE           MOV     R6,A
   \   00000C   ED           MOV     A,R5
   \   00000D   FF           MOV     R7,A
   2594                  char buff[20];
                              ^
Warning[Pe177]: variable "buff" was declared but never referenced
   2595            
   2596          	/* The variable used to read uncompensated temperature*/
   2597          	s32 v_data_uncomp_temp_s32 = BME280_INIT_VALUE;
   \   00000E   7408         MOV     A,#0x8
   \   000010   12....       LCALL   ?XSTACK_DISP0_8
   \   000013   12....       LCALL   ?Subroutine19 & 0xFFFF
   2598          	
   2599          	/* The variable used to read uncompensated pressure*/
   2600          	s32 v_data_uncomp_pres_s32 = BME280_INIT_VALUE;
   \                     ??CrossCallReturnLabel_38:
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   12....       LCALL   ?Subroutine14 & 0xFFFF
   2601          	
   2602          	/* The variable used to read uncompensated pressure*/
   2603          	s32 v_data_uncomp_hum_s32 = BME280_INIT_VALUE;
   \                     ??CrossCallReturnLabel_18:
   \   00001C   F0           MOVX    @DPTR,A
   2604          	
   2605          	/* The variable used to read compensated temperature*/
   2606          	s32 v_comp_temp_s32 = BME280_INIT_VALUE;
   2607          	
   2608          	/* The variable used to read compensated pressure*/
   2609          	u32 v_comp_press_u32 = BME280_INIT_VALUE;
   2610          	
   2611          	/* The variable used to read compensated humidity*/
   2612          	u32 v_comp_humidity_u32 = BME280_INIT_VALUE;
   2613          	
   2614          	/* result of communication results*/
   2615          	s32 com_rslt = ERROR;
   2616          	
   2617          /*------------------------------------------------------------------*
   2618          ************ START READ UNCOMPENSATED PRESSURE, TEMPERATURE
   2619          AND HUMIDITY DATA ********
   2620          *---------------------------------------------------------------------*/
   2621          	/* API is used to read the uncompensated temperature*/
   2622          	com_rslt += bme280_read_uncomp_temperature(&v_data_uncomp_temp_s32);
   \   00001D                ; Setup parameters for call to function bme280_read_uncomp_temperature
   \   00001D   7408         MOV     A,#0x8
   \   00001F   12....       LCALL   ?XSTACK_DISP101_8
   \   000022   12....       LCALL   `??bme280_read_uncomp_temperature::?relay`; Banked call to: bme280_read_uncomp_temperature
   \   000025   E9           MOV     A,R1
   \   000026   F5..         MOV     ?V14,A
   2623          
   2624          	/* API is used to read the uncompensated pressure*/
   2625          	com_rslt += bme280_read_uncomp_pressure(&v_data_uncomp_pres_s32);
   \   000028                ; Setup parameters for call to function bme280_read_uncomp_pressure
   \   000028   7404         MOV     A,#0x4
   \   00002A   12....       LCALL   ?XSTACK_DISP101_8
   \   00002D   12....       LCALL   `??bme280_read_uncomp_pressure::?relay`; Banked call to: bme280_read_uncomp_pressure
   \   000030   E9           MOV     A,R1
   \   000031   F5..         MOV     ?V13,A
   2626          
   2627          	/* API is used to read the uncompensated humidity*/
   2628          	com_rslt += bme280_read_uncomp_humidity(&v_data_uncomp_hum_s32);
   \   000033                ; Setup parameters for call to function bme280_read_uncomp_humidity
   \   000033   AA..         MOV     R2,?XSP + 0
   \   000035   AB..         MOV     R3,?XSP + 1
   \   000037   12....       LCALL   `??bme280_read_uncomp_humidity::?relay`; Banked call to: bme280_read_uncomp_humidity
   \   00003A   E9           MOV     A,R1
   \   00003B   F5..         MOV     ?V12,A
   2629                  
   2630          /*------------------------------------------------------------------*
   2631          ************ START READ COMPENSATED PRESSURE, TEMPERATURE
   2632          AND HUMIDITY DATA ********
   2633          *---------------------------------------------------------------------*/
   2634          	/* API is used to compute the compensated temperature*/
   2635          	v_comp_temp_s32 = bme280_compensate_temperature_int32(
   2636          			v_data_uncomp_temp_s32);
   \   00003D                ; Setup parameters for call to function bme280_compensate_temperature_int32
   \   00003D   7408         MOV     A,#0x8
   \   00003F   12....       LCALL   ?XSTACK_DISP0_8
   \   000042   12....       LCALL   ?XLOAD_R2345
   \   000045   12....       LCALL   `??bme280_compensate_temperature_int32::?relay`; Banked call to: bme280_compensate_temperature_int32
   \   000048   8A..         MOV     ?V4,R2
   \   00004A   8B..         MOV     ?V5,R3
   \   00004C   8C..         MOV     ?V6,R4
   \   00004E   8D..         MOV     ?V7,R5
   2637          
   2638          	/* API is used to compute the compensated pressure*/
   2639          	v_comp_press_u32 = bme280_compensate_pressure_int32(
   2640          			v_data_uncomp_pres_s32);
   \   000050                ; Setup parameters for call to function bme280_compensate_pressure_int32
   \   000050   7404         MOV     A,#0x4
   \   000052   12....       LCALL   ?XSTACK_DISP0_8
   \   000055   12....       LCALL   ?XLOAD_R2345
   \   000058   12....       LCALL   `??bme280_compensate_pressure_int32::?relay`; Banked call to: bme280_compensate_pressure_int32
   \   00005B   8A..         MOV     ?V0,R2
   \   00005D   8B..         MOV     ?V1,R3
   \   00005F   8C..         MOV     ?V2,R4
   \   000061   8D..         MOV     ?V3,R5
   2641          
   2642          	/* API is used to compute the compensated humidity*/
   2643          	v_comp_humidity_u32 = bme280_compensate_humidity_int32(
   2644          			v_data_uncomp_hum_s32);
   \   000063                ; Setup parameters for call to function bme280_compensate_humidity_int32
   \   000063   85..82       MOV     DPL,?XSP + 0
   \   000066   85..83       MOV     DPH,?XSP + 1
   \   000069   12....       LCALL   ?XLOAD_R2345
   \   00006C   12....       LCALL   `??bme280_compensate_humidity_int32::?relay`; Banked call to: bme280_compensate_humidity_int32
   \   00006F   8A..         MOV     ?V8,R2
   \   000071   8B..         MOV     ?V9,R3
   \   000073   8C..         MOV     ?V10,R4
   \   000075   8D..         MOV     ?V11,R5
   2645          	
   2646             /*        sprintf(buff,"%d",v_comp_humidity_u32/1024);
   2647          	HalLcdWriteString("",0);
   2648                  HalLcdWriteString("U readout:",0);
   2649                  HalLcdWriteString(buff,0);
   2650               */   
   2651          /*--------------------------------------------------------------------*
   2652          ************ END READ COMPENSATED PRESSURE, TEMPERATURE AND HUMIDITY ********
   2653          *-------------------------------------------------------------------------*/
   2654          	val->temp = v_comp_temp_s32;
   \   000077   8E82         MOV     DPL,R6
   \   000079   8F83         MOV     DPH,R7
   \   00007B   78..         MOV     R0,#?V4
   \   00007D   12....       LCALL   ?L_MOV_TO_X
   2655          	val->press = v_comp_press_u32;
   \   000080   8E82         MOV     DPL,R6
   \   000082   8F83         MOV     DPH,R7
   \   000084   A3           INC     DPTR
   \   000085   A3           INC     DPTR
   \   000086   A3           INC     DPTR
   \   000087   A3           INC     DPTR
   \   000088   78..         MOV     R0,#?V0
   \   00008A   12....       LCALL   ?L_MOV_TO_X
   2656          	val->humid = v_comp_humidity_u32;
   \   00008D   8E82         MOV     DPL,R6
   \   00008F   8F83         MOV     DPH,R7
   \   000091   A3           INC     DPTR
   \   000092   A3           INC     DPTR
   \   000093   A3           INC     DPTR
   \   000094   A3           INC     DPTR
   \   000095   A3           INC     DPTR
   \   000096   A3           INC     DPTR
   \   000097   A3           INC     DPTR
   \   000098   A3           INC     DPTR
   \   000099   78..         MOV     R0,#?V8
   \   00009B   12....       LCALL   ?L_MOV_TO_X
   2657          	  
   2658          	return com_rslt;
   \   00009E   E5..         MOV     A,?V14
   \   0000A0   F5..         MOV     ?V0,A
   \   0000A2   12....       LCALL   ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_208:
   \   0000A5   E5..         MOV     A,?V13
   \   0000A7   12....       LCALL   ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_393:
   \   0000AA   12....       LCALL   ?L_ADD
   \   0000AD   E5..         MOV     A,?V12
   \   0000AF   12....       LCALL   ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_394:
   \   0000B2   12....       LCALL   ?L_ADD
   \   0000B5   90....       MOV     DPTR,#__Constant_ffffffff
   \   0000B8   78..         MOV     R0,#?V0
   \   0000BA   12....       LCALL   ?L_ADD_X
   \   0000BD   AA..         MOV     R2,?V0
   \   0000BF   AB..         MOV     R3,?V1
   \   0000C1   AC..         MOV     R4,?V2
   \   0000C3   AD..         MOV     R5,?V3
   \   0000C5   740C         MOV     A,#0xc
   \   0000C7   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000CA   7F0F         MOV     R7,#0xf
   \   0000CC   02....       LJMP    ?BANKED_LEAVE_XDATA
   2659          	
   2660          }// end s32 bme280_data_readout(struct bme280_t *bme280, struct value *val);

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine71:
   \   000000   F5..         MOV     ?V4,A
   \   000002                REQUIRE ??Subroutine127_0
   \   000002                ; // Fall through to label ??Subroutine127_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine127_0:
   \   000000   12....       LCALL   ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_401:
   \   000003   78..         MOV     R0,#?V0
   \   000005   79..         MOV     R1,#?V4
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine73:
   \   000000   33           RLC     A
   \   000001   95E0         SUBB    A,0xE0 /* A   */
   \   000003   F5..         MOV     ?V1,A
   \   000005   F5..         MOV     ?V2,A
   \   000007   F5..         MOV     ?V3,A
   \   000009   22           RET
   2661          
   2662          //*****************************************************************************
   2663          //
   2664          //! Sensor initialization... setting mode of the sensor as "NORMAL",
   2665          //! setting oversampling  for temp - x4, for press - x2 
   2666          //! and for humidity -x1, and setting a standby time - 125[ms]
   2667          //
   2668          //*****************************************************************************

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2669          s32 bme280_set(struct bme280_t *bme280, struct value *val)
   \                     bme280_set:
   2670          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000   74EF         MOV     A,#-0x11
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 17
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   2671          	/* result of communication results*/
   2672          	s32 com_rslt = ERROR;	
   2673          	   
   2674                   SPI_routine(bme280);
   \   000009                ; Setup parameters for call to function SPI_routine
   \   000009   12....       LCALL   `??SPI_routine::?relay`; Banked call to: SPI_routine
   2675                 
   2676          	
   2677          	com_rslt = bme280_init(bme280);
   \   00000C                ; Setup parameters for call to function bme280_init
   \   00000C   EE           MOV     A,R6
   \   00000D   FA           MOV     R2,A
   \   00000E   EF           MOV     A,R7
   \   00000F   FB           MOV     R3,A
   \   000010   12....       LCALL   `??bme280_init::?relay`; Banked call to: bme280_init
   \   000013   E9           MOV     A,R1
   \   000014   F5..         MOV     ?V0,A
   2678             
   2679                  
   2680          	  /* Set the power mode as SLEEP*/
   2681          	com_rslt += bme280_set_power_mode(BME280_SLEEP_MODE);
   \   000016                ; Setup parameters for call to function bme280_set_power_mode
   \   000016   7900         MOV     R1,#0x0
   \   000018   12....       LCALL   `??bme280_set_power_mode::?relay`; Banked call to: bme280_set_power_mode
   \   00001B   E9           MOV     A,R1
   \   00001C   F5..         MOV     ?V4,A
   2682             
   2683                   
   2684          	/*	For reading the pressure, humidity and temperature data it is required to
   2685          	 *	set the OSS setting of humidity, pressure and temperature
   2686          	 * The "BME280_CTRLHUM_REG_OSRSH" register sets the humidity
   2687          	 * data acquisition options of the device.
   2688          	 * changes to this registers only become effective after a write operation to
   2689          	 * "BME280_CTRLMEAS_REG" register.
   2690          	 * In the code automated reading and writing of "BME280_CTRLHUM_REG_OSRSH"
   2691          	 * register first set the "BME280_CTRLHUM_REG_OSRSH" and then read and write
   2692          	 * the "BME280_CTRLMEAS_REG" register in the function
   2693          	 */
   2694          	com_rslt += bme280_set_oversamp_humidity(BME280_OVERSAMP_1X);
   \   00001E                ; Setup parameters for call to function bme280_set_oversamp_humidity
   \   00001E   7901         MOV     R1,#0x1
   \   000020   12....       LCALL   `??bme280_set_oversamp_humidity::?relay`; Banked call to: bme280_set_oversamp_humidity
   \   000023   E9           MOV     A,R1
   \   000024   F5..         MOV     ?V8,A
   2695            
   2696                   
   2697          	/* set the pressure oversampling */
   2698          	com_rslt += bme280_set_oversamp_pressure(BME280_OVERSAMP_2X);
   \   000026                ; Setup parameters for call to function bme280_set_oversamp_pressure
   \   000026   7902         MOV     R1,#0x2
   \   000028   12....       LCALL   `??bme280_set_oversamp_pressure::?relay`; Banked call to: bme280_set_oversamp_pressure
   \   00002B   E9           MOV     A,R1
   \   00002C   FE           MOV     R6,A
   2699          	 
   2700                   
   2701                  
   2702                  /* set the temperature oversampling */
   2703          	com_rslt += bme280_set_oversamp_temperature(BME280_OVERSAMP_4X);
   \   00002D                ; Setup parameters for call to function bme280_set_oversamp_temperature
   \   00002D   7903         MOV     R1,#0x3
   \   00002F   12....       LCALL   `??bme280_set_oversamp_temperature::?relay`; Banked call to: bme280_set_oversamp_temperature
   \   000032   E9           MOV     A,R1
   \   000033   FF           MOV     R7,A
   2704          	
   2705                   
   2706                  
   2707                  /* This API used to Write the standby time of the sensor input
   2708          	 *	value have to be given
   2709          	 *	Normal mode comprises an automated perpetual cycling between an (active)
   2710          	 *	Measurement period and an (inactive) standby period.
   2711          	 *	The standby time is determined by the contents of the register t_sb.
   2712          	 *	Standby time can be set using BME280_STANDBYTIME_125_MS.
   2713          	 *	Usage Hint : bme280_set_standbydur(BME280_STANDBYTIME_125_MS)
   2714          	 */
   2715            com_rslt += bme280_set_standby_durn(BME280_STANDBY_TIME_125_MS);
   \   000034                ; Setup parameters for call to function bme280_set_standby_durn
   \   000034   7902         MOV     R1,#0x2
   \   000036   12....       LCALL   `??bme280_set_standby_durn::?relay`; Banked call to: bme280_set_standby_durn
   \   000039   E9           MOV     A,R1
   \   00003A   FA           MOV     R2,A
   2716          	 
   2717                  
   2718            /* Set the power mode as NORMAL*/
   2719          	com_rslt += bme280_set_power_mode(BME280_NORMAL_MODE);
   2720          	// HalLcdWriteString("9 ",0);
   2721                 //   WriteHex((char)com_rslt);
   2722                  // HalLcdWriteString("",0);
   2723                   
   2724                  
   2725                  return com_rslt;
   \   00003B   E5..         MOV     A,?V0
   \   00003D   12....       LCALL   ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_209:
   \   000040   E5..         MOV     A,?V4
   \   000042   12....       LCALL   ??Subroutine127_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_392:
   \   000045   12....       LCALL   ?L_ADD
   \   000048   E5..         MOV     A,?V8
   \   00004A   12....       LCALL   ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_395:
   \   00004D   12....       LCALL   ?L_ADD
   \   000050   EE           MOV     A,R6
   \   000051   12....       LCALL   ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_396:
   \   000054   12....       LCALL   ?L_ADD
   \   000057   EF           MOV     A,R7
   \   000058   12....       LCALL   ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_397:
   \   00005B   12....       LCALL   ?L_ADD
   \   00005E   EA           MOV     A,R2
   \   00005F   12....       LCALL   ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_398:
   \   000062   12....       LCALL   ?L_ADD
   \   000065                ; Setup parameters for call to function bme280_set_power_mode
   \   000065   7903         MOV     R1,#0x3
   \   000067   12....       LCALL   `??bme280_set_power_mode::?relay`; Banked call to: bme280_set_power_mode
   \   00006A   E9           MOV     A,R1
   \   00006B   12....       LCALL   ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_399:
   \   00006E   12....       LCALL   ?L_ADD
   \   000071   AA..         MOV     R2,?V0
   \   000073   AB..         MOV     R3,?V1
   \   000075   AC..         MOV     R4,?V2
   \   000077   AD..         MOV     R5,?V3
   \   000079   7F09         MOV     R7,#0x9
   \   00007B   02....       LJMP    ?BANKED_LEAVE_XDATA
   2726          }// s32 bme280_set(struct bme280_t *bme280, struct value *val);
   2727          
   2728          /*
   2729           *	Func display values via UART interface on RealTerm
   2730           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2731          void bme280_display(struct value *val)
   \                     bme280_display:
   2732          {/*
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   2733          	char buffer[64];
   2734          	
   2735          	sprintf(buffer, "=============================");
   2736          	UARTPrint(buffer);
   2737          	UARTCharPut(UART0_BASE, 13);
   2738          	UARTCharPut(UART0_BASE, 10);
   2739          	
   2740          	sprintf(buffer, "temperatura = %d.%d [C]", val->temp / 100, val->temp % 100);
   2741          	UARTPrint(buffer);
   2742          	UARTCharPut(UART0_BASE, 13);
   2743          	UARTCharPut(UART0_BASE, 10);
   2744          	
   2745          	sprintf(buffer, "pritisak = %d.%d [mb]", val->press / 100, val->press % 100);
   2746          	UARTPrint(buffer);
   2747          	UARTCharPut(UART0_BASE, 13);
   2748          	UARTCharPut(UART0_BASE, 10);
   2749          	
   2750          	sprintf(buffer, "vlaznost = %d [%%RH]", (val->humid >> 10));
   2751          	UARTPrint(buffer);
   2752          	UARTCharPut(UART0_BASE, 13);
   2753          	UARTCharPut(UART0_BASE, 10);
   2754          	
   2755          	sprintf(buffer, "=============================");
   2756          	UARTPrint(buffer);
   2757          	UARTCharPut(UART0_BASE, 13);
   2758          	UARTCharPut(UART0_BASE, 10);
   2759          
   2760          */
   2761          
   2762          
   2763          }// end void bme280_display(struct value *val);
   \   000000   02....       LJMP    ?BRET
   2764          
   2765          //*****************************************************************************
   2766          //
   2767          //! Sending data from BME280 via UART
   2768          //! temp, press and humid
   2769          //
   2770          //*****************************************************************************

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2771          void bme280_send_data(struct value *val)
   \                     bme280_send_data:
   2772          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 64
   \   000005   74C0         MOV     A,#-0x40
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
   2773          	char buff[64];
   2774          	
   2775                  
   2776                  sprintf(buff, "%d", val->temp); 
                                             ^
Warning[Pe181]: argument is incompatible with corresponding format string
          conversion
   \   00000E                ; Setup parameters for call to function sprintf
   \   00000E   8A82         MOV     DPL,R2
   \   000010   8B83         MOV     DPH,R3
   \   000012   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000015   7C..         MOV     R4,#`?<Constant "%d">` & 0xff
   \   000017   7D..         MOV     R5,#(`?<Constant "%d">` >> 8) & 0xff
   \   000019   7404         MOV     A,#0x4
   \   00001B   12....       LCALL   ?XSTACK_DISP101_8
   \   00001E   12....       LCALL   `??sprintf::?relay`  ; Banked call to: sprintf
   \   000021   7404         MOV     A,#0x4
   \   000023   12....       LCALL   ?DEALLOC_XSTACK8
   2777          	sprintf(buff + 5, "%d", val->press/100);
                 	                        ^
Warning[Pe181]: argument is incompatible with corresponding format string
          conversion
   \   000026                ; Setup parameters for call to function sprintf
   \   000026   85..82       MOV     DPL,?V0
   \   000029   85..83       MOV     DPH,?V1
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   78..         MOV     R0,#?V4
   \   000032   12....       LCALL   ?L_MOV_X
   \   000035   90....       MOV     DPTR,#__Constant_64
   \   000038   78..         MOV     R0,#?V8
   \   00003A   12....       LCALL   ?L_MOV_X
   \   00003D   78..         MOV     R0,#?V4
   \   00003F   79..         MOV     R1,#?V8
   \   000041   12....       LCALL   ?UL_DIV_MOD
   \   000044   78..         MOV     R0,#?V4
   \   000046   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000049   7C..         MOV     R4,#`?<Constant "%d">` & 0xff
   \   00004B   7D..         MOV     R5,#(`?<Constant "%d">` >> 8) & 0xff
   \   00004D   7409         MOV     A,#0x9
   \   00004F   12....       LCALL   ?XSTACK_DISP0_8
   \   000052   AA82         MOV     R2,DPL
   \   000054   AB83         MOV     R3,DPH
   \   000056   12....       LCALL   `??sprintf::?relay`  ; Banked call to: sprintf
   \   000059   7404         MOV     A,#0x4
   \   00005B   12....       LCALL   ?DEALLOC_XSTACK8
   2778                  sprintf(buff + 5, "%d", val->humid);
                                                 ^
Warning[Pe181]: argument is incompatible with corresponding format string
          conversion
   \   00005E                ; Setup parameters for call to function sprintf
   \   00005E   85..82       MOV     DPL,?V0
   \   000061   85..83       MOV     DPH,?V1
   \   000064   A3           INC     DPTR
   \   000065   A3           INC     DPTR
   \   000066   A3           INC     DPTR
   \   000067   A3           INC     DPTR
   \   000068   A3           INC     DPTR
   \   000069   A3           INC     DPTR
   \   00006A   A3           INC     DPTR
   \   00006B   A3           INC     DPTR
   \   00006C   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00006F   7C..         MOV     R4,#`?<Constant "%d">` & 0xff
   \   000071   7D..         MOV     R5,#(`?<Constant "%d">` >> 8) & 0xff
   \   000073   7409         MOV     A,#0x9
   \   000075   12....       LCALL   ?XSTACK_DISP0_8
   \   000078   AA82         MOV     R2,DPL
   \   00007A   AB83         MOV     R3,DPH
   \   00007C   12....       LCALL   `??sprintf::?relay`  ; Banked call to: sprintf
   \   00007F   7404         MOV     A,#0x4
   \   000081   12....       LCALL   ?DEALLOC_XSTACK8
   2779                    
   2780                  UARTPrint(buff);
   \   000084                ; Setup parameters for call to function UARTPrint
   \   000084   AA..         MOV     R2,?XSP + 0
   \   000086   AB..         MOV     R3,?XSP + 1
   \   000088   12....       LCALL   `??UARTPrint::?relay`; Banked call to: UARTPrint
   2781          
   2782          }// void bme280_send_data(struct value *val);
   \   00008B   7440         MOV     A,#0x40
   \   00008D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000090   02....       LJMP    ?Subroutine3 & 0xFFFF
   2783          
   2784          //*****************************************************************************
   2785          //
   2786          //! Printing string via UART on RealTerm
   2787          //
   2788          //*****************************************************************************

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2789          void UARTPrint(char *string)
   \                     UARTPrint:
   2790          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2791            
   2792            HalLcdWriteString(string,0);
   \   000004                ; Setup parameters for call to function HalLcdWriteString
   \   000004   7900         MOV     R1,#0x0
   \   000006   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
   2793          	/*int i = 0;
   2794          	do
   2795          	{
   2796          		
   2797          		//UARTCharPut(UART0_BASE, string[i]);
   2798          		i++;
   2799          	} while(string[i] != '\0');
   2800          	*/
   2801          }// end void UARTPrint(char *string);
   \   000009   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bme280_init_struct::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bme280_init_struct

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bme280_init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bme280_init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bme280_read_uncomp_temperature::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bme280_read_uncomp_temperature

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bme280_compensate_temperature_int32::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bme280_compensate_temperature_int32

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??bme280_compensate_temperature_int32_sixteen_b:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bme280_compensate_temperature_int32_sixteen_bit_output

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bme280_read_uncomp_pressure::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bme280_read_uncomp_pressure

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bme280_compensate_pressure_int32::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bme280_compensate_pressure_int32

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bme280_read_uncomp_humidity::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bme280_read_uncomp_humidity

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bme280_compensate_humidity_int32::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bme280_compensate_humidity_int32

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??bme280_compensate_humidity_int32_sixteen_bit_:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bme280_compensate_humidity_int32_sixteen_bit_output

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??bme280_read_uncomp_pressure_temperature_humid:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bme280_read_uncomp_pressure_temperature_humidity

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bme280_read_pressure_temperature_humidity::?r`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bme280_read_pressure_temperature_humidity

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bme280_get_calib_param::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bme280_get_calib_param

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bme280_get_oversamp_temperature::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bme280_get_oversamp_temperature

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bme280_set_oversamp_temperature::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bme280_set_oversamp_temperature

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bme280_get_oversamp_pressure::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bme280_get_oversamp_pressure

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bme280_set_oversamp_pressure::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bme280_set_oversamp_pressure

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bme280_get_oversamp_humidity::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bme280_get_oversamp_humidity

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bme280_set_oversamp_humidity::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bme280_set_oversamp_humidity

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bme280_get_power_mode::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bme280_get_power_mode

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bme280_set_power_mode::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bme280_set_power_mode

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bme280_set_soft_rst::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bme280_set_soft_rst

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bme280_get_spi3::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bme280_get_spi3

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bme280_set_spi3::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bme280_set_spi3

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bme280_get_filter::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bme280_get_filter

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bme280_set_filter::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bme280_set_filter

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bme280_get_standby_durn::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bme280_get_standby_durn

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bme280_set_standby_durn::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bme280_set_standby_durn

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??bme280_get_forced_uncomp_pressure_temperature:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bme280_get_forced_uncomp_pressure_temperature_humidity

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bme280_write_register::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bme280_write_register

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bme280_read_register::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bme280_read_register

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bme280_compensate_temperature_double::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bme280_compensate_temperature_double

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bme280_compensate_pressure_double::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bme280_compensate_pressure_double

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bme280_compensate_humidity_double::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bme280_compensate_humidity_double

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bme280_compensate_pressure_int64::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bme280_compensate_pressure_int64

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??bme280_compensate_pressure_int64_twentyfour_b:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bme280_compensate_pressure_int64_twentyfour_bit_output

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bme280_compute_wait_time::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bme280_compute_wait_time

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bme280_data_readout_template::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bme280_data_readout_template

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SPI_routine::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SPI_routine

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??BME280_SPI_bus_read::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    BME280_SPI_bus_read

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??BME280_SPI_bus_write::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    BME280_SPI_bus_write

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??BME280_delay_msek::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    BME280_delay_msek

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bme280_data_readout::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bme280_data_readout

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bme280_set::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bme280_set

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bme280_display::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bme280_display

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bme280_send_data::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bme280_send_data

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??UARTPrint::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    UARTPrint

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0, 0}>`:
   \   000000   00           DB 0
   \   000001   00           DB 0
   \   000002   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0, 0}>_1`:
   \   000000   00           DB 0
   \   000001   00           DB 0
   \   000002   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0}>`:
   \   000000   00           DB 0
   \   000001   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0, 0, 0, 0, 0, 0, 0}>`:
   \   000000   00           DB 0
   \   000001   00           DB 0
   \   000002   00           DB 0
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   00           DB 0
   \   000006   00           DB 0
   \   000007   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0`:
   \   000000   00           DB 0
   \   000001   00           DB 0
   \   000002   00           DB 0
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   00           DB 0
   \   000006   00           DB 0
   \   000007   00           DB 0
   \   000008   00           DB 0
   \   000009   00           DB 0
   \   00000A   00           DB 0
   \   00000B   00           DB 0
   \   00000C   00           DB 0
   \   00000D   00           DB 0
   \   00000E   00           DB 0
   \   00000F   00           DB 0
   \   000010   00           DB 0
   \   000011   00           DB 0
   \   000012   00           DB 0
   \   000013   00           DB 0
   \   000014   00           DB 0
   \   000015   00           DB 0
   \   000016   00           DB 0
   \   000017   00           DB 0
   \   000018   00           DB 0
   \   000019   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_1`:
   \   000000   00           DB 0
   \   000001   00           DB 0
   \   000002   00           DB 0
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   00           DB 0
   \   000006   00           DB 0
   \   000007   00           DB 0
   \   000008   00           DB 0
   \   000009   00           DB 0
   \   00000A   00           DB 0
   \   00000B   00           DB 0
   \   00000C   00           DB 0
   \   00000D   00           DB 0
   \   00000E   00           DB 0
   \   00000F   00           DB 0
   \   000010   00           DB 0
   \   000011   00           DB 0
   \   000012   00           DB 0
   \   000013   00           DB 0
   \   000014   00           DB 0
   \   000015   00           DB 0
   \   000016   00           DB 0
   \   000017   00           DB 0
   \   000018   00           DB 0
   \   000019   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "%d">`:
   \   000000   256400       DB "%d"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3:
   \   000000   03000000     DD 3

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_5:
   \   000000   05000000     DD 5

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_80:
   \   000000   80000000     DD 128

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_19:
   \   000000   19000000     DD 25

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_ffd12080:
   \   000000   8020D1FF     DD -3071872

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_ffff0600:
   \   000000   0006FFFF     DD -64000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_8000:
   \   000000   00800000     DD 32768

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_c35:
   \   000000   350C0000     DD 3125

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_80000000:
   \   000000   00000080     DD 2147483648

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_fffed400:
   \   000000   00D4FEFF     DD -76800

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_4000:
   \   000000   00400000     DD 16384

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_200000:
   \   000000   00002000     DD 2097152

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_2000:
   \   000000   00200000     DD 8192

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_0:
   \   000000   00000000     DD 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_19000001:
   \   000000   01000019     DD 419430401

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_38800000:
   \   000000   00008038     DD 38800000H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3a800000:
   \   000000   0000803A     DD 3A800000H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_37000000:
   \   000000   00000037     DD 37000000H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_39000000:
   \   000000   00000039     DD 39000000H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_45a00000:
   \   000000   0000A045     DD 45A00000H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3f000000:
   \   000000   0000003F     DD 3F000000H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_c77a0000:
   \   000000   00007AC7     DD 0C77A0000H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_38000000:
   \   000000   00000038     DD 38000000H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_40000000:
   \   000000   00000040     DD 40000000H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e800000:
   \   000000   0000803E     DD 3E800000H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_47800000:
   \   000000   00008047     DD 47800000H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_36000000:
   \   000000   00000036     DD 36000000H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_2e800000:
   \   000000   0000802E     DD 2E800000H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3f800000:
   \   000000   0000803F     DD 3F800000H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_1:
   \   000000   01000000     DD 1H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_39800000:
   \   000000   00008039     DD 39800000H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_45c35000:
   \   000000   0050C345     DD 45C35000H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_30000000:
   \   000000   00000030     DD 30000000H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3d800000:
   \   000000   0000803D     DD 3D800000H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_c7960000:
   \   000000   000096C7     DD 0C7960000H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_42800000:
   \   000000   00008042     DD 42800000H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_37800000:
   \   000000   00008037     DD 37800000H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_32800000:
   \   000000   00008032     DD 32800000H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_42c80001:
   \   000000   0100C842     DD 42C80001H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_fffe0c00:
   \   000000   000CFEFF     DD -128000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_7e:
   \   000000   7E000000     DD 126

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_64:
   \   000000   64000000     DD 100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_32:
   \   000000   32000000     DD 50

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_ffffffff:
   \   000000   FFFFFFFF     DD -1
   2802          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     37   BME280_SPI_bus_read
        0     37   -> BME280_delay_msek
        0     37   -> SPIDataGet
        0     37   -> SPIDataPut
      1     20   BME280_SPI_bus_write
        0     20   -> BME280_delay_msek
        0     20   -> SPIDataPut
      0     67   BME280_delay_msek
      2     43   SPI_routine
      2     84   UARTPrint
        2      0   -> HalLcdWriteString
      8     24   bme280_compensate_humidity_double
      0     67   bme280_compensate_humidity_int32
      0     12   bme280_compensate_humidity_int32_sixteen_bit_output
        0     12   -> bme280_compensate_humidity_int32
      0     28   bme280_compensate_pressure_double
      4     71   bme280_compensate_pressure_int32
      4     40   bme280_compensate_pressure_int64
      0     12   bme280_compensate_pressure_int64_twentyfour_bit_output
        0     12   -> bme280_compensate_pressure_int64
      4     24   bme280_compensate_temperature_double
      0     63   bme280_compensate_temperature_int32
      0     16   bme280_compensate_temperature_int32_sixteen_bit_output
        0     16   -> bme280_compensate_temperature_int32
      1     34   bme280_compute_wait_time
      0     35   bme280_data_readout
        0     35   -> bme280_compensate_humidity_int32
        0     35   -> bme280_compensate_pressure_int32
        0     35   -> bme280_compensate_temperature_int32
        0     35   -> bme280_read_uncomp_humidity
        0     35   -> bme280_read_uncomp_pressure
        0     35   -> bme280_read_uncomp_temperature
      0     43   bme280_data_readout_template
        0     43   -> BME280_delay_msek
        0     43   -> SPI_routine
        0     43   -> bme280_compensate_humidity_int32
        0     43   -> bme280_compensate_pressure_int32
        0     43   -> bme280_compensate_temperature_int32
        0     43   -> bme280_get_standby_durn
        0     43   -> bme280_init
        0     43   -> bme280_read_uncomp_humidity
        0     43   -> bme280_read_uncomp_pressure
        0     43   -> bme280_read_uncomp_temperature
        0     43   -> bme280_set_oversamp_humidity
        0     43   -> bme280_set_oversamp_pressure
        0     43   -> bme280_set_oversamp_temperature
        0     43   -> bme280_set_power_mode
        0     43   -> bme280_set_standby_durn
      0      0   bme280_display
      1     46   bme280_get_calib_param
      1     10   bme280_get_filter
      1     24   bme280_get_forced_uncomp_pressure_temperature_humidity
        0     20   -> bme280_compute_wait_time
        0     20   -> bme280_get_power_mode
        0     20   -> bme280_read_register
        0     22   -> bme280_read_uncomp_pressure_temperature_humidity
        0     20   -> bme280_set_soft_rst
        0     20   -> bme280_write_register
      1     10   bme280_get_oversamp_humidity
      1     10   bme280_get_oversamp_pressure
      1     10   bme280_get_oversamp_temperature
      1     30   bme280_get_power_mode
      1     10   bme280_get_spi3
      1     53   bme280_get_standby_durn
      1     53   bme280_init
        0     10   -> bme280_get_calib_param
      2      0   bme280_init_struct
      0     28   bme280_read_pressure_temperature_humidity
        0     24   -> bme280_compensate_humidity_int32
        0     24   -> bme280_compensate_pressure_int32
        0     24   -> bme280_compensate_temperature_int32
        0     26   -> bme280_read_uncomp_pressure_temperature_humidity
      0     29   bme280_read_register
      0     61   bme280_read_uncomp_humidity
      0     62   bme280_read_uncomp_pressure
      0     52   bme280_read_uncomp_pressure_temperature_humidity
      0     62   bme280_read_uncomp_temperature
      0     88   bme280_send_data
        0     84   -> UARTPrint
        0     88   -> sprintf
      0     17   bme280_set
        0     17   -> SPI_routine
        0     17   -> bme280_init
        0     17   -> bme280_set_oversamp_humidity
        0     17   -> bme280_set_oversamp_pressure
        0     17   -> bme280_set_oversamp_temperature
        0     17   -> bme280_set_power_mode
        0     17   -> bme280_set_standby_durn
      1     15   bme280_set_filter
        0     15   -> bme280_get_power_mode
        0     15   -> bme280_read_register
        0     15   -> bme280_set_soft_rst
        0     15   -> bme280_write_register
      1     58   bme280_set_oversamp_humidity
        0     15   -> bme280_get_power_mode
        0     15   -> bme280_read_register
        0     15   -> bme280_set_soft_rst
        0     15   -> bme280_write_register
      1     56   bme280_set_oversamp_pressure
        0     13   -> bme280_get_power_mode
        0     13   -> bme280_read_register
        0     13   -> bme280_set_soft_rst
        0     13   -> bme280_write_register
      1     56   bme280_set_oversamp_temperature
        0     13   -> bme280_get_power_mode
        0     13   -> bme280_read_register
        0     13   -> bme280_set_soft_rst
        0     13   -> bme280_write_register
      1     57   bme280_set_power_mode
        0     14   -> bme280_get_power_mode
        0     14   -> bme280_read_register
        0     14   -> bme280_set_soft_rst
        0     14   -> bme280_write_register
      2     21   bme280_set_soft_rst
      1     15   bme280_set_spi3
        0     15   -> bme280_get_power_mode
        0     15   -> bme280_read_register
        0     15   -> bme280_set_soft_rst
        0     15   -> bme280_write_register
      1     58   bme280_set_standby_durn
        0     15   -> bme280_get_power_mode
        0     15   -> bme280_read_register
        0     15   -> bme280_set_soft_rst
        0     15   -> bme280_write_register
      0     29   bme280_write_register


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       3  ?<Constant "%d">
      26  ?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
      26  ?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_1
       8  ?<Constant {0, 0, 0, 0, 0, 0, 0, 0}>
       3  ?<Constant {0, 0, 0}>
       3  ?<Constant {0, 0, 0}>_1
       2  ?<Constant {0, 0}>
       4  ??Subroutine105_0
       3  ??Subroutine106_0
       5  ??Subroutine107_0
       8  ??Subroutine108_0
       5  ??Subroutine109_0
       6  ??Subroutine110_0
       6  ??Subroutine111_0
       6  ??Subroutine112_0
       9  ??Subroutine113_0
       9  ??Subroutine114_0
       9  ??Subroutine115_0
       3  ??Subroutine116_0
       5  ??Subroutine117_0
       8  ??Subroutine118_0
       5  ??Subroutine119_0
       1  ??Subroutine120_0
      12  ??Subroutine121_0
       5  ??Subroutine122_0
       6  ??Subroutine123_0
       5  ??Subroutine124_0
      15  ??Subroutine125_0
       8  ??Subroutine126_0
       8  ??Subroutine127_0
       7  ?Subroutine0
       2  ?Subroutine1
       6  ?Subroutine10
      10  ?Subroutine100
       9  ?Subroutine101
       9  ?Subroutine102
      15  ?Subroutine103
      10  ?Subroutine104
       6  ?Subroutine11
       9  ?Subroutine12
       7  ?Subroutine13
      16  ?Subroutine14
       6  ?Subroutine15
       6  ?Subroutine16
       9  ?Subroutine17
       5  ?Subroutine18
       6  ?Subroutine19
       2  ?Subroutine2
       4  ?Subroutine20
       8  ?Subroutine21
       8  ?Subroutine22
       9  ?Subroutine23
       6  ?Subroutine24
       3  ?Subroutine25
       4  ?Subroutine26
       5  ?Subroutine27
      17  ?Subroutine28
       6  ?Subroutine29
       5  ?Subroutine3
       5  ?Subroutine30
       3  ?Subroutine31
       4  ?Subroutine32
       6  ?Subroutine33
      14  ?Subroutine34
       9  ?Subroutine35
       2  ?Subroutine36
       9  ?Subroutine37
       9  ?Subroutine38
       6  ?Subroutine39
       5  ?Subroutine4
       6  ?Subroutine40
       4  ?Subroutine41
      18  ?Subroutine42
       8  ?Subroutine43
       4  ?Subroutine44
      18  ?Subroutine45
      18  ?Subroutine46
      11  ?Subroutine47
       9  ?Subroutine48
       4  ?Subroutine49
       3  ?Subroutine5
       6  ?Subroutine50
       6  ?Subroutine51
       9  ?Subroutine52
       9  ?Subroutine53
       5  ?Subroutine54
       4  ?Subroutine55
      12  ?Subroutine56
      12  ?Subroutine57
       4  ?Subroutine58
       4  ?Subroutine59
       2  ?Subroutine6
       4  ?Subroutine60
      13  ?Subroutine61
       6  ?Subroutine62
       6  ?Subroutine63
       6  ?Subroutine64
       4  ?Subroutine65
       3  ?Subroutine66
      12  ?Subroutine67
      12  ?Subroutine68
       9  ?Subroutine69
       5  ?Subroutine7
      12  ?Subroutine70
       2  ?Subroutine71
      12  ?Subroutine72
      10  ?Subroutine73
       6  ?Subroutine74
       9  ?Subroutine75
       6  ?Subroutine76
      21  ?Subroutine77
       9  ?Subroutine78
       9  ?Subroutine79
       5  ?Subroutine8
       8  ?Subroutine80
      18  ?Subroutine81
       6  ?Subroutine82
       6  ?Subroutine83
      12  ?Subroutine84
      16  ?Subroutine85
      12  ?Subroutine86
      21  ?Subroutine87
      21  ?Subroutine88
      12  ?Subroutine89
      10  ?Subroutine9
      12  ?Subroutine90
      12  ?Subroutine91
      12  ?Subroutine92
       4  ?Subroutine93
       8  ?Subroutine94
      17  ?Subroutine95
      17  ?Subroutine96
      11  ?Subroutine97
       9  ?Subroutine98
       8  ?Subroutine99
     122  BME280_SPI_bus_read
       6  BME280_SPI_bus_read::?relay
     115  BME280_SPI_bus_write
       6  BME280_SPI_bus_write::?relay
      63  BME280_delay_msek
       6  BME280_delay_msek::?relay
      54  SPI_routine
       6  SPI_routine::?relay
      12  UARTPrint
       6  UARTPrint::?relay
       1  _A_P1
       4  __Constant_0
       4  __Constant_1
       4  __Constant_19
       4  __Constant_19000001
       4  __Constant_2000
       4  __Constant_200000
       4  __Constant_2e800000
       4  __Constant_3
       4  __Constant_30000000
       4  __Constant_32
       4  __Constant_32800000
       4  __Constant_36000000
       4  __Constant_37000000
       4  __Constant_37800000
       4  __Constant_38000000
       4  __Constant_38800000
       4  __Constant_39000000
       4  __Constant_39800000
       4  __Constant_3a800000
       4  __Constant_3d800000
       4  __Constant_3e800000
       4  __Constant_3f000000
       4  __Constant_3f800000
       4  __Constant_4000
       4  __Constant_40000000
       4  __Constant_42800000
       4  __Constant_42c80001
       4  __Constant_45a00000
       4  __Constant_45c35000
       4  __Constant_47800000
       4  __Constant_5
       4  __Constant_64
       4  __Constant_7e
       4  __Constant_80
       4  __Constant_8000
       4  __Constant_80000000
       4  __Constant_c35
       4  __Constant_c77a0000
       4  __Constant_c7960000
       4  __Constant_ffd12080
       4  __Constant_fffe0c00
       4  __Constant_fffed400
       4  __Constant_ffff0600
       4  __Constant_ffffffff
     493  bme280_compensate_humidity_double
       6  bme280_compensate_humidity_double::?relay
     344  bme280_compensate_humidity_int32
       6  bme280_compensate_humidity_int32::?relay
      29  bme280_compensate_humidity_int32_sixteen_bit_output
       6  bme280_compensate_humidity_int32_sixteen_bit_output::?relay
     573  bme280_compensate_pressure_double
       6  bme280_compensate_pressure_double::?relay
     528  bme280_compensate_pressure_int32
       6  bme280_compensate_pressure_int32::?relay
     393  bme280_compensate_pressure_int64
       6  bme280_compensate_pressure_int64::?relay
      34  bme280_compensate_pressure_int64_twentyfour_bit_output
       6  bme280_compensate_pressure_int64_twentyfour_bit_output::?relay
     250  bme280_compensate_temperature_double
       6  bme280_compensate_temperature_double::?relay
     179  bme280_compensate_temperature_int32
       6  bme280_compensate_temperature_int32::?relay
      51  bme280_compensate_temperature_int32_sixteen_bit_output
       6  bme280_compensate_temperature_int32_sixteen_bit_output::?relay
     164  bme280_compute_wait_time
       6  bme280_compute_wait_time::?relay
     207  bme280_data_readout
       6  bme280_data_readout::?relay
     340  bme280_data_readout_template
       6  bme280_data_readout_template::?relay
       3  bme280_display
       6  bme280_display::?relay
     471  bme280_get_calib_param
       6  bme280_get_calib_param::?relay
      53  bme280_get_filter
       6  bme280_get_filter::?relay
     375  bme280_get_forced_uncomp_pressure_temperature_humidity
       6  bme280_get_forced_uncomp_pressure_temperature_humidity::?relay
      56  bme280_get_oversamp_humidity
       6  bme280_get_oversamp_humidity::?relay
      60  bme280_get_oversamp_pressure
       6  bme280_get_oversamp_pressure::?relay
      50  bme280_get_oversamp_temperature
       6  bme280_get_oversamp_temperature::?relay
      44  bme280_get_power_mode
       6  bme280_get_power_mode::?relay
      54  bme280_get_spi3
       6  bme280_get_spi3::?relay
      54  bme280_get_standby_durn
       6  bme280_get_standby_durn::?relay
     113  bme280_init
       6  bme280_init::?relay
      15  bme280_init_struct
       6  bme280_init_struct::?relay
     143  bme280_read_pressure_temperature_humidity
       6  bme280_read_pressure_temperature_humidity::?relay
      52  bme280_read_register
       6  bme280_read_register::?relay
      98  bme280_read_uncomp_humidity
       6  bme280_read_uncomp_humidity::?relay
      97  bme280_read_uncomp_pressure
       6  bme280_read_uncomp_pressure::?relay
     211  bme280_read_uncomp_pressure_temperature_humidity
       6  bme280_read_uncomp_pressure_temperature_humidity::?relay
      97  bme280_read_uncomp_temperature
       6  bme280_read_uncomp_temperature::?relay
     147  bme280_send_data
       6  bme280_send_data::?relay
     126  bme280_set
       6  bme280_set::?relay
     243  bme280_set_filter
       6  bme280_set_filter::?relay
     305  bme280_set_oversamp_humidity
       6  bme280_set_oversamp_humidity::?relay
     248  bme280_set_oversamp_pressure
       6  bme280_set_oversamp_pressure::?relay
     243  bme280_set_oversamp_temperature
       6  bme280_set_oversamp_temperature::?relay
     277  bme280_set_power_mode
       6  bme280_set_power_mode::?relay
      48  bme280_set_soft_rst
       6  bme280_set_soft_rst::?relay
     244  bme280_set_spi3
       6  bme280_set_spi3::?relay
     244  bme280_set_standby_durn
       6  bme280_set_standby_durn::?relay
      46  bme280_write_register
       6  bme280_write_register::?relay
       2  p_bme280

 
 9 215 bytes in segment BANKED_CODE
   282 bytes in segment BANK_RELAYS
     1 byte  in segment SFR_AN
   247 bytes in segment XDATA_ROM_C
     2 bytes in segment XDATA_Z
 
   282 bytes of CODE     memory
    71 bytes of CONST    memory (+ 176 bytes shared)
     0 bytes of DATA     memory (+   1 byte  shared)
 9 215 bytes of HUGECODE memory
     2 bytes of XDATA    memory

Errors: none
Warnings: 7
