###############################################################################
#
# IAR C/C++ Compiler V9.30.3.3983 for 8051                05/Apr/2017  10:45:03
# Copyright 2004-2016 IAR Systems AB.
# Evaluation license - IAR Embedded Workbench for 8051, Evaluation version 9.30
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\Source\GenericApp.c
#    Command line       =  
#        -f
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0x0422
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\Source\GenericApp.c
#        -D NWK_AUTO_POLL -D ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC
#        -D LCD_SUPPORTED=DEBUG -D xPOWER_SAVING -lC
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\EndDeviceEB\List
#        -lA
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\EndDeviceEB\List
#        --diag_suppress Pe001,Pa010 -o
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\EndDeviceEB\Obj
#        -e --no_code_motion --debug --core=plain --dptr=16,1
#        --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 16 -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\Source\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -Ohz --require_prototypes
#    List file          =  
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\EndDeviceEB\List\GenericApp.lst
#    Object file        =  
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\EndDeviceEB\Obj\GenericApp.r51
#
###############################################################################

C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\Source\GenericApp.c
      1          /******************************************************************************
      2            Filename:       GenericApp.c
      3            Revised:        $Date: 2014-09-07 13:36:30 -0700 (Sun, 07 Sep 2014) $
      4            Revision:       $Revision: 40046 $
      5          
      6            Description:    Generic Application (no Profile).
      7          
      8          
      9            Copyright 2004-2014 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License"). You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product. Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          ******************************************************************************/
     39          
     40          /*********************************************************************
     41            This application isn't intended to do anything useful - it is
     42            intended to be a simple example of an application's structure.
     43          
     44            This application periodically sends a "Hello World" message to
     45            another "Generic" application (see 'txMsgDelay'). The application
     46            will also receive "Hello World" packets.
     47          
     48            This application doesn't have a profile, so it handles everything
     49            directly - by itself.
     50          
     51            Key control:
     52              SW1:  changes the delay between TX packets
     53              SW2:  initiates end device binding
     54              SW3:
     55              SW4:  initiates a match description request
     56          *********************************************************************/
     57          
     58          /*********************************************************************
     59           * INCLUDES
     60           */
     61          #include "OSAL.h"
     62          #include "AF.h"
     63          #include "ZDApp.h"
     64          #include "ZDObject.h"
     65          #include "ZDProfile.h"
     66          
     67          #include "GenericApp.h"
     68          #include "DebugTrace.h"
     69          
     70          #if !defined( WIN32 ) || defined( ZBIT )
     71            #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf4
   \   unsigned char volatile __sfr P1SEL
   \                     P1SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf7
   \   unsigned char volatile __sfr P2INP
   \                     P2INP:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfe
   \   unsigned char volatile __sfr P1DIR
   \                     P1DIR:
   \   000000                DS 1
     72          #endif
     73          
     74          /* HAL */
     75          #include "hal_lcd.h"
     76          #include "hal_led.h"
     77          #include "hal_key.h"
     78          #include "hal_uart.h"
     79          #include "hal_adc.h"
     80          
     81          /* RTOS */
     82          #if defined( IAR_ARMCM3_LM )
     83          #include "RTOS_App.h"
     84          #endif
     85          
     86          /*********************************************************************
     87           * MACROS
     88           */
     89          
     90          
     91          #define GENERICAPP_ENDPOINT           10
     92          
     93          #define GENERICAPP_PROFID             0x0F04
     94          #define GENERICAPP_DEVICEID           0x0001
     95          #define GENERICAPP_DEVICE_VERSION     0
     96          #define GENERICAPP_FLAGS              0
     97          
     98          #define GENERICAPP_MAX_CLUSTERS       1
     99          #define GENERICAPP_CLUSTERID          1
    100          
    101          
    102          #define MAX_NUMBER_OF_ENDDEVICES      10
    103          
    104          
    105          // magnetic switch macros
    106          #define DOOR_CLOSED_DETECTION         P1_2
    107          #define TRUE 1
    108          #define CLOSED 1
    109          #define OPENED 0
    110          // magnetic switch macros end
    111          
    112          #define MOTION_DETECTION_PIN           P1_2  
    113             
    114          #define MOTION_SENSOR                  1
    115          #define MAGNETIC_SENSOR                0
    116          #define OPTICAL_SENSOR                 0
    117          #define HELLO_WORLD                    0 
    118          /*********************************************************************
    119           * CONSTANTS
    120           */
    121          
    122          /*********************************************************************
    123           * TYPEDEFS
    124           */
    125          
    126          /*********************************************************************
    127           * GLOBAL VARIABLES
    128           */
    129          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    130          uint8 coin = 1;
   \                     coin:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for coin>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    131          char prevData = 0;
   \                     prevData:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    132          
    133          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    134          uint8 keyPressSW4 = 1;
   \                     keyPressSW4:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for keyPressSW4>`
   \   000001                REQUIRE __INIT_XDATA_I
    135          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    136          uint8 dataBuffer[10];
   \                     dataBuffer:
   \   000000                DS 10
   \   00000A                REQUIRE __INIT_XDATA_Z
    137             

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    138          int counter = 0;
   \                     counter:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    139          
    140          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    141          uint16 shortAddressOfEndDevice[MAX_NUMBER_OF_ENDDEVICES] = {0,0};
   \                     shortAddressOfEndDevice:
   \   000000                DS 20
   \   000014                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    142          uint16 SAddr[MAX_NUMBER_OF_ENDDEVICES] = {0,0};
   \                     SAddr:
   \   000000                DS 20
   \   000014                REQUIRE __INIT_XDATA_Z
    143          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    144          uint8 index = 0;
   \                     index:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    145          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    146          int brojac = 0; 
   \                     brojac:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    147          
    148          
    149          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
    150          const cId_t GenericApp_ClusterList[GENERICAPP_MAX_CLUSTERS] =
   \                     GenericApp_ClusterList:
   \   000000   0100         DW 1
    151          {
    152            GENERICAPP_CLUSTERID
    153          };
    154          

   \                                 In  segment XDATA_ROM_C, align 1
    155          const SimpleDescriptionFormat_t GenericApp_SimpleDesc =
   \                     GenericApp_SimpleDesc:
   \   000000   0A           DB 10
   \   000001   040F         DW 3844
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   01           DB 1
   \   000007   ....         DW GenericApp_ClusterList
   \   000009   01           DB 1
   \   00000A   ....         DW GenericApp_ClusterList
    156          {
    157            GENERICAPP_ENDPOINT,              //  int Endpoint;
    158            GENERICAPP_PROFID,                //  uint16 AppProfId[2];
    159            GENERICAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    160            GENERICAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    161            GENERICAPP_FLAGS,                 //  int   AppFlags:4;
    162            GENERICAPP_MAX_CLUSTERS,          //  byte  AppNumInClusters;
    163            (cId_t *)GenericApp_ClusterList,  //  byte *pAppInClusterList;
    164            GENERICAPP_MAX_CLUSTERS,          //  byte  AppNumInClusters;
    165            (cId_t *)GenericApp_ClusterList   //  byte *pAppInClusterList;
    166          };
    167          
    168          // This is the Endpoint/Interface description.  It is defined here, but
    169          // filled-in in GenericApp_Init().  Another way to go would be to fill
    170          // in the structure here and make it a "const" (in code space).  The
    171          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    172          endPointDesc_t GenericApp_epDesc;
   \                     GenericApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    173          
    174          /*********************************************************************
    175           * EXTERNAL VARIABLES
    176           */
    177          
    178          /*********************************************************************
    179           * EXTERNAL FUNCTIONS
    180           */
    181          
    182            extern void uartInit(void);
    183            extern void uartSend(char);
    184          
    185          
    186          /*********************************************************************
    187           * LOCAL VARIABLES
    188           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    189          byte GenericApp_TaskID;   // Task ID for internal task/event processing
   \                     GenericApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    190                                    // This variable will be received when
    191                                    // GenericApp_Init() is called.
    192          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    193          devStates_t GenericApp_NwkState;
   \                     GenericApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    194          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    195          byte GenericApp_TransID;  // This is the unique message ID (counter)
   \                     GenericApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    196          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    197          afAddrType_t GenericApp_DstAddr;
   \                     GenericApp_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    198          afAddrType_t GenericApp_DstAddr1;
   \                     GenericApp_DstAddr1:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    199          afAddrType_t GenericApp_DstAddr2;
   \                     GenericApp_DstAddr2:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    200          // Number of recieved messages

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    201          static uint16 rxMsgCount;
   \                     rxMsgCount:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    202          
    203          // Time interval between sending messages

   \                                 In  segment XDATA_I, align 1, keep-with-next
    204          static uint32 txMsgDelay = GENERICAPP_SEND_MSG_TIMEOUT;
   \                     txMsgDelay:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for txMsgDelay>`
   \   000004                REQUIRE __INIT_XDATA_I
    205          
    206          /*********************************************************************
    207           * LOCAL FUNCTIONS
    208           */
    209          static void GenericApp_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg );
    210          static void GenericApp_HandleKeys( byte shift, byte keys );
    211          static void GenericApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    212          static void GenericApp_SendTheMessage( void );
    213          
    214          static void GenericApp_EndPointList(uint16);
    215          
    216          
    217          
    218          
    219          #if defined( IAR_ARMCM3_LM )
    220          static void GenericApp_ProcessRtosMessage( void );
    221          #endif
    222          
    223          /*********************************************************************
    224           * NETWORK LAYER CALLBACKS
    225           */
    226          
    227          /*********************************************************************
    228           * PUBLIC FUNCTIONS
    229           */
    230          
    231          /*********************************************************************
    232           * @fn      GenericApp_Init
    233           *
    234           * @brief   Initialization function for the Generic App Task.
    235           *          This is called during initialization and should contain
    236           *          any application specific initialization (ie. hardware
    237           *          initialization/setup, table initialization, power up
    238           *          notificaiton ... ).
    239           *
    240           * @param   task_id - the ID assigned by OSAL.  This ID should be
    241           *                    used to send messages and set timers.
    242           *
    243           * @return  none
    244           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    245          void GenericApp_Init( uint8 task_id )
   \                     GenericApp_Init:
    246          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    247            GenericApp_TaskID = task_id;
   \   000006   90....       MOV     DPTR,#GenericApp_TaskID
   \   000009   F0           MOVX    @DPTR,A
    248            GenericApp_NwkState = DEV_INIT;
   \   00000A   90....       MOV     DPTR,#GenericApp_NwkState
   \   00000D   7401         MOV     A,#0x1
   \   00000F   F0           MOVX    @DPTR,A
    249            GenericApp_TransID = 0;
   \   000010   90....       MOV     DPTR,#GenericApp_TransID
   \   000013   E4           CLR     A
   \   000014   F0           MOVX    @DPTR,A
    250            
    251            // Device hardware initialization can be added here or in main() (Zmain.c).
    252            // If the hardware is application specific - add it here.
    253            // If the hardware is other parts of the device add it in main().
    254          
    255            GenericApp_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \   000015   90....       MOV     DPTR,#GenericApp_DstAddr + 8
   \   000018   7402         MOV     A,#0x2
   \   00001A   F0           MOVX    @DPTR,A
    256            GenericApp_DstAddr.endPoint = GENERICAPP_ENDPOINT;
   \   00001B   A3           INC     DPTR
   \   00001C   740A         MOV     A,#0xa
   \   00001E   F0           MOVX    @DPTR,A
    257            //This is address of Coordinator
    258            GenericApp_DstAddr.addr.shortAddr = 0x0000;                                   
   \   00001F   90....       MOV     DPTR,#GenericApp_DstAddr
   \   000022   E4           CLR     A
   \   000023   F0           MOVX    @DPTR,A
   \   000024   A3           INC     DPTR
   \   000025   F0           MOVX    @DPTR,A
    259          
    260            // Fill out the endpoint description.
    261            GenericApp_epDesc.endPoint = GENERICAPP_ENDPOINT;
   \   000026   90....       MOV     DPTR,#GenericApp_epDesc
   \   000029   740A         MOV     A,#0xa
   \   00002B   F0           MOVX    @DPTR,A
    262            GenericApp_epDesc.task_id = &GenericApp_TaskID;
   \   00002C   A3           INC     DPTR
   \   00002D   74..         MOV     A,#GenericApp_TaskID & 0xff
   \   00002F   F0           MOVX    @DPTR,A
   \   000030   A3           INC     DPTR
   \   000031   74..         MOV     A,#(GenericApp_TaskID >> 8) & 0xff
   \   000033   F0           MOVX    @DPTR,A
    263            GenericApp_epDesc.simpleDesc
    264                      = (SimpleDescriptionFormat_t *)&GenericApp_SimpleDesc;
   \   000034   A3           INC     DPTR
   \   000035   74..         MOV     A,#GenericApp_SimpleDesc & 0xff
   \   000037   F0           MOVX    @DPTR,A
   \   000038   A3           INC     DPTR
   \   000039   74..         MOV     A,#(GenericApp_SimpleDesc >> 8) & 0xff
   \   00003B   F0           MOVX    @DPTR,A
    265            GenericApp_epDesc.latencyReq = noLatencyReqs;
   \   00003C   A3           INC     DPTR
   \   00003D   E4           CLR     A
   \   00003E   F0           MOVX    @DPTR,A
    266          
    267            // Register the endpoint description with the AF
    268            afRegister( &GenericApp_epDesc );
   \   00003F                ; Setup parameters for call to function afRegister
   \   00003F   7A..         MOV     R2,#GenericApp_epDesc & 0xff
   \   000041   7B..         MOV     R3,#(GenericApp_epDesc >> 8) & 0xff
   \   000043   12....       LCALL   `??afRegister::?relay`; Banked call to: afRegister
    269          
    270            // Register for all key events - This app will handle all key events
    271            RegisterForKeys( GenericApp_TaskID );
   \   000046                ; Setup parameters for call to function RegisterForKeys
   \   000046   90....       MOV     DPTR,#GenericApp_TaskID
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   F9           MOV     R1,A
   \   00004B   12....       LCALL   `??RegisterForKeys::?relay`; Banked call to: RegisterForKeys
    272          
    273            // Update the display
    274          #if defined ( LCD_SUPPORTED )
    275            HalLcdWriteString( "GenericApp", HAL_LCD_LINE_1 );
   \   00004E                ; Setup parameters for call to function HalLcdWriteString
   \   00004E   7901         MOV     R1,#0x1
   \   000050   7A..         MOV     R2,#`?<Constant "GenericApp">` & 0xff
   \   000052   7B..         MOV     R3,#(`?<Constant "GenericApp">` >> 8) & 0xff
   \   000054   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    276          #endif
    277          
    278            ZDO_RegisterForZDOMsg( GenericApp_TaskID, End_Device_Bind_rsp );
   \   000057                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000057   7A20         MOV     R2,#0x20
   \   000059   7B80         MOV     R3,#-0x80
   \   00005B   90....       MOV     DPTR,#GenericApp_TaskID
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   F9           MOV     R1,A
   \   000060   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
    279            ZDO_RegisterForZDOMsg( GenericApp_TaskID, Match_Desc_rsp );
   \   000063                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000063   7A06         MOV     R2,#0x6
   \   000065   7B80         MOV     R3,#-0x80
   \   000067   90....       MOV     DPTR,#GenericApp_TaskID
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   F9           MOV     R1,A
   \   00006C   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
    280          
    281          #if defined( IAR_ARMCM3_LM )
    282            // Register this task with RTOS task initiator
    283            RTOS_RegisterApp( task_id, GENERICAPP_RTOS_MSG_EVT );
    284          #endif
    285          }
   \   00006F   7F01         MOV     R7,#0x1
   \   000071   02....       LJMP    ?BANKED_LEAVE_XDATA
    286          /*********************************************************************
    287           * @fn      GenericApp_EndPointList
    288           *
    289           * @brief   Get's short address of end device and put in the end device 
    290                      array
    291           *
    292           * @param   shAddr  - Short Address of connected End Device
    293           * 
    294           * @return  none
    295           */
    296          static void GenericApp_EndPointList(uint16 shAddr)
    297          {
    298           
    299            if(index > MAX_NUMBER_OF_ENDDEVICES)
    300            {
    301              HalLcdWriteString("Max number of end devices overflow.",0);
    302            }
    303            else
    304            {
    305              shortAddressOfEndDevice[index];
                     ^
Warning[Pe174]: expression has no effect
    306              index++;
    307            }
    308            
    309            
    310          }
    311          /*********************************************************************
    312           * @fn      GenericApp_ProcessEvent
    313           *
    314           * @brief   Generic Application Task event processor.  This function
    315           *          is called to process all events for the task.  Events
    316           *          include timers, messages and any other user defined events.
    317           *
    318           * @param   task_id  - The OSAL assigned task ID.
    319           * @param   events - events to process.  This is a bit map and can
    320           *                   contain more than one event.
    321           *
    322           * @return  none
    323           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    324          uint16 GenericApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     GenericApp_ProcessEvent:
    325          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV     A,#-0xb
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
    326            afIncomingMSGPacket_t *MSGpkt;
    327            afDataConfirm_t *afDataConfirm;
    328            zAddrType_t dstAddr;
    329          
    330              char shAddr[5];
                          ^
Warning[Pe550]: variable "shAddr" was set but never used
    331              shAddr[4] = '\0';
    332              
    333              uint8 i;
                           ^
Warning[Pe177]: variable "i" was declared but never referenced
    334              uint16 shortAdrress;
                            ^
Warning[Pe177]: variable "shortAdrress" was declared but never referenced
    335            // Data Confirmation message fields
    336            byte sentEP;
    337            ZStatus_t sentStatus;
    338            byte sentTransID;       // This should match the value sent
    339            (void)task_id;  // Intentionally unreferenced parameter
    340          
    341            if ( events & SYS_EVENT_MSG )
   \   00000E   EB           MOV     A,R3
   \   00000F   5480         ANL     A,#0x80
   \   000011   7003         JNZ     $+5
   \   000013   02....       LJMP    ??GenericApp_ProcessEvent_0 & 0xFFFF
    342            {
    343              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( GenericApp_TaskID );
   \   000016                ; Setup parameters for call to function osal_msg_receive
   \   000016   8013         SJMP    ??GenericApp_ProcessEvent_1
    344              
    345              while ( MSGpkt )
    346              {
    347                switch ( MSGpkt->hdr.event )
    348                {
    349                  case ZDO_CB_MSG:
    350                    
    351                    GenericApp_ProcessZDOMsgs( (zdoIncomingMsg_t *)MSGpkt );
    352                    
    353                    break;
    354          
    355                  case KEY_CHANGE:
    356            
    357                    // GenericApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    358                    break;
    359          
    360                  case AF_DATA_CONFIRM_CMD:
    361                    // This message is received as a confirmation of a data packet sent.
    362                    // The status is of ZStatus_t type [defined in ZComDef.h]
    363                    // The message fields are defined in AF.h
    364                   
    365                    afDataConfirm = (afDataConfirm_t *)MSGpkt;
    366          
    367                    sentEP = afDataConfirm->endpoint;
    368                    (void)sentEP;  // This info not used now
    369                    sentTransID = afDataConfirm->transID;
    370                    (void)sentTransID;  // This info not used now
    371          
    372                    sentStatus = afDataConfirm->hdr.status;
    373                    // Action taken when confirmation is received.
    374                    if ( sentStatus != ZSuccess )
    375                    {
    376                      // The data wasn't delivered -- Do something
    377                    }
    378                    break;
    379          
    380                  case AF_INCOMING_MSG_CMD:
    381                    
    382                   //Receive "The" Message
    383                   GenericApp_MessageMSGCB( MSGpkt );
    384                   
    385          
    386                    break;
    387          
    388                  case ZDO_STATE_CHANGE:
    389                     
    390                  
    391                    
    392                    GenericApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
    393                    if ( (GenericApp_NwkState == DEV_ZB_COORD) ||
    394                         (GenericApp_NwkState == DEV_ROUTER) ||
    395                         (GenericApp_NwkState == DEV_END_DEVICE) )
    396                    {
    397                      
    398                     
    399                      // Start sending "the" message in a regular interval.
    400                      osal_start_timerEx( GenericApp_TaskID,
    401                                          GENERICAPP_SEND_MSG_EVT,
    402                                          txMsgDelay );
    403                      
    404          
    405                    }
    406                                
    407                    break;
    408          
    409                  default:
    410                     
    411                    
    412                      osal_set_event(GenericApp_TaskID,GENERICAPP_SEND_MSG_EVT);
   \                     ??GenericApp_ProcessEvent_2:
   \   000018                ; Setup parameters for call to function osal_set_event
   \   000018   7A01         MOV     R2,#0x1
   \   00001A   7B00         MOV     R3,#0x0
   \   00001C   90....       MOV     DPTR,#GenericApp_TaskID
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F9           MOV     R1,A
   \   000021   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
    413                     break;
    414                }
    415          
    416                // Release the memory
    417                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??GenericApp_ProcessEvent_3:
   \   000024                ; Setup parameters for call to function osal_msg_deallocate
   \   000024   EE           MOV     A,R6
   \   000025   FA           MOV     R2,A
   \   000026   EF           MOV     A,R7
   \   000027   FB           MOV     R3,A
   \   000028   12....       LCALL   `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
    418          
    419                // Next
    420                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( GenericApp_TaskID );
   \   00002B                ; Setup parameters for call to function osal_msg_receive
   \                     ??GenericApp_ProcessEvent_1:
   \   00002B   90....       MOV     DPTR,#GenericApp_TaskID
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   F9           MOV     R1,A
   \   000030   12....       LCALL   `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   000033   8A..         MOV     ?V2,R2
   \   000035   8B..         MOV     ?V3,R3
   \   000037   AE..         MOV     R6,?V2
   \   000039   AF..         MOV     R7,?V3
   \   00003B   EE           MOV     A,R6
   \   00003C   4F           ORL     A,R7
   \   00003D   7003         JNZ     $+5
   \   00003F   02....       LJMP    ??GenericApp_ProcessEvent_4 & 0xFFFF
   \   000042   8E82         MOV     DPL,R6
   \   000044   8F83         MOV     DPH,R7
   \   000046   E0           MOVX    A,@DPTR
   \   000047   24E6         ADD     A,#-0x1a
   \   000049   601E         JZ      ??GenericApp_ProcessEvent_5
   \   00004B   245A         ADD     A,#0x5a
   \   00004D   60D5         JZ      ??GenericApp_ProcessEvent_3
   \   00004F   24EF         ADD     A,#-0x11
   \   000051   7003         JNZ     $+5
   \   000053   02....       LJMP    ??GenericApp_ProcessEvent_6 & 0xFFFF
   \   000056   24FE         ADD     A,#-0x2
   \   000058   6006         JZ      ??GenericApp_ProcessEvent_7
   \   00005A   24D6         ADD     A,#-0x2a
   \   00005C   60C6         JZ      ??GenericApp_ProcessEvent_3
   \   00005E   80B8         SJMP    ??GenericApp_ProcessEvent_2
   \                     ??GenericApp_ProcessEvent_7:
   \   000060                ; Setup parameters for call to function GenericApp_ProcessZDOMsgs
   \   000060   EE           MOV     A,R6
   \   000061   FA           MOV     R2,A
   \   000062   EF           MOV     A,R7
   \   000063   FB           MOV     R3,A
   \   000064   12....       LCALL   `??GenericApp_ProcessZDOMsgs::?relay`; Banked call to: GenericApp_ProcessZDOMsgs
   \   000067   80BB         SJMP    ??GenericApp_ProcessEvent_3
   \                     ??GenericApp_ProcessEvent_5:
   \   000069   A3           INC     DPTR
   \   00006A   A3           INC     DPTR
   \   00006B   A3           INC     DPTR
   \   00006C   A3           INC     DPTR
   \   00006D   E0           MOVX    A,@DPTR
   \   00006E   6401         XRL     A,#0x1
   \   000070   7002         JNZ     ??GenericApp_ProcessEvent_8
   \   000072   A3           INC     DPTR
   \   000073   E0           MOVX    A,@DPTR
   \                     ??GenericApp_ProcessEvent_8:
   \   000074   706B         JNZ     ??GenericApp_ProcessEvent_9
   \   000076   90....       MOV     DPTR,#rxMsgCount
   \   000079   E0           MOVX    A,@DPTR
   \   00007A   2401         ADD     A,#0x1
   \   00007C   F0           MOVX    @DPTR,A
   \   00007D   A3           INC     DPTR
   \   00007E   E0           MOVX    A,@DPTR
   \   00007F   3400         ADDC    A,#0x0
   \   000081   F0           MOVX    @DPTR,A
   \   000082                ; Setup parameters for call to function HalLcdWriteString
   \   000082   7900         MOV     R1,#0x0
   \   000084   7A..         MOV     R2,#`?<Constant "---------------------...">` & 0xff
   \   000086   7B..         MOV     R3,#(`?<Constant "---------------------...">` >> 8) & 0xff
   \   000088   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
   \   00008B                ; Setup parameters for call to function HalLcdWriteString
   \   00008B   7900         MOV     R1,#0x0
   \   00008D   7A..         MOV     R2,#`?<Constant "Received data:">` & 0xff
   \   00008F   7B..         MOV     R3,#(`?<Constant "Received data:">` >> 8) & 0xff
   \   000091   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
   \   000094   75..00       MOV     ?V2,#0x0
   \   000097   801D         SJMP    ??GenericApp_ProcessEvent_10
   \                     ??GenericApp_ProcessEvent_11:
   \   000099                ; Setup parameters for call to function uartSend
   \   000099   A8..         MOV     R0,?V2
   \   00009B   EE           MOV     A,R6
   \   00009C   2422         ADD     A,#0x22
   \   00009E   F582         MOV     DPL,A
   \   0000A0   E4           CLR     A
   \   0000A1   3F           ADDC    A,R7
   \   0000A2   F583         MOV     DPH,A
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   28           ADD     A,R0
   \   0000A6   FA           MOV     R2,A
   \   0000A7   A3           INC     DPTR
   \   0000A8   E0           MOVX    A,@DPTR
   \   0000A9   3400         ADDC    A,#0x0
   \   0000AB   8A82         MOV     DPL,R2
   \   0000AD   F583         MOV     DPH,A
   \   0000AF   E0           MOVX    A,@DPTR
   \   0000B0   F9           MOV     R1,A
   \   0000B1   12....       LCALL   `??uartSend::?relay` ; Banked call to: uartSend
   \   0000B4   05..         INC     ?V2
   \                     ??GenericApp_ProcessEvent_10:
   \   0000B6   EE           MOV     A,R6
   \   0000B7   2420         ADD     A,#0x20
   \   0000B9   F582         MOV     DPL,A
   \   0000BB   E4           CLR     A
   \   0000BC   3F           ADDC    A,R7
   \   0000BD   F583         MOV     DPH,A
   \   0000BF   E0           MOVX    A,@DPTR
   \   0000C0   FA           MOV     R2,A
   \   0000C1   A3           INC     DPTR
   \   0000C2   E0           MOVX    A,@DPTR
   \   0000C3   FB           MOV     R3,A
   \   0000C4   C3           CLR     C
   \   0000C5   E5..         MOV     A,?V2
   \   0000C7   9A           SUBB    A,R2
   \   0000C8   E4           CLR     A
   \   0000C9   9B           SUBB    A,R3
   \   0000CA   40CD         JC      ??GenericApp_ProcessEvent_11
   \   0000CC                ; Setup parameters for call to function HalLcdWriteString
   \   0000CC   7900         MOV     R1,#0x0
   \   0000CE   7A..         MOV     R2,#`?<Constant "">` & 0xff
   \   0000D0   7B..         MOV     R3,#(`?<Constant "">` >> 8) & 0xff
   \   0000D2   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
   \   0000D5                ; Setup parameters for call to function HalLcdWriteString
   \   0000D5   7900         MOV     R1,#0x0
   \   0000D7   7A..         MOV     R2,#`?<Constant "---------------------...">` & 0xff
   \   0000D9   7B..         MOV     R3,#(`?<Constant "---------------------...">` >> 8) & 0xff
   \                     ??GenericApp_ProcessEvent_12:
   \   0000DB   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
   \   0000DE   02....       LJMP    ??GenericApp_ProcessEvent_3 & 0xFFFF
   \                     ??GenericApp_ProcessEvent_9:
   \   0000E1                ; Setup parameters for call to function HalLcdWriteString
   \   0000E1   7900         MOV     R1,#0x0
   \   0000E3   7A..         MOV     R2,#`?<Constant "Podatak nije primljen.">` & 0xff
   \   0000E5   7B..         MOV     R3,#(`?<Constant "Podatak nije primljen.">` >> 8) & 0xff
   \   0000E7   80F2         SJMP    ??GenericApp_ProcessEvent_12
   \                     ??GenericApp_ProcessEvent_6:
   \   0000E9   A3           INC     DPTR
   \   0000EA   E0           MOVX    A,@DPTR
   \   0000EB   90....       MOV     DPTR,#GenericApp_NwkState
   \   0000EE   F0           MOVX    @DPTR,A
   \   0000EF   6409         XRL     A,#0x9
   \   0000F1   600D         JZ      ??GenericApp_ProcessEvent_13
   \   0000F3   E0           MOVX    A,@DPTR
   \   0000F4   6407         XRL     A,#0x7
   \   0000F6   6008         JZ      ??GenericApp_ProcessEvent_13
   \   0000F8   E0           MOVX    A,@DPTR
   \   0000F9   6406         XRL     A,#0x6
   \   0000FB   6003         JZ      $+5
   \   0000FD   02....       LJMP    ??GenericApp_ProcessEvent_3 & 0xFFFF
   \                     ??GenericApp_ProcessEvent_13:
   \   000100                ; Setup parameters for call to function osal_start_timerEx
   \   000100   90....       MOV     DPTR,#txMsgDelay
   \   000103   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000106   7A01         MOV     R2,#0x1
   \   000108   7B00         MOV     R3,#0x0
   \   00010A   90....       MOV     DPTR,#GenericApp_TaskID
   \   00010D   E0           MOVX    A,@DPTR
   \   00010E   F9           MOV     R1,A
   \   00010F   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000112   7404         MOV     A,#0x4
   \   000114   12....       LCALL   ?DEALLOC_XSTACK8
   \   000117   02....       LJMP    ??GenericApp_ProcessEvent_3 & 0xFFFF
    421                  
    422              }
    423          
    424              // return unprocessed events
    425              return (events ^ SYS_EVENT_MSG);
   \                     ??GenericApp_ProcessEvent_4:
   \   00011A   AA..         MOV     R2,?V0
   \   00011C   E5..         MOV     A,?V1
   \   00011E   6480         XRL     A,#0x80
   \   000120   FB           MOV     R3,A
   \   000121   02....       LJMP    ??GenericApp_ProcessEvent_14 & 0xFFFF
    426            }
    427          
    428            // Send a message out - This event is generated by a timer
    429            //  (setup in GenericApp_Init()).
    430            if ( events & GENERICAPP_SEND_MSG_EVT )
   \                     ??GenericApp_ProcessEvent_0:
   \   000124   EA           MOV     A,R2
   \   000125   A2E0         MOV     C,0xE0 /* A   */.0
   \   000127   4003         JC      $+5
   \   000129   02....       LJMP    ??GenericApp_ProcessEvent_15 & 0xFFFF
    431            {
    432            
    433              if(keyPressSW4)
   \   00012C   90....       MOV     DPTR,#keyPressSW4
   \   00012F   E0           MOVX    A,@DPTR
   \   000130   6071         JZ      ??GenericApp_ProcessEvent_16
    434              {
    435               /*
    436                dstAddr.addrMode = Addr16Bit;
    437                dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVALL;
    438                ZDP_MatchDescReq( &dstAddr,NWK_BROADCAST_SHORTADDR_DEVALL,
    439                                  GENERICAPP_PROFID,
    440                                  GENERICAPP_MAX_CLUSTERS, (cId_t *)GenericApp_ClusterList,
    441                                  GENERICAPP_MAX_CLUSTERS, (cId_t *)GenericApp_ClusterList,
    442                                  FALSE );
    443               
    444             
    445               */ 
    446                
    447                dstAddr.addrMode = Addr16Bit;
   \   000132   740A         MOV     A,#0xa
   \   000134   12....       LCALL   ?XSTACK_DISP0_8
   \   000137   7402         MOV     A,#0x2
   \   000139   F0           MOVX    @DPTR,A
    448                dstAddr.addr.shortAddr = NLME_GetShortAddr();
   \   00013A                ; Setup parameters for call to function NLME_GetShortAddr
   \   00013A   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   00013D   7402         MOV     A,#0x2
   \   00013F   12....       LCALL   ?XSTACK_DISP0_8
   \   000142   EA           MOV     A,R2
   \   000143   F0           MOVX    @DPTR,A
   \   000144   A3           INC     DPTR
   \   000145   EB           MOV     A,R3
   \   000146   F0           MOVX    @DPTR,A
    449                ZDP_EndDeviceBindReq( &dstAddr, 0x0000,
    450                                      GenericApp_epDesc.endPoint,
    451                                      GENERICAPP_PROFID,
    452                                      GENERICAPP_MAX_CLUSTERS, (cId_t *)GenericApp_ClusterList,
    453                                      GENERICAPP_MAX_CLUSTERS, (cId_t *)GenericApp_ClusterList,
    454                                      FALSE );
   \   000147   75....       MOV     ?V2,#GenericApp_ClusterList & 0xff
   \   00014A   75....       MOV     ?V3,#(GenericApp_ClusterList >> 8) & 0xff
   \   00014D                ; Setup parameters for call to function ZDP_EndDeviceBindReq
   \   00014D   75..00       MOV     ?V4,#0x0
   \   000150   78..         MOV     R0,#?V4
   \   000152   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000155   78..         MOV     R0,#?V2
   \   000157   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00015A   75..01       MOV     ?V4,#0x1
   \   00015D   78..         MOV     R0,#?V4
   \   00015F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000162   78..         MOV     R0,#?V2
   \   000164   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000167   75..01       MOV     ?V2,#0x1
   \   00016A   78..         MOV     R0,#?V2
   \   00016C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00016F   75..04       MOV     ?V2,#0x4
   \   000172   75..0F       MOV     ?V3,#0xf
   \   000175   78..         MOV     R0,#?V2
   \   000177   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00017A   90....       MOV     DPTR,#GenericApp_epDesc
   \   00017D   E0           MOVX    A,@DPTR
   \   00017E   F9           MOV     R1,A
   \   00017F   7C00         MOV     R4,#0x0
   \   000181   7D00         MOV     R5,#0x0
   \   000183   740B         MOV     A,#0xb
   \   000185   12....       LCALL   ?XSTACK_DISP101_8
   \   000188   12....       LCALL   `??ZDP_EndDeviceBindReq::?relay`; Banked call to: ZDP_EndDeviceBindReq
   \   00018B   7409         MOV     A,#0x9
   \   00018D   12....       LCALL   ?DEALLOC_XSTACK8
    455                
    456               
    457               
    458                
    459                keyPressSW4 = 0;
   \   000190   90....       MOV     DPTR,#keyPressSW4
   \   000193   E4           CLR     A
   \   000194   F0           MOVX    @DPTR,A
    460                
    461                osal_set_event(GenericApp_TaskID,GENERICAPP_SEND_MSG_EVT);
   \   000195                ; Setup parameters for call to function osal_set_event
   \   000195   7A01         MOV     R2,#0x1
   \   000197   FB           MOV     R3,A
   \   000198   90....       MOV     DPTR,#GenericApp_TaskID
   \   00019B   E0           MOVX    A,@DPTR
   \   00019C   F9           MOV     R1,A
   \   00019D   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   0001A0   02....       LJMP    ??GenericApp_ProcessEvent_17 & 0xFFFF
    462                
    463              }
    464              else
    465              {
    466               
    467                
    468              // Send "the" message
    469              GenericApp_SendTheMessage();
   \                     ??GenericApp_ProcessEvent_16:
   \   0001A3   90....       MOV     DPTR,#`?<Constant {49}>`
   \   0001A6   7401         MOV     A,#0x1
   \   0001A8   12....       LCALL   ?XSTACK_DISP102_8
   \   0001AB   7401         MOV     A,#0x1
   \   0001AD   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   \   0001B0   90....       MOV     DPTR,#`?<Constant {48}>`
   \   0001B3   AC..         MOV     R4,?XSP + 0
   \   0001B5   AD..         MOV     R5,?XSP + 1
   \   0001B7   04           INC     A
   \   0001B8   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   \   0001BB   90....       MOV     DPTR,#GenericApp_DstAddr
   \   0001BE   F0           MOVX    @DPTR,A
   \   0001BF   A3           INC     DPTR
   \   0001C0   F0           MOVX    @DPTR,A
   \   0001C1                ; Setup parameters for call to function motionDetection
   \   0001C1   12....       LCALL   `??motionDetection::?relay`; Banked call to: motionDetection
   \   0001C4   E9           MOV     A,R1
   \   0001C5   75..1E       MOV     ?V2,#0x1e
   \   0001C8   78..         MOV     R0,#?V2
   \   0001CA   6049         JZ      ??GenericApp_ProcessEvent_18
   \   0001CC                ; Setup parameters for call to function AF_DataRequest
   \   0001CC   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001CF   75....       MOV     ?V2,#GenericApp_TransID & 0xff
   \   0001D2   75....       MOV     ?V3,#(GenericApp_TransID >> 8) & 0xff
   \   0001D5   78..         MOV     R0,#?V2
   \   0001D7   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001DA   7404         MOV     A,#0x4
   \   0001DC   12....       LCALL   ?XSTACK_DISP100_8
   \   0001DF   88..         MOV     ?V2,R0
   \   0001E1   89..         MOV     ?V3,R1
   \   0001E3   78..         MOV     R0,#?V2
   \   0001E5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001E8   75..02       MOV     ?V2,#0x2
   \   0001EB   75..00       MOV     ?V3,#0x0
   \   0001EE   78..         MOV     R0,#?V2
   \   0001F0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001F3   75..01       MOV     ?V2,#0x1
   \   0001F6   78..         MOV     R0,#?V2
   \   0001F8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001FB   7900         MOV     R1,#0x0
   \   0001FD   7C..         MOV     R4,#GenericApp_epDesc & 0xff
   \   0001FF   7D..         MOV     R5,#(GenericApp_epDesc >> 8) & 0xff
   \   000201   7A..         MOV     R2,#GenericApp_DstAddr & 0xff
   \   000203   7B..         MOV     R3,#(GenericApp_DstAddr >> 8) & 0xff
   \   000205   12....       LCALL   `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   000208   7409         MOV     A,#0x9
   \   00020A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00020D                ; Setup parameters for call to function HalLcdWriteString
   \   00020D   7900         MOV     R1,#0x0
   \   00020F   7A..         MOV     R2,#`?<Constant "Pokret je detektovan.">` & 0xff
   \   000211   7B..         MOV     R3,#(`?<Constant "Pokret je detektovan.">` >> 8) & 0xff
   \   000213   8047         SJMP    ??GenericApp_ProcessEvent_19
   \                     ??GenericApp_ProcessEvent_18:
   \   000215                ; Setup parameters for call to function AF_DataRequest
   \   000215   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000218   75....       MOV     ?V2,#GenericApp_TransID & 0xff
   \   00021B   75....       MOV     ?V3,#(GenericApp_TransID >> 8) & 0xff
   \   00021E   78..         MOV     R0,#?V2
   \   000220   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000223   7403         MOV     A,#0x3
   \   000225   12....       LCALL   ?XSTACK_DISP100_8
   \   000228   88..         MOV     ?V2,R0
   \   00022A   89..         MOV     ?V3,R1
   \   00022C   78..         MOV     R0,#?V2
   \   00022E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000231   75..02       MOV     ?V2,#0x2
   \   000234   75..00       MOV     ?V3,#0x0
   \   000237   78..         MOV     R0,#?V2
   \   000239   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00023C   75..01       MOV     ?V2,#0x1
   \   00023F   78..         MOV     R0,#?V2
   \   000241   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000244   7900         MOV     R1,#0x0
   \   000246   7C..         MOV     R4,#GenericApp_epDesc & 0xff
   \   000248   7D..         MOV     R5,#(GenericApp_epDesc >> 8) & 0xff
   \   00024A   7A..         MOV     R2,#GenericApp_DstAddr & 0xff
   \   00024C   7B..         MOV     R3,#(GenericApp_DstAddr >> 8) & 0xff
   \   00024E   12....       LCALL   `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   000251   7409         MOV     A,#0x9
   \   000253   12....       LCALL   ?DEALLOC_XSTACK8
   \   000256                ; Setup parameters for call to function HalLcdWriteString
   \   000256   7900         MOV     R1,#0x0
   \   000258   7A..         MOV     R2,#`?<Constant "Nema kretanja.">` & 0xff
   \   00025A   7B..         MOV     R3,#(`?<Constant "Nema kretanja.">` >> 8) & 0xff
   \                     ??GenericApp_ProcessEvent_19:
   \   00025C   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    470               
    471              
    472               //Setup to send message again evry 1000 ms
    473               osal_start_timerEx( GenericApp_TaskID,
    474                                   GENERICAPP_SEND_MSG_EVT,
    475                                   2000);
   \   00025F                ; Setup parameters for call to function osal_start_timerEx
   \   00025F   90....       MOV     DPTR,#__Constant_7d0
   \   000262   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000265   7A01         MOV     R2,#0x1
   \   000267   7B00         MOV     R3,#0x0
   \   000269   90....       MOV     DPTR,#GenericApp_TaskID
   \   00026C   E0           MOVX    A,@DPTR
   \   00026D   F9           MOV     R1,A
   \   00026E   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000271   7404         MOV     A,#0x4
   \   000273   12....       LCALL   ?DEALLOC_XSTACK8
    476              
    477              
    478              }
    479              // return unprocessed events
    480              return (events ^ GENERICAPP_SEND_MSG_EVT);
   \                     ??GenericApp_ProcessEvent_17:
   \   000276   E5..         MOV     A,?V0
   \   000278   6401         XRL     A,#0x1
   \   00027A   FA           MOV     R2,A
   \   00027B   AB..         MOV     R3,?V1
   \   00027D   8004         SJMP    ??GenericApp_ProcessEvent_14
    481            }
    482          
    483          #if defined( IAR_ARMCM3_LM )
    484            // Receive a message from the RTOS queue
    485            if ( events & GENERICAPP_RTOS_MSG_EVT )
    486            {
    487              // Process message from RTOS queue
    488              GenericApp_ProcessRtosMessage();
    489          
    490              // return unprocessed events
    491              return (events ^ GENERICAPP_RTOS_MSG_EVT);
    492            }
    493          #endif
    494          
    495            // Discard unknown events
    496            return 0;
   \                     ??GenericApp_ProcessEvent_15:
   \   00027F   7A00         MOV     R2,#0x0
   \   000281   7B00         MOV     R3,#0x0
   \                     ??GenericApp_ProcessEvent_14:
   \   000283   740B         MOV     A,#0xb
   \   000285   12....       LCALL   ?DEALLOC_XSTACK8
   \   000288   7F05         MOV     R7,#0x5
   \   00028A   02....       LJMP    ?BANKED_LEAVE_XDATA
    497          }
    498          
    499          /*********************************************************************
    500           * Event Generation Functions
    501           */
    502          
    503          /*********************************************************************
    504           * @fn      GenericApp_ProcessZDOMsgs()
    505           *
    506           * @brief   Process response messages
    507           *
    508           * @param   none
    509           *
    510           * @return  none
    511           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    512          static void GenericApp_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg )
   \                     GenericApp_ProcessZDOMsgs:
    513          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    514            char shAddr[5];
    515            uint16 SAddr[2];
    516              shAddr[4] = '\0';
   \   00000E   7404         MOV     A,#0x4
   \   000010   12....       LCALL   ?XSTACK_DISP0_8
   \   000013   E4           CLR     A
   \   000014   F0           MOVX    @DPTR,A
    517              uint8 i = 0;
   \   000015   75..00       MOV     ?V0,#0x0
    518            switch ( inMsg->clusterID )
   \   000018   EE           MOV     A,R6
   \   000019   240C         ADD     A,#0xc
   \   00001B   F582         MOV     DPL,A
   \   00001D   E4           CLR     A
   \   00001E   3F           ADDC    A,R7
   \   00001F   F583         MOV     DPH,A
   \   000021   E0           MOVX    A,@DPTR
   \   000022   F5..         MOV     ?V2,A
   \   000024   A3           INC     DPTR
   \   000025   E0           MOVX    A,@DPTR
   \   000026   F5..         MOV     ?V3,A
   \   000028   78..         MOV     R0,#?V2
   \   00002A   12....       LCALL   ?US_SWITCH_SPARSE
   \                     `?<Jumptable for GenericApp_ProcessZDOMsgs>_0`:
   \   00002D   0000         DW        0
   \   00002F   0200         DW        2
   \   000031   0680         DW        32774
   \   000033   ....         DW        ??GenericApp_ProcessZDOMsgs_0
   \   000035   2080         DW        32800
   \   000037   ....         DW        ??GenericApp_ProcessZDOMsgs_1
   \   000039   ....         DW        ??GenericApp_ProcessZDOMsgs_2
    519            {
    520              case End_Device_Bind_rsp:
    521                if ( ZDO_ParseBindRsp( inMsg ) == ZSuccess )
   \                     ??GenericApp_ProcessZDOMsgs_1:
   \   00003B   EE           MOV     A,R6
   \   00003C   2413         ADD     A,#0x13
   \   00003E   F582         MOV     DPL,A
   \   000040   E4           CLR     A
   \   000041   3F           ADDC    A,R7
   \   000042   F583         MOV     DPH,A
   \   000044   E0           MOVX    A,@DPTR
   \   000045   F8           MOV     R0,A
   \   000046   A3           INC     DPTR
   \   000047   E0           MOVX    A,@DPTR
   \   000048   F583         MOV     DPH,A
   \   00004A   8882         MOV     DPL,R0
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   7038         JNZ     ??GenericApp_ProcessZDOMsgs_3
    522                {
    523                   HalLcdWriteString("End Device bind",0);
   \   00004F                ; Setup parameters for call to function HalLcdWriteString
   \   00004F   7900         MOV     R1,#0x0
   \   000051   7A..         MOV     R2,#`?<Constant "End Device bind">` & 0xff
   \   000053   7B..         MOV     R3,#(`?<Constant "End Device bind">` >> 8) & 0xff
   \   000055   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    524                   SAddr[1] = inMsg->macSrcAddr;
   \   000058   12....       LCALL   ?Subroutine2 & 0xFFFF
    525                    for(i = 0;i<4;i++)
    526                {
    527                  shAddr[3-i] =  SAddr[1] % 16  + '0';
   \                     ??CrossCallReturnLabel_2:
   \   00005B   E8           MOV     A,R0
   \   00005C   540F         ANL     A,#0xf
   \   00005E   2430         ADD     A,#0x30
   \   000060   C0E0         PUSH    A
   \   000062   12....       LCALL   ?Subroutine1 & 0xFFFF
    528                  SAddr[1] /= 16;
    529                }
   \                     ??CrossCallReturnLabel_0:
   \   000065   D0E0         POP     A
   \   000067   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   00006A   12....       LCALL   ?US_SHR
   \   00006D   A8..         MOV     R0,?V2
   \   00006F   A9..         MOV     R1,?V3
   \   000071   05..         INC     ?V0
   \   000073   E5..         MOV     A,?V0
   \   000075   C3           CLR     C
   \   000076   9404         SUBB    A,#0x4
   \   000078   40E1         JC      ??CrossCallReturnLabel_2
    530                
    531                HalLcdWriteString(shAddr,0);
   \   00007A                ; Setup parameters for call to function HalLcdWriteString
   \   00007A   7900         MOV     R1,#0x0
   \   00007C   AA..         MOV     R2,?XSP + 0
   \   00007E   AB..         MOV     R3,?XSP + 1
   \   000080   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    532                
    533                   
    534                  // Light LED
    535                  HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
   \   000083                ; Setup parameters for call to function HalLedSet
   \   000083   7A01         MOV     R2,#0x1
   \   000085   8002         SJMP    ??GenericApp_ProcessZDOMsgs_4
    536                }
    537          #if defined( BLINK_LEDS )
    538                else
    539                {
    540                  // Flash LED to show failure
    541                  HalLedSet ( HAL_LED_4, HAL_LED_MODE_FLASH );
   \                     ??GenericApp_ProcessZDOMsgs_3:
   \   000087                ; Setup parameters for call to function HalLedSet
   \   000087   7A04         MOV     R2,#0x4
   \                     ??GenericApp_ProcessZDOMsgs_4:
   \   000089   7908         MOV     R1,#0x8
   \   00008B   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   \   00008E   02....       LJMP    ??GenericApp_ProcessZDOMsgs_2 & 0xFFFF
    542                }
    543          #endif
    544                break;
    545          
    546              case Match_Desc_rsp:
    547                {
    548                  HalLcdWriteString("End Device Match Desc",0);
   \                     ??GenericApp_ProcessZDOMsgs_0:
   \   000091                ; Setup parameters for call to function HalLcdWriteString
   \   000091   7900         MOV     R1,#0x0
   \   000093   7A..         MOV     R2,#`?<Constant "End Device Match Desc">` & 0xff
   \   000095   7B..         MOV     R3,#(`?<Constant "End Device Match Desc">` >> 8) & 0xff
   \   000097   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    549                  SAddr[1] = inMsg->macSrcAddr;
   \   00009A   12....       LCALL   ?Subroutine2 & 0xFFFF
    550                    for(i = 0;i<4;i++)
    551                {
    552                  shAddr[3-i] =  SAddr[1] % 16  + '0';
   \                     ??CrossCallReturnLabel_3:
   \   00009D   E8           MOV     A,R0
   \   00009E   540F         ANL     A,#0xf
   \   0000A0   2430         ADD     A,#0x30
   \   0000A2   C0E0         PUSH    A
   \   0000A4   12....       LCALL   ?Subroutine1 & 0xFFFF
    553                  SAddr[1] /= 16;
    554                }
   \                     ??CrossCallReturnLabel_1:
   \   0000A7   D0E0         POP     A
   \   0000A9   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   0000AC   12....       LCALL   ?US_SHR
   \   0000AF   A8..         MOV     R0,?V2
   \   0000B1   A9..         MOV     R1,?V3
   \   0000B3   05..         INC     ?V0
   \   0000B5   E5..         MOV     A,?V0
   \   0000B7   C3           CLR     C
   \   0000B8   9404         SUBB    A,#0x4
   \   0000BA   40E1         JC      ??CrossCallReturnLabel_3
    555                
    556                HalLcdWriteString(shAddr,0);
   \   0000BC                ; Setup parameters for call to function HalLcdWriteString
   \   0000BC   7900         MOV     R1,#0x0
   \   0000BE   AA..         MOV     R2,?XSP + 0
   \   0000C0   AB..         MOV     R3,?XSP + 1
   \   0000C2   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    557                  ZDO_ActiveEndpointRsp_t *pRsp = ZDO_ParseEPListRsp( inMsg );
   \   0000C5                ; Setup parameters for call to function ZDO_ParseEPListRsp
   \   0000C5   EE           MOV     A,R6
   \   0000C6   FA           MOV     R2,A
   \   0000C7   EF           MOV     A,R7
   \   0000C8   FB           MOV     R3,A
   \   0000C9   12....       LCALL   `??ZDO_ParseEPListRsp::?relay`; Banked call to: ZDO_ParseEPListRsp
   \   0000CC   8A..         MOV     ?V0,R2
   \   0000CE   8B..         MOV     ?V1,R3
   \   0000D0   AE..         MOV     R6,?V0
   \   0000D2   AF..         MOV     R7,?V1
    558                  if ( pRsp )
   \   0000D4   EE           MOV     A,R6
   \   0000D5   4F           ORL     A,R7
   \   0000D6   6040         JZ      ??GenericApp_ProcessZDOMsgs_2
    559                  {
    560                    
    561                    
    562                        if ( pRsp->status == ZSuccess && pRsp->cnt )
   \   0000D8   8E82         MOV     DPL,R6
   \   0000DA   8F83         MOV     DPH,R7
   \   0000DC   E0           MOVX    A,@DPTR
   \   0000DD   7032         JNZ     ??GenericApp_ProcessZDOMsgs_5
   \   0000DF   A3           INC     DPTR
   \   0000E0   A3           INC     DPTR
   \   0000E1   A3           INC     DPTR
   \   0000E2   E0           MOVX    A,@DPTR
   \   0000E3   602C         JZ      ??GenericApp_ProcessZDOMsgs_5
    563                        {
    564                          
    565                      GenericApp_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \   0000E5   90....       MOV     DPTR,#GenericApp_DstAddr + 8
   \   0000E8   7402         MOV     A,#0x2
   \   0000EA   F0           MOVX    @DPTR,A
    566                      GenericApp_DstAddr.addr.shortAddr = pRsp->nwkAddr;
   \   0000EB   8E82         MOV     DPL,R6
   \   0000ED   8F83         MOV     DPH,R7
   \   0000EF   A3           INC     DPTR
   \   0000F0   E0           MOVX    A,@DPTR
   \   0000F1   F8           MOV     R0,A
   \   0000F2   A3           INC     DPTR
   \   0000F3   E0           MOVX    A,@DPTR
   \   0000F4   F9           MOV     R1,A
   \   0000F5   90....       MOV     DPTR,#GenericApp_DstAddr
   \   0000F8   E8           MOV     A,R0
   \   0000F9   F0           MOVX    @DPTR,A
   \   0000FA   A3           INC     DPTR
   \   0000FB   E9           MOV     A,R1
   \   0000FC   F0           MOVX    @DPTR,A
    567                      // Take the first endpoint, Can be changed to search through endpoints
    568                      GenericApp_DstAddr.endPoint = pRsp->epList[0];
   \   0000FD   8E82         MOV     DPL,R6
   \   0000FF   8F83         MOV     DPH,R7
   \   000101   A3           INC     DPTR
   \   000102   A3           INC     DPTR
   \   000103   A3           INC     DPTR
   \   000104   A3           INC     DPTR
   \   000105   E0           MOVX    A,@DPTR
   \   000106   90....       MOV     DPTR,#GenericApp_DstAddr + 9
   \   000109   F0           MOVX    @DPTR,A
    569          
    570                      // Light LED
    571                      HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
   \   00010A                ; Setup parameters for call to function HalLedSet
   \   00010A   7A01         MOV     R2,#0x1
   \   00010C   7908         MOV     R1,#0x8
   \   00010E   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
    572                    }
    573                    osal_mem_free( pRsp );
   \                     ??GenericApp_ProcessZDOMsgs_5:
   \   000111                ; Setup parameters for call to function osal_mem_free
   \   000111   EE           MOV     A,R6
   \   000112   FA           MOV     R2,A
   \   000113   EF           MOV     A,R7
   \   000114   FB           MOV     R3,A
   \   000115   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    574                  }
    575                }
    576                break;
    577            }
    578          }
   \                     ??GenericApp_ProcessZDOMsgs_2:
   \   000118   7405         MOV     A,#0x5
   \   00011A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00011D   7F04         MOV     R7,#0x4
   \   00011F   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   88..         MOV     ?V2,R0
   \   000003   89..         MOV     ?V3,R1
   \   000005   7404         MOV     A,#0x4
   \   000007   78..         MOV     R0,#?V2
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   EE           MOV     A,R6
   \   000001   2415         ADD     A,#0x15
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   F8           MOV     R0,A
   \   00000B   A3           INC     DPTR
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   F9           MOV     R1,A
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   AA..         MOV     R2,?V0
   \   000002   E4           CLR     A
   \   000003   9A           SUBB    A,R2
   \   000004   FA           MOV     R2,A
   \   000005   95E0         SUBB    A,0xE0 /* A   */
   \   000007   FB           MOV     R3,A
   \   000008   85..82       MOV     DPL,?XSP + 0
   \   00000B   85..83       MOV     DPH,?XSP + 1
   \   00000E   E582         MOV     A,DPL
   \   000010   2A           ADD     A,R2
   \   000011   F582         MOV     DPL,A
   \   000013   E583         MOV     A,DPH
   \   000015   3B           ADDC    A,R3
   \   000016   F583         MOV     DPH,A
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   22           RET
    579          
    580          /*********************************************************************
    581           * @fn      GenericApp_HandleKeys
    582           *
    583           * @brief   Handles all key events for this device.
    584           *
    585           * @param   shift - true if in shift/alt.
    586           * @param   keys - bit field for key events. Valid entries:
    587           *                 HAL_KEY_SW_4
    588           *                 HAL_KEY_SW_3
    589           *                 HAL_KEY_SW_2
    590           *                 HAL_KEY_SW_1
    591           *
    592           * @return  none
    593           */
    594          static void GenericApp_HandleKeys( uint8 shift, uint8 keys )
    595          {
    596            zAddrType_t dstAddr;
    597          
    598            // Shift is used to make each button/switch dual purpose.
    599            if ( shift )
    600            {
    601              if ( keys & HAL_KEY_SW_1 )
    602              {
    603              }
    604              if ( keys & HAL_KEY_SW_2 )
    605              {
    606              }
    607              if ( keys & HAL_KEY_SW_3 )
    608              {
    609              }
    610              if ( keys & HAL_KEY_SW_4 )
    611              {
    612              }
    613            }
    614            else
    615            {
    616              if ( keys & HAL_KEY_SW_1 )
    617              {
    618          #if defined( SWITCH1_BIND )
    619                // We can use SW1 to simulate SW2 for devices that only have one switch,
    620                keys |= HAL_KEY_SW_2;
    621          #elif defined( SWITCH1_MATCH )
    622                // or use SW1 to simulate SW4 for devices that only have one switch
    623                keys |= HAL_KEY_SW_4;
    624          #else
    625                // Normally, SW1 changes the rate that messages are sent
    626                if ( txMsgDelay > 100 )
    627                {
    628                  // Cut the message TX delay in half
    629                  txMsgDelay /= 2;
    630                }
    631                else
    632                {
    633                  // Reset to the default
    634                  txMsgDelay = GENERICAPP_SEND_MSG_TIMEOUT;
    635                }
    636          #endif
    637              }
    638          
    639              if ( keys & HAL_KEY_SW_2 )
    640              {
    641                HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
    642          
    643                // Initiate an End Device Bind Request for the mandatory endpoint
    644                dstAddr.addrMode = Addr16Bit;
    645                dstAddr.addr.shortAddr = 0x0000; // Coordinator
    646                ZDP_EndDeviceBindReq( &dstAddr, NLME_GetShortAddr(),
    647                                      GenericApp_epDesc.endPoint,
    648                                      GENERICAPP_PROFID,
    649                                      GENERICAPP_MAX_CLUSTERS, (cId_t *)GenericApp_ClusterList,
    650                                      GENERICAPP_MAX_CLUSTERS, (cId_t *)GenericApp_ClusterList,
    651                                      FALSE );
    652              }
    653          
    654              if ( keys & HAL_KEY_SW_3 )
    655              {
    656              }
    657          
    658              if ( keys & HAL_KEY_SW_4 )
    659              {
    660                HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
    661                // Initiate a Match Description Request (Service Discovery)
    662                dstAddr.addrMode = AddrBroadcast;
    663                dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR;
    664                ZDP_MatchDescReq( &dstAddr, NWK_BROADCAST_SHORTADDR,
    665                                  GENERICAPP_PROFID,
    666                                  GENERICAPP_MAX_CLUSTERS, (cId_t *)GenericApp_ClusterList,
    667                                  GENERICAPP_MAX_CLUSTERS, (cId_t *)GenericApp_ClusterList,
    668                                  FALSE );
    669              }
    670            }
    671          }
    672          
    673          /*********************************************************************
    674           * LOCAL FUNCTIONS
    675           */
    676          
    677          /*********************************************************************
    678           * @fn      GenericApp_MessageMSGCB
    679           *
    680           * @brief   Data message processor callback.  This function processes
    681           *          any incoming data - probably from other devices.  So, based
    682           *          on cluster ID, perform the intended action.
    683           *
    684           * @param   none
    685           *
    686           * @return  none
    687           */
    688          static void GenericApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
    689          { 
    690            uint8 i;
    691           
    692          
    693            switch ( pkt->clusterId )
    694            {
    695              case GENERICAPP_CLUSTERID:
    696                
    697                      // Count this message
    698                      rxMsgCount += 1;  
    699                
    700                      HalLcdWriteString("--------------------------------",0);
    701                      HalLcdWriteString("Received data:",0);
    702                
    703                      for(i = 0;i < pkt->cmd.DataLength;i++)
    704                      {
    705                      uartSend(*(pkt->cmd.Data + i));
    706                      }
    707                
    708                      HalLcdWriteString("",0);
    709                      HalLcdWriteString("--------------------------------",0);
    710                
    711                break;
    712                
    713              default:
    714                      HalLcdWriteString("Podatak nije primljen.",0);
    715                  
    716              break;
    717                
    718            }
    719          
    720          
    721          }
    722          
    723          /*********************************************************************
    724           * @fn      GenericApp_SendTheMessage
    725           *
    726           * @brief   Send "the" message.
    727           *
    728           * @param   none
    729           *
    730           * @return  none
    731           */
    732          static void GenericApp_SendTheMessage( void )
    733          {
    734            uint16 shortAdrress;
                          ^
Warning[Pe177]: variable "shortAdrress" was declared but never referenced
    735            char shAddr[4];
                        ^
Warning[Pe177]: variable "shAddr" was declared but never referenced
    736            uint8 i;
                         ^
Warning[Pe177]: variable "i" was declared but never referenced
    737            
    738           
    739            char theMessageData[] = "Hello World";
                        ^
Warning[Pe177]: variable "theMessageData" was declared but never referenced
    740            char doorOpened[] = {'1'};
                        ^
Warning[Pe177]: variable "doorOpened" was declared but never referenced
    741            char doorClosed[] = {'0'};
                        ^
Warning[Pe177]: variable "doorClosed" was declared but never referenced
    742            char motionDetected[] = {'1'};
    743            char motionNotDetected[] = {'0'};
    744            
    745            char theOpticalData[5];
                        ^
Warning[Pe177]: variable "theOpticalData" was declared but never referenced
    746            uint16 optDat;
                          ^
Warning[Pe177]: variable "optDat" was declared but never referenced

  static void GenericApp_HandleKeys( uint8 shift, uint8 keys )
              ^
"C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\Source\GenericApp.c",594  Warning[Pe177]: 
          function "GenericApp_HandleKeys" was declared but never referenced

  static void GenericApp_EndPointList(uint16 shAddr)
              ^
"C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\Source\GenericApp.c",296  Warning[Pe177]: 
          function "GenericApp_EndPointList" was declared but never referenced
    747            
    748            
    749             GenericApp_DstAddr.addr.shortAddr = 0x0000;   
    750          //*****************************************************************************
    751          //Motion detection
    752          //*****************************************************************************
    753           #if MOTION_SENSOR
    754          
    755          
    756            if ( motionDetection() )
    757            {
    758              // Successfully requested to be sent.
    759              //HalLcdWriteString("Podatak je poslan.",0);
    760              AF_DataRequest( &GenericApp_DstAddr, &GenericApp_epDesc,
    761                                 GENERICAPP_CLUSTERID,
    762                                 2,                                                       
    763                                 (byte *)&motionDetected,
    764                                 &GenericApp_TransID,
    765                                 AF_DISCV_ROUTE, AF_DEFAULT_RADIUS );
    766              
    767              HalLcdWriteString("Pokret je detektovan.",0);
    768              
    769            }
    770            else
    771            {
    772              
    773              // Error occurred in request to send.
    774              // HalLcdWriteString("Podatak nije poslan.",0);
    775              AF_DataRequest( &GenericApp_DstAddr, &GenericApp_epDesc,
    776                                 GENERICAPP_CLUSTERID,
    777                                 2,                                                       
    778                                 (byte *)&motionNotDetected,
    779                                 &GenericApp_TransID,
    780                                 AF_DISCV_ROUTE, AF_DEFAULT_RADIUS );
    781            
    782              HalLcdWriteString("Nema kretanja.",0);
    783              
    784            }
    785            
    786          #endif   
    787          //*****************************************************************************
    788          //Motion detection end
    789          //*****************************************************************************  
    790            
    791          #if OPTICAL_SENSOR
    792            
    793            optDat = HalAdcRead(HAL_ADC_CHANNEL_1,HAL_ADC_RESOLUTION_12);
    794          
    795             for(i = 0;i<4;i++)
    796             {
    797                  theOpticalData[3-i] =  optDat % 10  + '0';
    798                  optDat /= 10;
    799             }
    800                
    801             theOpticalData[4] = '\0';
    802             
    803             if ( AF_DataRequest( &GenericApp_DstAddr, &GenericApp_epDesc,
    804                                  GENERICAPP_CLUSTERID,
    805                                  (byte)osal_strlen( theOpticalData ) + 1,
    806                                  (byte *)&theOpticalData,
    807                                  &GenericApp_TransID,
    808                                  AF_DISCV_ROUTE, AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
    809             {
    810                // Successfully requested to be sent.
    811                HalLcdWriteString("Podatak je poslan.",0);
    812                //HalLcdWriteString(theMessageData,0);
    813             }
    814             else
    815             {
    816                // Error occurred in request to send.
    817                HalLcdWriteString("Podatak nije poslan.",0);
    818             }
    819          #endif  
    820          #if MAGNETIC_SENSOR
    821          
    822          
    823            if ( !magneticSwitch_DoorDetection() )
    824            {
    825              // Successfully requested to be sent.
    826              //HalLcdWriteString("Podatak je poslan.",0);
    827              AF_DataRequest( &GenericApp_DstAddr, &GenericApp_epDesc,
    828                                 GENERICAPP_CLUSTERID,
    829                                 2,                                                       
    830                                 (byte *)&doorOpened,
    831                                 &GenericApp_TransID,
    832                                 AF_DISCV_ROUTE, AF_DEFAULT_RADIUS );
    833              
    834              HalLcdWriteString("Vrata su otvorena.",0);
    835              
    836            }
    837            else
    838            {
    839              
    840              // Error occurred in request to send.
    841              // HalLcdWriteString("Podatak nije poslan.",0);
    842              AF_DataRequest( &GenericApp_DstAddr, &GenericApp_epDesc,
    843                                 GENERICAPP_CLUSTERID,
    844                                 2,                                                       
    845                                 (byte *)&doorClosed,
    846                                 &GenericApp_TransID,
    847                                 AF_DISCV_ROUTE, AF_DEFAULT_RADIUS );
    848            
    849              HalLcdWriteString("Vrata su zatvorena.",0);
    850              
    851            }
    852            
    853          #endif 
    854            
    855            
    856            
    857          #if HELLO_WORLD
    858          
    859            
    860            
    861             if ( AF_DataRequest( &GenericApp_DstAddr, &GenericApp_epDesc,
    862                                  GENERICAPP_CLUSTERID,
    863                                  (byte)osal_strlen( theMessageData ) + 1,
    864                                  (byte *)&theMessageData,
    865                                  &GenericApp_TransID,
    866                                  AF_DISCV_ROUTE, AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
    867             {
    868                // Successfully requested to be sent.
    869                HalLcdWriteString("Podatak je poslan.",0);
    870                //HalLcdWriteString(theMessageData,0);
    871             }
    872             else
    873             {
    874                // Error occurred in request to send.
    875                HalLcdWriteString("Podatak nije poslan.",0);
    876             }
    877           
    878          
    879          #endif
    880          }
    881          
    882          #if defined( IAR_ARMCM3_LM )
    883          /*********************************************************************
    884           * @fn      GenericApp_ProcessRtosMessage
    885           *
    886           * @brief   Receive message from RTOS queue, send response back.
    887           *
    888           * @param   none
    889           *
    890           * @return  none
    891           */
    892          static void GenericApp_ProcessRtosMessage( void )
    893          {
    894            osalQueue_t inMsg;
    895          
    896            if ( osal_queue_receive( OsalQueue, &inMsg, 0 ) == pdPASS )
    897            {
    898              uint8 cmndId = inMsg.cmnd;
    899              uint32 counter = osal_build_uint32( inMsg.cbuf, 4 );
    900          
    901              switch ( cmndId )
    902              {
    903                case CMD_INCR:
    904                  counter += 1;  /* Increment the incoming counter */
    905                                 /* Intentionally fall through next case */
    906          
    907                case CMD_ECHO:
    908                {
    909                  userQueue_t outMsg;
    910          
    911                  outMsg.resp = RSP_CODE | cmndId;  /* Response ID */
    912                  osal_buffer_uint32( outMsg.rbuf, counter );    /* Increment counter */
    913                  osal_queue_send( UserQueue1, &outMsg, 0 );  /* Send back to UserTask */
    914                  break;
    915                }
    916          
    917                default:
    918                  break;  /* Ignore unknown command */
    919              }
    920            }
    921          }
    922          #endif
    923          
    924          /*********************************************************************
    925           * @fn      magneticSwitchInit()
    926           *
    927           * @brief   Initialize pins for magnetic switch
    928           *
    929           * @param   none
    930           *
    931           * @return  none
    932           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    933          void magneticSwitchInit(void)
   \                     magneticSwitchInit:
    934          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    935           // Set GPIO function for P1_3  
    936           P1SEL &= 0xFC;
   \   000000                REQUIRE ?Subroutine0
   \   000000                REQUIRE P1SEL
   \   000000                REQUIRE P1DIR
   \   000000                REQUIRE P2INP
   \   000000                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   53F4FC       ANL     0xf4,#0xfc
    937           
    938           // Set inputs on P0_0
    939           P1DIR &= 0xFC;
   \   000003   53FEFC       ANL     0xfe,#0xfc
    940           
    941           // Set pulldown for port 0 pins
    942           P2INP |= 0x40;
   \   000006   43F740       ORL     0xf7,#0x40
    943            
    944          }
   \   000009   02....       LJMP    ?BRET
    945          
    946          /*********************************************************************
    947           * @fn      magneticSwitch_DoorDetection()
    948           *
    949           * @brief   Detects if door are closed/opened
    950           *
    951           * @param   none
    952           *
    953           * @return  1 if closed, 0 if opened
    954           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    955          uint8 magneticSwitch_DoorDetection()
   \                     magneticSwitch_DoorDetection:
    956          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    957              
    958           if(TRUE == DOOR_CLOSED_DETECTION) 
   \   000000   A292         MOV     C,0x90.2
   \   000002   5004         JNC     ??magneticSwitch_DoorDetection_0
    959                  { 
    960                    return 0;
   \   000004   7900         MOV     R1,#0x0
   \   000006   8002         SJMP    ??magneticSwitch_DoorDetection_1
    961           }
    962                  else
    963                  {
    964                    return 1;
   \                     ??magneticSwitch_DoorDetection_0:
   \   000008   7901         MOV     R1,#0x1
   \                     ??magneticSwitch_DoorDetection_1:
   \   00000A   02....       LJMP    ?BRET
   \   00000D                REQUIRE _A_P1
    965                  }
    966           
    967          } 
    968          /*********************************************************************
    969           * @fn      motionInit()
    970           *
    971           * @brief   Initialize pins for motion sensor
    972           *
    973           * @param   none
    974           *
    975           * @return  none
    976           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    977          void motionInit(void)
   \                     motionInit:
    978          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    979           // Set GPIO function for P1_3  
    980           P1SEL &= 0xFC;
   \   000000   80..         SJMP    ?Subroutine0
   \   000002                REQUIRE P1SEL
   \   000002                REQUIRE P1DIR
   \   000002                REQUIRE P2INP
    981           
    982           // Set inputs on P0_0
    983           P1DIR &= 0xFC;
    984           
    985           // Set pulldown for port 0 pins
    986           P2INP |= 0x40;
    987            
    988          }
    989          /*********************************************************************
    990           * @fn      motionDetection()
    991           *
    992           * @brief   Detects there is motion or not
    993           *
    994           * @param   none
    995           *
    996           * @return  1 if motion detected, 0 if not
    997           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    998          uint8 motionDetection()
   \                     motionDetection:
    999          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   1000              
   1001                  if(TRUE == MOTION_DETECTION_PIN) 
   \   000000   A292         MOV     C,0x90.2
   \   000002   5004         JNC     ??motionDetection_0
   1002                  { 
   1003                    return 1;
   \   000004   7901         MOV     R1,#0x1
   \   000006   8002         SJMP    ??motionDetection_1
   1004                  }
   1005                  else
   1006                  {
   1007                    return 0;
   \                     ??motionDetection_0:
   \   000008   7900         MOV     R1,#0x0
   \                     ??motionDetection_1:
   \   00000A   02....       LJMP    ?BRET
   \   00000D                REQUIRE _A_P1
   1008                  }
   1009           
   1010          }  

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for coin>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for keyPressSW4>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for txMsgDelay>`:
   \   000000   88130000     DD 5000

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??GenericApp_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GenericApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??GenericApp_ProcessEvent::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GenericApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??GenericApp_ProcessZDOMsgs::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GenericApp_ProcessZDOMsgs

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??magneticSwitchInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    magneticSwitchInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??magneticSwitch_DoorDetection::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    magneticSwitch_DoorDetection

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??motionInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    motionInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??motionDetection::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    motionDetection

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "GenericApp">`:
   \   000000   47656E65     DB "GenericApp"
   \            72696341
   \            707000  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "End Device bind">`:
   \   000000   456E6420     DB "End Device bind"
   \            44657669
   \            63652062
   \            696E6400

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "End Device Match Desc">`:
   \   000000   456E6420     DB "End Device Match Desc"
   \            44657669
   \            6365204D
   \            61746368
   \            20446573
   \            6300    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "---------------------...">`:
   \   000000   2D2D2D2D     DB "--------------------------------"
   \            2D2D2D2D
   \            2D2D2D2D
   \            2D2D2D2D
   \            2D2D2D2D
   \            2D2D2D2D
   \            2D2D2D2D
   \            2D2D2D2D
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Received data:">`:
   \   000000   52656365     DB "Received data:"
   \            69766564
   \            20646174
   \            613A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "">`:
   \   000000   00           DB ""

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Podatak nije primljen.">`:
   \   000000   506F6461     DB "Podatak nije primljen."
   \            74616B20
   \            6E696A65
   \            20707269
   \            6D6C6A65
   \            6E2E00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {49}>`:
   \   000000   31           DB 49

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {48}>`:
   \   000000   30           DB 48

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Pokret je detektovan.">`:
   \   000000   506F6B72     DB "Pokret je detektovan."
   \            6574206A
   \            65206465
   \            74656B74
   \            6F76616E
   \            2E00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Nema kretanja.">`:
   \   000000   4E656D61     DB "Nema kretanja."
   \            206B7265
   \            74616E6A
   \            612E00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_7d0:
   \   000000   D0070000     DD 2000
   1011          
   1012          
   1013          
   1014          /*********************************************************************
   1015           */

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      9   GenericApp_Init
        0      9   -> HalLcdWriteString
        0      9   -> RegisterForKeys
        0      9   -> ZDO_RegisterForZDOMsg
        0      9   -> afRegister
      0     33   GenericApp_ProcessEvent
        0     33   -> AF_DataRequest
        0     24   -> GenericApp_ProcessZDOMsgs
        0     24   -> HalLcdWriteString
        0     24   -> NLME_GetShortAddr
        0     33   -> ZDP_EndDeviceBindReq
        0     24   -> motionDetection
        0     24   -> osal_msg_deallocate
        0     24   -> osal_msg_receive
        0     24   -> osal_set_event
        0     28   -> osal_start_timerEx
        0     24   -> uartSend
      1     41   GenericApp_ProcessZDOMsgs
        0     17   -> HalLcdWriteString
        0     17   -> HalLedSet
        0     17   -> ZDO_ParseEPListRsp
        0     17   -> osal_mem_free
      0      0   magneticSwitchInit
      0      0   magneticSwitch_DoorDetection
      0     24   motionDetection
      0      0   motionInit


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  ?<Constant "">
      33  ?<Constant "---------------------...">
      22  ?<Constant "End Device Match Desc">
      16  ?<Constant "End Device bind">
      11  ?<Constant "GenericApp">
      15  ?<Constant "Nema kretanja.">
      23  ?<Constant "Podatak nije primljen.">
      22  ?<Constant "Pokret je detektovan.">
      15  ?<Constant "Received data:">
       1  ?<Constant {48}>
       1  ?<Constant {49}>
       1  ?<Initializer for coin>
       1  ?<Initializer for keyPressSW4>
       4  ?<Initializer for txMsgDelay>
      12  ?Subroutine0
      28  ?Subroutine1
      15  ?Subroutine2
      10  ?Subroutine3
       2  GenericApp_ClusterList
      12  GenericApp_DstAddr
      12  GenericApp_DstAddr1
      12  GenericApp_DstAddr2
     116  GenericApp_Init
       6  GenericApp_Init::?relay
       1  GenericApp_NwkState
     653  GenericApp_ProcessEvent
       6  GenericApp_ProcessEvent::?relay
     290  GenericApp_ProcessZDOMsgs
       6  GenericApp_ProcessZDOMsgs::?relay
      12  GenericApp_SimpleDesc
       1  GenericApp_TaskID
       1  GenericApp_TransID
       6  GenericApp_epDesc
       1  P1DIR
       1  P1SEL
       1  P2INP
      20  SAddr
       1  _A_P1
       4  __Constant_7d0
       2  brojac
       1  coin
       2  counter
      10  dataBuffer
       1  index
       1  keyPressSW4
       0  magneticSwitchInit
       6  magneticSwitchInit::?relay
      13  magneticSwitch_DoorDetection
       6  magneticSwitch_DoorDetection::?relay
      13  motionDetection
       6  motionDetection::?relay
       2  motionInit
       6  motionInit::?relay
       1  prevData
       2  rxMsgCount
      20  shortAddressOfEndDevice
       4  txMsgDelay

 
 1 152 bytes in segment BANKED_CODE
    42 bytes in segment BANK_RELAYS
     4 bytes in segment SFR_AN
     6 bytes in segment XDATA_I
     6 bytes in segment XDATA_ID
   178 bytes in segment XDATA_ROM_C
   103 bytes in segment XDATA_Z
 
    48 bytes of CODE     memory
   174 bytes of CONST    memory (+ 4 bytes shared)
     0 bytes of DATA     memory (+ 4 bytes shared)
 1 152 bytes of HUGECODE memory
   109 bytes of XDATA    memory

Errors: none
Warnings: 14
