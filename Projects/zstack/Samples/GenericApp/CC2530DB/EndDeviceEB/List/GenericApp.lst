###############################################################################
#
# IAR C/C++ Compiler V9.30.3.3983 for 8051                06/Apr/2017  12:17:03
# Copyright 2004-2016 IAR Systems AB.
# Evaluation license - IAR Embedded Workbench for 8051, Evaluation version 9.30
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\Source\GenericApp.c
#    Command line       =  
#        -f
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0x0422
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\Source\GenericApp.c
#        -D NWK_AUTO_POLL -D ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC
#        -D LCD_SUPPORTED=DEBUG -D xPOWER_SAVING -lC
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\EndDeviceEB\List
#        -lA
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\EndDeviceEB\List
#        --diag_suppress Pe001,Pa010 -o
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\EndDeviceEB\Obj
#        -e --no_code_motion --debug --core=plain --dptr=16,1
#        --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 16 -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\Source\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -Ohz --require_prototypes
#    List file          =  
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\EndDeviceEB\List\GenericApp.lst
#    Object file        =  
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\EndDeviceEB\Obj\GenericApp.r51
#
###############################################################################

C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\Source\GenericApp.c
      1          /******************************************************************************
      2            Filename:       GenericApp.c
      3            Revised:        $Date: 2014-09-07 13:36:30 -0700 (Sun, 07 Sep 2014) $
      4            Revision:       $Revision: 40046 $
      5          
      6            Description:    Generic Application (no Profile).
      7          
      8          
      9            Copyright 2004-2014 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License"). You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product. Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          ******************************************************************************/
     39          
     40          /*********************************************************************
     41            This application isn't intended to do anything useful - it is
     42            intended to be a simple example of an application's structure.
     43          
     44            This application periodically sends a "Hello World" message to
     45            another "Generic" application (see 'txMsgDelay'). The application
     46            will also receive "Hello World" packets.
     47          
     48            This application doesn't have a profile, so it handles everything
     49            directly - by itself.
     50          
     51            Key control:
     52              SW1:  changes the delay between TX packets
     53              SW2:  initiates end device binding
     54              SW3:
     55              SW4:  initiates a match description request
     56          *********************************************************************/
     57          
     58          /*********************************************************************
     59           * INCLUDES
     60           */
     61          #include "OSAL.h"
     62          #include "AF.h"
     63          #include "ZDApp.h"
     64          #include "ZDObject.h"
     65          #include "ZDProfile.h"
     66          
     67          #include "GenericApp.h"
     68          #include "DebugTrace.h"
     69          
     70          #if !defined( WIN32 ) || defined( ZBIT )
     71            #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa0
   \   union <unnamed> volatile __sfr _A_P2
   \                     _A_P2:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf4
   \   unsigned char volatile __sfr P1SEL
   \                     P1SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf7
   \   unsigned char volatile __sfr P2INP
   \                     P2INP:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfe
   \   unsigned char volatile __sfr P1DIR
   \                     P1DIR:
   \   000000                DS 1
     72          #endif
     73          
     74          /* HAL */
     75          #include "hal_lcd.h"
     76          #include "hal_led.h"
     77          #include "hal_key.h"
     78          #include "hal_uart.h"
     79          #include "hal_adc.h"
     80          
     81          /* RTOS */
     82          #if defined( IAR_ARMCM3_LM )
     83          #include "RTOS_App.h"
     84          #endif
     85          
     86          /*********************************************************************
     87           * MACROS
     88           */
     89          
     90          
     91          #define GENERICAPP_ENDPOINT           10
     92          
     93          #define GENERICAPP_PROFID             0x0F04
     94          #define GENERICAPP_DEVICEID           0x0001
     95          #define GENERICAPP_DEVICE_VERSION     0
     96          #define GENERICAPP_FLAGS              0
     97          
     98          #define GENERICAPP_MAX_CLUSTERS       1
     99          #define GENERICAPP_CLUSTERID          1
    100          
    101          
    102          #define MAX_NUMBER_OF_ENDDEVICES      10
    103          
    104          
    105          // magnetic switch macros
    106          #define DOOR_CLOSED_DETECTION         P2_0
    107          #define TRUE                          1
    108          #define CLOSED                        1
    109          #define OPENED                        0
    110          // magnetic switch macros end
    111          
    112          #define MOTION_DETECTION_PIN          P1_2  
    113             
    114          #define MOTION_SENSOR                 0
    115          #define MAGNETIC_SENSOR               0
    116          #define OPTICAL_SENSOR                0
    117          #define HELLO_WORLD                   1 
    118          /*********************************************************************
    119           * CONSTANTS
    120           */
    121          
    122          /*********************************************************************
    123           * TYPEDEFS
    124           */
    125          
    126          /*********************************************************************
    127           * GLOBAL VARIABLES
    128           */
    129          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    130          uint8 coin = 1;
   \                     coin:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for coin>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    131          char prevData = 0;
   \                     prevData:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    132          
    133          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    134          uint8 keyPressSW4 = 1;
   \                     keyPressSW4:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for keyPressSW4>`
   \   000001                REQUIRE __INIT_XDATA_I
    135          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    136          uint8 dataBuffer[10];
   \                     dataBuffer:
   \   000000                DS 10
   \   00000A                REQUIRE __INIT_XDATA_Z
    137             

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    138          int counter = 0;
   \                     counter:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    139          
    140          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    141          uint16 shortAddressOfEndDevice[MAX_NUMBER_OF_ENDDEVICES] = {0,0};
   \                     shortAddressOfEndDevice:
   \   000000                DS 20
   \   000014                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    142          uint16 SAddr[MAX_NUMBER_OF_ENDDEVICES] = {0,0};
   \                     SAddr:
   \   000000                DS 20
   \   000014                REQUIRE __INIT_XDATA_Z
    143          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    144          uint8 index = 0;
   \                     index:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    145          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    146          int brojac = 0; 
   \                     brojac:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    147          
    148          
    149          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
    150          const cId_t GenericApp_ClusterList[GENERICAPP_MAX_CLUSTERS] =
   \                     GenericApp_ClusterList:
   \   000000   0100         DW 1
    151          {
    152            GENERICAPP_CLUSTERID
    153          };
    154          

   \                                 In  segment XDATA_ROM_C, align 1
    155          const SimpleDescriptionFormat_t GenericApp_SimpleDesc =
   \                     GenericApp_SimpleDesc:
   \   000000   0A           DB 10
   \   000001   040F         DW 3844
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   01           DB 1
   \   000007   ....         DW GenericApp_ClusterList
   \   000009   01           DB 1
   \   00000A   ....         DW GenericApp_ClusterList
    156          {
    157            GENERICAPP_ENDPOINT,              //  int Endpoint;
    158            GENERICAPP_PROFID,                //  uint16 AppProfId[2];
    159            GENERICAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    160            GENERICAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    161            GENERICAPP_FLAGS,                 //  int   AppFlags:4;
    162            GENERICAPP_MAX_CLUSTERS,          //  byte  AppNumInClusters;
    163            (cId_t *)GenericApp_ClusterList,  //  byte *pAppInClusterList;
    164            GENERICAPP_MAX_CLUSTERS,          //  byte  AppNumInClusters;
    165            (cId_t *)GenericApp_ClusterList   //  byte *pAppInClusterList;
    166          };
    167          
    168          // This is the Endpoint/Interface description.  It is defined here, but
    169          // filled-in in GenericApp_Init().  Another way to go would be to fill
    170          // in the structure here and make it a "const" (in code space).  The
    171          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    172          endPointDesc_t GenericApp_epDesc;
   \                     GenericApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    173          
    174          /*********************************************************************
    175           * EXTERNAL VARIABLES
    176           */
    177          
    178          /*********************************************************************
    179           * EXTERNAL FUNCTIONS
    180           */
    181          
    182            extern void uartInit(void);
    183            extern void uartSend(char);
    184          
    185          
    186          /*********************************************************************
    187           * LOCAL VARIABLES
    188           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    189          byte GenericApp_TaskID;   // Task ID for internal task/event processing
   \                     GenericApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    190                                    // This variable will be received when
    191                                    // GenericApp_Init() is called.
    192          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    193          devStates_t GenericApp_NwkState;
   \                     GenericApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    194          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    195          byte GenericApp_TransID;  // This is the unique message ID (counter)
   \                     GenericApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    196          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    197          afAddrType_t GenericApp_DstAddr;
   \                     GenericApp_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    198          afAddrType_t GenericApp_DstAddr1;
   \                     GenericApp_DstAddr1:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    199          afAddrType_t GenericApp_DstAddr2;
   \                     GenericApp_DstAddr2:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    200          // Number of recieved messages
    201          static uint16 rxMsgCount;
    202          
    203          // Time interval between sending messages

   \                                 In  segment XDATA_I, align 1, keep-with-next
    204          static uint32 txMsgDelay = GENERICAPP_SEND_MSG_TIMEOUT;
   \                     txMsgDelay:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for txMsgDelay>`
   \   000004                REQUIRE __INIT_XDATA_I
    205          
    206          /*********************************************************************
    207           * LOCAL FUNCTIONS
    208           */
    209          static void GenericApp_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg );
    210          static void GenericApp_HandleKeys( byte shift, byte keys );
    211          static void GenericApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    212          
    213          static void GenericApp_EndPointList(uint16);
    214          
    215          static void GenericApp_SendTheMessage( void );
    216           
    217          void MagneticSwitch_SendTheMessage( void );
    218          void MotionSensor_SendTheMessage( void );
    219          
    220          
    221          
    222          
    223          #if defined( IAR_ARMCM3_LM )
    224          static void GenericApp_ProcessRtosMessage( void );
    225          #endif
    226          
    227          /*********************************************************************
    228           * NETWORK LAYER CALLBACKS
    229           */
    230          
    231          /*********************************************************************
    232           * PUBLIC FUNCTIONS
    233           */
    234          
    235          /*********************************************************************
    236           * @fn      GenericApp_Init
    237           *
    238           * @brief   Initialization function for the Generic App Task.
    239           *          This is called during initialization and should contain
    240           *          any application specific initialization (ie. hardware
    241           *          initialization/setup, table initialization, power up
    242           *          notificaiton ... ).
    243           *
    244           * @param   task_id - the ID assigned by OSAL.  This ID should be
    245           *                    used to send messages and set timers.
    246           *
    247           * @return  none
    248           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    249          void GenericApp_Init( uint8 task_id )
   \                     GenericApp_Init:
    250          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    251            GenericApp_TaskID = task_id;
   \   000006   90....       MOV     DPTR,#GenericApp_TaskID
   \   000009   F0           MOVX    @DPTR,A
    252            GenericApp_NwkState = DEV_INIT;
   \   00000A   90....       MOV     DPTR,#GenericApp_NwkState
   \   00000D   7401         MOV     A,#0x1
   \   00000F   F0           MOVX    @DPTR,A
    253            GenericApp_TransID = 0;
   \   000010   90....       MOV     DPTR,#GenericApp_TransID
   \   000013   E4           CLR     A
   \   000014   F0           MOVX    @DPTR,A
    254            
    255            // Device hardware initialization can be added here or in main() (Zmain.c).
    256            // If the hardware is application specific - add it here.
    257            // If the hardware is other parts of the device add it in main().
    258          
    259            GenericApp_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \   000015   90....       MOV     DPTR,#GenericApp_DstAddr + 8
   \   000018   7402         MOV     A,#0x2
   \   00001A   F0           MOVX    @DPTR,A
    260            GenericApp_DstAddr.endPoint = GENERICAPP_ENDPOINT;
   \   00001B   A3           INC     DPTR
   \   00001C   740A         MOV     A,#0xa
   \   00001E   F0           MOVX    @DPTR,A
    261            //This is address of Coordinator
    262            GenericApp_DstAddr.addr.shortAddr = 0x0000;                                   
   \   00001F   90....       MOV     DPTR,#GenericApp_DstAddr
   \   000022   E4           CLR     A
   \   000023   F0           MOVX    @DPTR,A
   \   000024   A3           INC     DPTR
   \   000025   F0           MOVX    @DPTR,A
    263          
    264            // Fill out the endpoint description.
    265            GenericApp_epDesc.endPoint = GENERICAPP_ENDPOINT;
   \   000026   90....       MOV     DPTR,#GenericApp_epDesc
   \   000029   740A         MOV     A,#0xa
   \   00002B   F0           MOVX    @DPTR,A
    266            GenericApp_epDesc.task_id = &GenericApp_TaskID;
   \   00002C   A3           INC     DPTR
   \   00002D   74..         MOV     A,#GenericApp_TaskID & 0xff
   \   00002F   F0           MOVX    @DPTR,A
   \   000030   A3           INC     DPTR
   \   000031   74..         MOV     A,#(GenericApp_TaskID >> 8) & 0xff
   \   000033   F0           MOVX    @DPTR,A
    267            GenericApp_epDesc.simpleDesc
    268                      = (SimpleDescriptionFormat_t *)&GenericApp_SimpleDesc;
   \   000034   A3           INC     DPTR
   \   000035   74..         MOV     A,#GenericApp_SimpleDesc & 0xff
   \   000037   F0           MOVX    @DPTR,A
   \   000038   A3           INC     DPTR
   \   000039   74..         MOV     A,#(GenericApp_SimpleDesc >> 8) & 0xff
   \   00003B   F0           MOVX    @DPTR,A
    269            GenericApp_epDesc.latencyReq = noLatencyReqs;
   \   00003C   A3           INC     DPTR
   \   00003D   E4           CLR     A
   \   00003E   F0           MOVX    @DPTR,A
    270          
    271            // Register the endpoint description with the AF
    272            afRegister( &GenericApp_epDesc );
   \   00003F                ; Setup parameters for call to function afRegister
   \   00003F   7A..         MOV     R2,#GenericApp_epDesc & 0xff
   \   000041   7B..         MOV     R3,#(GenericApp_epDesc >> 8) & 0xff
   \   000043   12....       LCALL   `??afRegister::?relay`; Banked call to: afRegister
    273          
    274            // Register for all key events - This app will handle all key events
    275            RegisterForKeys( GenericApp_TaskID );
   \   000046                ; Setup parameters for call to function RegisterForKeys
   \   000046   90....       MOV     DPTR,#GenericApp_TaskID
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   F9           MOV     R1,A
   \   00004B   12....       LCALL   `??RegisterForKeys::?relay`; Banked call to: RegisterForKeys
    276          
    277            // Update the display
    278          #if defined ( LCD_SUPPORTED )
    279            HalLcdWriteString( "GenericApp", HAL_LCD_LINE_1 );
   \   00004E                ; Setup parameters for call to function HalLcdWriteString
   \   00004E   7901         MOV     R1,#0x1
   \   000050   7A..         MOV     R2,#`?<Constant "GenericApp">` & 0xff
   \   000052   7B..         MOV     R3,#(`?<Constant "GenericApp">` >> 8) & 0xff
   \   000054   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    280          #endif
    281          
    282            ZDO_RegisterForZDOMsg( GenericApp_TaskID, End_Device_Bind_rsp );
   \   000057                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000057   7A20         MOV     R2,#0x20
   \   000059   7B80         MOV     R3,#-0x80
   \   00005B   90....       MOV     DPTR,#GenericApp_TaskID
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   F9           MOV     R1,A
   \   000060   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
    283            ZDO_RegisterForZDOMsg( GenericApp_TaskID, Match_Desc_rsp );
   \   000063                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000063   7A06         MOV     R2,#0x6
   \   000065   7B80         MOV     R3,#-0x80
   \   000067   90....       MOV     DPTR,#GenericApp_TaskID
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   F9           MOV     R1,A
   \   00006C   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
    284          
    285          #if defined( IAR_ARMCM3_LM )
    286            // Register this task with RTOS task initiator
    287            RTOS_RegisterApp( task_id, GENERICAPP_RTOS_MSG_EVT );
    288          #endif
    289          }
   \   00006F   7F01         MOV     R7,#0x1
   \   000071   02....       LJMP    ?BANKED_LEAVE_XDATA
    290          /*********************************************************************
    291           * @fn      GenericApp_EndPointList
    292           *
    293           * @brief   Get's short address of end device and put in the end device 
    294                      array
    295           *
    296           * @param   shAddr  - Short Address of connected End Device
    297           * 
    298           * @return  none
    299           */
    300          static void GenericApp_EndPointList(uint16 shAddr)
    301          {
    302           
    303            if(index > MAX_NUMBER_OF_ENDDEVICES)
    304            {
    305              HalLcdWriteString("Max number of end devices overflow.",0);
    306            }
    307            else
    308            {
    309              shortAddressOfEndDevice[index];
                     ^
Warning[Pe174]: expression has no effect
    310              index++;
    311            }
    312            
    313            
    314          }
    315          /*********************************************************************
    316           * @fn      GenericApp_ProcessEvent
    317           *
    318           * @brief   Generic Application Task event processor.  This function
    319           *          is called to process all events for the task.  Events
    320           *          include timers, messages and any other user defined events.
    321           *
    322           * @param   task_id  - The OSAL assigned task ID.
    323           * @param   events - events to process.  This is a bit map and can
    324           *                   contain more than one event.
    325           *
    326           * @return  none
    327           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    328          uint16 GenericApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     GenericApp_ProcessEvent:
    329          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
    330            afIncomingMSGPacket_t *MSGpkt;
    331            afDataConfirm_t *afDataConfirm;
    332            zAddrType_t dstAddr;
    333          
    334              char shAddr[5];
                          ^
Warning[Pe550]: variable "shAddr" was set but never used
    335              shAddr[4] = '\0';
    336              
    337              uint8 i;
                           ^
Warning[Pe177]: variable "i" was declared but never referenced
    338              uint16 shortAdrress;
                            ^
Warning[Pe177]: variable "shortAdrress" was declared but never referenced
    339            // Data Confirmation message fields
    340            byte sentEP;
    341            ZStatus_t sentStatus;
    342            byte sentTransID;       // This should match the value sent
    343            (void)task_id;  // Intentionally unreferenced parameter
    344          
    345            if ( events & SYS_EVENT_MSG )
   \   00000E   EB           MOV     A,R3
   \   00000F   5480         ANL     A,#0x80
   \   000011   7003         JNZ     $+5
   \   000013   02....       LJMP    ??GenericApp_ProcessEvent_0 & 0xFFFF
    346            {
    347              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( GenericApp_TaskID );
   \   000016                ; Setup parameters for call to function osal_msg_receive
   \   000016   8013         SJMP    ??GenericApp_ProcessEvent_1
    348              
    349              while ( MSGpkt )
    350              {
    351                switch ( MSGpkt->hdr.event )
    352                {
    353                  case ZDO_CB_MSG:
    354                    
    355                    GenericApp_ProcessZDOMsgs( (zdoIncomingMsg_t *)MSGpkt );
    356                    
    357                    break;
    358          
    359                  case KEY_CHANGE:
    360            
    361                    // GenericApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    362                    break;
    363          
    364                  case AF_DATA_CONFIRM_CMD:
    365                    // This message is received as a confirmation of a data packet sent.
    366                    // The status is of ZStatus_t type [defined in ZComDef.h]
    367                    // The message fields are defined in AF.h
    368                   
    369                    afDataConfirm = (afDataConfirm_t *)MSGpkt;
    370          
    371                    sentEP = afDataConfirm->endpoint;
    372                    (void)sentEP;  // This info not used now
    373                    sentTransID = afDataConfirm->transID;
    374                    (void)sentTransID;  // This info not used now
    375          
    376                    sentStatus = afDataConfirm->hdr.status;
    377                    // Action taken when confirmation is received.
    378                    if ( sentStatus != ZSuccess )
    379                    {
    380                      // The data wasn't delivered -- Do something
    381                    }
    382                    break;
    383          
    384                  case AF_INCOMING_MSG_CMD:
    385                    
    386                   //Receive "The" Message
    387                   //GenericApp_MessageMSGCB( MSGpkt );
    388                   
    389          
    390                    break;
    391          
    392                  case ZDO_STATE_CHANGE:
    393                     
    394                  
    395                    
    396                    GenericApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
    397                    if ( (GenericApp_NwkState == DEV_ZB_COORD) ||
    398                         (GenericApp_NwkState == DEV_ROUTER) ||
    399                         (GenericApp_NwkState == DEV_END_DEVICE) )
    400                    {
    401                      
    402                     
    403                      // Start sending "the" message in a regular interval.
    404                      osal_start_timerEx( GenericApp_TaskID,
    405                                          GENERICAPP_SEND_MSG_EVT,
    406                                          txMsgDelay );
    407                      
    408          
    409                    }
    410                                
    411                    break;
    412          
    413                  default:
    414                     
    415                    
    416                      osal_set_event(GenericApp_TaskID,GENERICAPP_SEND_MSG_EVT);
   \                     ??GenericApp_ProcessEvent_2:
   \   000018                ; Setup parameters for call to function osal_set_event
   \   000018   7A01         MOV     R2,#0x1
   \   00001A   7B00         MOV     R3,#0x0
   \   00001C   90....       MOV     DPTR,#GenericApp_TaskID
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F9           MOV     R1,A
   \   000021   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
    417                     break;
    418                }
    419          
    420                // Release the memory
    421                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??GenericApp_ProcessEvent_3:
   \   000024                ; Setup parameters for call to function osal_msg_deallocate
   \   000024   EE           MOV     A,R6
   \   000025   FA           MOV     R2,A
   \   000026   EF           MOV     A,R7
   \   000027   FB           MOV     R3,A
   \   000028   12....       LCALL   `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
    422          
    423                // Next
    424                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( GenericApp_TaskID );
   \   00002B                ; Setup parameters for call to function osal_msg_receive
   \                     ??GenericApp_ProcessEvent_1:
   \   00002B   90....       MOV     DPTR,#GenericApp_TaskID
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   F9           MOV     R1,A
   \   000030   12....       LCALL   `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   000033   8A..         MOV     ?V2,R2
   \   000035   8B..         MOV     ?V3,R3
   \   000037   AE..         MOV     R6,?V2
   \   000039   AF..         MOV     R7,?V3
   \   00003B   EE           MOV     A,R6
   \   00003C   4F           ORL     A,R7
   \   00003D   7003         JNZ     $+5
   \   00003F   02....       LJMP    ??GenericApp_ProcessEvent_4 & 0xFFFF
   \   000042   8E82         MOV     DPL,R6
   \   000044   8F83         MOV     DPH,R7
   \   000046   E0           MOVX    A,@DPTR
   \   000047   24E6         ADD     A,#-0x1a
   \   000049   60D9         JZ      ??GenericApp_ProcessEvent_3
   \   00004B   245A         ADD     A,#0x5a
   \   00004D   60D5         JZ      ??GenericApp_ProcessEvent_3
   \   00004F   24EF         ADD     A,#-0x11
   \   000051   7003         JNZ     $+5
   \   000053   02....       LJMP    ??GenericApp_ProcessEvent_5 & 0xFFFF
   \   000056   24FE         ADD     A,#-0x2
   \   000058   6006         JZ      ??GenericApp_ProcessEvent_6
   \   00005A   24D6         ADD     A,#-0x2a
   \   00005C   60C6         JZ      ??GenericApp_ProcessEvent_3
   \   00005E   80B8         SJMP    ??GenericApp_ProcessEvent_2
   \                     ??GenericApp_ProcessEvent_6:
   \   000060   EE           MOV     A,R6
   \   000061   240C         ADD     A,#0xc
   \   000063   F582         MOV     DPL,A
   \   000065   E4           CLR     A
   \   000066   3F           ADDC    A,R7
   \   000067   F583         MOV     DPH,A
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   F5..         MOV     ?V2,A
   \   00006C   A3           INC     DPTR
   \   00006D   E0           MOVX    A,@DPTR
   \   00006E   F5..         MOV     ?V3,A
   \   000070   78..         MOV     R0,#?V2
   \   000072   12....       LCALL   ?US_SWITCH_SPARSE
   \                     `?<Jumptable for GenericApp_ProcessEvent>_0`:
   \   000075   0000         DW        0
   \   000077   0200         DW        2
   \   000079   0680         DW        32774
   \   00007B   ....         DW        ??GenericApp_ProcessEvent_7
   \   00007D   2080         DW        32800
   \   00007F   ....         DW        ??GenericApp_ProcessEvent_8
   \   000081   ....         DW        ??GenericApp_ProcessEvent_3
   \                     ??GenericApp_ProcessEvent_7:
   \   000083                ; Setup parameters for call to function ZDO_ParseEPListRsp
   \   000083   EE           MOV     A,R6
   \   000084   FA           MOV     R2,A
   \   000085   EF           MOV     A,R7
   \   000086   FB           MOV     R3,A
   \   000087   12....       LCALL   `??ZDO_ParseEPListRsp::?relay`; Banked call to: ZDO_ParseEPListRsp
   \   00008A   8A..         MOV     ?V2,R2
   \   00008C   8B..         MOV     ?V3,R3
   \   00008E   EA           MOV     A,R2
   \   00008F   45..         ORL     A,?V3
   \   000091   6091         JZ      ??GenericApp_ProcessEvent_3
   \   000093   8A82         MOV     DPL,R2
   \   000095   8B83         MOV     DPH,R3
   \   000097   E0           MOVX    A,@DPTR
   \   000098   7032         JNZ     ??GenericApp_ProcessEvent_9
   \   00009A   A3           INC     DPTR
   \   00009B   A3           INC     DPTR
   \   00009C   A3           INC     DPTR
   \   00009D   E0           MOVX    A,@DPTR
   \   00009E   602C         JZ      ??GenericApp_ProcessEvent_9
   \   0000A0   90....       MOV     DPTR,#GenericApp_DstAddr + 8
   \   0000A3   7402         MOV     A,#0x2
   \   0000A5   F0           MOVX    @DPTR,A
   \   0000A6   8A82         MOV     DPL,R2
   \   0000A8   8B83         MOV     DPH,R3
   \   0000AA   A3           INC     DPTR
   \   0000AB   E0           MOVX    A,@DPTR
   \   0000AC   F8           MOV     R0,A
   \   0000AD   A3           INC     DPTR
   \   0000AE   E0           MOVX    A,@DPTR
   \   0000AF   F9           MOV     R1,A
   \   0000B0   90....       MOV     DPTR,#GenericApp_DstAddr
   \   0000B3   E8           MOV     A,R0
   \   0000B4   F0           MOVX    @DPTR,A
   \   0000B5   A3           INC     DPTR
   \   0000B6   E9           MOV     A,R1
   \   0000B7   F0           MOVX    @DPTR,A
   \   0000B8   8A82         MOV     DPL,R2
   \   0000BA   8B83         MOV     DPH,R3
   \   0000BC   A3           INC     DPTR
   \   0000BD   A3           INC     DPTR
   \   0000BE   A3           INC     DPTR
   \   0000BF   A3           INC     DPTR
   \   0000C0   E0           MOVX    A,@DPTR
   \   0000C1   90....       MOV     DPTR,#GenericApp_DstAddr + 9
   \   0000C4   F0           MOVX    @DPTR,A
   \   0000C5                ; Setup parameters for call to function HalLedSet
   \   0000C5   7A01         MOV     R2,#0x1
   \   0000C7   7908         MOV     R1,#0x8
   \   0000C9   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   \                     ??GenericApp_ProcessEvent_9:
   \   0000CC                ; Setup parameters for call to function osal_mem_free
   \   0000CC   AA..         MOV     R2,?V2
   \   0000CE   AB..         MOV     R3,?V3
   \   0000D0   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0000D3   02....       LJMP    ??GenericApp_ProcessEvent_3 & 0xFFFF
   \                     ??GenericApp_ProcessEvent_8:
   \   0000D6   EE           MOV     A,R6
   \   0000D7   2413         ADD     A,#0x13
   \   0000D9   F582         MOV     DPL,A
   \   0000DB   E4           CLR     A
   \   0000DC   3F           ADDC    A,R7
   \   0000DD   F583         MOV     DPH,A
   \   0000DF   E0           MOVX    A,@DPTR
   \   0000E0   F8           MOV     R0,A
   \   0000E1   A3           INC     DPTR
   \   0000E2   E0           MOVX    A,@DPTR
   \   0000E3   F583         MOV     DPH,A
   \   0000E5   8882         MOV     DPL,R0
   \   0000E7   E0           MOVX    A,@DPTR
   \   0000E8   700A         JNZ     ??GenericApp_ProcessEvent_10
   \   0000EA                ; Setup parameters for call to function HalLedSet
   \   0000EA   7A01         MOV     R2,#0x1
   \                     ??GenericApp_ProcessEvent_11:
   \   0000EC   7908         MOV     R1,#0x8
   \   0000EE   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   \   0000F1   02....       LJMP    ??GenericApp_ProcessEvent_3 & 0xFFFF
   \                     ??GenericApp_ProcessEvent_10:
   \   0000F4                ; Setup parameters for call to function HalLedSet
   \   0000F4   7A04         MOV     R2,#0x4
   \   0000F6   80F4         SJMP    ??GenericApp_ProcessEvent_11
   \                     ??GenericApp_ProcessEvent_5:
   \   0000F8   A3           INC     DPTR
   \   0000F9   E0           MOVX    A,@DPTR
   \   0000FA   90....       MOV     DPTR,#GenericApp_NwkState
   \   0000FD   F0           MOVX    @DPTR,A
   \   0000FE   6409         XRL     A,#0x9
   \   000100   600D         JZ      ??GenericApp_ProcessEvent_12
   \   000102   E0           MOVX    A,@DPTR
   \   000103   6407         XRL     A,#0x7
   \   000105   6008         JZ      ??GenericApp_ProcessEvent_12
   \   000107   E0           MOVX    A,@DPTR
   \   000108   6406         XRL     A,#0x6
   \   00010A   6003         JZ      $+5
   \   00010C   02....       LJMP    ??GenericApp_ProcessEvent_3 & 0xFFFF
   \                     ??GenericApp_ProcessEvent_12:
   \   00010F                ; Setup parameters for call to function osal_start_timerEx
   \   00010F   90....       MOV     DPTR,#txMsgDelay
   \   000112   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000115   7A01         MOV     R2,#0x1
   \   000117   7B00         MOV     R3,#0x0
   \   000119   90....       MOV     DPTR,#GenericApp_TaskID
   \   00011C   E0           MOVX    A,@DPTR
   \   00011D   F9           MOV     R1,A
   \   00011E   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000121   7404         MOV     A,#0x4
   \   000123   12....       LCALL   ?DEALLOC_XSTACK8
   \   000126   02....       LJMP    ??GenericApp_ProcessEvent_3 & 0xFFFF
    425                  
    426              }
    427          
    428              // return unprocessed events
    429              return (events ^ SYS_EVENT_MSG);
   \                     ??GenericApp_ProcessEvent_4:
   \   000129   AA..         MOV     R2,?V0
   \   00012B   E5..         MOV     A,?V1
   \   00012D   6480         XRL     A,#0x80
   \   00012F   FB           MOV     R3,A
   \   000130   02....       LJMP    ??GenericApp_ProcessEvent_13 & 0xFFFF
    430            }
    431          
    432            // Send a message out - This event is generated by a timer
    433            //  (setup in GenericApp_Init()).
    434            if ( events & GENERICAPP_SEND_MSG_EVT )
   \                     ??GenericApp_ProcessEvent_0:
   \   000133   EA           MOV     A,R2
   \   000134   A2E0         MOV     C,0xE0 /* A   */.0
   \   000136   507E         JNC     ??GenericApp_ProcessEvent_14
    435            {
    436            
    437              if(keyPressSW4)
   \   000138   90....       MOV     DPTR,#keyPressSW4
   \   00013B   E0           MOVX    A,@DPTR
   \   00013C   606F         JZ      ??GenericApp_ProcessEvent_15
    438              {
    439               /*
    440                dstAddr.addrMode = Addr16Bit;
    441                dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVALL;
    442                ZDP_MatchDescReq( &dstAddr,NWK_BROADCAST_SHORTADDR_DEVALL,
    443                                  GENERICAPP_PROFID,
    444                                  GENERICAPP_MAX_CLUSTERS, (cId_t *)GenericApp_ClusterList,
    445                                  GENERICAPP_MAX_CLUSTERS, (cId_t *)GenericApp_ClusterList,
    446                                  FALSE );
    447               
    448             
    449               */ 
    450                
    451                dstAddr.addrMode = Addr16Bit;
   \   00013E   7408         MOV     A,#0x8
   \   000140   12....       LCALL   ?XSTACK_DISP0_8
   \   000143   7402         MOV     A,#0x2
   \   000145   F0           MOVX    @DPTR,A
    452                dstAddr.addr.shortAddr = NLME_GetShortAddr();
   \   000146                ; Setup parameters for call to function NLME_GetShortAddr
   \   000146   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000149   85..82       MOV     DPL,?XSP + 0
   \   00014C   85..83       MOV     DPH,?XSP + 1
   \   00014F   EA           MOV     A,R2
   \   000150   F0           MOVX    @DPTR,A
   \   000151   A3           INC     DPTR
   \   000152   EB           MOV     A,R3
   \   000153   F0           MOVX    @DPTR,A
    453                ZDP_EndDeviceBindReq( &dstAddr, 0x0000,
    454                                      GenericApp_epDesc.endPoint,
    455                                      GENERICAPP_PROFID,
    456                                      GENERICAPP_MAX_CLUSTERS, (cId_t *)GenericApp_ClusterList,
    457                                      GENERICAPP_MAX_CLUSTERS, (cId_t *)GenericApp_ClusterList,
    458                                      FALSE );
   \   000154   75....       MOV     ?V2,#GenericApp_ClusterList & 0xff
   \   000157   75....       MOV     ?V3,#(GenericApp_ClusterList >> 8) & 0xff
   \   00015A                ; Setup parameters for call to function ZDP_EndDeviceBindReq
   \   00015A   75..00       MOV     ?V4,#0x0
   \   00015D   78..         MOV     R0,#?V4
   \   00015F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000162   78..         MOV     R0,#?V2
   \   000164   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000167   75..01       MOV     ?V4,#0x1
   \   00016A   78..         MOV     R0,#?V4
   \   00016C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00016F   78..         MOV     R0,#?V2
   \   000171   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000174   75..01       MOV     ?V2,#0x1
   \   000177   78..         MOV     R0,#?V2
   \   000179   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00017C   75..04       MOV     ?V2,#0x4
   \   00017F   75..0F       MOV     ?V3,#0xf
   \   000182   78..         MOV     R0,#?V2
   \   000184   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000187   90....       MOV     DPTR,#GenericApp_epDesc
   \   00018A   E0           MOVX    A,@DPTR
   \   00018B   F9           MOV     R1,A
   \   00018C   7C00         MOV     R4,#0x0
   \   00018E   7D00         MOV     R5,#0x0
   \   000190   7409         MOV     A,#0x9
   \   000192   12....       LCALL   ?XSTACK_DISP101_8
   \   000195   12....       LCALL   `??ZDP_EndDeviceBindReq::?relay`; Banked call to: ZDP_EndDeviceBindReq
   \   000198   7409         MOV     A,#0x9
   \   00019A   12....       LCALL   ?DEALLOC_XSTACK8
    459                
    460               
    461               
    462                
    463                keyPressSW4 = 0;
   \   00019D   90....       MOV     DPTR,#keyPressSW4
   \   0001A0   E4           CLR     A
   \   0001A1   F0           MOVX    @DPTR,A
    464                
    465                osal_set_event(GenericApp_TaskID,GENERICAPP_SEND_MSG_EVT);
   \   0001A2                ; Setup parameters for call to function osal_set_event
   \   0001A2   7A01         MOV     R2,#0x1
   \   0001A4   FB           MOV     R3,A
   \   0001A5   90....       MOV     DPTR,#GenericApp_TaskID
   \   0001A8   E0           MOVX    A,@DPTR
   \   0001A9   F9           MOV     R1,A
   \   0001AA   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
    466                
    467              }
    468              else
    469              {
    470               
    471                
    472              // Send "the" message
    473              //GenericApp_SendTheMessage();
    474               
    475              
    476               //Setup to send message again evry 1000 ms
    477               //osal_start_timerEx( GenericApp_TaskID,
    478               //                    GENERICAPP_SEND_MSG_EVT,
    479               //                    2000);
    480              
    481              
    482              }
    483              // return unprocessed events
    484              return (events ^ GENERICAPP_SEND_MSG_EVT);
   \                     ??GenericApp_ProcessEvent_15:
   \   0001AD   E5..         MOV     A,?V0
   \   0001AF   6401         XRL     A,#0x1
   \   0001B1   FA           MOV     R2,A
   \   0001B2   AB..         MOV     R3,?V1
   \   0001B4   8004         SJMP    ??GenericApp_ProcessEvent_13
    485            }
    486          
    487          #if defined( IAR_ARMCM3_LM )
    488            // Receive a message from the RTOS queue
    489            if ( events & GENERICAPP_RTOS_MSG_EVT )
    490            {
    491              // Process message from RTOS queue
    492              GenericApp_ProcessRtosMessage();
    493          
    494              // return unprocessed events
    495              return (events ^ GENERICAPP_RTOS_MSG_EVT);
    496            }
    497          #endif
    498          
    499            // Discard unknown events
    500            return 0;
   \                     ??GenericApp_ProcessEvent_14:
   \   0001B6   7A00         MOV     R2,#0x0
   \   0001B8   7B00         MOV     R3,#0x0
   \                     ??GenericApp_ProcessEvent_13:
   \   0001BA   7409         MOV     A,#0x9
   \   0001BC   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001BF   7F06         MOV     R7,#0x6
   \   0001C1   02....       LJMP    ?BANKED_LEAVE_XDATA
    501          }
    502          
    503          /*********************************************************************
    504           * Event Generation Functions
    505           */
    506          
    507          /*********************************************************************
    508           * @fn      GenericApp_ProcessZDOMsgs()
    509           *
    510           * @brief   Process response messages
    511           *
    512           * @param   none
    513           *
    514           * @return  none
    515           */
    516          static void GenericApp_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg )
    517          {
    518           
    519            switch ( inMsg->clusterID )
    520            {
    521              case End_Device_Bind_rsp:
    522                if ( ZDO_ParseBindRsp( inMsg ) == ZSuccess )
    523                {
    524                  // Light LED
    525                  HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
    526                }
    527          #if defined( BLINK_LEDS )
    528                else
    529                {
    530                  // Flash LED to show failure
    531                  HalLedSet ( HAL_LED_4, HAL_LED_MODE_FLASH );
    532                }
    533          #endif
    534                break;
    535          
    536              case Match_Desc_rsp:
    537                {
    538                  ZDO_ActiveEndpointRsp_t *pRsp = ZDO_ParseEPListRsp( inMsg );
    539                  if ( pRsp )
    540                  {
    541                    
    542                    
    543                        if ( pRsp->status == ZSuccess && pRsp->cnt )
    544                        {
    545                          
    546                      GenericApp_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
    547                      GenericApp_DstAddr.addr.shortAddr = pRsp->nwkAddr;
    548                      // Take the first endpoint, Can be changed to search through endpoints
    549                      GenericApp_DstAddr.endPoint = pRsp->epList[0];
    550          
    551                      // Light LED
    552                      HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
    553                    }
    554                    osal_mem_free( pRsp );
    555                  }
    556                }
    557                break;
    558            }
    559          }
    560          
    561          /*********************************************************************
    562           * @fn      GenericApp_HandleKeys
    563           *
    564           * @brief   Handles all key events for this device.
    565           *
    566           * @param   shift - true if in shift/alt.
    567           * @param   keys - bit field for key events. Valid entries:
    568           *                 HAL_KEY_SW_4
    569           *                 HAL_KEY_SW_3
    570           *                 HAL_KEY_SW_2
    571           *                 HAL_KEY_SW_1
    572           *
    573           * @return  none
    574           */
    575          static void GenericApp_HandleKeys( uint8 shift, uint8 keys )
    576          {
    577            zAddrType_t dstAddr;
    578          
    579            // Shift is used to make each button/switch dual purpose.
    580            if ( shift )
    581            {
    582              if ( keys & HAL_KEY_SW_1 )
    583              {
    584              }
    585              if ( keys & HAL_KEY_SW_2 )
    586              {
    587              }
    588              if ( keys & HAL_KEY_SW_3 )
    589              {
    590              }
    591              if ( keys & HAL_KEY_SW_4 )
    592              {
    593              }
    594            }
    595            else
    596            {
    597              if ( keys & HAL_KEY_SW_1 )
    598              {
    599          #if defined( SWITCH1_BIND )
    600                // We can use SW1 to simulate SW2 for devices that only have one switch,
    601                keys |= HAL_KEY_SW_2;
    602          #elif defined( SWITCH1_MATCH )
    603                // or use SW1 to simulate SW4 for devices that only have one switch
    604                keys |= HAL_KEY_SW_4;
    605          #else
    606                // Normally, SW1 changes the rate that messages are sent
    607                if ( txMsgDelay > 100 )
    608                {
    609                  // Cut the message TX delay in half
    610                  txMsgDelay /= 2;
    611                }
    612                else
    613                {
    614                  // Reset to the default
    615                  txMsgDelay = GENERICAPP_SEND_MSG_TIMEOUT;
    616                }
    617          #endif
    618              }
    619          
    620              if ( keys & HAL_KEY_SW_2 )
    621              {
    622                HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
    623          
    624                // Initiate an End Device Bind Request for the mandatory endpoint
    625                dstAddr.addrMode = Addr16Bit;
    626                dstAddr.addr.shortAddr = 0x0000; // Coordinator
    627                ZDP_EndDeviceBindReq( &dstAddr, NLME_GetShortAddr(),
    628                                      GenericApp_epDesc.endPoint,
    629                                      GENERICAPP_PROFID,
    630                                      GENERICAPP_MAX_CLUSTERS, (cId_t *)GenericApp_ClusterList,
    631                                      GENERICAPP_MAX_CLUSTERS, (cId_t *)GenericApp_ClusterList,
    632                                      FALSE );
    633              }
    634          
    635              if ( keys & HAL_KEY_SW_3 )
    636              {
    637              }
    638          
    639              if ( keys & HAL_KEY_SW_4 )
    640              {
    641                HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
    642                // Initiate a Match Description Request (Service Discovery)
    643                dstAddr.addrMode = AddrBroadcast;
    644                dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR;
    645                ZDP_MatchDescReq( &dstAddr, NWK_BROADCAST_SHORTADDR,
    646                                  GENERICAPP_PROFID,
    647                                  GENERICAPP_MAX_CLUSTERS, (cId_t *)GenericApp_ClusterList,
    648                                  GENERICAPP_MAX_CLUSTERS, (cId_t *)GenericApp_ClusterList,
    649                                  FALSE );
    650              }
    651            }
    652          }
    653          
    654          /*********************************************************************
    655           * LOCAL FUNCTIONS
    656           */
    657          
    658          /*********************************************************************
    659           * @fn      GenericApp_MessageMSGCB
    660           *
    661           * @brief   Data message processor callback.  This function processes
    662           *          any incoming data - probably from other devices.  So, based
    663           *          on cluster ID, perform the intended action.
    664           *
    665           * @param   none
    666           *
    667           * @return  none
    668           */
    669          static void GenericApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
    670          { 
    671            uint8 i;
    672           
    673          
    674            switch ( pkt->clusterId )
    675            {
    676              case GENERICAPP_CLUSTERID:
    677                
    678                      // Count this message
    679                      rxMsgCount += 1;  
    680                
    681                      HalLcdWriteString("--------------------------------",0);
    682                      HalLcdWriteString("Received data:",0);
    683                
    684                      for(i = 0;i < pkt->cmd.DataLength;i++)
    685                      {
    686                      uartSend(*(pkt->cmd.Data + i));
    687                      }
    688                
    689                      HalLcdWriteString("",0);
    690                      HalLcdWriteString("--------------------------------",0);
    691                
    692                break;
    693                
    694              default:
    695                      HalLcdWriteString("Podatak nije primljen.",0);
    696                  
    697              break;
    698                
    699            }
    700          
    701          
    702          }
    703          /*********************************************************************
    704           * @fn      MagneticSwitch_SendTheMessage
    705           *
    706           * @brief   Send state of the door
    707           *
    708           * @param   none
    709           *
    710           * @return  none
    711           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    712          void MotionSensor_SendTheMessage( void )
   \                     MotionSensor_SendTheMessage:
    713          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    714          
    715            char motionDetected[] = {'1'};
   \   00000A   90....       MOV     DPTR,#`?<Constant {49}>`
   \   00000D   AC..         MOV     R4,?XSP + 0
   \   00000F   AD..         MOV     R5,?XSP + 1
   \   000011   7401         MOV     A,#0x1
   \   000013   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    716            //char motionNotDetected[] = {'0'};
    717             
    718            if ( motionDetection() )
   \   000016                ; Setup parameters for call to function motionDetection
   \   000016   12....       LCALL   `??motionDetection::?relay`; Banked call to: motionDetection
   \   000019   E9           MOV     A,R1
   \   00001A   604F         JZ      ??MotionSensor_SendTheMessage_0
    719            {
    720              // Successfully requested to be sent.
    721             
    722              AF_DataRequest( &GenericApp_DstAddr, &GenericApp_epDesc,
    723                                 GENERICAPP_CLUSTERID,
    724                                 2,                                                       
    725                                 (byte *)&motionDetected,
    726                                 &GenericApp_TransID,
    727                                 AF_DISCV_ROUTE, AF_DEFAULT_RADIUS );
   \   00001C                ; Setup parameters for call to function AF_DataRequest
   \   00001C   75..1E       MOV     ?V0,#0x1e
   \   00001F   78..         MOV     R0,#?V0
   \   000021   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000024   75....       MOV     ?V0,#GenericApp_TransID & 0xff
   \   000027   75....       MOV     ?V1,#(GenericApp_TransID >> 8) & 0xff
   \   00002A   78..         MOV     R0,#?V0
   \   00002C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002F   7403         MOV     A,#0x3
   \   000031   12....       LCALL   ?XSTACK_DISP100_8
   \   000034   88..         MOV     ?V0,R0
   \   000036   89..         MOV     ?V1,R1
   \   000038   78..         MOV     R0,#?V0
   \   00003A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003D   75..02       MOV     ?V0,#0x2
   \   000040   75..00       MOV     ?V1,#0x0
   \   000043   78..         MOV     R0,#?V0
   \   000045   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000048   75..01       MOV     ?V0,#0x1
   \   00004B   78..         MOV     R0,#?V0
   \   00004D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000050   7900         MOV     R1,#0x0
   \   000052   7C..         MOV     R4,#GenericApp_epDesc & 0xff
   \   000054   7D..         MOV     R5,#(GenericApp_epDesc >> 8) & 0xff
   \   000056   7A..         MOV     R2,#GenericApp_DstAddr & 0xff
   \   000058   7B..         MOV     R3,#(GenericApp_DstAddr >> 8) & 0xff
   \   00005A   12....       LCALL   `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   00005D   7409         MOV     A,#0x9
   \   00005F   12....       LCALL   ?DEALLOC_XSTACK8
    728              
    729              HalLcdWriteString("Pokret je detektovan.",0);
   \   000062                ; Setup parameters for call to function HalLcdWriteString
   \   000062   7900         MOV     R1,#0x0
   \   000064   7A..         MOV     R2,#`?<Constant "Pokret je detektovan.">` & 0xff
   \   000066   7B..         MOV     R3,#(`?<Constant "Pokret je detektovan.">` >> 8) & 0xff
   \   000068   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    730              
    731            }
    732          /*  else
    733            {
    734              
    735              // Error occurred in request to send.
    736              // HalLcdWriteString("Podatak nije poslan.",0);
    737              AF_DataRequest( &GenericApp_DstAddr, &GenericApp_epDesc,
    738                                 GENERICAPP_CLUSTERID,
    739                                 2,                                                       
    740                                 (byte *)&motionNotDetected,
    741                                 &GenericApp_TransID,
    742                                 AF_DISCV_ROUTE, AF_DEFAULT_RADIUS );
    743            
    744              HalLcdWriteString("Nema kretanja.",0);
    745              
    746            }*/
    747          
    748          }
   \                     ??MotionSensor_SendTheMessage_0:
   \   00006B   7401         MOV     A,#0x1
   \   00006D                REQUIRE ?Subroutine0
   \   00006D                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F02         MOV     R7,#0x2
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA
    749          /*********************************************************************
    750           * @fn      MagneticSwitch_SendTheMessage
    751           *
    752           * @brief   Send state of the door
    753           *
    754           * @param   none
    755           *
    756           * @return  none
    757           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    758          void MagneticSwitch_SendTheMessage( void )
   \                     MagneticSwitch_SendTheMessage:
    759          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    760          
    761            char doorOpened[] = {'1'};
   \   00000A   90....       MOV     DPTR,#`?<Constant {49}>_1`
   \   00000D   7401         MOV     A,#0x1
   \   00000F   12....       LCALL   ?XSTACK_DISP102_8
   \   000012   7401         MOV     A,#0x1
   \   000014   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    762            char doorClosed[] = {'0'};
   \   000017   90....       MOV     DPTR,#`?<Constant {48}>`
   \   00001A   AC..         MOV     R4,?XSP + 0
   \   00001C   AD..         MOV     R5,?XSP + 1
   \   00001E   04           INC     A
   \   00001F   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    763            
    764            if ( !magneticSwitch_DoorDetection() )
   \   000022   A2A0         MOV     C,0xa0.0
   \   000024   75..1E       MOV     ?V0,#0x1e
   \   000027   78..         MOV     R0,#?V0
   \   000029   5049         JNC     ??MagneticSwitch_SendTheMessage_0
    765            {
    766              // Successfully requested to be sent.
    767              //HalLcdWriteString("Podatak je poslan.",0);
    768              AF_DataRequest( &GenericApp_DstAddr, &GenericApp_epDesc,
    769                                 GENERICAPP_CLUSTERID,
    770                                 2,                                                       
    771                                 (byte *)&doorOpened,
    772                                 &GenericApp_TransID,
    773                                 AF_DISCV_ROUTE, AF_DEFAULT_RADIUS );
   \   00002B                ; Setup parameters for call to function AF_DataRequest
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00002E   75....       MOV     ?V0,#GenericApp_TransID & 0xff
   \   000031   75....       MOV     ?V1,#(GenericApp_TransID >> 8) & 0xff
   \   000034   78..         MOV     R0,#?V0
   \   000036   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000039   7404         MOV     A,#0x4
   \   00003B   12....       LCALL   ?XSTACK_DISP100_8
   \   00003E   88..         MOV     ?V0,R0
   \   000040   89..         MOV     ?V1,R1
   \   000042   78..         MOV     R0,#?V0
   \   000044   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000047   75..02       MOV     ?V0,#0x2
   \   00004A   75..00       MOV     ?V1,#0x0
   \   00004D   78..         MOV     R0,#?V0
   \   00004F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000052   75..01       MOV     ?V0,#0x1
   \   000055   78..         MOV     R0,#?V0
   \   000057   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005A   7900         MOV     R1,#0x0
   \   00005C   7C..         MOV     R4,#GenericApp_epDesc & 0xff
   \   00005E   7D..         MOV     R5,#(GenericApp_epDesc >> 8) & 0xff
   \   000060   7A..         MOV     R2,#GenericApp_DstAddr & 0xff
   \   000062   7B..         MOV     R3,#(GenericApp_DstAddr >> 8) & 0xff
   \   000064   12....       LCALL   `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   000067   7409         MOV     A,#0x9
   \   000069   12....       LCALL   ?DEALLOC_XSTACK8
    774              
    775              HalLcdWriteString("######VRATA SU OTVORENA######",0);
   \   00006C                ; Setup parameters for call to function HalLcdWriteString
   \   00006C   7900         MOV     R1,#0x0
   \   00006E   7A..         MOV     R2,#`?<Constant "######VRATA SU OTVORE...">` & 0xff
   \   000070   7B..         MOV     R3,#(`?<Constant "######VRATA SU OTVORE...">` >> 8) & 0xff
   \   000072   8047         SJMP    ??MagneticSwitch_SendTheMessage_1
    776              
    777            }
    778            else
    779            {
    780              
    781              // Error occurred in request to send.
    782              // HalLcdWriteString("Podatak nije poslan.",0);
    783              AF_DataRequest( &GenericApp_DstAddr, &GenericApp_epDesc,
    784                                 GENERICAPP_CLUSTERID,
    785                                 2,                                                       
    786                                 (byte *)&doorClosed,
    787                                 &GenericApp_TransID,
    788                                 AF_DISCV_ROUTE, AF_DEFAULT_RADIUS );
   \                     ??MagneticSwitch_SendTheMessage_0:
   \   000074                ; Setup parameters for call to function AF_DataRequest
   \   000074   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000077   75....       MOV     ?V0,#GenericApp_TransID & 0xff
   \   00007A   75....       MOV     ?V1,#(GenericApp_TransID >> 8) & 0xff
   \   00007D   78..         MOV     R0,#?V0
   \   00007F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000082   7403         MOV     A,#0x3
   \   000084   12....       LCALL   ?XSTACK_DISP100_8
   \   000087   88..         MOV     ?V0,R0
   \   000089   89..         MOV     ?V1,R1
   \   00008B   78..         MOV     R0,#?V0
   \   00008D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000090   75..02       MOV     ?V0,#0x2
   \   000093   75..00       MOV     ?V1,#0x0
   \   000096   78..         MOV     R0,#?V0
   \   000098   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009B   75..01       MOV     ?V0,#0x1
   \   00009E   78..         MOV     R0,#?V0
   \   0000A0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A3   7900         MOV     R1,#0x0
   \   0000A5   7C..         MOV     R4,#GenericApp_epDesc & 0xff
   \   0000A7   7D..         MOV     R5,#(GenericApp_epDesc >> 8) & 0xff
   \   0000A9   7A..         MOV     R2,#GenericApp_DstAddr & 0xff
   \   0000AB   7B..         MOV     R3,#(GenericApp_DstAddr >> 8) & 0xff
   \   0000AD   12....       LCALL   `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   0000B0   7409         MOV     A,#0x9
   \   0000B2   12....       LCALL   ?DEALLOC_XSTACK8
    789            
    790              HalLcdWriteString("######VRATA SU ZATVORENA######",0);
   \   0000B5                ; Setup parameters for call to function HalLcdWriteString
   \   0000B5   7900         MOV     R1,#0x0
   \   0000B7   7A..         MOV     R2,#`?<Constant "######VRATA SU ZATVOR...">` & 0xff
   \   0000B9   7B..         MOV     R3,#(`?<Constant "######VRATA SU ZATVOR...">` >> 8) & 0xff
   \                     ??MagneticSwitch_SendTheMessage_1:
   \   0000BB   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    791              
    792            }
    793          
    794          }
   \   0000BE   7402         MOV     A,#0x2
   \   0000C0   02....       LJMP    ?Subroutine0 & 0xFFFF
   \   0000C3                REQUIRE _A_P2
    795          /*********************************************************************
    796           * @fn      GenericApp_SendTheMessage
    797           *
    798           * @brief   Send "the" message.
    799           *
    800           * @param   none
    801           *
    802           * @return  none
    803           */
    804          static void GenericApp_SendTheMessage( void )
    805          {
    806            uint16 shortAdrress;
                          ^
Warning[Pe177]: variable "shortAdrress" was declared but never referenced
    807            char shAddr[4];
                        ^
Warning[Pe177]: variable "shAddr" was declared but never referenced
    808            uint8 i;
                         ^
Warning[Pe177]: variable "i" was declared but never referenced
    809            
    810           
    811            char theMessageData[] = "Hello World";
    812            char doorOpened[] = {'1'};
                        ^
Warning[Pe177]: variable "doorOpened" was declared but never referenced
    813            char doorClosed[] = {'0'};
                        ^
Warning[Pe177]: variable "doorClosed" was declared but never referenced
    814            char motionDetected[] = {'1'};
                        ^
Warning[Pe177]: variable "motionDetected" was declared but never referenced
    815            char motionNotDetected[] = {'0'};
                        ^
Warning[Pe177]: variable "motionNotDetected" was declared but never referenced
    816            
    817            char theOpticalData[5];
                        ^
Warning[Pe177]: variable "theOpticalData" was declared but never referenced
    818            uint16 optDat;
                          ^
Warning[Pe177]: variable "optDat" was declared but never referenced

  static void GenericApp_HandleKeys( uint8 shift, uint8 keys )
              ^
"C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\Source\GenericApp.c",575  Warning[Pe177]: 
          function "GenericApp_HandleKeys" was declared but never referenced

  static void GenericApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
              ^
"C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\Source\GenericApp.c",669  Warning[Pe177]: 
          function "GenericApp_MessageMSGCB" was declared but never referenced

  static void GenericApp_EndPointList(uint16 shAddr)
              ^
"C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\Source\GenericApp.c",300  Warning[Pe177]: 
          function "GenericApp_EndPointList" was declared but never referenced

  static void GenericApp_SendTheMessage( void )
              ^
"C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\Source\GenericApp.c",804  Warning[Pe177]: 
          function "GenericApp_SendTheMessage" was declared but never
          referenced
    819            
    820            
    821            
    822          //*****************************************************************************
    823          //Motion detection
    824          //*****************************************************************************
    825           #if MOTION_SENSOR
    826          
    827          
    828            if ( motionDetection() )
    829            {
    830              // Successfully requested to be sent.
    831              //HalLcdWriteString("Podatak je poslan.",0);
    832              AF_DataRequest( &GenericApp_DstAddr, &GenericApp_epDesc,
    833                                 GENERICAPP_CLUSTERID,
    834                                 2,                                                       
    835                                 (byte *)&motionDetected,
    836                                 &GenericApp_TransID,
    837                                 AF_DISCV_ROUTE, AF_DEFAULT_RADIUS );
    838              
    839              HalLcdWriteString("Pokret je detektovan.",0);
    840              
    841            }
    842            else
    843            {
    844              
    845              // Error occurred in request to send.
    846              // HalLcdWriteString("Podatak nije poslan.",0);
    847              AF_DataRequest( &GenericApp_DstAddr, &GenericApp_epDesc,
    848                                 GENERICAPP_CLUSTERID,
    849                                 2,                                                       
    850                                 (byte *)&motionNotDetected,
    851                                 &GenericApp_TransID,
    852                                 AF_DISCV_ROUTE, AF_DEFAULT_RADIUS );
    853            
    854              HalLcdWriteString("Nema kretanja.",0);
    855              
    856            }
    857            
    858          #endif   
    859          //*****************************************************************************
    860          //Motion detection end
    861          //*****************************************************************************  
    862            
    863          #if OPTICAL_SENSOR
    864            
    865            optDat = HalAdcRead(HAL_ADC_CHANNEL_1,HAL_ADC_RESOLUTION_12);
    866          
    867             for(i = 0;i<4;i++)
    868             {
    869                  theOpticalData[3-i] =  optDat % 10  + '0';
    870                  optDat /= 10;
    871             }
    872                
    873             theOpticalData[4] = '\0';
    874             
    875             if ( AF_DataRequest( &GenericApp_DstAddr, &GenericApp_epDesc,
    876                                  GENERICAPP_CLUSTERID,
    877                                  (byte)osal_strlen( theOpticalData ) + 1,
    878                                  (byte *)&theOpticalData,
    879                                  &GenericApp_TransID,
    880                                  AF_DISCV_ROUTE, AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
    881             {
    882                // Successfully requested to be sent.
    883                HalLcdWriteString("Podatak je poslan.",0);
    884                //HalLcdWriteString(theMessageData,0);
    885             }
    886             else
    887             {
    888                // Error occurred in request to send.
    889                HalLcdWriteString("Podatak nije poslan.",0);
    890             }
    891          #endif  
    892          #if MAGNETIC_SENSOR
    893          
    894          
    895            if ( !magneticSwitch_DoorDetection() )
    896            {
    897              // Successfully requested to be sent.
    898              //HalLcdWriteString("Podatak je poslan.",0);
    899              AF_DataRequest( &GenericApp_DstAddr, &GenericApp_epDesc,
    900                                 GENERICAPP_CLUSTERID,
    901                                 2,                                                       
    902                                 (byte *)&doorOpened,
    903                                 &GenericApp_TransID,
    904                                 AF_DISCV_ROUTE, AF_DEFAULT_RADIUS );
    905              
    906              HalLcdWriteString("Vrata su otvorena.",0);
    907              
    908            }
    909            else
    910            {
    911              
    912              // Error occurred in request to send.
    913              // HalLcdWriteString("Podatak nije poslan.",0);
    914              AF_DataRequest( &GenericApp_DstAddr, &GenericApp_epDesc,
    915                                 GENERICAPP_CLUSTERID,
    916                                 2,                                                       
    917                                 (byte *)&doorClosed,
    918                                 &GenericApp_TransID,
    919                                 AF_DISCV_ROUTE, AF_DEFAULT_RADIUS );
    920            
    921              HalLcdWriteString("Vrata su zatvorena.",0);
    922              
    923            }
    924            
    925          #endif 
    926            
    927            
    928            
    929          #if HELLO_WORLD
    930          
    931            
    932            
    933             if ( AF_DataRequest( &GenericApp_DstAddr, &GenericApp_epDesc,
    934                                  GENERICAPP_CLUSTERID,
    935                                  (byte)osal_strlen( theMessageData ) + 1,
    936                                  (byte *)&theMessageData,
    937                                  &GenericApp_TransID,
    938                                  AF_DISCV_ROUTE, AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
    939             {
    940                // Successfully requested to be sent.
    941                HalLcdWriteString("Podatak je poslan.",0);
    942                //HalLcdWriteString(theMessageData,0);
    943             }
    944             else
    945             {
    946                // Error occurred in request to send.
    947                HalLcdWriteString("Podatak nije poslan.",0);
    948             }
    949           
    950          
    951          #endif
    952          }
    953          
    954          #if defined( IAR_ARMCM3_LM )
    955          /*********************************************************************
    956           * @fn      GenericApp_ProcessRtosMessage
    957           *
    958           * @brief   Receive message from RTOS queue, send response back.
    959           *
    960           * @param   none
    961           *
    962           * @return  none
    963           */
    964          static void GenericApp_ProcessRtosMessage( void )
    965          {
    966            osalQueue_t inMsg;
    967          
    968            if ( osal_queue_receive( OsalQueue, &inMsg, 0 ) == pdPASS )
    969            {
    970              uint8 cmndId = inMsg.cmnd;
    971              uint32 counter = osal_build_uint32( inMsg.cbuf, 4 );
    972          
    973              switch ( cmndId )
    974              {
    975                case CMD_INCR:
    976                  counter += 1;  /* Increment the incoming counter */
    977                                 /* Intentionally fall through next case */
    978          
    979                case CMD_ECHO:
    980                {
    981                  userQueue_t outMsg;
    982          
    983                  outMsg.resp = RSP_CODE | cmndId;  /* Response ID */
    984                  osal_buffer_uint32( outMsg.rbuf, counter );    /* Increment counter */
    985                  osal_queue_send( UserQueue1, &outMsg, 0 );  /* Send back to UserTask */
    986                  break;
    987                }
    988          
    989                default:
    990                  break;  /* Ignore unknown command */
    991              }
    992            }
    993          }
    994          #endif
    995          
    996          /*********************************************************************
    997           * @fn      magneticSwitchInit()
    998           *
    999           * @brief   Initialize pins for magnetic switch
   1000           *
   1001           * @param   none
   1002           *
   1003           * @return  none
   1004           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1005          void magneticSwitchInit(void)
   \                     magneticSwitchInit:
   1006          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   1007           // Set GPIO function for P1_3  
   1008           P1SEL &= 0xFC;
   \   000000                REQUIRE ?Subroutine1
   \   000000                REQUIRE P1SEL
   \   000000                REQUIRE P1DIR
   \   000000                REQUIRE P2INP
   \   000000                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   53F4FC       ANL     0xf4,#0xfc
   1009           
   1010           // Set inputs on P0_0
   1011           P1DIR &= 0xFC;
   \   000003   53FEFC       ANL     0xfe,#0xfc
   1012           
   1013           // Set pulldown for port 0 pins
   1014           P2INP |= 0x40;
   \   000006   43F740       ORL     0xf7,#0x40
   1015            
   1016          }
   \   000009   02....       LJMP    ?BRET
   1017          
   1018          /*********************************************************************
   1019           * @fn      magneticSwitch_DoorDetection()
   1020           *
   1021           * @brief   Detects if door are closed/opened
   1022           *
   1023           * @param   none
   1024           *
   1025           * @return  1 if closed, 0 if opened
   1026           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1027          uint8 magneticSwitch_DoorDetection()
   \                     magneticSwitch_DoorDetection:
   1028          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   1029              
   1030           if(TRUE == DOOR_CLOSED_DETECTION) 
   \   000000   A2A0         MOV     C,0xa0.0
   \   000002   5004         JNC     ??magneticSwitch_DoorDetection_0
   1031                  { 
   1032                    return 0;
   \   000004   7900         MOV     R1,#0x0
   \   000006   8002         SJMP    ??magneticSwitch_DoorDetection_1
   1033           }
   1034                  else
   1035                  {
   1036                    return 1;
   \                     ??magneticSwitch_DoorDetection_0:
   \   000008   7901         MOV     R1,#0x1
   \                     ??magneticSwitch_DoorDetection_1:
   \   00000A   02....       LJMP    ?BRET
   \   00000D                REQUIRE _A_P2
   1037                  }
   1038           
   1039          } 
   1040          /*********************************************************************
   1041           * @fn      motionInit()
   1042           *
   1043           * @brief   Initialize pins for motion sensor
   1044           *
   1045           * @param   none
   1046           *
   1047           * @return  none
   1048           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1049          void motionInit(void)
   \                     motionInit:
   1050          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   1051           // Set GPIO function for P1_3  
   1052           P1SEL &= 0xFC;
   \   000000   80..         SJMP    ?Subroutine1
   \   000002                REQUIRE P1SEL
   \   000002                REQUIRE P1DIR
   \   000002                REQUIRE P2INP
   1053           
   1054           // Set inputs on P0_0
   1055           P1DIR &= 0xFC;
   1056           
   1057           // Set pulldown for port 0 pins
   1058           P2INP |= 0x40;
   1059            
   1060          }
   1061          /*********************************************************************
   1062           * @fn      motionDetection()
   1063           *
   1064           * @brief   Detects there is motion or not
   1065           *
   1066           * @param   none
   1067           *
   1068           * @return  1 if motion detected, 0 if not
   1069           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1070          uint8 motionDetection()
   \                     motionDetection:
   1071          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   1072              
   1073                  if(TRUE == P0_1) 
   \   000000   A281         MOV     C,0x80.1
   \   000002   5004         JNC     ??motionDetection_0
   1074                  { 
   1075                    return 1;
   \   000004   7901         MOV     R1,#0x1
   \   000006   8002         SJMP    ??motionDetection_1
   1076                  }
   1077                  else
   1078                  {
   1079                    return 0;
   \                     ??motionDetection_0:
   \   000008   7900         MOV     R1,#0x0
   \                     ??motionDetection_1:
   \   00000A   02....       LJMP    ?BRET
   \   00000D                REQUIRE _A_P0
   1080                  }
   1081           
   1082          }  

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for coin>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for keyPressSW4>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for txMsgDelay>`:
   \   000000   88130000     DD 5000

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??GenericApp_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GenericApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??GenericApp_ProcessEvent::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GenericApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MotionSensor_SendTheMessage::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MotionSensor_SendTheMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MagneticSwitch_SendTheMessage::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MagneticSwitch_SendTheMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??magneticSwitchInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    magneticSwitchInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??magneticSwitch_DoorDetection::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    magneticSwitch_DoorDetection

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??motionInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    motionInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??motionDetection::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    motionDetection

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "GenericApp">`:
   \   000000   47656E65     DB "GenericApp"
   \            72696341
   \            707000  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {49}>`:
   \   000000   31           DB 49

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Pokret je detektovan.">`:
   \   000000   506F6B72     DB "Pokret je detektovan."
   \            6574206A
   \            65206465
   \            74656B74
   \            6F76616E
   \            2E00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {49}>_1`:
   \   000000   31           DB 49

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {48}>`:
   \   000000   30           DB 48

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "######VRATA SU OTVORE...">`:
   \   000000   23232323     DB "######VRATA SU OTVORENA######"
   \            23235652
   \            41544120
   \            5355204F
   \            54564F52
   \            454E4123
   \            23232323
   \            2300    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "######VRATA SU ZATVOR...">`:
   \   000000   23232323     DB "######VRATA SU ZATVORENA######"
   \            23235652
   \            41544120
   \            5355205A
   \            4154564F
   \            52454E41
   \            23232323
   \            232300  
   1083          
   1084          
   1085          
   1086          /*********************************************************************
   1087           */

   Maximum stack usage in bytes:

   XSTACK Function
   ------ --------
      9   GenericApp_Init
        9   -> HalLcdWriteString
        9   -> RegisterForKeys
        9   -> ZDO_RegisterForZDOMsg
        9   -> afRegister
     32   GenericApp_ProcessEvent
       23   -> HalLedSet
       23   -> NLME_GetShortAddr
       23   -> ZDO_ParseEPListRsp
       32   -> ZDP_EndDeviceBindReq
       23   -> osal_mem_free
       23   -> osal_msg_deallocate
       23   -> osal_msg_receive
       23   -> osal_set_event
       27   -> osal_start_timerEx
     21   MagneticSwitch_SendTheMessage
       21   -> AF_DataRequest
       12   -> HalLcdWriteString
     20   MotionSensor_SendTheMessage
       20   -> AF_DataRequest
       11   -> HalLcdWriteString
       11   -> motionDetection
      0   magneticSwitchInit
      0   magneticSwitch_DoorDetection
     11   motionDetection
      0   motionInit


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      30  ?<Constant "######VRATA SU OTVORE...">
      31  ?<Constant "######VRATA SU ZATVOR...">
      11  ?<Constant "GenericApp">
      22  ?<Constant "Pokret je detektovan.">
       1  ?<Constant {48}>
       1  ?<Constant {49}>
       1  ?<Constant {49}>_1
       1  ?<Initializer for coin>
       1  ?<Initializer for keyPressSW4>
       4  ?<Initializer for txMsgDelay>
       8  ?Subroutine0
      12  ?Subroutine1
       2  GenericApp_ClusterList
      12  GenericApp_DstAddr
      12  GenericApp_DstAddr1
      12  GenericApp_DstAddr2
     116  GenericApp_Init
       6  GenericApp_Init::?relay
       1  GenericApp_NwkState
     452  GenericApp_ProcessEvent
       6  GenericApp_ProcessEvent::?relay
      12  GenericApp_SimpleDesc
       1  GenericApp_TaskID
       1  GenericApp_TransID
       6  GenericApp_epDesc
     195  MagneticSwitch_SendTheMessage
       6  MagneticSwitch_SendTheMessage::?relay
     109  MotionSensor_SendTheMessage
       6  MotionSensor_SendTheMessage::?relay
       1  P1DIR
       1  P1SEL
       1  P2INP
      20  SAddr
       1  _A_P0
       1  _A_P2
       2  brojac
       1  coin
       2  counter
      10  dataBuffer
       1  index
       1  keyPressSW4
       0  magneticSwitchInit
       6  magneticSwitchInit::?relay
      13  magneticSwitch_DoorDetection
       6  magneticSwitch_DoorDetection::?relay
      13  motionDetection
       6  motionDetection::?relay
       2  motionInit
       6  motionInit::?relay
       1  prevData
      20  shortAddressOfEndDevice
       4  txMsgDelay

 
 920 bytes in segment BANKED_CODE
  48 bytes in segment BANK_RELAYS
   5 bytes in segment SFR_AN
   6 bytes in segment XDATA_I
   6 bytes in segment XDATA_ID
 111 bytes in segment XDATA_ROM_C
 101 bytes in segment XDATA_Z
 
  54 bytes of CODE     memory
 111 bytes of CONST    memory
   0 bytes of DATA     memory (+ 5 bytes shared)
 920 bytes of HUGECODE memory
 107 bytes of XDATA    memory

Errors: none
Warnings: 17
