###############################################################################
#
# IAR C/C++ Compiler V9.30.3.3983 for 8051                06/Apr/2017  12:17:03
# Copyright 2004-2016 IAR Systems AB.
# Evaluation license - IAR Embedded Workbench for 8051, Evaluation version 9.30
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Components\hal\common\hal_drivers.c
#    Command line       =  
#        -f
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0x0422
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Components\hal\common\hal_drivers.c
#        -D NWK_AUTO_POLL -D ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC
#        -D LCD_SUPPORTED=DEBUG -D xPOWER_SAVING -lC
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\EndDeviceEB\List
#        -lA
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\EndDeviceEB\List
#        --diag_suppress Pe001,Pa010 -o
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\EndDeviceEB\Obj
#        -e --no_code_motion --debug --core=plain --dptr=16,1
#        --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 16 -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\Source\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -Ohz --require_prototypes
#    List file          =  
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\EndDeviceEB\List\hal_drivers.lst
#    Object file        =  
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\EndDeviceEB\Obj\hal_drivers.r51
#
###############################################################################

C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Components\hal\common\hal_drivers.c
      1          /**************************************************************************************************
      2            Filename:       hal_drivers.c
      3            Revised:        $Date: 2007-07-06 10:42:24 -0700 (Fri, 06 Jul 2007) $
      4            Revision:       $Revision: 13579 $
      5          
      6            Description:    This file contains the interface to the Drivers Service.
      7          
      8          
      9            Copyright 2005-2013 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /**************************************************************************************************
     41           *                                            INCLUDES
     42           **************************************************************************************************/
     43          
     44          #include "hal_adc.h"
     45          #if (defined HAL_AES) && (HAL_AES == TRUE)
     46          #include "hal_aes.h"
     47          #endif
     48          #if (defined HAL_BUZZER) && (HAL_BUZZER == TRUE)
     49          #include "hal_buzzer.h"
     50          #endif
     51          #if (defined HAL_DMA) && (HAL_DMA == TRUE)
     52          #include "hal_dma.h"
     53          #endif
     54          #include "hal_drivers.h"
     55          #include "hal_key.h"
     56          #include "hal_lcd.h"
     57          #include "hal_led.h"
     58          #include "hal_sleep.h"
     59          #include "hal_timer.h"
     60          #include "hal_types.h"
     61          #include "hal_uart.h"
     62          #ifdef CC2591_COMPRESSION_WORKAROUND
     63          #include "mac_rx.h"
     64          #endif
     65          #include "OSAL.h"
     66          #if defined POWER_SAVING
     67          #include "OSAL_PwrMgr.h"
     68          #endif
     69          #if (defined HAL_HID) && (HAL_HID == TRUE)
     70          #include "usb_hid.h"
     71          #endif
     72          #if (defined HAL_SPI) && (HAL_SPI == TRUE)
     73          #include "hal_spi.h"
     74          #endif
     75          
     76          /**************************************************************************************************
     77           *                                      EXTERNAL FUNCTIONS
     78           **************************************************************************************************/
     79          
     80          extern void MagneticSwitch_SendTheMessage( void );
     81          extern void MotionSensor_SendTheMessage( void );
     82          
     83          /**************************************************************************************************
     84           *                                      GLOBAL VARIABLES
     85           **************************************************************************************************/

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     86          uint8 Hal_TaskID;
   \                     Hal_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     87          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     88          uint8 MagneticSwitchFlag = 0;
   \                     MagneticSwitchFlag:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     89          uint8 MotionSensorFlag = 0;
   \                     MotionSensorFlag:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     90          
     91          extern void HalLedUpdate( void ); /* Notes: This for internal only so it shouldn't be in hal_led.h */
     92          
     93          /**************************************************************************************************
     94           * @fn      Hal_Init
     95           *
     96           * @brief   Hal Initialization function.
     97           *
     98           * @param   task_id - Hal TaskId
     99           *
    100           * @return  None
    101           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    102          void Hal_Init( uint8 task_id )
   \                     Hal_Init:
    103          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    104            /* Register task ID */
    105            Hal_TaskID = task_id;
   \   000004   E9           MOV     A,R1
   \   000005   90....       MOV     DPTR,#Hal_TaskID
   \   000008   F0           MOVX    @DPTR,A
    106          
    107          #ifdef CC2591_COMPRESSION_WORKAROUND
    108            osal_start_reload_timer( Hal_TaskID, PERIOD_RSSI_RESET_EVT, PERIOD_RSSI_RESET_TIMEOUT );
    109          #endif
    110          }
   \   000009                REQUIRE ?Subroutine0
   \   000009                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    111          
    112          /**************************************************************************************************
    113           * @fn      Hal_DriverInit
    114           *
    115           * @brief   Initialize HW - These need to be initialized before anyone.
    116           *
    117           * @param   task_id - Hal TaskId
    118           *
    119           * @return  None
    120           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    121          void HalDriverInit (void)
   \                     HalDriverInit:
    122          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    123            /* TIMER */
    124          #if (defined HAL_TIMER) && (HAL_TIMER == TRUE)
    125          #endif
    126          
    127            /* ADC */
    128          #if (defined HAL_ADC) && (HAL_ADC == TRUE)
    129            HalAdcInit();
   \   000004                ; Setup parameters for call to function HalAdcInit
   \   000004   12....       LCALL   `??HalAdcInit::?relay`; Banked call to: HalAdcInit
    130          #endif
    131          
    132            /* DMA */
    133          #if (defined HAL_DMA) && (HAL_DMA == TRUE)
    134            // Must be called before the init call to any module that uses DMA.
    135            HalDmaInit();
   \   000007                ; Setup parameters for call to function HalDmaInit
   \   000007   12....       LCALL   `??HalDmaInit::?relay`; Banked call to: HalDmaInit
    136          #endif
    137          
    138            /* AES */
    139          #if (defined HAL_AES) && (HAL_AES == TRUE)
    140            HalAesInit();
   \   00000A                ; Setup parameters for call to function HalAesInit
   \   00000A   12....       LCALL   `??HalAesInit::?relay`; Banked call to: HalAesInit
    141          #endif
    142          
    143            /* LCD */
    144          #if (defined HAL_LCD) && (HAL_LCD == TRUE)
    145            HalLcdInit();
   \   00000D                ; Setup parameters for call to function HalLcdInit
   \   00000D   12....       LCALL   `??HalLcdInit::?relay`; Banked call to: HalLcdInit
    146          #endif
    147          
    148            /* LED */
    149          #if (defined HAL_LED) && (HAL_LED == TRUE)
    150            HalLedInit();
   \   000010                ; Setup parameters for call to function HalLedInit
   \   000010   12....       LCALL   `??HalLedInit::?relay`; Banked call to: HalLedInit
    151          #endif
    152          
    153            /* UART */
    154          #if (defined HAL_UART) && (HAL_UART == TRUE)
    155            HalUARTInit();
   \   000013                ; Setup parameters for call to function HalUARTInit
   \   000013   12....       LCALL   `??HalUARTInit::?relay`; Banked call to: HalUARTInit
    156          #endif
    157          
    158            /* KEY */
    159          #if (defined HAL_KEY) && (HAL_KEY == TRUE)
    160            HalKeyInit();
   \   000016                ; Setup parameters for call to function HalKeyInit
   \   000016   12....       LCALL   `??HalKeyInit::?relay`; Banked call to: HalKeyInit
    161          #endif
    162            
    163            /* SPI */
    164          #if (defined HAL_SPI) && (HAL_SPI == TRUE)
    165            HalSpiInit();
    166          #endif
    167          
    168            /* HID */
    169          #if (defined HAL_HID) && (HAL_HID == TRUE)
    170            usbHidInit();
    171          #endif
    172          }
   \   000019   80..         SJMP    ?Subroutine0
    173          
    174          /**************************************************************************************************
    175           * @fn      Hal_ProcessEvent
    176           *
    177           * @brief   Hal Process Event
    178           *
    179           * @param   task_id - Hal TaskId
    180           *          events - events
    181           *
    182           * @return  None
    183           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    184          uint16 Hal_ProcessEvent( uint8 task_id, uint16 events )
   \                     Hal_ProcessEvent:
    185          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    186            uint8 *msgPtr;
    187          
    188            (void)task_id;  // Intentionally unreferenced parameter
    189          
    190            if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL     A,#0x80
   \   00000B   6018         JZ      ??Hal_ProcessEvent_0
    191            {
    192              msgPtr = osal_msg_receive(Hal_TaskID);
   \   00000D                ; Setup parameters for call to function osal_msg_receive
   \   00000D   8003         SJMP    ??Hal_ProcessEvent_1
    193          
    194              while (msgPtr)
    195              {
    196                /* Do something here - for now, just deallocate the msg and move on */
    197          
    198                /* De-allocate */
    199                osal_msg_deallocate( msgPtr );
   \                     ??Hal_ProcessEvent_2:
   \   00000F                ; Setup parameters for call to function osal_msg_deallocate
   \   00000F   12....       LCALL   `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
    200                /* Next */
    201                msgPtr = osal_msg_receive( Hal_TaskID );
   \   000012                ; Setup parameters for call to function osal_msg_receive
   \                     ??Hal_ProcessEvent_1:
   \   000012   90....       MOV     DPTR,#Hal_TaskID
   \   000015   E0           MOVX    A,@DPTR
   \   000016   F9           MOV     R1,A
   \   000017   12....       LCALL   `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
    202              }
   \   00001A   EA           MOV     A,R2
   \   00001B   4B           ORL     A,R3
   \   00001C   70F1         JNZ     ??Hal_ProcessEvent_2
    203              return events ^ SYS_EVENT_MSG;
   \   00001E   EE           MOV     A,R6
   \   00001F   FA           MOV     R2,A
   \   000020   EF           MOV     A,R7
   \   000021   6480         XRL     A,#0x80
   \   000023   8054         SJMP    ??Hal_ProcessEvent_3
    204            }
    205          
    206          #if (defined HAL_BUZZER) && (HAL_BUZZER == TRUE)
    207            if (events & HAL_BUZZER_EVENT)
    208            {
    209              HalBuzzerStop();
    210              return events ^ HAL_BUZZER_EVENT;
    211            }
    212          #endif
    213          
    214          #ifdef CC2591_COMPRESSION_WORKAROUND
    215            if ( events & PERIOD_RSSI_RESET_EVT )
    216            {
    217              macRxResetRssi();
    218              return (events ^ PERIOD_RSSI_RESET_EVT);
    219            }
    220          #endif
    221          
    222            if ( events & HAL_LED_BLINK_EVENT )
   \                     ??Hal_ProcessEvent_0:
   \   000025   EE           MOV     A,R6
   \   000026   5420         ANL     A,#0x20
   \   000028   6008         JZ      ??Hal_ProcessEvent_4
    223            {
    224          #if (defined (BLINK_LEDS)) && (HAL_LED == TRUE)
    225              HalLedUpdate();
   \   00002A                ; Setup parameters for call to function HalLedUpdate
   \   00002A   12....       LCALL   `??HalLedUpdate::?relay`; Banked call to: HalLedUpdate
    226          #endif /* BLINK_LEDS && HAL_LED */
    227              return events ^ HAL_LED_BLINK_EVENT;
   \   00002D   EE           MOV     A,R6
   \   00002E   6420         XRL     A,#0x20
   \   000030   8045         SJMP    ??Hal_ProcessEvent_5
    228            }
    229          
    230            if (events & HAL_KEY_EVENT)
   \                     ??Hal_ProcessEvent_4:
   \   000032   EE           MOV     A,R6
   \   000033   5410         ANL     A,#0x10
   \   000035   6045         JZ      ??Hal_ProcessEvent_6
    231            {
    232          #if (defined HAL_KEY) && (HAL_KEY == TRUE)
    233              /* Check for keys */
    234              //HalKeyPoll();
    235              
    236              if(MagneticSwitchFlag == 1)
   \   000037   90....       MOV     DPTR,#MagneticSwitchFlag
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   6401         XRL     A,#0x1
   \   00003D   7008         JNZ     ??Hal_ProcessEvent_7
    237              {
    238                MagneticSwitch_SendTheMessage();
   \   00003F                ; Setup parameters for call to function MagneticSwitch_SendTheMessage
   \   00003F   12....       LCALL   `??MagneticSwitch_SendTheMessage::?relay`; Banked call to: MagneticSwitch_SendTheMessage
    239                MagneticSwitchFlag = 0;
   \   000042   90....       MOV     DPTR,#MagneticSwitchFlag
   \   000045   E4           CLR     A
   \   000046   F0           MOVX    @DPTR,A
    240              }
    241              if(MotionSensorFlag == 1)
   \                     ??Hal_ProcessEvent_7:
   \   000047   90....       MOV     DPTR,#MotionSensorFlag
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   6401         XRL     A,#0x1
   \   00004D   7008         JNZ     ??Hal_ProcessEvent_8
    242              {
    243                MotionSensor_SendTheMessage();
   \   00004F                ; Setup parameters for call to function MotionSensor_SendTheMessage
   \   00004F   12....       LCALL   `??MotionSensor_SendTheMessage::?relay`; Banked call to: MotionSensor_SendTheMessage
    244                MotionSensorFlag = 0;
   \   000052   90....       MOV     DPTR,#MotionSensorFlag
   \   000055   E4           CLR     A
   \   000056   F0           MOVX    @DPTR,A
    245              }
    246              
    247              
    248              
    249              /* if interrupt disabled, do next polling */
    250              if (!Hal_KeyIntEnable)
   \                     ??Hal_ProcessEvent_8:
   \   000057   90....       MOV     DPTR,#Hal_KeyIntEnable
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   7017         JNZ     ??Hal_ProcessEvent_9
    251              {
    252                osal_start_timerEx( Hal_TaskID, HAL_KEY_EVENT, 100);
   \   00005D                ; Setup parameters for call to function osal_start_timerEx
   \   00005D   90....       MOV     DPTR,#__Constant_64
   \   000060   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000063   7A10         MOV     R2,#0x10
   \   000065   7B00         MOV     R3,#0x0
   \   000067   90....       MOV     DPTR,#Hal_TaskID
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   F9           MOV     R1,A
   \   00006C   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00006F   7404         MOV     A,#0x4
   \   000071   12....       LCALL   ?DEALLOC_XSTACK8
    253              }
    254          #endif
    255              return events ^ HAL_KEY_EVENT;
   \                     ??Hal_ProcessEvent_9:
   \   000074   EE           MOV     A,R6
   \   000075   6410         XRL     A,#0x10
   \                     ??Hal_ProcessEvent_5:
   \   000077   FA           MOV     R2,A
   \   000078   EF           MOV     A,R7
   \                     ??Hal_ProcessEvent_3:
   \   000079   FB           MOV     R3,A
   \   00007A   8004         SJMP    ??Hal_ProcessEvent_10
    256            }
    257          
    258          #if defined POWER_SAVING
    259            if ( events & HAL_SLEEP_TIMER_EVENT )
    260            {
    261              halRestoreSleepLevel();
    262              return events ^ HAL_SLEEP_TIMER_EVENT;
    263            }
    264          
    265            if ( events & HAL_PWRMGR_HOLD_EVENT )
    266            {
    267              (void)osal_pwrmgr_task_state(Hal_TaskID, PWRMGR_HOLD);
    268          
    269              (void)osal_stop_timerEx(Hal_TaskID, HAL_PWRMGR_CONSERVE_EVENT);
    270              (void)osal_clear_event(Hal_TaskID, HAL_PWRMGR_CONSERVE_EVENT);
    271          
    272              return (events & ~(HAL_PWRMGR_HOLD_EVENT | HAL_PWRMGR_CONSERVE_EVENT));
    273            }
    274          
    275            if ( events & HAL_PWRMGR_CONSERVE_EVENT )
    276            {
    277              (void)osal_pwrmgr_task_state(Hal_TaskID, PWRMGR_CONSERVE);
    278              return events ^ HAL_PWRMGR_CONSERVE_EVENT;
    279            }
    280          #endif
    281          
    282            return 0;
   \                     ??Hal_ProcessEvent_6:
   \   00007C   7A00         MOV     R2,#0x0
   \   00007E   7B00         MOV     R3,#0x0
   \                     ??Hal_ProcessEvent_10:
   \   000080   7F02         MOV     R7,#0x2
   \   000082   02....       LJMP    ?BANKED_LEAVE_XDATA
    283          }
    284          
    285          /**************************************************************************************************
    286           * @fn      Hal_ProcessPoll
    287           *
    288           * @brief   This routine will be called by OSAL to poll UART, TIMER...
    289           *
    290           * @param   task_id - Hal TaskId
    291           *
    292           * @return  None
    293           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    294          void Hal_ProcessPoll ()
   \                     Hal_ProcessPoll:
    295          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    296          #if defined( POWER_SAVING )
    297            /* Allow sleep before the next OSAL event loop */
    298            ALLOW_SLEEP_MODE();
    299          #endif
    300            
    301            /* UART Poll */
    302          #if (defined HAL_UART) && (HAL_UART == TRUE)
    303            HalUARTPoll();
   \   000004                ; Setup parameters for call to function HalUARTPoll
   \   000004   12....       LCALL   `??HalUARTPoll::?relay`; Banked call to: HalUARTPoll
    304          #endif
    305            
    306            /* SPI Poll */
    307          #if (defined HAL_SPI) && (HAL_SPI == TRUE)
    308            HalSpiPoll();
    309          #endif
    310          
    311            /* HID poll */
    312          #if (defined HAL_HID) && (HAL_HID == TRUE)
    313            usbHidProcessEvents();
    314          #endif
    315           
    316          }
   \   000007   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_64:
   \   000000   64000000     DD 100

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??Hal_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Hal_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalDriverInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalDriverInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??Hal_ProcessEvent::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Hal_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??Hal_ProcessPoll::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Hal_ProcessPoll
    317          
    318          /**************************************************************************************************
    319          **************************************************************************************************/
    320          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2      0   HalDriverInit
        2      0   -> HalAdcInit
        2      0   -> HalAesInit
        2      0   -> HalDmaInit
        2      0   -> HalKeyInit
        2      0   -> HalLcdInit
        2      0   -> HalLedInit
        2      0   -> HalUARTInit
      2      0   Hal_Init
      0     14   Hal_ProcessEvent
        0     10   -> HalLedUpdate
        0     10   -> MagneticSwitch_SendTheMessage
        0     10   -> MotionSensor_SendTheMessage
        0     10   -> osal_msg_deallocate
        0     10   -> osal_msg_receive
        0     14   -> osal_start_timerEx
      2      0   Hal_ProcessPoll
        2      0   -> HalUARTPoll


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       7  ?Subroutine0
      27  HalDriverInit
       6  HalDriverInit::?relay
       9  Hal_Init
       6  Hal_Init::?relay
     133  Hal_ProcessEvent
       6  Hal_ProcessEvent::?relay
      10  Hal_ProcessPoll
       6  Hal_ProcessPoll::?relay
       1  Hal_TaskID
       1  MagneticSwitchFlag
       1  MotionSensorFlag
       4  __Constant_64

 
 186 bytes in segment BANKED_CODE
  24 bytes in segment BANK_RELAYS
   4 bytes in segment XDATA_ROM_C
   3 bytes in segment XDATA_Z
 
  24 bytes of CODE     memory
   0 bytes of CONST    memory (+ 4 bytes shared)
 186 bytes of HUGECODE memory
   3 bytes of XDATA    memory

Errors: none
Warnings: none
