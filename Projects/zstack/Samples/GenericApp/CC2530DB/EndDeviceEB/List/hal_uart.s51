///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V9.30.3.3983 for 8051               20/Apr/2017  12:17:45
// Copyright 2004-2016 IAR Systems AB.
// Evaluation license - IAR Embedded Workbench for 8051, Evaluation version 9.30
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Components\hal\target\CC2530EB\hal_uart.c
//    Command line       =  
//        -f
//        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
//        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
//        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0x0422
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
//        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
//        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
//        -DREJOIN_POLL_RATE=440
//        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Components\hal\target\CC2530EB\hal_uart.c
//        -D NWK_AUTO_POLL -D ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC
//        -D LCD_SUPPORTED=DEBUG -D xPOWER_SAVING -lC
//        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\EndDeviceEB\List
//        -lA
//        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\EndDeviceEB\List
//        --diag_suppress Pe001,Pa010 -o
//        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\EndDeviceEB\Obj
//        -e --no_code_motion --debug --core=plain --dptr=16,1
//        --data_model=large --code_model=banked
//        --calling_convention=xdata_reentrant --place_constants=data_rom
//        --nr_virtual_regs 16 -I
//        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\
//        -I
//        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\Source\
//        -I
//        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\ZMain\TI2530DB\
//        -I
//        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\include\
//        -I
//        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
//        -I
//        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\include\
//        -I
//        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\
//        -I
//        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
//        -I
//        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
//        -I
//        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mt\
//        -I
//        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\osal\include\
//        -I
//        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\saddr\
//        -I
//        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\sdata\
//        -I
//        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\af\
//        -I
//        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\
//        -I
//        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\
//        -I
//        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sec\
//        -I
//        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sys\
//        -I
//        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\
//        -I
//        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\
//        -I
//        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
//        -I
//        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Components\hal\BME280_driver-master\
//        -Ohz --require_prototypes
//    List file          =  
//        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\EndDeviceEB\List\hal_uart.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME hal_uart

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?SS_SHR
        EXTERN __INIT_XDATA_Z

        PUBLIC `??HalUARTInit::?relay`
        FUNCTION `??HalUARTInit::?relay`,0203H
        PUBLIC `??HalUARTIsrDMA::?relay`
        FUNCTION `??HalUARTIsrDMA::?relay`,0203H
        PUBLIC `??HalUARTOpen::?relay`
        FUNCTION `??HalUARTOpen::?relay`,0203H
        PUBLIC `??HalUARTPoll::?relay`
        FUNCTION `??HalUARTPoll::?relay`,0203H
        PUBLIC `??HalUARTRead::?relay`
        FUNCTION `??HalUARTRead::?relay`,0203H
        PUBLIC `??HalUARTResume::?relay`
        FUNCTION `??HalUARTResume::?relay`,0203H
        PUBLIC `??HalUARTSuspend::?relay`
        FUNCTION `??HalUARTSuspend::?relay`,0203H
        PUBLIC `??HalUARTWrite::?relay`
        FUNCTION `??HalUARTWrite::?relay`,0203H
        PUBLIC `??Hal_SPI_Master_Init::?relay`
        FUNCTION `??Hal_SPI_Master_Init::?relay`,0203H
        PUBLIC `??Hal_SPI_Master_Receive::?relay`
        FUNCTION `??Hal_SPI_Master_Receive::?relay`,0203H
        PUBLIC `??Hal_SPI_Master_Send::?relay`
        FUNCTION `??Hal_SPI_Master_Send::?relay`,0203H
        PUBLIC `??Hal_UART_RxBufLen::?relay`
        FUNCTION `??Hal_UART_RxBufLen::?relay`,0203H
        PUBLIC `??SPIDataGet::?relay`
        FUNCTION `??SPIDataGet::?relay`,0203H
        PUBLIC `??SPIDataPut::?relay`
        FUNCTION `??SPIDataPut::?relay`,0203H
        PUBLIC `??isBitSet::?relay`
        FUNCTION `??isBitSet::?relay`,0203H
        PUBWEAK CLKCONCMD
        PUBWEAK DMAIRQ
        PUBLIC HalUARTInit
        FUNCTION HalUARTInit,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC HalUARTIsrDMA
        FUNCTION HalUARTIsrDMA,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC HalUARTOpen
        FUNCTION HalUARTOpen,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC HalUARTPoll
        FUNCTION HalUARTPoll,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC HalUARTRead
        FUNCTION HalUARTRead,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC HalUARTResume
        FUNCTION HalUARTResume,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC HalUARTSuspend
        FUNCTION HalUARTSuspend,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC HalUARTWrite
        FUNCTION HalUARTWrite,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC Hal_SPI_Master_Init
        FUNCTION Hal_SPI_Master_Init,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC Hal_SPI_Master_Receive
        FUNCTION Hal_SPI_Master_Receive,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC Hal_SPI_Master_Send
        FUNCTION Hal_SPI_Master_Send,080203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC Hal_UART_RxBufLen
        FUNCTION Hal_UART_RxBufLen,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBWEAK P0SEL
        PUBWEAK P1DIR
        PUBWEAK P1SEL
        PUBWEAK PERCFG
        PUBLIC SPIDataGet
        FUNCTION SPIDataGet,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC SPIDataPut
        FUNCTION SPIDataPut,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBWEAK ST0
        PUBWEAK U0BAUD
        PUBWEAK U0CSR
        PUBWEAK U0DBUF
        PUBWEAK U0GCR
        PUBWEAK U1BAUD
        PUBWEAK U1DBUF
        PUBWEAK U1GCR
        PUBWEAK _A_P1
        PUBWEAK _A_U1CSR
        PUBLIC isBitSet
        FUNCTION isBitSet,080203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
HalUARTInit         SYMBOL "HalUARTInit"
`??HalUARTInit::?relay` SYMBOL "?relay", HalUARTInit
HalUARTIsrDMA       SYMBOL "HalUARTIsrDMA"
`??HalUARTIsrDMA::?relay` SYMBOL "?relay", HalUARTIsrDMA
HalUARTOpen         SYMBOL "HalUARTOpen"
`??HalUARTOpen::?relay` SYMBOL "?relay", HalUARTOpen
HalUARTPoll         SYMBOL "HalUARTPoll"
`??HalUARTPoll::?relay` SYMBOL "?relay", HalUARTPoll
HalUARTRead         SYMBOL "HalUARTRead"
`??HalUARTRead::?relay` SYMBOL "?relay", HalUARTRead
HalUARTResume       SYMBOL "HalUARTResume"
`??HalUARTResume::?relay` SYMBOL "?relay", HalUARTResume
HalUARTSuspend      SYMBOL "HalUARTSuspend"
`??HalUARTSuspend::?relay` SYMBOL "?relay", HalUARTSuspend
HalUARTWrite        SYMBOL "HalUARTWrite"
`??HalUARTWrite::?relay` SYMBOL "?relay", HalUARTWrite
Hal_SPI_Master_Init SYMBOL "Hal_SPI_Master_Init"
`??Hal_SPI_Master_Init::?relay` SYMBOL "?relay", Hal_SPI_Master_Init
Hal_SPI_Master_Receive SYMBOL "Hal_SPI_Master_Receive"
`??Hal_SPI_Master_Receive::?relay` SYMBOL "?relay", Hal_SPI_Master_Receive
Hal_SPI_Master_Send SYMBOL "Hal_SPI_Master_Send"
`??Hal_SPI_Master_Send::?relay` SYMBOL "?relay", Hal_SPI_Master_Send
Hal_UART_RxBufLen   SYMBOL "Hal_UART_RxBufLen"
`??Hal_UART_RxBufLen::?relay` SYMBOL "?relay", Hal_UART_RxBufLen
SPIDataGet          SYMBOL "SPIDataGet"
`??SPIDataGet::?relay` SYMBOL "?relay", SPIDataGet
SPIDataPut          SYMBOL "SPIDataPut"
`??SPIDataPut::?relay` SYMBOL "?relay", SPIDataPut
isBitSet            SYMBOL "isBitSet"
`??isBitSet::?relay` SYMBOL "?relay", isBitSet

// C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Components\hal\target\CC2530EB\hal_uart.c
//    1 /**************************************************************************************************
//    2   Filename:       _hal_uart.c
//    3   Revised:        $Date: 2009-06-12 09:16:43 -0700 (Fri, 12 Jun 2009) $
//    4   Revision:       $Revision: 20142 $
//    5 
//    6   Description: This file contains the interface to the H/W UART driver.
//    7 
//    8 
//    9   Copyright 2006-2009 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED �AS IS� WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 /*********************************************************************
//   41  * INCLUDES
//   42  */
//   43 
//   44 #include "hal_board_cfg.h"

        ASEGN SFR_AN:DATA:NOROOT,086H
// unsigned char volatile __sfr U0CSR
U0CSR:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,090H
// union <unnamed> volatile __sfr _A_P1
_A_P1:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,095H
// unsigned char volatile __sfr ST0
ST0:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0c1H
// unsigned char volatile __sfr U0DBUF
U0DBUF:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0c2H
// unsigned char volatile __sfr U0BAUD
U0BAUD:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0c5H
// unsigned char volatile __sfr U0GCR
U0GCR:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0c6H
// unsigned char volatile __sfr CLKCONCMD
CLKCONCMD:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0d1H
// unsigned char volatile __sfr DMAIRQ
DMAIRQ:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f1H
// unsigned char volatile __sfr PERCFG
PERCFG:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f3H
// unsigned char volatile __sfr P0SEL
P0SEL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f4H
// unsigned char volatile __sfr P1SEL
P1SEL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f8H
// union <unnamed> volatile __sfr _A_U1CSR
_A_U1CSR:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f9H
// unsigned char volatile __sfr U1DBUF
U1DBUF:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0faH
// unsigned char volatile __sfr U1BAUD
U1BAUD:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0fcH
// unsigned char volatile __sfr U1GCR
U1GCR:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0feH
// unsigned char volatile __sfr P1DIR
P1DIR:
        DATA8
        DS 1
//   45 #include "hal_defs.h"
//   46 #include "hal_types.h"
//   47 #include "hal_uart.h"
//   48 
//   49 /*********************************************************************
//   50  * MACROS
//   51  */
//   52 
//   53 /*********************************************************************
//   54  * TYPEDEFS
//   55  */
//   56 
//   57 /*********************************************************************
//   58  * CONSTANTS
//   59  */
//   60 
//   61 /*********************************************************************
//   62  * GLOBAL VARIABLES
//   63  */
//   64 
//   65 /*********************************************************************
//   66  * GLOBAL FUNCTIONS
//   67  */
//   68 
//   69 /*********************************************************************
//   70  * LOCAL VARIABLES
//   71  */
//   72 
//   73 /*********************************************************************
//   74  * LOCAL FUNCTIONS
//   75  */
//   76 
//   77 #if HAL_UART_DMA
//   78 #include "_hal_uart_dma.c"

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
// static uartDMACfg_t dmaCfg
dmaCfg:
        DS 526
        REQUIRE __INIT_XDATA_Z

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// __banked_func __xdata_reentrant void HalUARTIsrDMA(void)
HalUARTIsrDMA:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function HalUARTIsrDMA
        CODE
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        MOV     0xd1,#-0x11
        MOV     DPTR,#dmaCfg + 518
        MOVX    A,@DPTR
        XRL     A,#0x1
        LCALL   ?Subroutine0 & 0xFFFF
??CrossCallReturnLabel_0:
        CLR     A
        MOVX    @DPTR,A
        MOV     DPTR,#dmaCfg + 519
        INC     A
        MOVX    @DPTR,A
        MOV     A,0x95
        MOV     DPTR,#dmaCfg + 521
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x1
        MOVX    @DPTR,A
        MOV     DPTR,#dmaCfg + 518
        MOVX    A,@DPTR
        LCALL   ?Subroutine0 & 0xFFFF
??CrossCallReturnLabel_1:
        MOVX    A,@DPTR
        JZ      ??HalUARTIsrDMA_0
        MOV     DPTR,#dmaCfg + 523
        MOV     A,#0x1
        MOVX    @DPTR,A
??HalUARTIsrDMA_0:
        POP     DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP     DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP    ?BRET
          CFI EndBlock cfiBlock0
        REQUIRE DMAIRQ
        REQUIRE ST0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiCond1 Using cfiCommon0
          CFI Function HalUARTIsrDMA
          CFI Conditional ??CrossCallReturnLabel_0
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond2 Using cfiCommon0
          CFI (cfiCond2) Function HalUARTIsrDMA
          CFI (cfiCond2) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond2) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond2) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond2) CFA_SP SP+-7
          CFI Block cfiPicker3 Using cfiCommon1
          CFI (cfiPicker3) NoFunction
          CFI (cfiPicker3) Picker
        MOV     R0,A
        MOV     A,#(dmaCfg + 4) & 0xff
        ADD     A,R0
        MOV     DPL,A
        CLR     A
        ADDC    A,#((dmaCfg + 516) >> 8) & 0xff
        MOV     DPH,A
        RET
          CFI EndBlock cfiCond1
          CFI EndBlock cfiCond2
          CFI EndBlock cfiPicker3
//   79 #endif
//   80 #if HAL_UART_ISR
//   81 #include "_hal_uart_isr.c"
//   82 #endif
//   83 #if HAL_UART_USB
//   84 #include "_hal_uart_usb.c"
//   85 #endif
//   86 
//   87 /******************************************************************************
//   88  * @fn      HalUARTInit
//   89  *
//   90  * @brief   Initialize the UART
//   91  *
//   92  * @param   none
//   93  *
//   94  * @return  none
//   95  *****************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//   96 void HalUARTInit(void)
HalUARTInit:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function HalUARTInit
        CODE
//   97 {
        ; Saved register size: 0
        ; Auto size: 0
//   98   /*
//   99 #if HAL_UART_DMA
//  100   HalUARTInitDMA();
//  101 #endif
//  102 #if HAL_UART_ISR
//  103   HalUARTInitISR();
//  104 #endif
//  105 #if HAL_UART_USB
//  106   HalUARTInitUSB();
//  107 #endif
//  108   */
//  109 }
        LJMP    ?BRET
          CFI EndBlock cfiBlock4
//  110 
//  111 /******************************************************************************
//  112  * @fn      HalUARTOpen
//  113  *
//  114  * @brief   Open a port according tp the configuration specified by parameter.
//  115  *
//  116  * @param   port   - UART port
//  117  *          config - contains configuration information
//  118  *
//  119  * @return  Status of the function call
//  120  *****************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  121 uint8 HalUARTOpen(uint8 port, halUARTCfg_t *config)
HalUARTOpen:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function HalUARTOpen
        CODE
//  122 {/*
        ; Saved register size: 0
        ; Auto size: 0
//  123   (void)port;
//  124   (void)config;
//  125 
//  126 #if (HAL_UART_DMA == 1)
//  127   if (port == HAL_UART_PORT_0)  HalUARTOpenDMA(config);
//  128 #endif
//  129 #if (HAL_UART_DMA == 2)
//  130   if (port == HAL_UART_PORT_1)  HalUARTOpenDMA(config);
//  131 #endif
//  132 #if (HAL_UART_ISR == 1)
//  133   if (port == HAL_UART_PORT_0)  HalUARTOpenISR(config);
//  134 #endif
//  135 #if (HAL_UART_ISR == 2)
//  136   if (port == HAL_UART_PORT_1)  HalUARTOpenISR(config);
//  137 #endif
//  138 #if (HAL_UART_USB)
//  139   HalUARTOpenUSB(config);
//  140 #endif
//  141   */
//  142   return HAL_UART_SUCCESS;
        MOV     R1,#0x0
        LJMP    ?BRET
//  143 }
          CFI EndBlock cfiBlock5
//  144 
//  145 /*****************************************************************************
//  146  * @fn      HalUARTRead
//  147  *
//  148  * @brief   Read a buffer from the UART
//  149  *
//  150  * @param   port - USART module designation
//  151  *          buf  - valid data buffer at least 'len' bytes in size
//  152  *          len  - max length number of bytes to copy to 'buf'
//  153  *
//  154  * @return  length of buffer that was read
//  155  *****************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  156 uint16 HalUARTRead(uint8 port, uint8 *buf, uint16 len)
HalUARTRead:
          CFI Block cfiBlock6 Using cfiCommon0
          CFI Function HalUARTRead
        CODE
//  157 {
        ; Saved register size: 0
        ; Auto size: 0
//  158   (void)port;
//  159   (void)buf;
//  160   (void)len;
//  161 /*
//  162 #if (HAL_UART_DMA == 1)
//  163   if (port == HAL_UART_PORT_0)  return HalUARTReadDMA(buf, len);
//  164 #endif
//  165 #if (HAL_UART_DMA == 2)
//  166   if (port == HAL_UART_PORT_1)  return HalUARTReadDMA(buf, len);
//  167 #endif
//  168 #if (HAL_UART_ISR == 1)
//  169   if (port == HAL_UART_PORT_0)  return HalUARTReadISR(buf, len);
//  170 #endif
//  171 #if (HAL_UART_ISR == 2)
//  172   if (port == HAL_UART_PORT_1)  return HalUARTReadISR(buf, len);
//  173 #endif
//  174 
//  175 #if HAL_UART_USB
//  176   return HalUARTRx(buf, len);
//  177 #else
//  178   return 0;
//  179 #endif
//  180 */
//  181 }
        LJMP    ?BRET
          CFI EndBlock cfiBlock6
//  182 
//  183 /******************************************************************************
//  184  * @fn      HalUARTWrite
//  185  *
//  186  * @brief   Write a buffer to the UART.
//  187  *
//  188  * @param   port - UART port
//  189  *          buf  - pointer to the buffer that will be written, not freed
//  190  *          len  - length of
//  191  *
//  192  * @return  length of the buffer that was sent
//  193  *****************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  194 uint16 HalUARTWrite(uint8 port, uint8 *buf, uint16 len)
HalUARTWrite:
          CFI Block cfiBlock7 Using cfiCommon0
          CFI Function HalUARTWrite
        CODE
//  195 {
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  196   (void)port;
//  197   (void)buf;
//  198   (void)len;
//  199   uint8 i;
//  200 
//  201   for(i=0;i<len;i++)
        MOV     R6,#0x0
        SJMP    ??HalUARTWrite_0
//  202   {
//  203    U0DBUF = *(buf + i);
??HalUARTWrite_1:
        MOV     A,R6
        MOV     R0,A
        MOV     A,R2
        ADD     A,R0
        MOV     DPL,A
        CLR     A
        ADDC    A,R3
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     0xc1,A
//  204 
//  205     while((U0CSR & 0x01) == 0x01)
??HalUARTWrite_2:
        MOV     A,0x86
        MOV     C,0xE0 /* A   */.0
        JC      ??HalUARTWrite_2
//  206     {
//  207     }
//  208   }
        INC     R6
??HalUARTWrite_0:
        MOV     A,R6
        CLR     C
        SUBB    A,R4
        CLR     A
        SUBB    A,R5
        JC      ??HalUARTWrite_1
//  209   /*
//  210 #if (HAL_UART_DMA == 1)
//  211   if (port == HAL_UART_PORT_0)  return HalUARTWriteDMA(buf, len);
//  212 #endif
//  213 #if (HAL_UART_DMA == 2)
//  214   if (port == HAL_UART_PORT_1)  return HalUARTWriteDMA(buf, len);
//  215 #endif
//  216 #if (HAL_UART_ISR == 1)
//  217   if (port == HAL_UART_PORT_0)  return HalUARTWriteISR(buf, len);
//  218 #endif
//  219 #if (HAL_UART_ISR == 2)
//  220   if (port == HAL_UART_PORT_1)  return HalUARTWriteISR(buf, len);
//  221 #endif
//  222 
//  223 #if HAL_UART_USB
//  224   HalUARTTx(buf, len);
//  225   return len;
//  226 #else
//  227   return 0;
//  228 #endif
//  229 */
//  230 }
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock7
        REQUIRE U0DBUF
        REQUIRE U0CSR
//  231 
//  232 /******************************************************************************
//  233  * @fn      HalUARTSuspend
//  234  *
//  235  * @brief   Suspend UART hardware before entering PM mode 1, 2 or 3.
//  236  *
//  237  * @param   None
//  238  *
//  239  * @return  None
//  240  *****************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  241 void HalUARTSuspend( void )
HalUARTSuspend:
          CFI Block cfiBlock8 Using cfiCommon0
          CFI Function HalUARTSuspend
        CODE
//  242 {
        ; Saved register size: 0
        ; Auto size: 0
//  243 
//  244   /*
//  245 #if HAL_UART_DMA
//  246   HalUARTSuspendDMA();
//  247 #endif
//  248 #if HAL_UART_ISR
//  249   HalUARTSuspendISR();
//  250 #endif
//  251 */
//  252 }
        LJMP    ?BRET
          CFI EndBlock cfiBlock8
//  253 
//  254 /******************************************************************************
//  255  * @fn      HalUARTResume
//  256  *
//  257  * @brief   Resume UART hardware after exiting PM mode 1, 2 or 3.
//  258  *
//  259  * @param   None
//  260  *
//  261  * @return  None
//  262  *****************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  263 void HalUARTResume( void )
HalUARTResume:
          CFI Block cfiBlock9 Using cfiCommon0
          CFI Function HalUARTResume
        CODE
//  264 {
        ; Saved register size: 0
        ; Auto size: 0
//  265 
//  266   /*
//  267 #if HAL_UART_DMA
//  268   HalUARTResumeDMA();
//  269 #endif
//  270 #if HAL_UART_ISR
//  271   HalUARTResumeISR();
//  272 #endif
//  273   */
//  274 }
        LJMP    ?BRET
          CFI EndBlock cfiBlock9
//  275 
//  276 /***************************************************************************************************
//  277  * @fn      HalUARTPoll
//  278  *
//  279  * @brief   Poll the UART.
//  280  *
//  281  * @param   none
//  282  *
//  283  * @return  none
//  284  *****************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  285 void HalUARTPoll(void)
HalUARTPoll:
          CFI Block cfiBlock10 Using cfiCommon0
          CFI Function HalUARTPoll
        CODE
//  286 {
        ; Saved register size: 0
        ; Auto size: 0
//  287   /*
//  288 #if HAL_UART_DMA
//  289   HalUARTPollDMA();
//  290 #endif
//  291 #if HAL_UART_ISR
//  292   HalUARTPollISR();
//  293 #endif
//  294 #if HAL_UART_USB
//  295   HalUARTPollUSB();
//  296 #endif
//  297   */
//  298 }
        LJMP    ?BRET
          CFI EndBlock cfiBlock10
//  299 
//  300 /**************************************************************************************************
//  301  * @fn      Hal_UART_RxBufLen()
//  302  *
//  303  * @brief   Calculate Rx Buffer length - the number of bytes in the buffer.
//  304  *
//  305  * @param   port - UART port
//  306  *
//  307  * @return  length of current Rx Buffer
//  308  **************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  309 uint16 Hal_UART_RxBufLen( uint8 port )
Hal_UART_RxBufLen:
          CFI Block cfiBlock11 Using cfiCommon0
          CFI Function Hal_UART_RxBufLen
        CODE
//  310 {
        ; Saved register size: 0
        ; Auto size: 0
//  311   (void)port;
//  312 
//  313   /*
//  314 #if (HAL_UART_DMA == 1)
//  315   if (port == HAL_UART_PORT_0)  return HalUARTRxAvailDMA();
//  316 #endif
//  317 #if (HAL_UART_DMA == 2)
//  318   if (port == HAL_UART_PORT_1)  return HalUARTRxAvailDMA();
//  319 #endif
//  320 #if (HAL_UART_ISR == 1)
//  321   if (port == HAL_UART_PORT_0)  return HalUARTRxAvailISR();
//  322 #endif
//  323 #if (HAL_UART_ISR == 2)
//  324   if (port == HAL_UART_PORT_1)  return HalUARTRxAvailISR();
//  325 #endif
//  326 #if HAL_UART_USB
//  327   return HalUARTRxAvailUSB();
//  328 #else
//  329   return 0;
//  330 #endif
//  331   */
//  332 
//  333   return 0;
        MOV     R2,#0x0
        MOV     R3,#0x0
        LJMP    ?BRET
//  334 }
          CFI EndBlock cfiBlock11
//  335 /**************************************************************************************************
//  336  * @fn      Hal_SPI_Master_Init()
//  337  *
//  338  * @brief   Initialize SPI master
//  339  *
//  340  * @param   None
//  341  *
//  342  * @return  None
//  343  **************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  344 void Hal_SPI_Master_Init()
Hal_SPI_Master_Init:
          CFI Block cfiBlock12 Using cfiCommon0
          CFI Function Hal_SPI_Master_Init
        CODE
//  345 {
        ; Saved register size: 0
        ; Auto size: 0
//  346      //Podesavanje clocka na 32MHz
//  347      CLKCONCMD =0x00;
        MOV     0xc6,#0x0
//  348 
//  349      //Podesavanje primarnih funkcija modula
//  350      PERCFG = (0x02);
        MOV     0xf1,#0x2
//  351      //Podesavanje osnovne ili periferne funkcije odredjenog pina(0-osnovna ; 1-periferna)
//  352      P1SEL |= 0xF0;
        ORL     0xf4,#0xf0
//  353 
//  354      //Postavja baud rate na 9600
//  355      U1BAUD = 0x3A;
        MOV     0xfa,#0x3a
//  356 
//  357      //Postavljanje SPI moda i da bude master
//  358      U1CSR &= 0x1F;
        ANL     0xf8,#0x1f
//  359      //Podesavanje baud exponenta i CPOL=CPHA=0 (LSB)
//  360      U1GCR = 0x28;
        MOV     0xfc,#0x28
//  361 
//  362      P1DIR |= 0x08;
        ORL     0xfe,#0x8
//  363     
//  364     
//  365     P0SEL = 0x0C;                                                               //Podesavanje osnovne ili periferne funkcije odredjenog pina(0-osnovna ; 1-periferna)
        MOV     0xf3,#0xc
//  366     
//  367   
//  368     U0CSR = 0xC0;                                                               //Prvi bit 1 je UART mode
        MOV     0x86,#-0x40
//  369     U0GCR = 0x08;                                                               //Poslednjih 5 bita odredjuje baud rate exponent vrijednost
        MOV     0xc5,#0x8
//  370  
//  371     
//  372     U0BAUD = 0x3A;
        MOV     0xc2,#0x3a
//  373 
//  374 }
        LJMP    ?BRET
          CFI EndBlock cfiBlock12
        REQUIRE CLKCONCMD
        REQUIRE PERCFG
        REQUIRE P1SEL
        REQUIRE U1BAUD
        REQUIRE _A_U1CSR
        REQUIRE U1GCR
        REQUIRE P1DIR
        REQUIRE P0SEL
        REQUIRE U0CSR
        REQUIRE U0GCR
        REQUIRE U0BAUD
//  375 /**************************************************************************************************
//  376  * @fn      Hal_SPI_Master_Send()
//  377  *
//  378  * @brief   Send data over SPI.
//  379  *
//  380  * @param   data - data to sand
//  381  *
//  382  * @return  None
//  383  **************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  384 void Hal_SPI_Master_Send(uint8 data)
Hal_SPI_Master_Send:
          CFI Block cfiBlock13 Using cfiCommon0
          CFI Function Hal_SPI_Master_Send
        CODE
//  385 {
        ; Saved register size: 0
        ; Auto size: 0
//  386     uint8 i;
//  387 
//  388     P1_2 = 0;
        CLR     0x90.2
//  389 
//  390     for(i=0;i<1000;i++)
//  391     {
//  392       asm("NOP");
??Hal_SPI_Master_Send_0:
        NOP
//  393     }
        SJMP    ??Hal_SPI_Master_Send_0
          CFI EndBlock cfiBlock13
        REQUIRE _A_P1
        REQUIRE U0CSR
//  394 
//  395     SPIDataPut(data);
//  396     while(!isBitSet(U0CSR,1))
//  397     {
//  398     }
//  399 
//  400 
//  401     for(i=0;i<1000;i++)
//  402     {
//  403       asm("NOP");
//  404     }
//  405     P1_2 = 1;
//  406 
//  407 
//  408 }
//  409 /**************************************************************************************************
//  410  * @fn      Hal_SPI_Master_Receive()
//  411  *
//  412  * @brief   Receive data from SPI.
//  413  *
//  414  * @param   None
//  415  *
//  416  * @return  Received data
//  417  **************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  418 uint8 Hal_SPI_Master_Receive()
Hal_SPI_Master_Receive:
          CFI Block cfiBlock14 Using cfiCommon0
          CFI Function Hal_SPI_Master_Receive
        CODE
//  419 {
        ; Saved register size: 0
        ; Auto size: 0
//  420     char data;
//  421 
//  422     P1_2 = 0;
        CLR     0x90.2
//  423 
//  424 
//  425     data = SPIDataGet();
        MOV     R1,0xf9+0x0
??Hal_SPI_Master_Receive_0:
        MOV     C,0xf8.0
        JC      ??Hal_SPI_Master_Receive_0
//  426 
//  427 
//  428 
//  429     P1_2 = 1;
        SETB    0x90.2
//  430 
//  431 
//  432     return data;
        LJMP    ?BRET
          CFI EndBlock cfiBlock14
        REQUIRE _A_P1
        REQUIRE U1DBUF
        REQUIRE _A_U1CSR
//  433 
//  434 
//  435 }
//  436 
//  437 /**************************************************************************************************
//  438  * @fn      SPIDataPut()
//  439  *
//  440  * @brief   Send data over SPI.
//  441  *
//  442  * @param   data - data to sand
//  443  *
//  444  * @return  None
//  445  **************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  446 void SPIDataPut(uint8 data)
SPIDataPut:
          CFI Block cfiBlock15 Using cfiCommon0
          CFI Function SPIDataPut
        CODE
//  447 {
        ; Saved register size: 0
        ; Auto size: 0
//  448 
//  449     U1DBUF =  data;
        MOV     0xf9,R1
//  450     while((U1CSR & 0x01) == 0x01)
??SPIDataPut_0:
        MOV     C,0xf8.0
        JC      ??SPIDataPut_0
//  451     {
//  452     }
//  453     
//  454     
//  455 
//  456 }
        LJMP    ?BRET
          CFI EndBlock cfiBlock15
        REQUIRE U1DBUF
        REQUIRE _A_U1CSR
//  457 /**************************************************************************************************
//  458  * @fn      SPIDataGet()
//  459  *
//  460  * @brief   Receive data from SPI.
//  461  *
//  462  * @param   None
//  463  *
//  464  * @return  Received data
//  465  **************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  466 uint8 SPIDataGet()
SPIDataGet:
          CFI Block cfiBlock16 Using cfiCommon0
          CFI Function SPIDataGet
        CODE
//  467 {
        ; Saved register size: 0
        ; Auto size: 0
//  468     uint8 data;
//  469 
//  470     data = U1DBUF;
        MOV     R1,0xf9+0x0
//  471     while((U1CSR & 0x01) == 0x01)
??SPIDataGet_0:
        MOV     C,0xf8.0
        JC      ??SPIDataGet_0
//  472     {
//  473     }
//  474 
//  475     return data;
        LJMP    ?BRET
          CFI EndBlock cfiBlock16
        REQUIRE U1DBUF
        REQUIRE _A_U1CSR
//  476 
//  477 }
//  478 /**************************************************************************************************
//  479  * @fn      isBitSet()
//  480  *
//  481  * @brief   Chek is bit set in register
//  482  *
//  483  * @param   byte - data from register, position - position on register
//  484  *
//  485  * @return  '1' for bit is set, '0' if bit is cleared
//  486  **************************************************************************************************/
//  487 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  488 char isBitSet(char byte, int position)
isBitSet:
          CFI Block cfiBlock17 Using cfiCommon0
          CFI Function isBitSet
        CODE
//  489 {
        REQUIRE ?V0
        REQUIRE ?V1
        PUSH    ?V0
          CFI V0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    ?V1
          CFI V1 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        MOV     A,R1
        MOV     R4,A
//  490 
//  491     return ((byte >> (position) ) & 1);
        MOV     ?V0,R4
        MOV     ?V1,#0x0
        MOV     A,R2
        MOV     R0,#?V0
        LCALL   ?SS_SHR
        MOV     A,?V0
        ANL     A,#0x1
        MOV     R1,A
        POP     ?V1
          CFI V1 SameValue
          CFI CFA_SP SP+-4
        POP     ?V0
          CFI V0 SameValue
          CFI CFA_SP SP+-3
        LJMP    ?BRET
//  492 
//  493 
//  494 }
          CFI EndBlock cfiBlock17

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??HalUARTIsrDMA::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    HalUARTIsrDMA

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??HalUARTInit::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    HalUARTInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??HalUARTOpen::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    HalUARTOpen

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??HalUARTRead::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    HalUARTRead

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??HalUARTWrite::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    HalUARTWrite

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??HalUARTSuspend::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    HalUARTSuspend

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??HalUARTResume::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    HalUARTResume

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??HalUARTPoll::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    HalUARTPoll

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??Hal_UART_RxBufLen::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    Hal_UART_RxBufLen

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??Hal_SPI_Master_Init::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    Hal_SPI_Master_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??Hal_SPI_Master_Send::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    Hal_SPI_Master_Send

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??Hal_SPI_Master_Receive::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    Hal_SPI_Master_Receive

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??SPIDataPut::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    SPIDataPut

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??SPIDataGet::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    SPIDataGet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??isBitSet::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    isBitSet

        END
//  495 /******************************************************************************
//  496 ******************************************************************************/
// 
// 237 bytes in segment BANKED_CODE
//  90 bytes in segment BANK_RELAYS
//  16 bytes in segment SFR_AN
// 526 bytes in segment XDATA_Z
// 
//  90 bytes of CODE     memory
//   0 bytes of DATA     memory (+ 16 bytes shared)
// 237 bytes of HUGECODE memory
// 526 bytes of XDATA    memory
//
//Errors: none
//Warnings: 4
