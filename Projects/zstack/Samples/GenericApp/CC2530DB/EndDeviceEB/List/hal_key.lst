###############################################################################
#
# IAR C/C++ Compiler V9.30.3.3983 for 8051                06/Apr/2017  12:17:03
# Copyright 2004-2016 IAR Systems AB.
# Evaluation license - IAR Embedded Workbench for 8051, Evaluation version 9.30
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Components\hal\target\CC2530EB\hal_key.c
#    Command line       =  
#        -f
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0x0422
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Components\hal\target\CC2530EB\hal_key.c
#        -D NWK_AUTO_POLL -D ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC
#        -D LCD_SUPPORTED=DEBUG -D xPOWER_SAVING -lC
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\EndDeviceEB\List
#        -lA
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\EndDeviceEB\List
#        --diag_suppress Pe001,Pa010 -o
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\EndDeviceEB\Obj
#        -e --no_code_motion --debug --core=plain --dptr=16,1
#        --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 16 -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\Source\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -Ohz --require_prototypes
#    List file          =  
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\EndDeviceEB\List\hal_key.lst
#    Object file        =  
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\EndDeviceEB\Obj\hal_key.r51
#
###############################################################################

C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Components\hal\target\CC2530EB\hal_key.c
      1          /**************************************************************************************************
      2            Filename:       hal_key.c
      3            Revised:        $Date: 2010-09-15 19:02:45 -0700 (Wed, 15 Sep 2010) $
      4            Revision:       $Revision: 23815 $
      5          
      6            Description:    This file contains the interface to the HAL KEY Service.
      7          
      8          
      9            Copyright 2006-2010 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          /*********************************************************************
     40           NOTE: If polling is used, the hal_driver task schedules the KeyRead()
     41                 to occur every 100ms.  This should be long enough to naturally
     42                 debounce the keys.  The KeyRead() function remembers the key
     43                 state of the previous poll and will only return a non-zero
     44                 value if the key state changes.
     45          
     46           NOTE: If interrupts are used, the KeyRead() function is scheduled
     47                 25ms after the interrupt occurs by the ISR.  This delay is used
     48                 for key debouncing.  The ISR disables any further Key interrupt
     49                 until KeyRead() is executed.  KeyRead() will re-enable Key
     50                 interrupts after executing.  Unlike polling, when interrupts
     51                 are enabled, the previous key state is not remembered.  This
     52                 means that KeyRead() will return the current state of the keys
     53                 (not a change in state of the keys).
     54          
     55           NOTE: If interrupts are used, the KeyRead() fucntion is scheduled by
     56                 the ISR.  Therefore, the joystick movements will only be detected
     57                 during a pushbutton interrupt caused by S1 or the center joystick
     58                 pushbutton.
     59          
     60           NOTE: When a switch like S1 is pushed, the S1 signal goes from a normally
     61                 high state to a low state.  This transition is typically clean.  The
     62                 duration of the low state is around 200ms.  When the signal returns
     63                 to the high state, there is a high likelihood of signal bounce, which
     64                 causes a unwanted interrupts.  Normally, we would set the interrupt
     65                 edge to falling edge to generate an interrupt when S1 is pushed, but
     66                 because of the signal bounce, it is better to set the edge to rising
     67                 edge to generate an interrupt when S1 is released.  The debounce logic
     68                 can then filter out the signal bounce.  The result is that we typically
     69                 get only 1 interrupt per button push.  This mechanism is not totally
     70                 foolproof because occasionally, signal bound occurs during the falling
     71                 edge as well.  A similar mechanism is used to handle the joystick
     72                 pushbutton on the DB.  For the EB, we do not have independent control
     73                 of the interrupt edge for the S1 and center joystick pushbutton.  As
     74                 a result, only one or the other pushbuttons work reasonably well with
     75                 interrupts.  The default is the make the S1 switch on the EB work more
     76                 reliably.
     77          
     78          *********************************************************************/
     79          
     80          /**************************************************************************************************
     81           *                                            INCLUDES
     82           **************************************************************************************************/
     83          #include "hal_mcu.h"

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x89
   \   unsigned char volatile __sfr P0IFG
   \                     P0IFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x8b
   \   unsigned char volatile __sfr P2IFG
   \                     P2IFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x8c
   \   unsigned char volatile __sfr PICTL
   \                     PICTL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9a
   \   unsigned char volatile __sfr IEN2
   \                     IEN2:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa0
   \   union <unnamed> volatile __sfr _A_P2
   \                     _A_P2:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xab
   \   unsigned char volatile __sfr P0IEN
   \                     P0IEN:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xac
   \   unsigned char volatile __sfr P2IEN
   \                     P2IEN:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xb8
   \   union <unnamed> volatile __sfr _A_IEN1
   \                     _A_IEN1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc0
   \   union <unnamed> volatile __sfr _A_IRCON
   \                     _A_IRCON:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xe8
   \   union <unnamed> volatile __sfr _A_IRCON2
   \                     _A_IRCON2:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf3
   \   unsigned char volatile __sfr P0SEL
   \                     P0SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf5
   \   unsigned char volatile __sfr P2SEL
   \                     P2SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfd
   \   unsigned char volatile __sfr P0DIR
   \                     P0DIR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xff
   \   unsigned char volatile __sfr P2DIR
   \                     P2DIR:
   \   000000                DS 1
     84          #include "hal_defs.h"
     85          #include "hal_types.h"
     86          #include "hal_board.h"
     87          #include "hal_drivers.h"
     88          #include "hal_adc.h"
     89          #include "hal_key.h"
     90          #include "osal.h"
     91          #include "ioCC2530.h"
     92          
     93          #if (defined HAL_KEY) && (HAL_KEY == TRUE)
     94          
     95          /**************************************************************************************************
     96           *                                              MACROS
     97           **************************************************************************************************/
     98          
     99          /**************************************************************************************************
    100           *                                              EXTERN VARIABLES
    101           **************************************************************************************************/
    102          
    103          extern uint8 MagneticSwitchFlag;
    104          extern uint8 MotionSensorFlag;
    105          
    106             
    107          /**************************************************************************************************
    108           *                                            CONSTANTS
    109           **************************************************************************************************/
    110          #define HAL_KEY_RISING_EDGE   0
    111          #define HAL_KEY_FALLING_EDGE  1
    112          
    113          #define HAL_KEY_DEBOUNCE_VALUE  25
    114          
    115          /* CPU port interrupt */
    116          #define HAL_KEY_CPU_PORT_0_IF P0IF
    117          #define HAL_KEY_CPU_PORT_2_IF P2IF
    118          
    119          /* SW_6 is at P0.1 */
    120          #define HAL_KEY_SW_6_PORT   P0
    121          #define HAL_KEY_SW_6_BIT    BV(1)
    122          #define HAL_KEY_SW_6_SEL    P0SEL
    123          #define HAL_KEY_SW_6_DIR    P0DIR
    124          
    125          
    126          
    127          /* edge interrupt */
    128          #define HAL_KEY_SW_6_EDGEBIT  BV(0)
    129          #define HAL_KEY_SW_6_EDGE     HAL_KEY_RISING_EDGE
    130          
    131          
    132          /* SW_6 interrupts */
    133          #define HAL_KEY_SW_6_IEN      IEN1  /* CPU interrupt mask register */
    134          #define HAL_KEY_SW_6_IENBIT   BV(5) /* Mask bit for all of Port_0 */
    135          #define HAL_KEY_SW_6_ICTL     P0IEN /* Port Interrupt Control register */
    136          #define HAL_KEY_SW_6_ICTLBIT  BV(1) /* P0IEN - P0.1 enable/disable bit */
    137          #define HAL_KEY_SW_6_PXIFG    P0IFG /* Interrupt flag at source */
    138          
    139          /* Joy stick move at P2.0 */
    140          #define HAL_KEY_JOY_MOVE_PORT   P2
    141          #define HAL_KEY_JOY_MOVE_BIT    BV(0)
    142          #define HAL_KEY_JOY_MOVE_SEL    P2SEL
    143          #define HAL_KEY_JOY_MOVE_DIR    P2DIR
    144          
    145          /* edge interrupt */
    146          #define HAL_KEY_JOY_MOVE_EDGEBIT  BV(3)
    147          #define HAL_KEY_JOY_MOVE_EDGE     HAL_KEY_RISING_EDGE
    148          
    149          /* Joy move interrupts */
    150          #define HAL_KEY_JOY_MOVE_IEN      IEN2  /* CPU interrupt mask register */
    151          #define HAL_KEY_JOY_MOVE_IENBIT   BV(1) /* Mask bit for all of Port_2 */
    152          #define HAL_KEY_JOY_MOVE_ICTL     P2IEN /* Port Interrupt Control register */
    153          #define HAL_KEY_JOY_MOVE_ICTLBIT  BV(0) /* P2IENL - P2.0<->P2.3 enable/disable bit */
    154          #define HAL_KEY_JOY_MOVE_PXIFG    P2IFG /* Interrupt flag at source */
    155          
    156          #define HAL_KEY_JOY_CHN   HAL_ADC_CHANNEL_6
    157          
    158          
    159          /**************************************************************************************************
    160           *                                            TYPEDEFS
    161           **************************************************************************************************/
    162          
    163          
    164          /**************************************************************************************************
    165           *                                        GLOBAL VARIABLES
    166           **************************************************************************************************/

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    167          static uint8 halKeySavedKeys;     /* used to store previous key state in polling mode */
   \                     halKeySavedKeys:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    168          static halKeyCBack_t pHalKeyProcessFunction;
   \                     pHalKeyProcessFunction:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    169          static uint8 HalKeyConfigured;
   \                     HalKeyConfigured:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    170          bool Hal_KeyIntEnable;            /* interrupt enable/disable flag */
   \                     Hal_KeyIntEnable:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    171          
    172          /**************************************************************************************************
    173           *                                        FUNCTIONS - Local
    174           **************************************************************************************************/
    175          void halProcessKeyInterrupt(void);
    176          uint8 halGetJoyKeyInput(void);
    177          
    178          void halProcessKeyInterrupt(void);
    179          void halMagneticInterrupt(void); 
    180          
    181          extern void HalLcdWriteString ( char *, uint8 );
    182          
    183          
    184          /**************************************************************************************************
    185           *                                        FUNCTIONS - API
    186           **************************************************************************************************/
    187          
    188          
    189          /**************************************************************************************************
    190           * @fn      HalKeyInit
    191           *
    192           * @brief   Initilize Key Service
    193           *
    194           * @param   none
    195           *
    196           * @return  None
    197           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    198          void HalKeyInit( void )
   \                     HalKeyInit:
    199          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    200            /* Initialize previous key to 0 */
    201            halKeySavedKeys = 0;
   \   000004   90....       MOV     DPTR,#halKeySavedKeys
   \   000007   E4           CLR     A
   \   000008   F0           MOVX    @DPTR,A
    202          
    203            HAL_KEY_SW_6_SEL &= ~(HAL_KEY_SW_6_BIT);    /* Set pin function to GPIO */
   \   000009   53F3FD       ANL     0xf3,#0xfd
    204            HAL_KEY_SW_6_DIR &= ~(HAL_KEY_SW_6_BIT);    /* Set pin direction to Input */
   \   00000C   53FDFD       ANL     0xfd,#0xfd
    205          
    206            HAL_KEY_JOY_MOVE_SEL &= ~(HAL_KEY_JOY_MOVE_BIT); /* Set pin function to GPIO */
   \   00000F   53F5FE       ANL     0xf5,#0xfe
    207            HAL_KEY_JOY_MOVE_DIR &= ~(HAL_KEY_JOY_MOVE_BIT); /* Set pin direction to Input */
   \   000012   53FFFE       ANL     0xff,#0xfe
    208          
    209          
    210            /* Initialize callback function */
    211            pHalKeyProcessFunction  = NULL;
   \   000015   90....       MOV     DPTR,#pHalKeyProcessFunction
   \   000018   F0           MOVX    @DPTR,A
   \   000019   A3           INC     DPTR
   \   00001A   F0           MOVX    @DPTR,A
    212          
    213            /* Start with key is not configured */
    214            HalKeyConfigured = FALSE;
   \   00001B   90....       MOV     DPTR,#HalKeyConfigured
   \   00001E   F0           MOVX    @DPTR,A
    215          }
   \   00001F   02....       LJMP    ?Subroutine0 & 0xFFFF
   \   000022                REQUIRE P0SEL
   \   000022                REQUIRE P0DIR
   \   000022                REQUIRE P2SEL
   \   000022                REQUIRE P2DIR

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    216          
    217          
    218          /**************************************************************************************************
    219           * @fn      HalKeyConfig
    220           *
    221           * @brief   Configure the Key serivce
    222           *
    223           * @param   interruptEnable - TRUE/FALSE, enable/disable interrupt
    224           *          cback - pointer to the CallBack function
    225           *
    226           * @return  None
    227           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    228          void HalKeyConfig (bool interruptEnable, halKeyCBack_t cback)
   \                     HalKeyConfig:
    229          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    230            /* Enable/Disable Interrupt or */
    231            Hal_KeyIntEnable = interruptEnable;
   \   000006   90....       MOV     DPTR,#Hal_KeyIntEnable
   \   000009   F0           MOVX    @DPTR,A
    232          
    233            /* Register the callback fucntion */
    234            pHalKeyProcessFunction = cback;
   \   00000A   90....       MOV     DPTR,#pHalKeyProcessFunction
   \   00000D   EA           MOV     A,R2
   \   00000E   F0           MOVX    @DPTR,A
   \   00000F   A3           INC     DPTR
   \   000010   EB           MOV     A,R3
   \   000011   F0           MOVX    @DPTR,A
    235          
    236            /* Determine if interrupt is enable or not */
    237            if (Hal_KeyIntEnable)
   \   000012   90....       MOV     DPTR,#Hal_KeyIntEnable
   \   000015   E0           MOVX    A,@DPTR
   \   000016   602D         JZ      ??HalKeyConfig_0
    238            {
    239              /* Rising/Falling edge configuratinn */
    240          
    241              PICTL &= ~(HAL_KEY_SW_6_EDGEBIT);    /* Clear the edge bit */
   \   000018   538CFE       ANL     0x8c,#0xfe
    242              /* For falling edge, the bit must be set. */
    243            #if (HAL_KEY_SW_6_EDGE == HAL_KEY_FALLING_EDGE)
    244              PICTL |= HAL_KEY_SW_6_EDGEBIT;
    245            #endif
    246          
    247          
    248              /* Interrupt configuration:
    249               * - Enable interrupt generation at the port
    250               * - Enable CPU interrupt
    251               * - Clear any pending interrupt
    252               */
    253              HAL_KEY_SW_6_ICTL |= HAL_KEY_SW_6_ICTLBIT;
   \   00001B   43AB02       ORL     0xab,#0x2
    254              HAL_KEY_SW_6_IEN |= HAL_KEY_SW_6_IENBIT;
   \   00001E   D2BD         SETB    0xb8.5
    255              HAL_KEY_SW_6_PXIFG = ~(HAL_KEY_SW_6_BIT);
   \   000020   7589FD       MOV     0x89,#-0x3
    256          
    257          
    258          
    259              /* Rising/Falling edge configuratinn */
    260          
    261              HAL_KEY_JOY_MOVE_ICTL &= ~(HAL_KEY_JOY_MOVE_EDGEBIT);    /* Clear the edge bit */
   \   000023   53ACF7       ANL     0xac,#0xf7
    262              /* For falling edge, the bit must be set. */
    263            #if (HAL_KEY_JOY_MOVE_EDGE == HAL_KEY_FALLING_EDGE)
    264              HAL_KEY_JOY_MOVE_ICTL |= HAL_KEY_JOY_MOVE_EDGEBIT;
    265            #endif
    266          
    267          
    268              /* Interrupt configuration:
    269               * - Enable interrupt generation at the port
    270               * - Enable CPU interrupt
    271               * - Clear any pending interrupt
    272               */
    273              HAL_KEY_JOY_MOVE_ICTL |= HAL_KEY_JOY_MOVE_ICTLBIT;
   \   000026   43AC01       ORL     0xac,#0x1
    274              HAL_KEY_JOY_MOVE_IEN |= HAL_KEY_JOY_MOVE_IENBIT;
   \   000029   439A02       ORL     0x9a,#0x2
    275              HAL_KEY_JOY_MOVE_PXIFG = ~(HAL_KEY_JOY_MOVE_BIT);
   \   00002C   758BFE       MOV     0x8b,#-0x2
    276          
    277          
    278              /* Do this only after the hal_key is configured - to work with sleep stuff */
    279              if (HalKeyConfigured == TRUE)
   \   00002F   90....       MOV     DPTR,#HalKeyConfigured
   \   000032   E0           MOVX    A,@DPTR
   \   000033   6401         XRL     A,#0x1
   \   000035   701F         JNZ     ??HalKeyConfig_1
    280              {
    281                osal_stop_timerEx(Hal_TaskID, HAL_KEY_EVENT);  /* Cancel polling if active */
   \   000037                ; Setup parameters for call to function osal_stop_timerEx
   \   000037   7A10         MOV     R2,#0x10
   \   000039   7B00         MOV     R3,#0x0
   \   00003B   90....       MOV     DPTR,#Hal_TaskID
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   F9           MOV     R1,A
   \   000040   12....       LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   \   000043   8011         SJMP    ??HalKeyConfig_1
    282              }
    283            }
    284            else    /* Interrupts NOT enabled */
    285            {
    286              HAL_KEY_SW_6_ICTL &= ~(HAL_KEY_SW_6_ICTLBIT); /* don't generate interrupt */
   \                     ??HalKeyConfig_0:
   \   000045   53ABFD       ANL     0xab,#0xfd
    287              HAL_KEY_SW_6_IEN &= ~(HAL_KEY_SW_6_IENBIT);   /* Clear interrupt enable bit */
   \   000048   C2BD         CLR     0xb8.5
    288          
    289              osal_set_event(Hal_TaskID, HAL_KEY_EVENT);
   \   00004A                ; Setup parameters for call to function osal_set_event
   \   00004A   7A10         MOV     R2,#0x10
   \   00004C   7B00         MOV     R3,#0x0
   \   00004E   90....       MOV     DPTR,#Hal_TaskID
   \   000051   E0           MOVX    A,@DPTR
   \   000052   F9           MOV     R1,A
   \   000053   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
    290            }
    291          
    292            /* Key now is configured */
    293            HalKeyConfigured = TRUE;
   \                     ??HalKeyConfig_1:
   \   000056   90....       MOV     DPTR,#HalKeyConfigured
   \   000059   7401         MOV     A,#0x1
   \   00005B   F0           MOVX    @DPTR,A
    294            
    295            
    296          }
   \   00005C   FF           MOV     R7,A
   \   00005D   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000060                REQUIRE PICTL
   \   000060                REQUIRE P0IEN
   \   000060                REQUIRE _A_IEN1
   \   000060                REQUIRE P0IFG
   \   000060                REQUIRE P2IEN
   \   000060                REQUIRE IEN2
   \   000060                REQUIRE P2IFG
    297          
    298          
    299          /**************************************************************************************************
    300           * @fn      HalKeyRead
    301           *
    302           * @brief   Read the current value of a key
    303           *
    304           * @param   None
    305           *
    306           * @return  keys - current keys status
    307           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    308          uint8 HalKeyRead ( void )
   \                     HalKeyRead:
    309          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    310            uint8 keys = 0;
   \   000005   7E00         MOV     R6,#0x0
    311            
    312            
    313          
    314            if (HAL_PUSH_BUTTON1())
   \   000007   A281         MOV     C,0x80.1
   \   000009   5002         JNC     ??HalKeyRead_0
    315            {
    316              keys |= HAL_KEY_SW_6;
   \   00000B   7E20         MOV     R6,#0x20
    317            }
    318          
    319            if ((HAL_KEY_JOY_MOVE_PORT & HAL_KEY_JOY_MOVE_BIT))  /* Key is active low */
   \                     ??HalKeyRead_0:
   \   00000D   A2A0         MOV     C,0xa0.0
   \   00000F   5007         JNC     ??HalKeyRead_1
    320            {
    321              keys |= halGetJoyKeyInput();
   \   000011                ; Setup parameters for call to function halGetJoyKeyInput
   \   000011   12....       LCALL   `??halGetJoyKeyInput::?relay`; Banked call to: halGetJoyKeyInput
   \   000014   E9           MOV     A,R1
   \   000015   CE           XCH     A,R6
   \   000016   4E           ORL     A,R6
   \   000017   FE           MOV     R6,A
    322            }
    323          
    324            return keys;
   \                     ??HalKeyRead_1:
   \   000018                REQUIRE ?Subroutine1
   \   000018                REQUIRE _A_P0
   \   000018                REQUIRE _A_P2
   \   000018                ; // Fall through to label ?Subroutine1
    325          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   EE           MOV     A,R6
   \   000001   F9           MOV     R1,A
   \   000002   7F01         MOV     R7,#0x1
   \   000004   02....       LJMP    ?BANKED_LEAVE_XDATA
    326          
    327          
    328          /**************************************************************************************************
    329           * @fn      HalKeyPoll
    330           *
    331           * @brief   Called by hal_driver to poll the keys
    332           *
    333           * @param   None
    334           *
    335           * @return  None
    336           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    337          void HalKeyPoll (void)
   \                     HalKeyPoll:
    338          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    339            uint8 keys = 0;
   \   000004   7900         MOV     R1,#0x0
    340          
    341            if ((HAL_KEY_JOY_MOVE_PORT & HAL_KEY_JOY_MOVE_BIT))  /* Key is active HIGH */
   \   000006   A2A0         MOV     C,0xa0.0
   \   000008   5005         JNC     ??HalKeyPoll_0
    342            {
    343              keys = halGetJoyKeyInput();
   \   00000A                ; Setup parameters for call to function halGetJoyKeyInput
   \   00000A   12....       LCALL   `??halGetJoyKeyInput::?relay`; Banked call to: halGetJoyKeyInput
   \   00000D   E9           MOV     A,R1
   \   00000E   F9           MOV     R1,A
    344            }
    345          
    346            /* If interrupts are not enabled, previous key status and current key status
    347             * are compared to find out if a key has changed status.
    348             */
    349            if (!Hal_KeyIntEnable)
   \                     ??HalKeyPoll_0:
   \   00000F   90....       MOV     DPTR,#Hal_KeyIntEnable
   \   000012   E0           MOVX    A,@DPTR
   \   000013   7009         JNZ     ??HalKeyPoll_1
    350            {
    351              if (keys == halKeySavedKeys)
   \   000015   90....       MOV     DPTR,#halKeySavedKeys
   \   000018   E0           MOVX    A,@DPTR
   \   000019   69           XRL     A,R1
   \   00001A   6029         JZ      ??HalKeyPoll_2
    352              {
    353                /* Exit - since no keys have changed */
    354                return;
    355              }
    356              /* Store the current keys for comparation next time */
    357              halKeySavedKeys = keys;
   \   00001C   E9           MOV     A,R1
   \   00001D   F0           MOVX    @DPTR,A
    358            }
    359            else
    360            {
    361              /* Key interrupt handled here */
    362            }
    363          
    364            if (HAL_PUSH_BUTTON1())
   \                     ??HalKeyPoll_1:
   \   00001E   A281         MOV     C,0x80.1
   \   000020   5004         JNC     ??HalKeyPoll_3
    365            {
    366              keys |= HAL_KEY_SW_6;
   \   000022   E9           MOV     A,R1
   \   000023   D2E5         SETB    0xE0 /* A   */.5
   \   000025   F9           MOV     R1,A
    367            }
    368          
    369            /* Invoke Callback if new keys were depressed */
    370            if (keys && (pHalKeyProcessFunction))
   \                     ??HalKeyPoll_3:
   \   000026   E9           MOV     A,R1
   \   000027   601C         JZ      ??HalKeyPoll_2
   \   000029   90....       MOV     DPTR,#pHalKeyProcessFunction
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   FA           MOV     R2,A
   \   00002E   A3           INC     DPTR
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   FB           MOV     R3,A
   \   000031   EA           MOV     A,R2
   \   000032   4B           ORL     A,R3
   \   000033   6010         JZ      ??HalKeyPoll_2
    371            {
    372              (pHalKeyProcessFunction) (keys, HAL_KEY_STATE_NORMAL);
   \   000035                ; Setup parameters for indirect call
   \   000035   7A00         MOV     R2,#0x0
   \   000037   90....       MOV     DPTR,#pHalKeyProcessFunction
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   F8           MOV     R0,A
   \   00003C   A3           INC     DPTR
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   F583         MOV     DPH,A
   \   000040   8882         MOV     DPL,R0
   \   000042   12....       LCALL   ?CALL_IND
    373            }
    374          }
   \                     ??HalKeyPoll_2:
   \   000045   80..         SJMP    ?Subroutine0
   \   000047                REQUIRE _A_P2
   \   000047                REQUIRE _A_P0
    375          
    376          /**************************************************************************************************
    377           * @fn      halGetJoyKeyInput
    378           *
    379           * @brief   Map the ADC value to its corresponding key.
    380           *
    381           * @param   None
    382           *
    383           * @return  keys - current joy key status
    384           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    385          uint8 halGetJoyKeyInput(void)
   \                     halGetJoyKeyInput:
    386          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    387            /* The joystick control is encoded as an analog voltage.
    388             * Read the JOY_LEVEL analog value and map it to joy movement.
    389             */
    390            uint8 adc;
    391            uint8 ksave0 = 0;
   \   000005   7E00         MOV     R6,#0x0
    392            uint8 ksave1;
    393          
    394            /* Keep on reading the ADC until two consecutive key decisions are the same. */
    395            do
    396            {
    397              ksave1 = ksave0;    /* save previouse key reading */
   \                     ??halGetJoyKeyInput_0:
   \   000007   EE           MOV     A,R6
   \   000008   FF           MOV     R7,A
    398          
    399              adc = HalAdcRead (HAL_KEY_JOY_CHN, HAL_ADC_RESOLUTION_8);
   \   000009                ; Setup parameters for call to function HalAdcRead
   \   000009   7A01         MOV     R2,#0x1
   \   00000B   7906         MOV     R1,#0x6
   \   00000D   12....       LCALL   `??HalAdcRead::?relay`; Banked call to: HalAdcRead
   \   000010   EA           MOV     A,R2
   \   000011   F8           MOV     R0,A
    400          
    401              if ((adc >= 2) && (adc <= 38))
   \   000012   74FE         MOV     A,#-0x2
   \   000014   2A           ADD     A,R2
   \   000015   C3           CLR     C
   \   000016   9425         SUBB    A,#0x25
   \   000018   5005         JNC     ??halGetJoyKeyInput_1
    402              {
    403                 ksave0 |= HAL_KEY_UP;
   \   00001A   EE           MOV     A,R6
   \   00001B   D2E0         SETB    0xE0 /* A   */.0
   \   00001D   8032         SJMP    ??halGetJoyKeyInput_2
    404              }
    405              else if ((adc >= 74) && (adc <= 88))
   \                     ??halGetJoyKeyInput_1:
   \   00001F   74B6         MOV     A,#-0x4a
   \   000021   2A           ADD     A,R2
   \   000022   C3           CLR     C
   \   000023   940F         SUBB    A,#0xf
   \   000025   5005         JNC     ??halGetJoyKeyInput_3
    406              {
    407                ksave0 |= HAL_KEY_RIGHT;
   \   000027   EE           MOV     A,R6
   \   000028   D2E1         SETB    0xE0 /* A   */.1
   \   00002A   8025         SJMP    ??halGetJoyKeyInput_2
    408              }
    409              else if ((adc >= 60) && (adc <= 73))
   \                     ??halGetJoyKeyInput_3:
   \   00002C   74C4         MOV     A,#-0x3c
   \   00002E   2A           ADD     A,R2
   \   00002F   C3           CLR     C
   \   000030   940E         SUBB    A,#0xe
   \   000032   5005         JNC     ??halGetJoyKeyInput_4
    410              {
    411                ksave0 |= HAL_KEY_LEFT;
   \   000034   EE           MOV     A,R6
   \   000035   D2E3         SETB    0xE0 /* A   */.3
   \   000037   8018         SJMP    ??halGetJoyKeyInput_2
    412              }
    413              else if ((adc >= 39) && (adc <= 59))
   \                     ??halGetJoyKeyInput_4:
   \   000039   74D9         MOV     A,#-0x27
   \   00003B   2A           ADD     A,R2
   \   00003C   C3           CLR     C
   \   00003D   9415         SUBB    A,#0x15
   \   00003F   5005         JNC     ??halGetJoyKeyInput_5
    414              {
    415                ksave0 |= HAL_KEY_DOWN;
   \   000041   EE           MOV     A,R6
   \   000042   D2E4         SETB    0xE0 /* A   */.4
   \   000044   800B         SJMP    ??halGetJoyKeyInput_2
    416              }
    417              else if ((adc >= 89) && (adc <= 100))
   \                     ??halGetJoyKeyInput_5:
   \   000046   74A7         MOV     A,#-0x59
   \   000048   2A           ADD     A,R2
   \   000049   C3           CLR     C
   \   00004A   940C         SUBB    A,#0xc
   \   00004C   5004         JNC     ??halGetJoyKeyInput_6
    418              {
    419                ksave0 |= HAL_KEY_CENTER;
   \   00004E   EE           MOV     A,R6
   \   00004F   D2E2         SETB    0xE0 /* A   */.2
   \                     ??halGetJoyKeyInput_2:
   \   000051   FE           MOV     R6,A
    420              }
    421            } while (ksave0 != ksave1);
   \                     ??halGetJoyKeyInput_6:
   \   000052   EF           MOV     A,R7
   \   000053   6E           XRL     A,R6
   \   000054   70B1         JNZ     ??halGetJoyKeyInput_0
    422          
    423            return ksave0;
   \   000056   02....       LJMP    ?Subroutine1 & 0xFFFF
    424          }
    425          
    426          
    427          
    428          
    429          
    430          /**************************************************************************************************
    431           * @fn      halProcessKeyInterrupt
    432           *
    433           * @brief   Checks to see if it's a valid key interrupt, saves interrupt driven key states for
    434           *          processing by HalKeyRead(), and debounces keys by scheduling HalKeyRead() 25ms later.
    435           *
    436           * @param
    437           *
    438           * @return
    439           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    440          void halProcessKeyInterrupt (void)
   \                     halProcessKeyInterrupt:
    441          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    442            bool valid=TRUE;
    443            /*
    444            if (HAL_KEY_SW_6_PXIFG & HAL_KEY_SW_6_BIT)  // Interrupt Flag has been set 
    445            {
    446              HAL_KEY_SW_6_PXIFG = ~(HAL_KEY_SW_6_BIT);  //Clear Interrupt Flag 
    447              valid = TRUE;
    448            }
    449          
    450            if (HAL_KEY_JOY_MOVE_PXIFG & HAL_KEY_JOY_MOVE_BIT)  // Interrupt Flag has been set
    451            {
    452              HAL_KEY_JOY_MOVE_PXIFG = ~(HAL_KEY_JOY_MOVE_BIT); // Clear Interrupt Flag 
    453              valid = TRUE;
    454            }
    455            */
    456              
    457              
    458            if (valid)
    459            {
    460              osal_start_timerEx (Hal_TaskID, HAL_KEY_EVENT, HAL_KEY_DEBOUNCE_VALUE);
   \   000004                ; Setup parameters for call to function osal_start_timerEx
   \   000004   90....       MOV     DPTR,#__Constant_19
   \   000007   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00000A   7A10         MOV     R2,#0x10
   \   00000C   7B00         MOV     R3,#0x0
   \   00000E   90....       MOV     DPTR,#Hal_TaskID
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F9           MOV     R1,A
   \   000013   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000016   7404         MOV     A,#0x4
   \   000018   12....       LCALL   ?DEALLOC_XSTACK8
    461            }
    462          }
   \   00001B                REQUIRE ?Subroutine0
   \   00001B                ; // Fall through to label ?Subroutine0
    463          
    464          /**************************************************************************************************
    465           * @fn      HalKeyEnterSleep
    466           *
    467           * @brief  - Get called to enter sleep mode
    468           *
    469           * @param
    470           *
    471           * @return
    472           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    473          void HalKeyEnterSleep ( void )
   \                     HalKeyEnterSleep:
    474          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    475          }
   \   000000   02....       LJMP    ?BRET
    476          
    477          /**************************************************************************************************
    478           * @fn      HalKeyExitSleep
    479           *
    480           * @brief   - Get called when sleep is over
    481           *
    482           * @param
    483           *
    484           * @return  - return saved keys
    485           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    486          uint8 HalKeyExitSleep ( void )
   \                     HalKeyExitSleep:
    487          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    488            /* Wake up and read keys */
    489            return ( HalKeyRead () );
   \   000004                ; Setup parameters for call to function HalKeyRead
   \   000004   12....       LCALL   `??HalKeyRead::?relay`; Banked call to: HalKeyRead
   \   000007   80..         SJMP    ?Subroutine0
    490          }
    491          
    492          /***************************************************************************************************
    493           *                                    INTERRUPT SERVICE ROUTINE
    494           ***************************************************************************************************/
    495          
    496          /**************************************************************************************************
    497           * @fn      halKeyPort0Isr
    498           *
    499           * @brief   Port0 ISR
    500           *
    501           * @param
    502           *
    503           * @return
    504           **************************************************************************************************/

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    505          HAL_ISR_FUNCTION( halKeyPort0Isr, P0INT_VECTOR )
   \                     halKeyPort0Isr:
    506          {
   \   000000   C0E0         PUSH    A
   \   000002   74F2         MOV     A,#-0xe
   \   000004   12....       LCALL   ?INTERRUPT_ENTER_XSP
   \   000007                ; Saved register size: 14
   \   000007                ; Auto size: 0
    507            HAL_ENTER_ISR();
   \   000007   A2AF         MOV     C,0xa8.7
   \   000009   E4           CLR     A
   \   00000A   33           RLC     A
   \   00000B   FE           MOV     R6,A
   \   00000C   D2AF         SETB    0xa8.7
    508            
    509            MotionSensorFlag = 1;
   \   00000E   90....       MOV     DPTR,#MotionSensorFlag
   \   000011   7401         MOV     A,#0x1
   \   000013   F0           MOVX    @DPTR,A
    510          
    511            if (HAL_KEY_SW_6_PXIFG & HAL_KEY_SW_6_BIT)
   \   000014   E589         MOV     A,0x89
   \   000016   A2E1         MOV     C,0xE0 /* A   */.1
   \   000018   5003         JNC     ??halKeyPort0Isr_0
    512            {
    513              halProcessKeyInterrupt();
   \   00001A                ; Setup parameters for call to function halProcessKeyInterrupt
   \   00001A   12....       LCALL   `??halProcessKeyInterrupt::?relay`; Banked call to: halProcessKeyInterrupt
    514              
    515            }
    516          
    517              
    518           
    519            
    520            
    521              //Clear the CPU interrupt flag for Port_0
    522              //PxIFG has to be cleared before PxIF
    523           
    524            HAL_KEY_SW_6_PXIFG = 0;
   \                     ??halKeyPort0Isr_0:
   \   00001D   758900       MOV     0x89,#0x0
    525            HAL_KEY_CPU_PORT_0_IF = 0;
   \   000020   C2C5         CLR     0xc0.5
    526            
    527            CLEAR_SLEEP_MODE();
    528            HAL_EXIT_ISR();
   \   000022                REQUIRE ?Subroutine2
   \   000022                REQUIRE _A_IEN0
   \   000022                REQUIRE P0IFG
   \   000022                REQUIRE _A_IRCON
   \   000022                ; // Fall through to label ?Subroutine2
    529          }

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   EE           MOV     A,R6
   \   000001   A2E0         MOV     C,0xE0 /* A   */.0
   \   000003   92AF         MOV     0xa8.7,C
   \   000005   7F01         MOV     R7,#0x1
   \   000007   02....       LJMP    ?INTERRUPT_LEAVE_XSP
    530          
    531          
    532          /**************************************************************************************************
    533           * @fn      halKeyPort2Isr
    534           *
    535           * @brief   Port2 ISR
    536           *
    537           * @param
    538           *
    539           * @return
    540           **************************************************************************************************/

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    541          HAL_ISR_FUNCTION( halKeyPort2Isr, P2INT_VECTOR )
   \                     halKeyPort2Isr:
    542          {
   \   000000   C0E0         PUSH    A
   \   000002   74F2         MOV     A,#-0xe
   \   000004   12....       LCALL   ?INTERRUPT_ENTER_XSP
   \   000007                ; Saved register size: 14
   \   000007                ; Auto size: 0
    543            HAL_ENTER_ISR();
   \   000007   A2AF         MOV     C,0xa8.7
   \   000009   E4           CLR     A
   \   00000A   33           RLC     A
   \   00000B   FE           MOV     R6,A
   \   00000C   D2AF         SETB    0xa8.7
    544            
    545            MagneticSwitchFlag = 1;
   \   00000E   90....       MOV     DPTR,#MagneticSwitchFlag
   \   000011   7401         MOV     A,#0x1
   \   000013   F0           MOVX    @DPTR,A
    546            
    547            if (HAL_KEY_JOY_MOVE_PXIFG & HAL_KEY_JOY_MOVE_BIT)
   \   000014   E58B         MOV     A,0x8b
   \   000016   A2E0         MOV     C,0xE0 /* A   */.0
   \   000018   5003         JNC     ??halKeyPort2Isr_0
    548            {
    549              halProcessKeyInterrupt();
   \   00001A                ; Setup parameters for call to function halProcessKeyInterrupt
   \   00001A   12....       LCALL   `??halProcessKeyInterrupt::?relay`; Banked call to: halProcessKeyInterrupt
    550            }
    551            
    552            /*
    553              Clear the CPU interrupt flag for Port_2
    554              PxIFG has to be cleared before PxIF
    555              Notes: P2_1 and P2_2 are debug lines.
    556            */
    557            HAL_KEY_JOY_MOVE_PXIFG = 0;
   \                     ??halKeyPort2Isr_0:
   \   00001D   758B00       MOV     0x8b,#0x0
    558            HAL_KEY_CPU_PORT_2_IF = 0;
   \   000020   C2E8         CLR     0xe8.0
    559          
    560            CLEAR_SLEEP_MODE();
    561            HAL_EXIT_ISR();
   \   000022   80..         SJMP    ?Subroutine2
   \   000024                REQUIRE _A_IEN0
   \   000024                REQUIRE P2IFG
   \   000024                REQUIRE _A_IRCON2
    562          }
    563          /**************************************************************************************************
    564           * @fn      halMagneticInterrupt
    565           *
    566           * @brief   Checks to see if it's a valid key interrupt.
    567           *
    568           * @param
    569           *
    570           * @return
    571           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    572          void halMagneticInterrupt(void)
   \                     halMagneticInterrupt:
    573          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    574            bool valid=FALSE;
   \   000004   7800         MOV     R0,#0x0
    575          
    576            if (HAL_KEY_SW_6_PXIFG & HAL_KEY_SW_6_BIT)  /* Interrupt Flag has been set */
   \   000006   E589         MOV     A,0x89
   \   000008   A2E1         MOV     C,0xE0 /* A   */.1
   \   00000A   5005         JNC     ??halMagneticInterrupt_0
    577            {
    578              HAL_KEY_SW_6_PXIFG = ~(HAL_KEY_SW_6_BIT); /* Clear Interrupt Flag */
   \   00000C   7589FD       MOV     0x89,#-0x3
    579              valid = TRUE;
   \   00000F   7801         MOV     R0,#0x1
    580            }
    581          
    582            if (HAL_KEY_JOY_MOVE_PXIFG & HAL_KEY_JOY_MOVE_BIT)  /* Interrupt Flag has been set */
   \                     ??halMagneticInterrupt_0:
   \   000011   E58B         MOV     A,0x8b
   \   000013   A2E0         MOV     C,0xE0 /* A   */.0
   \   000015   5005         JNC     ??halMagneticInterrupt_1
    583            {
    584              HAL_KEY_JOY_MOVE_PXIFG = ~(HAL_KEY_JOY_MOVE_BIT); /* Clear Interrupt Flag */
   \   000017   758BFE       MOV     0x8b,#-0x2
    585              valid = TRUE;
   \   00001A   8005         SJMP    ??halMagneticInterrupt_2
    586            }
    587          
    588            if (valid)
   \                     ??halMagneticInterrupt_1:
   \   00001C   E8           MOV     A,R0
   \   00001D   A2E0         MOV     C,0xE0 /* A   */.0
   \   00001F   5017         JNC     ??halMagneticInterrupt_3
    589            {
    590              osal_start_timerEx (Hal_TaskID, HAL_KEY_EVENT, HAL_KEY_DEBOUNCE_VALUE);
   \                     ??halMagneticInterrupt_2:
   \   000021                ; Setup parameters for call to function osal_start_timerEx
   \   000021   90....       MOV     DPTR,#__Constant_19
   \   000024   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000027   7A10         MOV     R2,#0x10
   \   000029   7B00         MOV     R3,#0x0
   \   00002B   90....       MOV     DPTR,#Hal_TaskID
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   F9           MOV     R1,A
   \   000030   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000033   7404         MOV     A,#0x4
   \   000035   12....       LCALL   ?DEALLOC_XSTACK8
    591            }
    592          }
   \                     ??halMagneticInterrupt_3:
   \   000038   80..         SJMP    ?Subroutine0
   \   00003A                REQUIRE P0IFG
   \   00003A                REQUIRE P2IFG

   \                                 In  segment INTVEC, offset 0x33, root
   \                     `??halKeyPort2Isr::??INTVEC 51`:
   \   000033   02....       LJMP       (halKeyPort2Isr)

   \                                 In  segment INTVEC, offset 0x6b, root
   \                     `??halKeyPort0Isr::??INTVEC 107`:
   \   00006B   02....       LJMP       (halKeyPort0Isr)

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_19:
   \   000000   19000000     DD 25

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalKeyInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalKeyInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalKeyConfig::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalKeyConfig

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalKeyRead::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalKeyRead

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalKeyPoll::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalKeyPoll

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??halGetJoyKeyInput::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    halGetJoyKeyInput

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??halProcessKeyInterrupt::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    halProcessKeyInterrupt

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalKeyEnterSleep::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalKeyEnterSleep

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalKeyExitSleep::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalKeyExitSleep

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??halMagneticInterrupt::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    halMagneticInterrupt
    593          
    594          
    595          
    596          #else
    597          
    598          
    599          void HalKeyInit(void){}
    600          void HalKeyConfig(bool interruptEnable, halKeyCBack_t cback){}
    601          uint8 HalKeyRead(void){ return 0;}
    602          void HalKeyPoll(void){}
    603          
    604          #endif /* HAL_KEY */
    605          
    606          
    607          
    608          
    609          
    610          /**************************************************************************************************
    611          **************************************************************************************************/
    612          
    613          
    614          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      9   HalKeyConfig
        0      9   -> osal_set_event
        0      9   -> osal_stop_timerEx
      0      0   HalKeyEnterSleep
      2      0   HalKeyExitSleep
        2      0   -> HalKeyRead
      2      0   HalKeyInit
      2      0   HalKeyPoll
        2      0   -> halGetJoyKeyInput
      0      9   HalKeyRead
        0      9   -> halGetJoyKeyInput
      0     18   halGetJoyKeyInput
        0      9   -> HalAdcRead
      0     14   halKeyPort0Isr
        0     14   -> halProcessKeyInterrupt
      0     14   halKeyPort2Isr
        0     14   -> halProcessKeyInterrupt
      2      4   halMagneticInterrupt
        2      4   -> osal_start_timerEx
      2     18   halProcessKeyInterrupt
        2      4   -> osal_start_timerEx


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       7  ?Subroutine0
       7  ?Subroutine1
      10  ?Subroutine2
      96  HalKeyConfig
       6  HalKeyConfig::?relay
       1  HalKeyConfigured
       3  HalKeyEnterSleep
       6  HalKeyEnterSleep::?relay
       9  HalKeyExitSleep
       6  HalKeyExitSleep::?relay
      34  HalKeyInit
       6  HalKeyInit::?relay
      71  HalKeyPoll
       6  HalKeyPoll::?relay
      24  HalKeyRead
       6  HalKeyRead::?relay
       1  Hal_KeyIntEnable
       1  IEN2
       1  P0DIR
       1  P0IEN
       1  P0IFG
       1  P0SEL
       1  P2DIR
       1  P2IEN
       1  P2IFG
       1  P2SEL
       1  PICTL
       1  _A_IEN0
       1  _A_IEN1
       1  _A_IRCON
       1  _A_IRCON2
       1  _A_P0
       1  _A_P2
       4  __Constant_19
      89  halGetJoyKeyInput
       6  halGetJoyKeyInput::?relay
      34  halKeyPort0Isr
       3  halKeyPort0Isr::??INTVEC 107
      36  halKeyPort2Isr
       3  halKeyPort2Isr::??INTVEC 51
       1  halKeySavedKeys
      58  halMagneticInterrupt
       6  halMagneticInterrupt::?relay
      27  halProcessKeyInterrupt
       6  halProcessKeyInterrupt::?relay
       2  pHalKeyProcessFunction

 
 425 bytes in segment BANKED_CODE
  54 bytes in segment BANK_RELAYS
   6 bytes in segment INTVEC
  80 bytes in segment NEAR_CODE
  16 bytes in segment SFR_AN
   4 bytes in segment XDATA_ROM_C
   5 bytes in segment XDATA_Z
 
 134 bytes of CODE     memory (+  6 bytes shared)
   0 bytes of CONST    memory (+  4 bytes shared)
   0 bytes of DATA     memory (+ 16 bytes shared)
 425 bytes of HUGECODE memory
   5 bytes of XDATA    memory

Errors: none
Warnings: none
