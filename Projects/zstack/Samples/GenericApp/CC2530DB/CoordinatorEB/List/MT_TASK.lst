###############################################################################
#
# IAR C/C++ Compiler V9.30.3.3983 for 8051                06/Apr/2017  08:49:16
# Copyright 2004-2016 IAR Systems AB.
# Evaluation license - IAR Embedded Workbench for 8051, Evaluation version 9.30
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Components\mt\MT_TASK.c
#    Command line       =  
#        -f
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0x0422
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Components\mt\MT_TASK.c
#        -D ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D
#        LCD_SUPPORTED=DEBUG -lC
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\List
#        -lA
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\List
#        --diag_suppress Pe001,Pa010 -o
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\Obj
#        -e --no_code_motion --debug --core=plain --dptr=16,1
#        --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 16 -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\Source\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -Ohz --require_prototypes
#    List file          =  
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\List\MT_TASK.lst
#    Object file        =  
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\Obj\MT_TASK.r51
#
###############################################################################

C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Components\mt\MT_TASK.c
      1          /***************************************************************************************************
      2            Filename:       MT_TASK.c
      3            Revised:        $Date: 2013-11-12 09:10:23 -0800 (Tue, 12 Nov 2013) $
      4            Revision:       $Revision: 36036 $
      5          
      6            Description:    MonitorTest Task handling routines
      7          
      8            Copyright 2007-2013 Texas Instruments Incorporated. All rights reserved.
      9          
     10            IMPORTANT: Your use of this Software is limited to those specific rights
     11            granted under the terms of a software license agreement between the user
     12            who downloaded the software, his/her employer (which must be your employer)
     13            and Texas Instruments Incorporated (the "License").  You may not use this
     14            Software unless you agree to abide by the terms of the License. The License
     15            limits your use, and you acknowledge, that the Software may not be modified,
     16            copied or distributed unless embedded on a Texas Instruments microcontroller
     17            or used solely and exclusively in conjunction with a Texas Instruments radio
     18            frequency transceiver, which is integrated into your product.  Other than for
     19            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     20            works of, modify, distribute, perform, display or sell this Software and/or
     21            its documentation for any purpose.
     22          
     23            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     24            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     25            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     26            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     27            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     28            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     29            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     30            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     31            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     32            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     33            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     34          
     35            Should you have any questions regarding your right to use this Software,
     36            contact Texas Instruments Incorporated at www.TI.com.
     37          
     38           ***************************************************************************************************/
     39          
     40          /***************************************************************************************************
     41           * INCLUDES
     42           ***************************************************************************************************/
     43          #include "ZComDef.h"
     44          #include "MT_TASK.h"
     45          #include "MT.h"
     46          #include "MT_DEBUG.h"
     47          #include "MT_UART.h"
     48          #include "MT_UTIL.h"
     49          #include "MT_SYS.h"
     50          
     51          #if !defined( NONWK )
     52          #include "MT_ZDO.h"
     53          #include "MT_AF.h"
     54          #endif  /* NONWK */
     55          
     56          #include "hal_uart.h"
     57          #include "OSAL_Memory.h"
     58          
     59          /***************************************************************************************************
     60           * LOCAL FUNCTIONS
     61           ***************************************************************************************************/
     62          
     63          extern void HalLcdWriteString ( char *str, uint8 option);
     64          
     65          static void MT_ProcessIncomingCommand( mtOSALSerialData_t *msg );
     66          #ifdef MT_SRNG
     67          void MT_ProcessSrngEvent(void); 
     68          #endif
     69          
     70          /***************************************************************************************************
     71           * GLOBALS
     72           ***************************************************************************************************/
     73          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     74          uint8 MT_TaskID;
   \                     MT_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     75          
     76          /***************************************************************************************************
     77           * @fn      MT_TaskInit
     78           *
     79           * @brief  MonitorTest Task Initialization.  This function is put into the
     80           *         task table.
     81           *
     82           * @param   task_id - task ID of the MT Task
     83           *
     84           * @return  void
     85           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     86          void MT_TaskInit(uint8 task_id)
   \                     MT_TaskInit:
     87          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
     88            MT_TaskID = task_id;
   \   000007   90....       MOV     DPTR,#MT_TaskID
   \   00000A   F0           MOVX    @DPTR,A
     89          
     90            /* Initialize the Serial port */
     91            MT_UartInit();
   \   00000B                ; Setup parameters for call to function MT_UartInit
   \   00000B   12....       LCALL   `??MT_UartInit::?relay`; Banked call to: MT_UartInit
     92          
     93            /* Register taskID - Do this after UartInit() because it will reset the taskID */
     94            MT_UartRegisterTaskID(task_id);
   \   00000E                ; Setup parameters for call to function MT_UartRegisterTaskID
   \   00000E   EE           MOV     A,R6
   \   00000F   F9           MOV     R1,A
   \   000010   12....       LCALL   `??MT_UartRegisterTaskID::?relay`; Banked call to: MT_UartRegisterTaskID
     95          
     96            osal_set_event(task_id, MT_SECONDARY_INIT_EVENT);
   \   000013                ; Setup parameters for call to function osal_set_event
   \   000013   7A10         MOV     R2,#0x10
   \   000015   7B00         MOV     R3,#0x0
   \   000017   EE           MOV     A,R6
   \   000018   F9           MOV     R1,A
   \   000019   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
     97          }
   \   00001C   7F01         MOV     R7,#0x1
   \   00001E   02....       LJMP    ?BANKED_LEAVE_XDATA
     98          
     99          /**************************************************************************************************
    100           * @fn      MT_ProcessEvent
    101           *
    102           * @brief   MonitorTest Task Event Processor.  This task is put into the task table.
    103           *
    104           * @param   task_id - task ID of the MT Task
    105           * @param   events - event(s) for the MT Task
    106           *
    107           * @return  Bit mask of the unprocessed MT Task events.
    108           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    109          UINT16 MT_ProcessEvent(uint8 task_id, uint16 events)
   \                     MT_ProcessEvent:
    110          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    111            
    112            
    113            
    114            /* Could be multiple events, so switch won't work */
    115            if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL     A,#0x80
   \   00000B   7003         JNZ     $+5
   \   00000D   02....       LJMP    ??MT_ProcessEvent_0 & 0xFFFF
    116            {
    117              
    118              uint8 *msg_ptr = osal_msg_receive(task_id);
   \   000010                ; Setup parameters for call to function osal_msg_receive
   \   000010   12....       LCALL   `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   000013   8A..         MOV     ?V2,R2
   \   000015   8B..         MOV     ?V3,R3
    119          
    120              if (msg_ptr != NULL)
   \   000017   EA           MOV     A,R2
   \   000018   45..         ORL     A,?V3
   \   00001A   7003         JNZ     $+5
   \   00001C   02....       LJMP    ??MT_ProcessEvent_1 & 0xFFFF
    121              {
    122                MT_ProcessIncomingCommand((mtOSALSerialData_t *)msg_ptr);
   \   00001F   8A82         MOV     DPL,R2
   \   000021   8B83         MOV     DPH,R3
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   E0           MOVX    A,@DPTR
   \   000026   F5..         MOV     ?V0,A
   \   000028   A3           INC     DPTR
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F5..         MOV     ?V1,A
   \   00002C   8A82         MOV     DPL,R2
   \   00002E   8B83         MOV     DPH,R3
   \   000030   E0           MOVX    A,@DPTR
   \   000031   14           DEC     A
   \   000032   6079         JZ      ??MT_ProcessEvent_2
   \   000034   14           DEC     A
   \   000035   6071         JZ      ??MT_ProcessEvent_3
   \   000037   24FE         ADD     A,#-0x2
   \   000039   6023         JZ      ??MT_ProcessEvent_4
   \   00003B   24FE         ADD     A,#-0x2
   \   00003D   601A         JZ      ??MT_ProcessEvent_5
   \   00003F   24E2         ADD     A,#-0x1e
   \   000041   7071         JNZ     ??MT_ProcessEvent_6
   \   000043                ; Setup parameters for call to function MTProcessAppRspMsg
   \   000043   85..82       MOV     DPL,?V0
   \   000046   85..83       MOV     DPH,?V1
   \   000049   A3           INC     DPTR
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   2405         ADD     A,#0x5
   \   00004F   F9           MOV     R1,A
   \   000050   AA..         MOV     R2,?V0
   \   000052   AB..         MOV     R3,?V1
   \   000054   12....       LCALL   `??MTProcessAppRspMsg::?relay`; Banked call to: MTProcessAppRspMsg
   \   000057   805B         SJMP    ??MT_ProcessEvent_6
   \                     ??MT_ProcessEvent_5:
   \   000059                ; Setup parameters for call to function MT_ProcessDebugStr
   \   000059   12....       LCALL   `??MT_ProcessDebugStr::?relay`; Banked call to: MT_ProcessDebugStr
   \   00005C   8056         SJMP    ??MT_ProcessEvent_6
   \                     ??MT_ProcessEvent_4:
   \   00005E   85..82       MOV     DPL,?V0
   \   000061   85..83       MOV     DPH,?V1
   \   000064   A3           INC     DPTR
   \   000065   A3           INC     DPTR
   \   000066   A3           INC     DPTR
   \   000067   E0           MOVX    A,@DPTR
   \   000068   2405         ADD     A,#0x5
   \   00006A   F5..         MOV     ?V5,A
   \   00006C                ; Setup parameters for call to function MT_UartCalcFCS
   \   00006C   74FE         MOV     A,#-0x2
   \   00006E   25..         ADD     A,?V5
   \   000070   F9           MOV     R1,A
   \   000071   85..82       MOV     DPL,?V0
   \   000074   85..83       MOV     DPH,?V1
   \   000077   A3           INC     DPTR
   \   000078   AA82         MOV     R2,DPL
   \   00007A   AB83         MOV     R3,DPH
   \   00007C   12....       LCALL   `??MT_UartCalcFCS::?relay`; Banked call to: MT_UartCalcFCS
   \   00007F   E9           MOV     A,R1
   \   000080   C0E0         PUSH    A
   \   000082   A8..         MOV     R0,?V5
   \   000084   E5..         MOV     A,?V0
   \   000086   28           ADD     A,R0
   \   000087   F8           MOV     R0,A
   \   000088   E4           CLR     A
   \   000089   35..         ADDC    A,?V1
   \   00008B   F9           MOV     R1,A
   \   00008C   E8           MOV     A,R0
   \   00008D   24FF         ADD     A,#-0x1
   \   00008F   F582         MOV     DPL,A
   \   000091   E9           MOV     A,R1
   \   000092   34FF         ADDC    A,#-0x1
   \   000094   F583         MOV     DPH,A
   \   000096   D0E0         POP     A
   \   000098   F0           MOVX    @DPTR,A
   \   000099                ; Setup parameters for call to function HalUARTWrite
   \   000099   AC..         MOV     R4,?V5
   \   00009B   7D00         MOV     R5,#0x0
   \   00009D   AA..         MOV     R2,?V0
   \   00009F   AB..         MOV     R3,?V1
   \   0000A1   7900         MOV     R1,#0x0
   \   0000A3   12....       LCALL   `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
   \   0000A6   800C         SJMP    ??MT_ProcessEvent_6
   \                     ??MT_ProcessEvent_3:
   \   0000A8                ; Setup parameters for call to function MT_ProcessDebugMsg
   \   0000A8   12....       LCALL   `??MT_ProcessDebugMsg::?relay`; Banked call to: MT_ProcessDebugMsg
   \   0000AB   8007         SJMP    ??MT_ProcessEvent_6
   \                     ??MT_ProcessEvent_2:
   \   0000AD                ; Setup parameters for call to function MT_ProcessIncoming
   \   0000AD   AA..         MOV     R2,?V0
   \   0000AF   AB..         MOV     R3,?V1
   \   0000B1   12....       LCALL   `??MT_ProcessIncoming::?relay`; Banked call to: MT_ProcessIncoming
    123          
    124                osal_msg_deallocate(msg_ptr);
   \                     ??MT_ProcessEvent_6:
   \   0000B4                ; Setup parameters for call to function osal_msg_deallocate
   \   0000B4   AA..         MOV     R2,?V2
   \   0000B6   AB..         MOV     R3,?V3
   \   0000B8   12....       LCALL   `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
    125              }
    126          
    127              /* Return unproccessed events */
    128              return (events ^ SYS_EVENT_MSG);
   \                     ??MT_ProcessEvent_1:
   \   0000BB   EE           MOV     A,R6
   \   0000BC   FA           MOV     R2,A
   \   0000BD   EF           MOV     A,R7
   \   0000BE   6480         XRL     A,#0x80
   \   0000C0   8065         SJMP    ??MT_ProcessEvent_7
    129            }
    130          
    131            if ( events & MT_SECONDARY_INIT_EVENT )
   \                     ??MT_ProcessEvent_0:
   \   0000C2   EE           MOV     A,R6
   \   0000C3   5410         ANL     A,#0x10
   \   0000C5   6008         JZ      ??MT_ProcessEvent_8
    132            {
    133              
    134              MT_Init(task_id);
   \   0000C7                ; Setup parameters for call to function MT_Init
   \   0000C7   12....       LCALL   `??MT_Init::?relay`  ; Banked call to: MT_Init
    135              /* Return unproccessed events */
    136              return (events ^ MT_SECONDARY_INIT_EVENT);
   \   0000CA   EE           MOV     A,R6
   \   0000CB   6410         XRL     A,#0x10
   \   0000CD   8056         SJMP    ??MT_ProcessEvent_9
    137            }
    138          
    139            if ( events & MT_ZTOOL_SERIAL_RCV_BUFFER_FULL )
   \                     ??MT_ProcessEvent_8:
   \   0000CF   EE           MOV     A,R6
   \   0000D0   5402         ANL     A,#0x2
   \   0000D2   6006         JZ      ??MT_ProcessEvent_10
    140            {
    141              /* Return unproccessed events */
    142              return (events ^ MT_ZTOOL_SERIAL_RCV_BUFFER_FULL);
   \   0000D4   EE           MOV     A,R6
   \   0000D5   6402         XRL     A,#0x2
   \   0000D7   FA           MOV     R2,A
   \   0000D8   8054         SJMP    ??MT_ProcessEvent_11
    143            }
    144          
    145          #if !defined( NONWK )
    146            if ( events & MT_AF_EXEC_EVT )
   \                     ??MT_ProcessEvent_10:
   \   0000DA   EE           MOV     A,R6
   \   0000DB   5408         ANL     A,#0x8
   \   0000DD   6008         JZ      ??MT_ProcessEvent_12
    147            {
    148              MT_AfExec();
   \   0000DF                ; Setup parameters for call to function MT_AfExec
   \   0000DF   12....       LCALL   `??MT_AfExec::?relay`; Banked call to: MT_AfExec
    149              return (events ^ MT_AF_EXEC_EVT);
   \   0000E2   EE           MOV     A,R6
   \   0000E3   6408         XRL     A,#0x8
   \   0000E5   803E         SJMP    ??MT_ProcessEvent_9
    150            }
    151          #endif  /* NONWK */
    152          
    153            /* Handle MT_SYS_OSAL_START_TIMER callbacks */
    154          #if defined MT_SYS_FUNC
    155            if ( events & (MT_SYS_OSAL_EVENT_MASK))
   \                     ??MT_ProcessEvent_12:
   \   0000E7   EF           MOV     A,R7
   \   0000E8   540F         ANL     A,#0xf
   \   0000EA   603E         JZ      ??MT_ProcessEvent_13
    156            {
    157              
    158              
    159              if (events & MT_SYS_OSAL_EVENT_0)
   \   0000EC   EF           MOV     A,R7
   \   0000ED   5408         ANL     A,#0x8
   \   0000EF   6009         JZ      ??MT_ProcessEvent_14
    160              {
    161                MT_SysOsalTimerExpired(0x00);
   \   0000F1                ; Setup parameters for call to function MT_SysOsalTimerExpired
   \   0000F1   7900         MOV     R1,#0x0
   \   0000F3   12....       LCALL   `??MT_SysOsalTimerExpired::?relay`; Banked call to: MT_SysOsalTimerExpired
    162                events ^= MT_SYS_OSAL_EVENT_0;
   \   0000F6   7408         MOV     A,#0x8
   \   0000F8   6F           XRL     A,R7
   \   0000F9   FF           MOV     R7,A
    163              }
    164          
    165              if (events & MT_SYS_OSAL_EVENT_1)
   \                     ??MT_ProcessEvent_14:
   \   0000FA   EF           MOV     A,R7
   \   0000FB   5404         ANL     A,#0x4
   \   0000FD   6009         JZ      ??MT_ProcessEvent_15
    166              {
    167                MT_SysOsalTimerExpired(0x01);
   \   0000FF                ; Setup parameters for call to function MT_SysOsalTimerExpired
   \   0000FF   7901         MOV     R1,#0x1
   \   000101   12....       LCALL   `??MT_SysOsalTimerExpired::?relay`; Banked call to: MT_SysOsalTimerExpired
    168                events ^= MT_SYS_OSAL_EVENT_1;
   \   000104   7404         MOV     A,#0x4
   \   000106   6F           XRL     A,R7
   \   000107   FF           MOV     R7,A
    169              }
    170          
    171              if (events & MT_SYS_OSAL_EVENT_2)
   \                     ??MT_ProcessEvent_15:
   \   000108   EF           MOV     A,R7
   \   000109   5402         ANL     A,#0x2
   \   00010B   6009         JZ      ??MT_ProcessEvent_16
    172              {
    173                MT_SysOsalTimerExpired(0x02);
   \   00010D                ; Setup parameters for call to function MT_SysOsalTimerExpired
   \   00010D   7902         MOV     R1,#0x2
   \   00010F   12....       LCALL   `??MT_SysOsalTimerExpired::?relay`; Banked call to: MT_SysOsalTimerExpired
    174                events ^= MT_SYS_OSAL_EVENT_2;
   \   000112   7402         MOV     A,#0x2
   \   000114   6F           XRL     A,R7
   \   000115   FF           MOV     R7,A
    175              }
    176          
    177              if (events & MT_SYS_OSAL_EVENT_3)
   \                     ??MT_ProcessEvent_16:
   \   000116   EF           MOV     A,R7
   \   000117   5401         ANL     A,#0x1
   \   000119   6009         JZ      ??MT_ProcessEvent_17
    178              {
    179                MT_SysOsalTimerExpired(0x03);
   \   00011B                ; Setup parameters for call to function MT_SysOsalTimerExpired
   \   00011B   7903         MOV     R1,#0x3
   \   00011D   12....       LCALL   `??MT_SysOsalTimerExpired::?relay`; Banked call to: MT_SysOsalTimerExpired
    180                events ^= MT_SYS_OSAL_EVENT_3;
   \   000120   7401         MOV     A,#0x1
   \   000122   6F           XRL     A,R7
   \   000123   FF           MOV     R7,A
    181              }
    182          
    183              return events;
   \                     ??MT_ProcessEvent_17:
   \   000124   EE           MOV     A,R6
   \                     ??MT_ProcessEvent_9:
   \   000125   FA           MOV     R2,A
   \   000126   EF           MOV     A,R7
   \                     ??MT_ProcessEvent_7:
   \   000127   FB           MOV     R3,A
   \   000128   8004         SJMP    ??MT_ProcessEvent_11
    184            }
    185          #endif
    186          
    187          #ifdef MT_SRNG
    188            if(events & MT_SRNG_EVENT)
    189            {
    190              MT_ProcessSrngEvent(); 
    191              return (events ^ MT_SRNG_EVENT);
    192            }
    193          #endif  
    194          
    195            /* Discard or make more handlers */
    196            return 0;
   \                     ??MT_ProcessEvent_13:
   \   00012A   7A00         MOV     R2,#0x0
   \   00012C   7B00         MOV     R3,#0x0
   \                     ??MT_ProcessEvent_11:
   \   00012E   7F06         MOV     R7,#0x6
   \   000130   02....       LJMP    ?BANKED_LEAVE_XDATA
    197          
    198          } /* MT_ProcessEvent() */
    199          
    200          #ifdef MT_SRNG
    201          /***************************************************************************************************
    202           * @fn      MT_ProcessSrngEvent
    203           *
    204           * @brief
    205           *
    206           *   Process SRNG Event Messages.
    207           *
    208           * @param   None
    209           *
    210           * @return  None
    211           ***************************************************************************************************/
    212          void MT_ProcessSrngEvent(void)
    213          {
    214            uint8 * msg;
    215            osal_event_hdr_t * msg_ptr;
    216            
    217            msg_ptr = (osal_event_hdr_t *)osal_msg_allocate( MT_RPC_FRAME_HDR_SZ + 4 + sizeof(osal_event_hdr_t) );
    218            msg = msg_ptr + sizeof(osal_event_hdr_t) + 4;
    219            
    220            if ( msg_ptr )
    221            {
    222              msg_ptr->event = CMD_SERIAL_MSG;
    223              msg_ptr->status = 4;
    224              if(msg)
    225              {
    226                msg[MT_RPC_POS_LEN] = 4 + MT_RPC_FRAME_HDR_SZ;
    227                msg[MT_RPC_POS_CMD0] = MT_RPC_SYS_UTIL;
    228                msg[MT_RPC_POS_CMD1] = MT_UTIL_SRNG_GENERATE;
    229              } 
    230              osal_memcpy(msg_ptr + sizeof(osal_event_hdr_t), &msg, 4); 
    231            }
    232            osal_msg_send( MT_TaskID, (uint8 *)msg_ptr );
    233          }
    234          #endif
    235          
    236          /***************************************************************************************************
    237           * @fn      MT_ProcessIncomingCommand
    238           *
    239           * @brief
    240           *
    241           *   Process Event Messages.
    242           *
    243           * @param   *msg - pointer to event message
    244           *
    245           * @return
    246           ***************************************************************************************************/
    247          static void MT_ProcessIncomingCommand( mtOSALSerialData_t *msg )
    248          {
    249            uint8 len, *msg_ptr = msg->msg;
    250          
    251            /* Use the first byte of the message as the command ID */
    252            switch ( msg->hdr.event )
    253            {
    254              case CMD_SERIAL_MSG:
    255                MT_ProcessIncoming(msg_ptr);
    256                break;
    257          
    258              case CMD_DEBUG_MSG:
    259                MT_ProcessDebugMsg( (mtDebugMsg_t *)msg );
    260                break;
    261          
    262              case CB_FUNC:
    263                /*
    264                  Build SPI message here instead of redundantly calling MT_BuildSPIMsg
    265                  because we have copied data already in the allocated message
    266                */
    267          
    268                /* msg_ptr is the beginning of the intended SPI message */
    269                len = SPI_0DATA_MSG_LEN + msg_ptr[DATALEN_FIELD];
    270          
    271                /*
    272                  FCS goes to the last byte in the message and is calculated over all
    273                  the bytes except FCS and SOP
    274                */
    275                msg_ptr[len-1] = MT_UartCalcFCS(msg_ptr + 1, (uint8)(len-2));
    276          
    277          #ifdef MT_UART_DEFAULT_PORT
    278                HalUARTWrite ( MT_UART_DEFAULT_PORT, msg_ptr, len );
    279          #endif
    280                break;
    281          
    282              case CMD_DEBUG_STR:
    283                MT_ProcessDebugStr( (mtDebugStr_t *)msg );
    284                break;
    285          
    286          #if !defined ( NONWK )
    287              case MT_SYS_APP_RSP_MSG:
    288                len = SPI_0DATA_MSG_LEN + msg_ptr[DATALEN_FIELD];
    289                MTProcessAppRspMsg( msg_ptr, len );
    290                break;
    291          #endif  // NONWK
    292          
    293          #if defined (MT_UTIL_FUNC)
    294          #if defined ZCL_KEY_ESTABLISH
    295              case ZCL_KEY_ESTABLISH_IND:
    296                MT_UtilKeyEstablishInd((keyEstablishmentInd_t *)msg);
    297                break;
    298          #endif
    299          #endif
    300          #ifdef MT_ZDO_CB_FUNC
    301              case ZDO_STATE_CHANGE:
    302                MT_ZdoStateChangeCB((osal_event_hdr_t *)msg);
    303                break;
    304          #endif
    305          
    306              default:
    307                break;
    308            }
    309          }
    310          
    311          #ifdef MT_TASK
    312          /***************************************************************************************************
    313           * @fn      MT_TransportAlloc
    314           *
    315           * @brief   Allocate memory for transport msg
    316           *
    317           * @param   uint8 cmd0 - The first byte of the MT command id containing the command type and subsystem.
    318           *          uint8 len - length
    319           *
    320           * @return  pointer the allocated memory or NULL if fail to allocate the memory
    321           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    322          uint8 *MT_TransportAlloc(uint8 cmd0, uint8 len)
   \                     MT_TransportAlloc:
    323          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
    324            uint8 *p;
    325          
    326            (void)cmd0;  // Intentionally unreferenced parameter
    327          
    328            /* Allocate a buffer of data length + SOP+CMD+FCS (5 bytes) */
    329            p = osal_msg_allocate(len + SPI_0DATA_MSG_LEN);
   \   000006                ; Setup parameters for call to function osal_msg_allocate
   \   000006   2405         ADD     A,#0x5
   \   000008   FA           MOV     R2,A
   \   000009   E4           CLR     A
   \   00000A   3400         ADDC    A,#0x0
   \   00000C   FB           MOV     R3,A
   \   00000D   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000010   8A82         MOV     DPL,R2
   \   000012   8B83         MOV     DPH,R3
    330          
    331            if (p)
   \   000014   E582         MOV     A,DPL
   \   000016   4583         ORL     A,DPH
   \   000018   6007         JZ      ??MT_TransportAlloc_0
    332            {
    333              p++; /* Save space for SOP_VALUE, msg structure */
    334              return p;
   \   00001A   A3           INC     DPTR
   \   00001B   AA82         MOV     R2,DPL
   \   00001D   AB83         MOV     R3,DPH
   \   00001F   8004         SJMP    ??MT_TransportAlloc_1
    335            }
    336            else
    337            {
    338              return NULL;
   \                     ??MT_TransportAlloc_0:
   \   000021   7A00         MOV     R2,#0x0
   \   000023   7B00         MOV     R3,#0x0
    339            }
   \                     ??MT_TransportAlloc_1:
   \   000025                REQUIRE ?Subroutine0
   \   000025                ; // Fall through to label ?Subroutine0
    340          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    341          
    342          /***************************************************************************************************
    343           * @fn      MT_TransportSend
    344           *
    345           * @brief   Fill in SOP and FCS then send out the msg
    346           *
    347           * @param   uint8 *pBuf - pointer to the message that contains CMD, length, data and FCS
    348           *
    349           * @return  None
    350           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    351          void MT_TransportSend(uint8 *pBuf)
   \                     MT_TransportSend:
    352          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    353            uint8 *msgPtr;
    354            uint8 dataLen = pBuf[0]; /* Data length is on byte #1 from the pointer */
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   F8           MOV     R0,A
    355          
    356            /* Move back to the SOP */
    357            msgPtr = pBuf-1;
   \   00000B   EA           MOV     A,R2
   \   00000C   24FF         ADD     A,#-0x1
   \   00000E   FE           MOV     R6,A
   \   00000F   EB           MOV     A,R3
   \   000010   34FF         ADDC    A,#-0x1
   \   000012   FF           MOV     R7,A
    358          
    359            /* Insert SOP */
    360            msgPtr[0] = MT_UART_SOF;
   \   000013   8E82         MOV     DPL,R6
   \   000015   8F83         MOV     DPH,R7
   \   000017   74FE         MOV     A,#-0x2
   \   000019   F0           MOVX    @DPTR,A
    361          
    362            /* Insert FCS */
    363            msgPtr[SPI_0DATA_MSG_LEN - 1 + dataLen] = MT_UartCalcFCS (pBuf, (3 + dataLen));
   \   00001A   88..         MOV     ?V0,R0
   \   00001C                ; Setup parameters for call to function MT_UartCalcFCS
   \   00001C   7403         MOV     A,#0x3
   \   00001E   28           ADD     A,R0
   \   00001F   F9           MOV     R1,A
   \   000020   12....       LCALL   `??MT_UartCalcFCS::?relay`; Banked call to: MT_UartCalcFCS
   \   000023   EE           MOV     A,R6
   \   000024   25..         ADD     A,?V0
   \   000026   F582         MOV     DPL,A
   \   000028   E4           CLR     A
   \   000029   3F           ADDC    A,R7
   \   00002A   F583         MOV     DPH,A
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   E9           MOV     A,R1
   \   000031   F0           MOVX    @DPTR,A
    364          
    365            /* Send to UART */
    366          #ifdef MT_UART_DEFAULT_PORT
    367            HalUARTWrite(MT_UART_DEFAULT_PORT, msgPtr, dataLen + SPI_0DATA_MSG_LEN);
   \   000032                ; Setup parameters for call to function HalUARTWrite
   \   000032   E5..         MOV     A,?V0
   \   000034   2405         ADD     A,#0x5
   \   000036   FC           MOV     R4,A
   \   000037   E4           CLR     A
   \   000038   3400         ADDC    A,#0x0
   \   00003A   FD           MOV     R5,A
   \   00003B   EE           MOV     A,R6
   \   00003C   FA           MOV     R2,A
   \   00003D   EF           MOV     A,R7
   \   00003E   FB           MOV     R3,A
   \   00003F   7900         MOV     R1,#0x0
   \   000041   12....       LCALL   `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    368          #endif
    369          
    370            /* Deallocate */
    371            osal_msg_deallocate(msgPtr);
   \   000044                ; Setup parameters for call to function osal_msg_deallocate
   \   000044   EE           MOV     A,R6
   \   000045   FA           MOV     R2,A
   \   000046   EF           MOV     A,R7
   \   000047   FB           MOV     R3,A
   \   000048   12....       LCALL   `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
    372          }
   \   00004B   80..         SJMP    ?Subroutine0

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_TaskInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_TaskInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ProcessEvent::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_TransportAlloc::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_TransportAlloc

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_TransportSend::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_TransportSend
    373          #endif /* MT_TASK */
    374          /***************************************************************************************************
    375           ***************************************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     14   MT_ProcessEvent
        0     14   -> HalUARTWrite
        0     14   -> MTProcessAppRspMsg
        0     14   -> MT_AfExec
        0     14   -> MT_Init
        0     14   -> MT_ProcessDebugMsg
        0     14   -> MT_ProcessDebugStr
        0     14   -> MT_ProcessIncoming
        0     14   -> MT_SysOsalTimerExpired
        0     14   -> MT_UartCalcFCS
        0     14   -> osal_msg_deallocate
        0     14   -> osal_msg_receive
      0      9   MT_TaskInit
        0      9   -> MT_UartInit
        0      9   -> MT_UartRegisterTaskID
        0      9   -> osal_set_event
      0     10   MT_TransportAlloc
        0     10   -> osal_msg_allocate
      1     10   MT_TransportSend
        0     10   -> HalUARTWrite
        0     10   -> MT_UartCalcFCS
        0     10   -> osal_msg_deallocate


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       5  ?Subroutine0
     307  MT_ProcessEvent
       6  MT_ProcessEvent::?relay
       1  MT_TaskID
      33  MT_TaskInit
       6  MT_TaskInit::?relay
      37  MT_TransportAlloc
       6  MT_TransportAlloc::?relay
      77  MT_TransportSend
       6  MT_TransportSend::?relay

 
 459 bytes in segment BANKED_CODE
  24 bytes in segment BANK_RELAYS
   1 byte  in segment XDATA_Z
 
  24 bytes of CODE     memory
 459 bytes of HUGECODE memory
   1 byte  of XDATA    memory

Errors: none
Warnings: none
