///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V9.30.3.3983 for 8051               03/Apr/2017  15:32:59
// Copyright 2004-2016 IAR Systems AB.
// Evaluation license - IAR Embedded Workbench for 8051, Evaluation version 9.30
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        C:\Users\bsavanovic\Desktop\New folder (3)\Z-Stack Mesh
//        1.0.0\Components\stack\zdo\ZDApp.c
//    Command line       =  
//        -f "C:\Users\bsavanovic\Desktop\New folder (3)\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
//        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
//        -DZDO_COORDINATOR -DRTR_NWK) -f "C:\Users\bsavanovic\Desktop\New
//        folder (3)\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0x0422
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
//        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
//        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
//        -DREJOIN_POLL_RATE=440 "C:\Users\bsavanovic\Desktop\New folder
//        (3)\Z-Stack Mesh 1.0.0\Components\stack\zdo\ZDApp.c" -D ZTOOL_P1 -D
//        MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -lC
//        "C:\Users\bsavanovic\Desktop\New folder (3)\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\List"
//        -lA "C:\Users\bsavanovic\Desktop\New folder (3)\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\List"
//        --diag_suppress Pe001,Pa010 -o "C:\Users\bsavanovic\Desktop\New
//        folder (3)\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\Obj"
//        -e --no_code_motion --debug --core=plain --dptr=16,1
//        --data_model=large --code_model=banked
//        --calling_convention=xdata_reentrant --place_constants=data_rom
//        --nr_virtual_regs 16 -I "C:\Users\bsavanovic\Desktop\New folder
//        (3)\Z-Stack Mesh 1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\"
//        -I "C:\Users\bsavanovic\Desktop\New folder (3)\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\Source\" -I
//        "C:\Users\bsavanovic\Desktop\New folder (3)\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\ZMain\TI2530DB\"
//        -I "C:\Users\bsavanovic\Desktop\New folder (3)\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\include\"
//        -I "C:\Users\bsavanovic\Desktop\New folder (3)\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
//        -I "C:\Users\bsavanovic\Desktop\New folder (3)\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\include\"
//        -I "C:\Users\bsavanovic\Desktop\New folder (3)\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
//        -I "C:\Users\bsavanovic\Desktop\New folder (3)\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "C:\Users\bsavanovic\Desktop\New folder (3)\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "C:\Users\bsavanovic\Desktop\New folder (3)\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mt\"
//        -I "C:\Users\bsavanovic\Desktop\New folder (3)\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\osal\include\"
//        -I "C:\Users\bsavanovic\Desktop\New folder (3)\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\saddr\"
//        -I "C:\Users\bsavanovic\Desktop\New folder (3)\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\sdata\"
//        -I "C:\Users\bsavanovic\Desktop\New folder (3)\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\af\"
//        -I "C:\Users\bsavanovic\Desktop\New folder (3)\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
//        -I "C:\Users\bsavanovic\Desktop\New folder (3)\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
//        -I "C:\Users\bsavanovic\Desktop\New folder (3)\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sec\"
//        -I "C:\Users\bsavanovic\Desktop\New folder (3)\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sys\"
//        -I "C:\Users\bsavanovic\Desktop\New folder (3)\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
//        -I "C:\Users\bsavanovic\Desktop\New folder (3)\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\"
//        -I "C:\Users\bsavanovic\Desktop\New folder (3)\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
//        -Ohz --require_prototypes
//    List file          =  
//        C:\Users\bsavanovic\Desktop\New folder (3)\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\List\ZDApp.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME ZDApp

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?V6
        EXTERN ?V7
        EXTERN ?V3
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?CALL_IND
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_ADD_TO_X
        EXTERN ?L_MOV_X
        EXTERN ?PUSH_XSTACK8_X_FOUR
        EXTERN ?PUSH_XSTACK8_X_TWO
        EXTERN ?PUSH_XSTACK_I_FOUR
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?S_DIV_MOD
        EXTERN ?US_SWITCH_SPARSE
        EXTERN ?XLOAD_R0123
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP100_8
        EXTERN ?XSTACK_DISP101_8
        EXTERN ?XSTACK_DISP102_8
        EXTERN ?XSTORE_R0123
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC `??AddrMgrWriteNVRequest::?relay`
        FUNCTION `??AddrMgrWriteNVRequest::?relay`,0203H
        PUBLIC `??ZDAppCheckForHoldKey::?relay`
        FUNCTION `??ZDAppCheckForHoldKey::?relay`,0203H
        PUBLIC `??ZDAppDetermineDeviceType::?relay`
        FUNCTION `??ZDAppDetermineDeviceType::?relay`,0203H
        PUBLIC `??ZDApp_AgeOutPendingBindEntry::?relay`
        FUNCTION `??ZDApp_AgeOutPendingBindEntry::?relay`,0203H
        PUBLIC `??ZDApp_AnnounceNewAddress::?relay`
        FUNCTION `??ZDApp_AnnounceNewAddress::?relay`,0203H
        PUBLIC `??ZDApp_ChangeMatchDescRespPermission::?relay`
        FUNCTION `??ZDApp_ChangeMatchDescRespPermission::?relay`,0203H
        PUBLIC `??ZDApp_CoordStartPANIDConflictCB::?relay`
        FUNCTION `??ZDApp_CoordStartPANIDConflictCB::?relay`,0203H
        PUBLIC `??ZDApp_DeviceAuthEvt::?relay`
        FUNCTION `??ZDApp_DeviceAuthEvt::?relay`,0203H
        PUBLIC `??ZDApp_DeviceConfigured::?relay`
        FUNCTION `??ZDApp_DeviceConfigured::?relay`,0203H
        PUBLIC `??ZDApp_ForceConcentratorChange::?relay`
        FUNCTION `??ZDApp_ForceConcentratorChange::?relay`,0203H
        PUBLIC `??ZDApp_GetEmptyPendingBindReq::?relay`
        FUNCTION `??ZDApp_GetEmptyPendingBindReq::?relay`,0203H
        PUBLIC `??ZDApp_InMsgCB::?relay`
        FUNCTION `??ZDApp_InMsgCB::?relay`,0203H
        PUBLIC `??ZDApp_Init::?relay`
        FUNCTION `??ZDApp_Init::?relay`,0203H
        PUBLIC `??ZDApp_InitPendingBind::?relay`
        FUNCTION `??ZDApp_InitPendingBind::?relay`,0203H
        PUBLIC `??ZDApp_InitUserDesc::?relay`
        FUNCTION `??ZDApp_InitUserDesc::?relay`,0203H
        PUBLIC `??ZDApp_InitZdoCBFunc::?relay`
        FUNCTION `??ZDApp_InitZdoCBFunc::?relay`,0203H
        PUBLIC `??ZDApp_JoinReq::?relay`
        FUNCTION `??ZDApp_JoinReq::?relay`,0203H
        PUBLIC `??ZDApp_LeaveCtrlBypass::?relay`
        FUNCTION `??ZDApp_LeaveCtrlBypass::?relay`,0203H
        PUBLIC `??ZDApp_LeaveCtrlInit::?relay`
        FUNCTION `??ZDApp_LeaveCtrlInit::?relay`,0203H
        PUBLIC `??ZDApp_LeaveCtrlReset::?relay`
        FUNCTION `??ZDApp_LeaveCtrlReset::?relay`,0203H
        PUBLIC `??ZDApp_LeaveCtrlSet::?relay`
        FUNCTION `??ZDApp_LeaveCtrlSet::?relay`,0203H
        PUBLIC `??ZDApp_LeaveCtrlStartup::?relay`
        FUNCTION `??ZDApp_LeaveCtrlStartup::?relay`,0203H
        PUBLIC `??ZDApp_LeaveReset::?relay`
        FUNCTION `??ZDApp_LeaveReset::?relay`,0203H
        PUBLIC `??ZDApp_LeaveUpdate::?relay`
        FUNCTION `??ZDApp_LeaveUpdate::?relay`,0203H
        PUBLIC `??ZDApp_NVUpdate::?relay`
        FUNCTION `??ZDApp_NVUpdate::?relay`,0203H
        PUBLIC `??ZDApp_NetworkDiscoveryReq::?relay`
        FUNCTION `??ZDApp_NetworkDiscoveryReq::?relay`,0203H
        PUBLIC `??ZDApp_NetworkInit::?relay`
        FUNCTION `??ZDApp_NetworkInit::?relay`,0203H
        PUBLIC `??ZDApp_NetworkStartEvt::?relay`
        FUNCTION `??ZDApp_NetworkStartEvt::?relay`,0203H
        PUBLIC `??ZDApp_NodeProfileSync::?relay`
        FUNCTION `??ZDApp_NodeProfileSync::?relay`,0203H
        PUBLIC `??ZDApp_NwkDescListProcessing::?relay`
        FUNCTION `??ZDApp_NwkDescListProcessing::?relay`,0203H
        PUBLIC `??ZDApp_NwkStateUpdateCB::?relay`
        FUNCTION `??ZDApp_NwkStateUpdateCB::?relay`,0203H
        PUBLIC `??ZDApp_ProcessMsgCBs::?relay`
        FUNCTION `??ZDApp_ProcessMsgCBs::?relay`,0203H
        PUBLIC `??ZDApp_ProcessNetworkJoin::?relay`
        FUNCTION `??ZDApp_ProcessNetworkJoin::?relay`,0203H
        PUBLIC `??ZDApp_ProcessOSALMsg::?relay`
        FUNCTION `??ZDApp_ProcessOSALMsg::?relay`,0203H
        PUBLIC `??ZDApp_ProcessPendingBindReq::?relay`
        FUNCTION `??ZDApp_ProcessPendingBindReq::?relay`,0203H
        PUBLIC `??ZDApp_ProcessSecEvent::?relay`
        FUNCTION `??ZDApp_ProcessSecEvent::?relay`,0203H
        PUBLIC `??ZDApp_ProcessSecMsg::?relay`
        FUNCTION `??ZDApp_ProcessSecMsg::?relay`,0203H
        PUBLIC `??ZDApp_ReadNetworkRestoreState::?relay`
        FUNCTION `??ZDApp_ReadNetworkRestoreState::?relay`,0203H
        PUBLIC `??ZDApp_RegisterCBs::?relay`
        FUNCTION `??ZDApp_RegisterCBs::?relay`,0203H
        PUBLIC `??ZDApp_ResetNwkKey::?relay`
        FUNCTION `??ZDApp_ResetNwkKey::?relay`,0203H
        PUBLIC `??ZDApp_ResetTimerCancel::?relay`
        FUNCTION `??ZDApp_ResetTimerCancel::?relay`,0203H
        PUBLIC `??ZDApp_ResetTimerStart::?relay`
        FUNCTION `??ZDApp_ResetTimerStart::?relay`,0203H
        PUBLIC `??ZDApp_RestoreNwkKey::?relay`
        FUNCTION `??ZDApp_RestoreNwkKey::?relay`,0203H
        PUBLIC `??ZDApp_SaveNetworkStateEvt::?relay`
        FUNCTION `??ZDApp_SaveNetworkStateEvt::?relay`,0203H
        PUBLIC `??ZDApp_SaveNwkKey::?relay`
        FUNCTION `??ZDApp_SaveNwkKey::?relay`,0203H
        PUBLIC `??ZDApp_SecInit::?relay`
        FUNCTION `??ZDApp_SecInit::?relay`,0203H
        PUBLIC `??ZDApp_SendEventMsg::?relay`
        FUNCTION `??ZDApp_SendEventMsg::?relay`,0203H
        PUBLIC `??ZDApp_SendMsg::?relay`
        FUNCTION `??ZDApp_SendMsg::?relay`,0203H
        PUBLIC `??ZDApp_SetPendingBindDefault::?relay`
        FUNCTION `??ZDApp_SetPendingBindDefault::?relay`,0203H
        PUBLIC `??ZDApp_StartJoiningCycle::?relay`
        FUNCTION `??ZDApp_StartJoiningCycle::?relay`,0203H
        PUBLIC `??ZDApp_StopJoiningCycle::?relay`
        FUNCTION `??ZDApp_StopJoiningCycle::?relay`,0203H
        PUBLIC `??ZDApp_event_loop::?relay`
        FUNCTION `??ZDApp_event_loop::?relay`,0203H
        PUBLIC `??ZDOInitDevice::?relay`
        FUNCTION `??ZDOInitDevice::?relay`,0203H
        PUBLIC `??ZDO_AddrChangeIndicationCB::?relay`
        FUNCTION `??ZDO_AddrChangeIndicationCB::?relay`,0203H
        PUBLIC `??ZDO_ConcentratorIndicationCB::?relay`
        FUNCTION `??ZDO_ConcentratorIndicationCB::?relay`,0203H
        PUBLIC `??ZDO_DeregisterForZdoCB::?relay`
        FUNCTION `??ZDO_DeregisterForZdoCB::?relay`,0203H
        PUBLIC `??ZDO_JoinConfirmCB::?relay`
        FUNCTION `??ZDO_JoinConfirmCB::?relay`,0203H
        PUBLIC `??ZDO_JoinIndicationCB::?relay`
        FUNCTION `??ZDO_JoinIndicationCB::?relay`,0203H
        PUBLIC `??ZDO_LeaveCnf::?relay`
        FUNCTION `??ZDO_LeaveCnf::?relay`,0203H
        PUBLIC `??ZDO_LeaveInd::?relay`
        FUNCTION `??ZDO_LeaveInd::?relay`,0203H
        PUBLIC `??ZDO_ManytoOneFailureIndicationCB::?relay`
        FUNCTION `??ZDO_ManytoOneFailureIndicationCB::?relay`,0203H
        PUBLIC `??ZDO_NetworkDiscoveryConfirmCB::?relay`
        FUNCTION `??ZDO_NetworkDiscoveryConfirmCB::?relay`,0203H
        PUBLIC `??ZDO_NetworkFormationConfirmCB::?relay`
        FUNCTION `??ZDO_NetworkFormationConfirmCB::?relay`,0203H
        PUBLIC `??ZDO_NetworkStatusCB::?relay`
        FUNCTION `??ZDO_NetworkStatusCB::?relay`,0203H
        PUBLIC `??ZDO_PermitJoinCB::?relay`
        FUNCTION `??ZDO_PermitJoinCB::?relay`,0203H
        PUBLIC `??ZDO_PollConfirmCB::?relay`
        FUNCTION `??ZDO_PollConfirmCB::?relay`,0203H
        PUBLIC `??ZDO_RegisterForZdoCB::?relay`
        FUNCTION `??ZDO_RegisterForZdoCB::?relay`,0203H
        PUBLIC `??ZDO_SrcRtgIndCB::?relay`
        FUNCTION `??ZDO_SrcRtgIndCB::?relay`,0203H
        PUBLIC `??ZDO_StartRouterConfirmCB::?relay`
        FUNCTION `??ZDO_StartRouterConfirmCB::?relay`,0203H
        PUBLIC `??ZDO_SyncIndicationCB::?relay`
        FUNCTION `??ZDO_SyncIndicationCB::?relay`,0203H
        PUBLIC `??ZDO_UpdateDeviceIndication::?relay`
        FUNCTION `??ZDO_UpdateDeviceIndication::?relay`,0203H
        PUBLIC `??ZDO_beaconNotifyIndCB::?relay`
        FUNCTION `??ZDO_beaconNotifyIndCB::?relay`,0203H
        PUBLIC AddrMgrWriteNVRequest
        FUNCTION AddrMgrWriteNVRequest,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC MatchRsps
        PUBLIC ZDAppCheckForHoldKey
        FUNCTION ZDAppCheckForHoldKey,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDAppDetermineDeviceType
        FUNCTION ZDAppDetermineDeviceType,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDAppNwkAddr
        PUBLIC ZDAppPendingBindReq
        PUBLIC ZDAppTaskID
        PUBLIC ZDApp_AgeOutPendingBindEntry
        FUNCTION ZDApp_AgeOutPendingBindEntry,0a1203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 31, STACK
        PUBLIC ZDApp_AnnounceNewAddress
        FUNCTION ZDApp_AnnounceNewAddress,0a1203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 11, STACK
        PUBLIC ZDApp_AutoFindMode_epDesc
        PUBLIC ZDApp_ChangeMatchDescRespPermission
        FUNCTION ZDApp_ChangeMatchDescRespPermission,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDApp_CoordStartPANIDConflictCB
        FUNCTION ZDApp_CoordStartPANIDConflictCB,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC ZDApp_DeviceAuthEvt
        FUNCTION ZDApp_DeviceAuthEvt,021203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_DeviceConfigured
        FUNCTION ZDApp_DeviceConfigured,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC ZDApp_ForceConcentratorChange
        FUNCTION ZDApp_ForceConcentratorChange,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDApp_GetEmptyPendingBindReq
        FUNCTION ZDApp_GetEmptyPendingBindReq,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_InMsgCB
        FUNCTION ZDApp_InMsgCB,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDApp_Init
        FUNCTION ZDApp_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDApp_InitPendingBind
        FUNCTION ZDApp_InitPendingBind,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDApp_InitUserDesc
        FUNCTION ZDApp_InitUserDesc,0a1203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 31, STACK
        PUBLIC ZDApp_InitZdoCBFunc
        FUNCTION ZDApp_InitZdoCBFunc,0203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_JoinReq
        FUNCTION ZDApp_JoinReq,0a1203H
        ARGFRAME XSTACK, 4, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC ZDApp_LeaveCtrl
        PUBLIC ZDApp_LeaveCtrlBypass
        FUNCTION ZDApp_LeaveCtrlBypass,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_LeaveCtrlInit
        FUNCTION ZDApp_LeaveCtrlInit,0a1203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDApp_LeaveCtrlReset
        FUNCTION ZDApp_LeaveCtrlReset,0a1203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDApp_LeaveCtrlSet
        FUNCTION ZDApp_LeaveCtrlSet,0a1203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDApp_LeaveCtrlStartup
        FUNCTION ZDApp_LeaveCtrlStartup,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_LeaveReset
        FUNCTION ZDApp_LeaveReset,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDApp_LeaveUpdate
        FUNCTION ZDApp_LeaveUpdate,0a1203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 35, STACK
        PUBLIC ZDApp_NVUpdate
        FUNCTION ZDApp_NVUpdate,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC ZDApp_NetworkDiscoveryReq
        FUNCTION ZDApp_NetworkDiscoveryReq,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC ZDApp_NetworkInit
        FUNCTION ZDApp_NetworkInit,0a1203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 16, STACK
        PUBLIC ZDApp_NetworkStartEvt
        FUNCTION ZDApp_NetworkStartEvt,021203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_NewDeviceList
        PUBLIC ZDApp_NodeProfileSync
        FUNCTION ZDApp_NodeProfileSync,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDApp_NwkDescListProcessing
        FUNCTION ZDApp_NwkDescListProcessing,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDApp_NwkStateUpdateCB
        FUNCTION ZDApp_NwkStateUpdateCB,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_ProcessMsgCBs
        FUNCTION ZDApp_ProcessMsgCBs,0a1203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 56, STACK
        PUBLIC ZDApp_ProcessNetworkJoin
        FUNCTION ZDApp_ProcessNetworkJoin,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC ZDApp_ProcessOSALMsg
        FUNCTION ZDApp_ProcessOSALMsg,021203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_ProcessPendingBindReq
        FUNCTION ZDApp_ProcessPendingBindReq,0a1203H
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 21, STACK
        PUBLIC ZDApp_ProcessSecEvent
        FUNCTION ZDApp_ProcessSecEvent,0a1203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 20, STACK
        PUBLIC ZDApp_ProcessSecMsg
        FUNCTION ZDApp_ProcessSecMsg,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_ReadNetworkRestoreState
        FUNCTION ZDApp_ReadNetworkRestoreState,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDApp_RegisterCBs
        FUNCTION ZDApp_RegisterCBs,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_ResetNwkKey
        FUNCTION ZDApp_ResetNwkKey,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        PUBLIC ZDApp_ResetTimerCancel
        FUNCTION ZDApp_ResetTimerCancel,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_ResetTimerStart
        FUNCTION ZDApp_ResetTimerStart,0a1203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 16, STACK
        PUBLIC ZDApp_RestoreNwkKey
        FUNCTION ZDApp_RestoreNwkKey,0a1203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 53, STACK
        PUBLIC ZDApp_SaveNetworkStateEvt
        FUNCTION ZDApp_SaveNetworkStateEvt,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC ZDApp_SaveNwkKey
        FUNCTION ZDApp_SaveNwkKey,0a1203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 35, STACK
        PUBLIC ZDApp_SavedPollRate
        PUBLIC ZDApp_SecInit
        FUNCTION ZDApp_SecInit,0a1203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 25, STACK
        PUBLIC ZDApp_SendEventMsg
        FUNCTION ZDApp_SendEventMsg,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDApp_SendMsg
        FUNCTION ZDApp_SendMsg,0a1203H
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 19, STACK
        PUBLIC ZDApp_SetPendingBindDefault
        FUNCTION ZDApp_SetPendingBindDefault,021203H
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDApp_StartJoiningCycle
        FUNCTION ZDApp_StartJoiningCycle,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_StopJoiningCycle
        FUNCTION ZDApp_StopJoiningCycle,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_epDesc
        PUBLIC ZDApp_event_loop
        FUNCTION ZDApp_event_loop,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        PUBLIC ZDOInitDevice
        FUNCTION ZDOInitDevice,0a1203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 12, STACK
        PUBLIC ZDO_AddrChangeIndicationCB
        FUNCTION ZDO_AddrChangeIndicationCB,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC ZDO_ConcentratorIndicationCB
        FUNCTION ZDO_ConcentratorIndicationCB,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDO_DeregisterForZdoCB
        FUNCTION ZDO_DeregisterForZdoCB,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDO_JoinConfirmCB
        FUNCTION ZDO_JoinConfirmCB,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 17, STACK
        PUBLIC ZDO_JoinIndicationCB
        FUNCTION ZDO_JoinIndicationCB,0a1203H
        ARGFRAME XSTACK, 1, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBLIC ZDO_LeaveCnf
        FUNCTION ZDO_LeaveCnf,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC ZDO_LeaveInd
        FUNCTION ZDO_LeaveInd,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC ZDO_ManytoOneFailureIndicationCB
        FUNCTION ZDO_ManytoOneFailureIndicationCB,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDO_NetworkDiscoveryConfirmCB
        FUNCTION ZDO_NetworkDiscoveryConfirmCB,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 3, STACK
        LOCFRAME XSTACK, 3, STACK
        PUBLIC ZDO_NetworkFormationConfirmCB
        FUNCTION ZDO_NetworkFormationConfirmCB,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDO_NetworkStatusCB
        FUNCTION ZDO_NetworkStatusCB,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDO_PermitJoinCB
        FUNCTION ZDO_PermitJoinCB,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 3, STACK
        LOCFRAME XSTACK, 1, STACK
        PUBLIC ZDO_PollConfirmCB
        FUNCTION ZDO_PollConfirmCB,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC ZDO_RegisterForZdoCB
        FUNCTION ZDO_RegisterForZdoCB,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDO_SrcRtgIndCB
        FUNCTION ZDO_SrcRtgIndCB,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDO_StartRouterConfirmCB
        FUNCTION ZDO_StartRouterConfirmCB,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDO_SyncIndicationCB
        FUNCTION ZDO_SyncIndicationCB,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDO_UpdateDeviceIndication
        FUNCTION ZDO_UpdateDeviceIndication,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC ZDO_UseExtendedPANID
        PUBLIC ZDO_beaconNotifyIndCB
        FUNCTION ZDO_beaconNotifyIndCB,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBWEAK __Constant_258
        PUBWEAK __Constant_3e8
        PUBWEAK __Constant_4e2
        PUBWEAK __Constant_64
        PUBLIC _tmpRejoinState
        PUBLIC continueJoining
        PUBLIC devStartMode
        PUBLIC devState
        PUBLIC nwkStatus
        PUBLIC retryCnt
        PUBLIC zdappMgmtNwkDiscReqInProgress
        PUBLIC zdappMgmtNwkDiscRspAddr
        PUBLIC zdappMgmtNwkDiscRspTransSeq
        PUBLIC zdappMgmtNwkDiscStartIndex
        PUBLIC zdappMgmtSavedNwkState
        PUBLIC zdoCBFunc
        PUBLIC zdoDiscCounter
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
APSME_BindRequest   SYMBOL "APSME_BindRequest"
`??APSME_BindRequest::?relay` SYMBOL "?relay", APSME_BindRequest
APSME_HoldDataRequests SYMBOL "APSME_HoldDataRequests"
`??APSME_HoldDataRequests::?relay` SYMBOL "?relay", APSME_HoldDataRequests
APSME_UpdateDeviceReq SYMBOL "APSME_UpdateDeviceReq"
`??APSME_UpdateDeviceReq::?relay` SYMBOL "?relay", APSME_UpdateDeviceReq
AddrMgrEntryLookupExt SYMBOL "AddrMgrEntryLookupExt"
`??AddrMgrEntryLookupExt::?relay` SYMBOL "?relay", AddrMgrEntryLookupExt
AddrMgrEntryRelease SYMBOL "AddrMgrEntryRelease"
`??AddrMgrEntryRelease::?relay` SYMBOL "?relay", AddrMgrEntryRelease
AddrMgrExtAddrSet   SYMBOL "AddrMgrExtAddrSet"
`??AddrMgrExtAddrSet::?relay` SYMBOL "?relay", AddrMgrExtAddrSet
AssocIsChild        SYMBOL "AssocIsChild"
`??AssocIsChild::?relay` SYMBOL "?relay", AssocIsChild
HalKeyRead          SYMBOL "HalKeyRead"
`??HalKeyRead::?relay` SYMBOL "?relay", HalKeyRead
HalLcdWriteString   SYMBOL "HalLcdWriteString"
`??HalLcdWriteString::?relay` SYMBOL "?relay", HalLcdWriteString
HalLedBlink         SYMBOL "HalLedBlink"
`??HalLedBlink::?relay` SYMBOL "?relay", HalLedBlink
HalLedSet           SYMBOL "HalLedSet"
`??HalLedSet::?relay` SYMBOL "?relay", HalLedSet
NLME_GetCoordShortAddr SYMBOL "NLME_GetCoordShortAddr"
`??NLME_GetCoordShortAddr::?relay` SYMBOL "?relay", NLME_GetCoordShortAddr
NLME_GetEnergyThreshold SYMBOL "NLME_GetEnergyThreshold"
`??NLME_GetEnergyThreshold::?relay` SYMBOL "?relay", NLME_GetEnergyThreshold
NLME_GetExtAddr     SYMBOL "NLME_GetExtAddr"
`??NLME_GetExtAddr::?relay` SYMBOL "?relay", NLME_GetExtAddr
NLME_GetShortAddr   SYMBOL "NLME_GetShortAddr"
`??NLME_GetShortAddr::?relay` SYMBOL "?relay", NLME_GetShortAddr
NLME_JoinRequest    SYMBOL "NLME_JoinRequest"
`??NLME_JoinRequest::?relay` SYMBOL "?relay", NLME_JoinRequest
NLME_LeaveRsp       SYMBOL "NLME_LeaveRsp"
`??NLME_LeaveRsp::?relay` SYMBOL "?relay", NLME_LeaveRsp
NLME_NetworkDiscoveryRequest SYMBOL "NLME_NetworkDiscoveryRequest"
`??NLME_NetworkDiscoveryRequest::?relay` SYMBOL "?relay", NLME_NetworkDiscoveryRequest
NLME_NwkDiscTerm    SYMBOL "NLME_NwkDiscTerm"
`??NLME_NwkDiscTerm::?relay` SYMBOL "?relay", NLME_NwkDiscTerm
NLME_RemoveChild    SYMBOL "NLME_RemoveChild"
`??NLME_RemoveChild::?relay` SYMBOL "?relay", NLME_RemoveChild
NLME_SetBroadcastFilter SYMBOL "NLME_SetBroadcastFilter"
`??NLME_SetBroadcastFilter::?relay` SYMBOL "?relay", NLME_SetBroadcastFilter
NLME_SetEnergyThreshold SYMBOL "NLME_SetEnergyThreshold"
`??NLME_SetEnergyThreshold::?relay` SYMBOL "?relay", NLME_SetEnergyThreshold
NLME_SetPollRate    SYMBOL "NLME_SetPollRate"
`??NLME_SetPollRate::?relay` SYMBOL "?relay", NLME_SetPollRate
NLME_SetQueuedPollRate SYMBOL "NLME_SetQueuedPollRate"
`??NLME_SetQueuedPollRate::?relay` SYMBOL "?relay", NLME_SetQueuedPollRate
NLME_SetResponseRate SYMBOL "NLME_SetResponseRate"
`??NLME_SetResponseRate::?relay` SYMBOL "?relay", NLME_SetResponseRate
NLME_StartRouterRequest SYMBOL "NLME_StartRouterRequest"
`??NLME_StartRouterRequest::?relay` SYMBOL "?relay", NLME_StartRouterRequest
RTG_MTORouteReq     SYMBOL "RTG_MTORouteReq"
`??RTG_MTORouteReq::?relay` SYMBOL "?relay", RTG_MTORouteReq
RTG_RemoveRtgEntry  SYMBOL "RTG_RemoveRtgEntry"
`??RTG_RemoveRtgEntry::?relay` SYMBOL "?relay", RTG_RemoveRtgEntry
SSP_ReadNwkActiveKey SYMBOL "SSP_ReadNwkActiveKey"
`??SSP_ReadNwkActiveKey::?relay` SYMBOL "?relay", SSP_ReadNwkActiveKey
SSP_SwitchNwkKey    SYMBOL "SSP_SwitchNwkKey"
`??SSP_SwitchNwkKey::?relay` SYMBOL "?relay", SSP_SwitchNwkKey
SSP_UpdateNwkKey    SYMBOL "SSP_UpdateNwkKey"
`??SSP_UpdateNwkKey::?relay` SYMBOL "?relay", SSP_UpdateNwkKey
ZDConfig_InitDescriptors SYMBOL "ZDConfig_InitDescriptors"
`??ZDConfig_InitDescriptors::?relay` SYMBOL "?relay", ZDConfig_InitDescriptors
ZDMatchSendState    SYMBOL "ZDMatchSendState"
`??ZDMatchSendState::?relay` SYMBOL "?relay", ZDMatchSendState
ZDO_Init            SYMBOL "ZDO_Init"
`??ZDO_Init::?relay` SYMBOL "?relay", ZDO_Init
ZDO_MatchEndDeviceBind SYMBOL "ZDO_MatchEndDeviceBind"
`??ZDO_MatchEndDeviceBind::?relay` SYMBOL "?relay", ZDO_MatchEndDeviceBind
ZDO_ParseAddrRsp    SYMBOL "ZDO_ParseAddrRsp"
`??ZDO_ParseAddrRsp::?relay` SYMBOL "?relay", ZDO_ParseAddrRsp
ZDO_ParseBindUnbindReq SYMBOL "ZDO_ParseBindUnbindReq"
`??ZDO_ParseBindUnbindReq::?relay` SYMBOL "?relay", ZDO_ParseBindUnbindReq
ZDO_ParseEndDeviceBindReq SYMBOL "ZDO_ParseEndDeviceBindReq"
`??ZDO_ParseEndDeviceBindReq::?relay` SYMBOL "?relay", ZDO_ParseEndDeviceBindReq
ZDO_ProcessBindUnbindReq SYMBOL "ZDO_ProcessBindUnbindReq"
`??ZDO_ProcessBindUnbindReq::?relay` SYMBOL "?relay", ZDO_ProcessBindUnbindReq
ZDO_RegisterForZDOMsg SYMBOL "ZDO_RegisterForZDOMsg"
`??ZDO_RegisterForZDOMsg::?relay` SYMBOL "?relay", ZDO_RegisterForZDOMsg
ZDO_StartDevice     SYMBOL "ZDO_StartDevice"
`??ZDO_StartDevice::?relay` SYMBOL "?relay", ZDO_StartDevice
ZDO_UpdateAddrManager SYMBOL "ZDO_UpdateAddrManager"
`??ZDO_UpdateAddrManager::?relay` SYMBOL "?relay", ZDO_UpdateAddrManager
ZDO_UpdateNwkStatus SYMBOL "ZDO_UpdateNwkStatus"
`??ZDO_UpdateNwkStatus::?relay` SYMBOL "?relay", ZDO_UpdateNwkStatus
ZDP_DeviceAnnce     SYMBOL "ZDP_DeviceAnnce"
`??ZDP_DeviceAnnce::?relay` SYMBOL "?relay", ZDP_DeviceAnnce
ZDP_GenericRsp      SYMBOL "ZDP_GenericRsp"
`??ZDP_GenericRsp::?relay` SYMBOL "?relay", ZDP_GenericRsp
ZDP_IncomingData    SYMBOL "ZDP_IncomingData"
`??ZDP_IncomingData::?relay` SYMBOL "?relay", ZDP_IncomingData
ZDP_SendData        SYMBOL "ZDP_SendData"
`??ZDP_SendData::?relay` SYMBOL "?relay", ZDP_SendData
ZDSecMgrAddrClear   SYMBOL "ZDSecMgrAddrClear"
`??ZDSecMgrAddrClear::?relay` SYMBOL "?relay", ZDSecMgrAddrClear
ZDSecMgrDeviceRemoveByExtAddr SYMBOL "ZDSecMgrDeviceRemoveByExtAddr"
`??ZDSecMgrDeviceRemoveByExtAddr::?relay` SYMBOL "?relay", ZDSecMgrDeviceRemoveByExtAddr
ZDSecMgrInit        SYMBOL "ZDSecMgrInit"
`??ZDSecMgrInit::?relay` SYMBOL "?relay", ZDSecMgrInit
ZDSecMgrNewDeviceEvent SYMBOL "ZDSecMgrNewDeviceEvent"
`??ZDSecMgrNewDeviceEvent::?relay` SYMBOL "?relay", ZDSecMgrNewDeviceEvent
ZDSecMgrReadKeyFromNv SYMBOL "ZDSecMgrReadKeyFromNv"
`??ZDSecMgrReadKeyFromNv::?relay` SYMBOL "?relay", ZDSecMgrReadKeyFromNv
ZDSecMgrSaveTCLinkKey SYMBOL "ZDSecMgrSaveTCLinkKey"
`??ZDSecMgrSaveTCLinkKey::?relay` SYMBOL "?relay", ZDSecMgrSaveTCLinkKey
ZDSecMgrUpdateDeviceInd SYMBOL "ZDSecMgrUpdateDeviceInd"
`??ZDSecMgrUpdateDeviceInd::?relay` SYMBOL "?relay", ZDSecMgrUpdateDeviceInd
ZMacSetReq          SYMBOL "ZMacSetReq"
`??ZMacSetReq::?relay` SYMBOL "?relay", ZMacSetReq
afRegister          SYMBOL "afRegister"
`??afRegister::?relay` SYMBOL "?relay", afRegister
afSetMatch          SYMBOL "afSetMatch"
`??afSetMatch::?relay` SYMBOL "?relay", afSetMatch
nwkNeighborFindEmptySlot SYMBOL "nwkNeighborFindEmptySlot"
`??nwkNeighborFindEmptySlot::?relay` SYMBOL "?relay", nwkNeighborFindEmptySlot
nwkNeighborInitTable SYMBOL "nwkNeighborInitTable"
`??nwkNeighborInitTable::?relay` SYMBOL "?relay", nwkNeighborInitTable
nwkNeighborRemove   SYMBOL "nwkNeighborRemove"
`??nwkNeighborRemove::?relay` SYMBOL "?relay", nwkNeighborRemove
nwk_ExtPANIDValid   SYMBOL "nwk_ExtPANIDValid"
`??nwk_ExtPANIDValid::?relay` SYMBOL "?relay", nwk_ExtPANIDValid
nwk_getNwkDescList  SYMBOL "nwk_getNwkDescList"
`??nwk_getNwkDescList::?relay` SYMBOL "?relay", nwk_getNwkDescList
osal_clear_event    SYMBOL "osal_clear_event"
`??osal_clear_event::?relay` SYMBOL "?relay", osal_clear_event
osal_get_timeoutEx  SYMBOL "osal_get_timeoutEx"
`??osal_get_timeoutEx::?relay` SYMBOL "?relay", osal_get_timeoutEx
osal_mem_alloc      SYMBOL "osal_mem_alloc"
`??osal_mem_alloc::?relay` SYMBOL "?relay", osal_mem_alloc
osal_mem_free       SYMBOL "osal_mem_free"
`??osal_mem_free::?relay` SYMBOL "?relay", osal_mem_free
osal_memcmp         SYMBOL "osal_memcmp"
`??osal_memcmp::?relay` SYMBOL "?relay", osal_memcmp
osal_memcpy         SYMBOL "osal_memcpy"
`??osal_memcpy::?relay` SYMBOL "?relay", osal_memcpy
osal_memset         SYMBOL "osal_memset"
`??osal_memset::?relay` SYMBOL "?relay", osal_memset
osal_msg_allocate   SYMBOL "osal_msg_allocate"
`??osal_msg_allocate::?relay` SYMBOL "?relay", osal_msg_allocate
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
`??osal_msg_deallocate::?relay` SYMBOL "?relay", osal_msg_deallocate
osal_msg_receive    SYMBOL "osal_msg_receive"
`??osal_msg_receive::?relay` SYMBOL "?relay", osal_msg_receive
osal_msg_send       SYMBOL "osal_msg_send"
`??osal_msg_send::?relay` SYMBOL "?relay", osal_msg_send
osal_nv_item_init   SYMBOL "osal_nv_item_init"
`??osal_nv_item_init::?relay` SYMBOL "?relay", osal_nv_item_init
osal_nv_read        SYMBOL "osal_nv_read"
`??osal_nv_read::?relay` SYMBOL "?relay", osal_nv_read
osal_nv_write       SYMBOL "osal_nv_write"
`??osal_nv_write::?relay` SYMBOL "?relay", osal_nv_write
osal_pwrmgr_device  SYMBOL "osal_pwrmgr_device"
`??osal_pwrmgr_device::?relay` SYMBOL "?relay", osal_pwrmgr_device
osal_rand           SYMBOL "osal_rand"
`??osal_rand::?relay` SYMBOL "?relay", osal_rand
osal_set_event      SYMBOL "osal_set_event"
`??osal_set_event::?relay` SYMBOL "?relay", osal_set_event
osal_start_timerEx  SYMBOL "osal_start_timerEx"
`??osal_start_timerEx::?relay` SYMBOL "?relay", osal_start_timerEx
osal_stop_timerEx   SYMBOL "osal_stop_timerEx"
`??osal_stop_timerEx::?relay` SYMBOL "?relay", osal_stop_timerEx
sAddrExtCmp         SYMBOL "sAddrExtCmp"
`??sAddrExtCmp::?relay` SYMBOL "?relay", sAddrExtCmp
sAddrExtCpy         SYMBOL "sAddrExtCpy"
`??sAddrExtCpy::?relay` SYMBOL "?relay", sAddrExtCpy
zgInitItems         SYMBOL "zgInitItems"
`??zgInitItems::?relay` SYMBOL "?relay", zgInitItems
zgReadStartupOptions SYMBOL "zgReadStartupOptions"
`??zgReadStartupOptions::?relay` SYMBOL "?relay", zgReadStartupOptions
zgWriteStartupOptions SYMBOL "zgWriteStartupOptions"
`??zgWriteStartupOptions::?relay` SYMBOL "?relay", zgWriteStartupOptions
AddrMgrWriteNVRequest SYMBOL "AddrMgrWriteNVRequest"
`??AddrMgrWriteNVRequest::?relay` SYMBOL "?relay", AddrMgrWriteNVRequest
ZDAppCheckForHoldKey SYMBOL "ZDAppCheckForHoldKey"
`??ZDAppCheckForHoldKey::?relay` SYMBOL "?relay", ZDAppCheckForHoldKey
ZDAppDetermineDeviceType SYMBOL "ZDAppDetermineDeviceType"
`??ZDAppDetermineDeviceType::?relay` SYMBOL "?relay", ZDAppDetermineDeviceType
ZDApp_AgeOutPendingBindEntry SYMBOL "ZDApp_AgeOutPendingBindEntry"
`??ZDApp_AgeOutPendingBindEntry::?relay` SYMBOL "?relay", ZDApp_AgeOutPendingBindEntry
ZDApp_AnnounceNewAddress SYMBOL "ZDApp_AnnounceNewAddress"
`??ZDApp_AnnounceNewAddress::?relay` SYMBOL "?relay", ZDApp_AnnounceNewAddress
ZDApp_ChangeMatchDescRespPermission SYMBOL "ZDApp_ChangeMatchDescRespPermission"
`??ZDApp_ChangeMatchDescRespPermission::?relay` SYMBOL "?relay", ZDApp_ChangeMatchDescRespPermission
ZDApp_CoordStartPANIDConflictCB SYMBOL "ZDApp_CoordStartPANIDConflictCB"
`??ZDApp_CoordStartPANIDConflictCB::?relay` SYMBOL "?relay", ZDApp_CoordStartPANIDConflictCB
ZDApp_DeviceAuthEvt SYMBOL "ZDApp_DeviceAuthEvt"
`??ZDApp_DeviceAuthEvt::?relay` SYMBOL "?relay", ZDApp_DeviceAuthEvt
ZDApp_DeviceConfigured SYMBOL "ZDApp_DeviceConfigured"
`??ZDApp_DeviceConfigured::?relay` SYMBOL "?relay", ZDApp_DeviceConfigured
ZDApp_ForceConcentratorChange SYMBOL "ZDApp_ForceConcentratorChange"
`??ZDApp_ForceConcentratorChange::?relay` SYMBOL "?relay", ZDApp_ForceConcentratorChange
ZDApp_GetEmptyPendingBindReq SYMBOL "ZDApp_GetEmptyPendingBindReq"
`??ZDApp_GetEmptyPendingBindReq::?relay` SYMBOL "?relay", ZDApp_GetEmptyPendingBindReq
ZDApp_InMsgCB       SYMBOL "ZDApp_InMsgCB"
`??ZDApp_InMsgCB::?relay` SYMBOL "?relay", ZDApp_InMsgCB
ZDApp_Init          SYMBOL "ZDApp_Init"
`??ZDApp_Init::?relay` SYMBOL "?relay", ZDApp_Init
ZDApp_InitPendingBind SYMBOL "ZDApp_InitPendingBind"
`??ZDApp_InitPendingBind::?relay` SYMBOL "?relay", ZDApp_InitPendingBind
ZDApp_InitUserDesc  SYMBOL "ZDApp_InitUserDesc"
`??ZDApp_InitUserDesc::?relay` SYMBOL "?relay", ZDApp_InitUserDesc
ZDApp_InitZdoCBFunc SYMBOL "ZDApp_InitZdoCBFunc"
`??ZDApp_InitZdoCBFunc::?relay` SYMBOL "?relay", ZDApp_InitZdoCBFunc
ZDApp_JoinReq       SYMBOL "ZDApp_JoinReq"
`??ZDApp_JoinReq::?relay` SYMBOL "?relay", ZDApp_JoinReq
ZDApp_LeaveCtrlBypass SYMBOL "ZDApp_LeaveCtrlBypass"
`??ZDApp_LeaveCtrlBypass::?relay` SYMBOL "?relay", ZDApp_LeaveCtrlBypass
ZDApp_LeaveCtrlInit SYMBOL "ZDApp_LeaveCtrlInit"
`??ZDApp_LeaveCtrlInit::?relay` SYMBOL "?relay", ZDApp_LeaveCtrlInit
ZDApp_LeaveCtrlReset SYMBOL "ZDApp_LeaveCtrlReset"
`??ZDApp_LeaveCtrlReset::?relay` SYMBOL "?relay", ZDApp_LeaveCtrlReset
ZDApp_LeaveCtrlSet  SYMBOL "ZDApp_LeaveCtrlSet"
`??ZDApp_LeaveCtrlSet::?relay` SYMBOL "?relay", ZDApp_LeaveCtrlSet
ZDApp_LeaveCtrlStartup SYMBOL "ZDApp_LeaveCtrlStartup"
`??ZDApp_LeaveCtrlStartup::?relay` SYMBOL "?relay", ZDApp_LeaveCtrlStartup
ZDApp_LeaveReset    SYMBOL "ZDApp_LeaveReset"
`??ZDApp_LeaveReset::?relay` SYMBOL "?relay", ZDApp_LeaveReset
ZDApp_LeaveUpdate   SYMBOL "ZDApp_LeaveUpdate"
`??ZDApp_LeaveUpdate::?relay` SYMBOL "?relay", ZDApp_LeaveUpdate
ZDApp_NVUpdate      SYMBOL "ZDApp_NVUpdate"
`??ZDApp_NVUpdate::?relay` SYMBOL "?relay", ZDApp_NVUpdate
ZDApp_NetworkDiscoveryReq SYMBOL "ZDApp_NetworkDiscoveryReq"
`??ZDApp_NetworkDiscoveryReq::?relay` SYMBOL "?relay", ZDApp_NetworkDiscoveryReq
ZDApp_NetworkInit   SYMBOL "ZDApp_NetworkInit"
`??ZDApp_NetworkInit::?relay` SYMBOL "?relay", ZDApp_NetworkInit
ZDApp_NetworkStartEvt SYMBOL "ZDApp_NetworkStartEvt"
`??ZDApp_NetworkStartEvt::?relay` SYMBOL "?relay", ZDApp_NetworkStartEvt
ZDApp_NodeProfileSync SYMBOL "ZDApp_NodeProfileSync"
`??ZDApp_NodeProfileSync::?relay` SYMBOL "?relay", ZDApp_NodeProfileSync
ZDApp_NwkDescListProcessing SYMBOL "ZDApp_NwkDescListProcessing"
`??ZDApp_NwkDescListProcessing::?relay` SYMBOL "?relay", ZDApp_NwkDescListProcessing
ZDApp_NwkStateUpdateCB SYMBOL "ZDApp_NwkStateUpdateCB"
`??ZDApp_NwkStateUpdateCB::?relay` SYMBOL "?relay", ZDApp_NwkStateUpdateCB
ZDApp_ProcessMsgCBs SYMBOL "ZDApp_ProcessMsgCBs"
`??ZDApp_ProcessMsgCBs::?relay` SYMBOL "?relay", ZDApp_ProcessMsgCBs
ZDApp_ProcessNetworkJoin SYMBOL "ZDApp_ProcessNetworkJoin"
`??ZDApp_ProcessNetworkJoin::?relay` SYMBOL "?relay", ZDApp_ProcessNetworkJoin
ZDApp_ProcessOSALMsg SYMBOL "ZDApp_ProcessOSALMsg"
`??ZDApp_ProcessOSALMsg::?relay` SYMBOL "?relay", ZDApp_ProcessOSALMsg
ZDApp_ProcessPendingBindReq SYMBOL "ZDApp_ProcessPendingBindReq"
`??ZDApp_ProcessPendingBindReq::?relay` SYMBOL "?relay", ZDApp_ProcessPendingBindReq
ZDApp_ProcessSecEvent SYMBOL "ZDApp_ProcessSecEvent"
`??ZDApp_ProcessSecEvent::?relay` SYMBOL "?relay", ZDApp_ProcessSecEvent
ZDApp_ProcessSecMsg SYMBOL "ZDApp_ProcessSecMsg"
`??ZDApp_ProcessSecMsg::?relay` SYMBOL "?relay", ZDApp_ProcessSecMsg
ZDApp_ReadNetworkRestoreState SYMBOL "ZDApp_ReadNetworkRestoreState"
`??ZDApp_ReadNetworkRestoreState::?relay` SYMBOL "?relay", ZDApp_ReadNetworkRestoreState
ZDApp_RegisterCBs   SYMBOL "ZDApp_RegisterCBs"
`??ZDApp_RegisterCBs::?relay` SYMBOL "?relay", ZDApp_RegisterCBs
ZDApp_ResetNwkKey   SYMBOL "ZDApp_ResetNwkKey"
`??ZDApp_ResetNwkKey::?relay` SYMBOL "?relay", ZDApp_ResetNwkKey
ZDApp_ResetTimerCancel SYMBOL "ZDApp_ResetTimerCancel"
`??ZDApp_ResetTimerCancel::?relay` SYMBOL "?relay", ZDApp_ResetTimerCancel
ZDApp_ResetTimerStart SYMBOL "ZDApp_ResetTimerStart"
`??ZDApp_ResetTimerStart::?relay` SYMBOL "?relay", ZDApp_ResetTimerStart
ZDApp_RestoreNwkKey SYMBOL "ZDApp_RestoreNwkKey"
`??ZDApp_RestoreNwkKey::?relay` SYMBOL "?relay", ZDApp_RestoreNwkKey
ZDApp_SaveNetworkStateEvt SYMBOL "ZDApp_SaveNetworkStateEvt"
`??ZDApp_SaveNetworkStateEvt::?relay` SYMBOL "?relay", ZDApp_SaveNetworkStateEvt
ZDApp_SaveNwkKey    SYMBOL "ZDApp_SaveNwkKey"
`??ZDApp_SaveNwkKey::?relay` SYMBOL "?relay", ZDApp_SaveNwkKey
ZDApp_SecInit       SYMBOL "ZDApp_SecInit"
`??ZDApp_SecInit::?relay` SYMBOL "?relay", ZDApp_SecInit
ZDApp_SendEventMsg  SYMBOL "ZDApp_SendEventMsg"
`??ZDApp_SendEventMsg::?relay` SYMBOL "?relay", ZDApp_SendEventMsg
ZDApp_SendMsg       SYMBOL "ZDApp_SendMsg"
`??ZDApp_SendMsg::?relay` SYMBOL "?relay", ZDApp_SendMsg
ZDApp_SetPendingBindDefault SYMBOL "ZDApp_SetPendingBindDefault"
`??ZDApp_SetPendingBindDefault::?relay` SYMBOL "?relay", ZDApp_SetPendingBindDefault
ZDApp_StartJoiningCycle SYMBOL "ZDApp_StartJoiningCycle"
`??ZDApp_StartJoiningCycle::?relay` SYMBOL "?relay", ZDApp_StartJoiningCycle
ZDApp_StopJoiningCycle SYMBOL "ZDApp_StopJoiningCycle"
`??ZDApp_StopJoiningCycle::?relay` SYMBOL "?relay", ZDApp_StopJoiningCycle
ZDApp_event_loop    SYMBOL "ZDApp_event_loop"
`??ZDApp_event_loop::?relay` SYMBOL "?relay", ZDApp_event_loop
ZDOInitDevice       SYMBOL "ZDOInitDevice"
`??ZDOInitDevice::?relay` SYMBOL "?relay", ZDOInitDevice
ZDO_AddrChangeIndicationCB SYMBOL "ZDO_AddrChangeIndicationCB"
`??ZDO_AddrChangeIndicationCB::?relay` SYMBOL "?relay", ZDO_AddrChangeIndicationCB
ZDO_ConcentratorIndicationCB SYMBOL "ZDO_ConcentratorIndicationCB"
`??ZDO_ConcentratorIndicationCB::?relay` SYMBOL "?relay", ZDO_ConcentratorIndicationCB
ZDO_DeregisterForZdoCB SYMBOL "ZDO_DeregisterForZdoCB"
`??ZDO_DeregisterForZdoCB::?relay` SYMBOL "?relay", ZDO_DeregisterForZdoCB
ZDO_JoinConfirmCB   SYMBOL "ZDO_JoinConfirmCB"
`??ZDO_JoinConfirmCB::?relay` SYMBOL "?relay", ZDO_JoinConfirmCB
ZDO_JoinIndicationCB SYMBOL "ZDO_JoinIndicationCB"
`??ZDO_JoinIndicationCB::?relay` SYMBOL "?relay", ZDO_JoinIndicationCB
ZDO_LeaveCnf        SYMBOL "ZDO_LeaveCnf"
`??ZDO_LeaveCnf::?relay` SYMBOL "?relay", ZDO_LeaveCnf
ZDO_LeaveInd        SYMBOL "ZDO_LeaveInd"
`??ZDO_LeaveInd::?relay` SYMBOL "?relay", ZDO_LeaveInd
ZDO_ManytoOneFailureIndicationCB SYMBOL "ZDO_ManytoOneFailureIndicationCB"
`??ZDO_ManytoOneFailureIndicationCB::?relay` SYMBOL "?relay", ZDO_ManytoOneFailureIndicationCB
ZDO_NetworkDiscoveryConfirmCB SYMBOL "ZDO_NetworkDiscoveryConfirmCB"
`??ZDO_NetworkDiscoveryConfirmCB::?relay` SYMBOL "?relay", ZDO_NetworkDiscoveryConfirmCB
ZDO_NetworkFormationConfirmCB SYMBOL "ZDO_NetworkFormationConfirmCB"
`??ZDO_NetworkFormationConfirmCB::?relay` SYMBOL "?relay", ZDO_NetworkFormationConfirmCB
ZDO_NetworkStatusCB SYMBOL "ZDO_NetworkStatusCB"
`??ZDO_NetworkStatusCB::?relay` SYMBOL "?relay", ZDO_NetworkStatusCB
ZDO_PermitJoinCB    SYMBOL "ZDO_PermitJoinCB"
`??ZDO_PermitJoinCB::?relay` SYMBOL "?relay", ZDO_PermitJoinCB
ZDO_PollConfirmCB   SYMBOL "ZDO_PollConfirmCB"
`??ZDO_PollConfirmCB::?relay` SYMBOL "?relay", ZDO_PollConfirmCB
ZDO_RegisterForZdoCB SYMBOL "ZDO_RegisterForZdoCB"
`??ZDO_RegisterForZdoCB::?relay` SYMBOL "?relay", ZDO_RegisterForZdoCB
ZDO_SrcRtgIndCB     SYMBOL "ZDO_SrcRtgIndCB"
`??ZDO_SrcRtgIndCB::?relay` SYMBOL "?relay", ZDO_SrcRtgIndCB
ZDO_StartRouterConfirmCB SYMBOL "ZDO_StartRouterConfirmCB"
`??ZDO_StartRouterConfirmCB::?relay` SYMBOL "?relay", ZDO_StartRouterConfirmCB
ZDO_SyncIndicationCB SYMBOL "ZDO_SyncIndicationCB"
`??ZDO_SyncIndicationCB::?relay` SYMBOL "?relay", ZDO_SyncIndicationCB
ZDO_UpdateDeviceIndication SYMBOL "ZDO_UpdateDeviceIndication"
`??ZDO_UpdateDeviceIndication::?relay` SYMBOL "?relay", ZDO_UpdateDeviceIndication
ZDO_beaconNotifyIndCB SYMBOL "ZDO_beaconNotifyIndCB"
`??ZDO_beaconNotifyIndCB::?relay` SYMBOL "?relay", ZDO_beaconNotifyIndCB

        EXTERN `??APSME_BindRequest::?relay`
        FUNCTION `??APSME_BindRequest::?relay`,00H
        EXTERN `??APSME_HoldDataRequests::?relay`
        FUNCTION `??APSME_HoldDataRequests::?relay`,00H
        EXTERN `??APSME_UpdateDeviceReq::?relay`
        FUNCTION `??APSME_UpdateDeviceReq::?relay`,00H
        EXTERN `??AddrMgrEntryLookupExt::?relay`
        FUNCTION `??AddrMgrEntryLookupExt::?relay`,00H
        EXTERN `??AddrMgrEntryRelease::?relay`
        FUNCTION `??AddrMgrEntryRelease::?relay`,00H
        EXTERN `??AddrMgrExtAddrSet::?relay`
        FUNCTION `??AddrMgrExtAddrSet::?relay`,00H
        EXTERN `??AssocIsChild::?relay`
        FUNCTION `??AssocIsChild::?relay`,00H
        EXTERN `??HalKeyRead::?relay`
        FUNCTION `??HalKeyRead::?relay`,00H
        EXTERN `??HalLcdWriteString::?relay`
        FUNCTION `??HalLcdWriteString::?relay`,00H
        EXTERN `??HalLedBlink::?relay`
        FUNCTION `??HalLedBlink::?relay`,00H
        EXTERN `??HalLedSet::?relay`
        FUNCTION `??HalLedSet::?relay`,00H
        EXTERN `??NLME_GetCoordShortAddr::?relay`
        FUNCTION `??NLME_GetCoordShortAddr::?relay`,00H
        EXTERN `??NLME_GetEnergyThreshold::?relay`
        FUNCTION `??NLME_GetEnergyThreshold::?relay`,00H
        EXTERN `??NLME_GetExtAddr::?relay`
        FUNCTION `??NLME_GetExtAddr::?relay`,00H
        EXTERN `??NLME_GetShortAddr::?relay`
        FUNCTION `??NLME_GetShortAddr::?relay`,00H
        EXTERN `??NLME_JoinRequest::?relay`
        FUNCTION `??NLME_JoinRequest::?relay`,00H
        EXTERN `??NLME_LeaveRsp::?relay`
        FUNCTION `??NLME_LeaveRsp::?relay`,00H
        EXTERN `??NLME_NetworkDiscoveryRequest::?relay`
        FUNCTION `??NLME_NetworkDiscoveryRequest::?relay`,00H
        EXTERN `??NLME_NwkDiscTerm::?relay`
        FUNCTION `??NLME_NwkDiscTerm::?relay`,00H
        EXTERN `??NLME_RemoveChild::?relay`
        FUNCTION `??NLME_RemoveChild::?relay`,00H
        EXTERN `??NLME_SetBroadcastFilter::?relay`
        FUNCTION `??NLME_SetBroadcastFilter::?relay`,00H
        EXTERN `??NLME_SetEnergyThreshold::?relay`
        FUNCTION `??NLME_SetEnergyThreshold::?relay`,00H
        EXTERN `??NLME_SetPollRate::?relay`
        FUNCTION `??NLME_SetPollRate::?relay`,00H
        EXTERN `??NLME_SetQueuedPollRate::?relay`
        FUNCTION `??NLME_SetQueuedPollRate::?relay`,00H
        EXTERN `??NLME_SetResponseRate::?relay`
        FUNCTION `??NLME_SetResponseRate::?relay`,00H
        EXTERN `??NLME_StartRouterRequest::?relay`
        FUNCTION `??NLME_StartRouterRequest::?relay`,00H
        EXTERN `??RTG_MTORouteReq::?relay`
        FUNCTION `??RTG_MTORouteReq::?relay`,00H
        EXTERN `??RTG_RemoveRtgEntry::?relay`
        FUNCTION `??RTG_RemoveRtgEntry::?relay`,00H
        EXTERN `??SSP_ReadNwkActiveKey::?relay`
        FUNCTION `??SSP_ReadNwkActiveKey::?relay`,00H
        EXTERN `??SSP_SwitchNwkKey::?relay`
        FUNCTION `??SSP_SwitchNwkKey::?relay`,00H
        EXTERN `??SSP_UpdateNwkKey::?relay`
        FUNCTION `??SSP_UpdateNwkKey::?relay`,00H
        EXTERN `??ZDConfig_InitDescriptors::?relay`
        FUNCTION `??ZDConfig_InitDescriptors::?relay`,00H
        EXTERN `??ZDMatchSendState::?relay`
        FUNCTION `??ZDMatchSendState::?relay`,00H
        EXTERN `??ZDO_Init::?relay`
        FUNCTION `??ZDO_Init::?relay`,00H
        EXTERN `??ZDO_MatchEndDeviceBind::?relay`
        FUNCTION `??ZDO_MatchEndDeviceBind::?relay`,00H
        EXTERN `??ZDO_ParseAddrRsp::?relay`
        FUNCTION `??ZDO_ParseAddrRsp::?relay`,00H
        EXTERN `??ZDO_ParseBindUnbindReq::?relay`
        FUNCTION `??ZDO_ParseBindUnbindReq::?relay`,00H
        EXTERN `??ZDO_ParseEndDeviceBindReq::?relay`
        FUNCTION `??ZDO_ParseEndDeviceBindReq::?relay`,00H
        EXTERN `??ZDO_ProcessBindUnbindReq::?relay`
        FUNCTION `??ZDO_ProcessBindUnbindReq::?relay`,00H
        EXTERN `??ZDO_RegisterForZDOMsg::?relay`
        FUNCTION `??ZDO_RegisterForZDOMsg::?relay`,00H
        EXTERN `??ZDO_StartDevice::?relay`
        FUNCTION `??ZDO_StartDevice::?relay`,00H
        EXTERN `??ZDO_UpdateAddrManager::?relay`
        FUNCTION `??ZDO_UpdateAddrManager::?relay`,00H
        EXTERN `??ZDO_UpdateNwkStatus::?relay`
        FUNCTION `??ZDO_UpdateNwkStatus::?relay`,00H
        EXTERN `??ZDP_DeviceAnnce::?relay`
        FUNCTION `??ZDP_DeviceAnnce::?relay`,00H
        EXTERN `??ZDP_GenericRsp::?relay`
        FUNCTION `??ZDP_GenericRsp::?relay`,00H
        EXTERN `??ZDP_IncomingData::?relay`
        FUNCTION `??ZDP_IncomingData::?relay`,00H
        EXTERN `??ZDP_SendData::?relay`
        FUNCTION `??ZDP_SendData::?relay`,00H
        EXTERN `??ZDSecMgrAddrClear::?relay`
        FUNCTION `??ZDSecMgrAddrClear::?relay`,00H
        EXTERN `??ZDSecMgrDeviceRemoveByExtAddr::?relay`
        FUNCTION `??ZDSecMgrDeviceRemoveByExtAddr::?relay`,00H
        EXTERN `??ZDSecMgrInit::?relay`
        FUNCTION `??ZDSecMgrInit::?relay`,00H
        EXTERN `??ZDSecMgrNewDeviceEvent::?relay`
        FUNCTION `??ZDSecMgrNewDeviceEvent::?relay`,00H
        EXTERN `??ZDSecMgrReadKeyFromNv::?relay`
        FUNCTION `??ZDSecMgrReadKeyFromNv::?relay`,00H
        EXTERN `??ZDSecMgrSaveTCLinkKey::?relay`
        FUNCTION `??ZDSecMgrSaveTCLinkKey::?relay`,00H
        EXTERN `??ZDSecMgrUpdateDeviceInd::?relay`
        FUNCTION `??ZDSecMgrUpdateDeviceInd::?relay`,00H
        EXTERN `??ZMacSetReq::?relay`
        FUNCTION `??ZMacSetReq::?relay`,00H
        EXTERN `??afRegister::?relay`
        FUNCTION `??afRegister::?relay`,00H
        EXTERN `??afSetMatch::?relay`
        FUNCTION `??afSetMatch::?relay`,00H
        EXTERN `??nwkNeighborFindEmptySlot::?relay`
        FUNCTION `??nwkNeighborFindEmptySlot::?relay`,00H
        EXTERN `??nwkNeighborInitTable::?relay`
        FUNCTION `??nwkNeighborInitTable::?relay`,00H
        EXTERN `??nwkNeighborRemove::?relay`
        FUNCTION `??nwkNeighborRemove::?relay`,00H
        EXTERN `??nwk_ExtPANIDValid::?relay`
        FUNCTION `??nwk_ExtPANIDValid::?relay`,00H
        EXTERN `??nwk_getNwkDescList::?relay`
        FUNCTION `??nwk_getNwkDescList::?relay`,00H
        EXTERN `??osal_clear_event::?relay`
        FUNCTION `??osal_clear_event::?relay`,00H
        EXTERN `??osal_get_timeoutEx::?relay`
        FUNCTION `??osal_get_timeoutEx::?relay`,00H
        EXTERN `??osal_mem_alloc::?relay`
        FUNCTION `??osal_mem_alloc::?relay`,00H
        EXTERN `??osal_mem_free::?relay`
        FUNCTION `??osal_mem_free::?relay`,00H
        EXTERN `??osal_memcmp::?relay`
        FUNCTION `??osal_memcmp::?relay`,00H
        EXTERN `??osal_memcpy::?relay`
        FUNCTION `??osal_memcpy::?relay`,00H
        EXTERN `??osal_memset::?relay`
        FUNCTION `??osal_memset::?relay`,00H
        EXTERN `??osal_msg_allocate::?relay`
        FUNCTION `??osal_msg_allocate::?relay`,00H
        EXTERN `??osal_msg_deallocate::?relay`
        FUNCTION `??osal_msg_deallocate::?relay`,00H
        EXTERN `??osal_msg_receive::?relay`
        FUNCTION `??osal_msg_receive::?relay`,00H
        EXTERN `??osal_msg_send::?relay`
        FUNCTION `??osal_msg_send::?relay`,00H
        EXTERN `??osal_nv_item_init::?relay`
        FUNCTION `??osal_nv_item_init::?relay`,00H
        EXTERN `??osal_nv_read::?relay`
        FUNCTION `??osal_nv_read::?relay`,00H
        EXTERN `??osal_nv_write::?relay`
        FUNCTION `??osal_nv_write::?relay`,00H
        EXTERN `??osal_pwrmgr_device::?relay`
        FUNCTION `??osal_pwrmgr_device::?relay`,00H
        EXTERN `??osal_rand::?relay`
        FUNCTION `??osal_rand::?relay`,00H
        EXTERN `??osal_set_event::?relay`
        FUNCTION `??osal_set_event::?relay`,00H
        EXTERN `??osal_start_timerEx::?relay`
        FUNCTION `??osal_start_timerEx::?relay`,00H
        EXTERN `??osal_stop_timerEx::?relay`
        FUNCTION `??osal_stop_timerEx::?relay`,00H
        EXTERN `??sAddrExtCmp::?relay`
        FUNCTION `??sAddrExtCmp::?relay`,00H
        EXTERN `??sAddrExtCpy::?relay`
        FUNCTION `??sAddrExtCpy::?relay`,00H
        EXTERN `??zgInitItems::?relay`
        FUNCTION `??zgInitItems::?relay`,00H
        EXTERN `??zgReadStartupOptions::?relay`
        FUNCTION `??zgReadStartupOptions::?relay`,00H
        EXTERN `??zgWriteStartupOptions::?relay`
        FUNCTION `??zgWriteStartupOptions::?relay`,00H
        EXTERN AIB_apsUseExtendedPANID
        EXTERN AIB_apsUseInsecureJoin
        EXTERN APSME_BindRequest
        FUNCTION APSME_BindRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_HoldDataRequests
        FUNCTION APSME_HoldDataRequests,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_UpdateDeviceReq
        FUNCTION APSME_UpdateDeviceReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrEntryLookupExt
        FUNCTION AddrMgrEntryLookupExt,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrEntryRelease
        FUNCTION AddrMgrEntryRelease,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrExtAddrSet
        FUNCTION AddrMgrExtAddrSet,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AssocIsChild
        FUNCTION AssocIsChild,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalKeyRead
        FUNCTION HalKeyRead,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLcdWriteString
        FUNCTION HalLcdWriteString,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedBlink
        FUNCTION HalLedBlink,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedSet
        FUNCTION HalLedSet,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetCoordShortAddr
        FUNCTION NLME_GetCoordShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetEnergyThreshold
        FUNCTION NLME_GetEnergyThreshold,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetExtAddr
        FUNCTION NLME_GetExtAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetShortAddr
        FUNCTION NLME_GetShortAddr,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_JoinRequest
        FUNCTION NLME_JoinRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_LeaveRsp
        FUNCTION NLME_LeaveRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_NetworkDiscoveryRequest
        FUNCTION NLME_NetworkDiscoveryRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_NwkDiscTerm
        FUNCTION NLME_NwkDiscTerm,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_RemoveChild
        FUNCTION NLME_RemoveChild,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_SetBroadcastFilter
        FUNCTION NLME_SetBroadcastFilter,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_SetEnergyThreshold
        FUNCTION NLME_SetEnergyThreshold,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_SetPollRate
        FUNCTION NLME_SetPollRate,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_SetQueuedPollRate
        FUNCTION NLME_SetQueuedPollRate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_SetResponseRate
        FUNCTION NLME_SetResponseRate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_StartRouterRequest
        FUNCTION NLME_StartRouterRequest,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NWK_TaskID
        EXTERN NwkDescList
        EXTERN Onboard_soft_reset
        FUNCTION Onboard_soft_reset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RTG_MTORouteReq
        FUNCTION RTG_MTORouteReq,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RTG_RemoveRtgEntry
        FUNCTION RTG_RemoveRtgEntry,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN SSP_ReadNwkActiveKey
        FUNCTION SSP_ReadNwkActiveKey,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN SSP_SwitchNwkKey
        FUNCTION SSP_SwitchNwkKey,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN SSP_UpdateNwkKey
        FUNCTION SSP_UpdateNwkKey,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDConfig_InitDescriptors
        FUNCTION ZDConfig_InitDescriptors,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDMatchSendState
        FUNCTION ZDMatchSendState,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_Config_Node_Descriptor
        EXTERN ZDO_Init
        FUNCTION ZDO_Init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_MatchEndDeviceBind
        FUNCTION ZDO_MatchEndDeviceBind,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ParseAddrRsp
        FUNCTION ZDO_ParseAddrRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ParseBindUnbindReq
        FUNCTION ZDO_ParseBindUnbindReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ParseEndDeviceBindReq
        FUNCTION ZDO_ParseEndDeviceBindReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ProcessBindUnbindReq
        FUNCTION ZDO_ProcessBindUnbindReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_RegisterForZDOMsg
        FUNCTION ZDO_RegisterForZDOMsg,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_StartDevice
        FUNCTION ZDO_StartDevice,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_UpdateAddrManager
        FUNCTION ZDO_UpdateAddrManager,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_UpdateNwkStatus
        FUNCTION ZDO_UpdateNwkStatus,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_DeviceAnnce
        FUNCTION ZDP_DeviceAnnce,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_GenericRsp
        FUNCTION ZDP_GenericRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_IncomingData
        FUNCTION ZDP_IncomingData,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_SendData
        FUNCTION ZDP_SendData,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDSecMgrAddrClear
        FUNCTION ZDSecMgrAddrClear,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDSecMgrDeviceRemoveByExtAddr
        FUNCTION ZDSecMgrDeviceRemoveByExtAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDSecMgrInit
        FUNCTION ZDSecMgrInit,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDSecMgrNewDeviceEvent
        FUNCTION ZDSecMgrNewDeviceEvent,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDSecMgrReadKeyFromNv
        FUNCTION ZDSecMgrReadKeyFromNv,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDSecMgrSaveTCLinkKey
        FUNCTION ZDSecMgrSaveTCLinkKey,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDSecMgrUpdateDeviceInd
        FUNCTION ZDSecMgrUpdateDeviceInd,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZMacSetReq
        FUNCTION ZMacSetReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN _NIB
        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afSetMatch
        FUNCTION afSetMatch,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN epList
        EXTERN gLINK_DOWN_TRIGGER
        EXTERN gMIN_TREE_LQI
        EXTERN matchED
        EXTERN nwkFrameCounter
        EXTERN nwkFrameCounterChanges
        EXTERN nwkNeighborFindEmptySlot
        FUNCTION nwkNeighborFindEmptySlot,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN nwkNeighborInitTable
        FUNCTION nwkNeighborInitTable,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN nwkNeighborRemove
        FUNCTION nwkNeighborRemove,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN nwk_ExtPANIDValid
        FUNCTION nwk_ExtPANIDValid,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN nwk_getNwkDescList
        FUNCTION nwk_getNwkDescList,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_clear_event
        FUNCTION osal_clear_event,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_get_timeoutEx
        FUNCTION osal_get_timeoutEx,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcmp
        FUNCTION osal_memcmp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 52, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_allocate
        FUNCTION osal_msg_allocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_send
        FUNCTION osal_msg_send,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_item_init
        FUNCTION osal_nv_item_init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_read
        FUNCTION osal_nv_read,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_write
        FUNCTION osal_nv_write,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_pwrmgr_device
        FUNCTION osal_pwrmgr_device,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_rand
        FUNCTION osal_rand,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_set_event
        FUNCTION osal_set_event,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_stop_timerEx
        FUNCTION osal_stop_timerEx,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN pZDNwkMgr_ProcessDataConfirm
        EXTERN pbindRemoveDev
        EXTERN sAddrExtCmp
        FUNCTION sAddrExtCmp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN sAddrExtCpy
        FUNCTION sAddrExtCpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zgChildAgingEnable
        EXTERN zgConcentratorDiscoveryTime
        EXTERN zgConcentratorEnable
        EXTERN zgConfigPANID
        EXTERN zgDeviceLogicalType
        EXTERN zgInitItems
        FUNCTION zgInitItems,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zgReadStartupOptions
        FUNCTION zgReadStartupOptions,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zgStackProfile
        EXTERN zgWriteStartupOptions
        FUNCTION zgWriteStartupOptions,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// C:\Users\bsavanovic\Desktop\New folder (3)\Z-Stack Mesh 1.0.0\Components\stack\zdo\ZDApp.c
//    1 /**************************************************************************************************
//    2   Filename:       ZDApp.c
//    3   Revised:        $Date: 2014-06-03 18:29:46 -0700 (Tue, 03 Jun 2014) $
//    4   Revision:       $Revision: 38789 $
//    5 
//    6   Description:    This file contains the interface to the Zigbee Device Application. This is the
//    7                   Application part that the user can change. This also contains the Task functions.
//    8 
//    9 
//   10   Copyright 2004-2014 Texas Instruments Incorporated. All rights reserved.
//   11 
//   12   IMPORTANT: Your use of this Software is limited to those specific rights
//   13   granted under the terms of a software license agreement between the user
//   14   who downloaded the software, his/her employer (which must be your employer)
//   15   and Texas Instruments Incorporated (the "License"). You may not use this
//   16   Software unless you agree to abide by the terms of the License. The License
//   17   limits your use, and you acknowledge, that the Software may not be modified,
//   18   copied or distributed unless embedded on a Texas Instruments microcontroller
//   19   or used solely and exclusively in conjunction with a Texas Instruments radio
//   20   frequency transceiver, which is integrated into your product. Other than for
//   21   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   22   works of, modify, distribute, perform, display or sell this Software and/or
//   23   its documentation for any purpose.
//   24 
//   25   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   26   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   27   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   28   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   29   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   30   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   31   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   32   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   33   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   34   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   35   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   36 
//   37   Should you have any questions regarding your right to use this Software,
//   38   contact Texas Instruments Incorporated at www.TI.com.
//   39 **************************************************************************************************/
//   40 
//   41 /*********************************************************************
//   42  * INCLUDES
//   43  */
//   44 
//   45 #include "ZComDef.h"
//   46 #include "ZMAC.h"
//   47 #include "OSAL.h"
//   48 #include "OSAL_Tasks.h"
//   49 #include "OSAL_PwrMgr.h"
//   50 #include "OSAL_Nv.h"
//   51 #include "AF.h"
//   52 #include "APSMEDE.h"
//   53 #include "NLMEDE.h"
//   54 #include "AddrMgr.h"
//   55 #include "ZDProfile.h"
//   56 #include "ZDObject.h"
//   57 #include "ZDConfig.h"
//   58 #include "ZDSecMgr.h"
//   59 #include "ZDApp.h"
//   60 #include "DebugTrace.h"
//   61 #include "nwk_util.h"
//   62 #include "OnBoard.h"
//   63 #include "ZGlobals.h"
//   64 #include "ZDNwkMgr.h"
//   65 #include "rtg.h"
//   66 
//   67 #include "ssp.h"
//   68 
//   69 /* HAL */
//   70 #include "hal_led.h"
//   71 #include "hal_lcd.h"
//   72 #include "hal_key.h"
//   73 
//   74 #if defined( MT_MAC_FUNC ) || defined( MT_MAC_CB_FUNC )
//   75   #error "ERROR! MT_MAC functionalities should be disabled on ZDO devices"
//   76 #endif
//   77 
//   78 /*********************************************************************
//   79  * CONSTANTS
//   80  */
//   81 
//   82 #if !defined( NWK_START_DELAY )
//   83   #define NWK_START_DELAY             100   // in milliseconds
//   84 #endif
//   85 
//   86 #if !defined( LEAVE_RESET_DELAY )
//   87   #define LEAVE_RESET_DELAY           5000  // in milliseconds
//   88 #endif
//   89 
//   90 // Init ZDO, but hold and wait for application to start the joining or
//   91 // forming network
//   92 #define ZDO_INIT_HOLD_NWK_START       0xFFFF
//   93 
//   94 #if !defined( EXTENDED_JOINING_RANDOM_MASK )
//   95   #define EXTENDED_JOINING_RANDOM_MASK 0x007F
//   96 #endif
//   97 
//   98 #if !defined( BEACON_REQUEST_DELAY )
//   99   #define BEACON_REQUEST_DELAY        100   // in milliseconds
//  100 #endif
//  101 
//  102 #if !defined( BEACON_REQ_DELAY_MASK )
//  103   #define BEACON_REQ_DELAY_MASK       0x007F
//  104 #endif
//  105 
//  106 #define MAX_RESUME_RETRY            3
//  107 
//  108 #define MAX_DEVICE_UNAUTH_TIMEOUT   10000  // 10 seconds
//  109 
//  110 // Beacon Order Settings (see NLMEDE.h)
//  111 #define DEFAULT_BEACON_ORDER        BEACON_ORDER_NO_BEACONS
//  112 #define DEFAULT_SUPERFRAME_ORDER    DEFAULT_BEACON_ORDER
//  113 
//  114 #if !defined( NWK_FRAMECOUNTER_CHANGES_RESTORE_DELTA )
//  115 // Additional counts to add to the frame counter when restoring from NV
//  116 // This amount is in addition to MAX_NWK_FRAMECOUNTER_CHANGES
//  117 #define NWK_FRAMECOUNTER_CHANGES_RESTORE_DELTA    250
//  118 #endif
//  119 
//  120 // Leave control bits
//  121 #define ZDAPP_LEAVE_CTRL_INIT 0
//  122 #define ZDAPP_LEAVE_CTRL_SET  1
//  123 #define ZDAPP_LEAVE_CTRL_RA   2
//  124 
//  125 // Address Manager Stub Implementation
//  126 #define ZDApp_NwkWriteNVRequest AddrMgrWriteNVRequest
//  127 
//  128 
//  129 #if !defined ZDO_NV_SAVE_RFDs
//  130 #define ZDO_NV_SAVE_RFDs  TRUE
//  131 #endif
//  132 
//  133 // Delay time before updating NWK NV data to force fewer writes during high activity.
//  134 #if ZDO_NV_SAVE_RFDs
//  135 #define ZDAPP_UPDATE_NWK_NV_TIME 700
//  136 #else
//  137 #define ZDAPP_UPDATE_NWK_NV_TIME 65000
//  138 #endif
//  139 
//  140 // Timeout value to process New Devices
//  141 #define ZDAPP_NEW_DEVICE_TIME     600   // in ms
//  142 
//  143 #if !defined ( ZDP_BIND_SKIP_VALIDATION )
//  144 #if !defined MAX_PENDING_BIND_REQ
//  145 #define MAX_PENDING_BIND_REQ 3
//  146 #endif
//  147 #endif
//  148 
//  149 /******************************************************************************
//  150  * TYPEDEFS
//  151  */
//  152 typedef struct
//  153 {
//  154   void   *next;
//  155   uint16 shortAddr;
//  156   uint16 timeDelta;
//  157 } ZDAppNewDevice_t;
//  158 
//  159 /*********************************************************************
//  160  * GLOBAL VARIABLES
//  161  */
//  162 
//  163 #if defined( LCD_SUPPORTED )

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  164   uint8 MatchRsps = 0;
MatchRsps:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  165 #endif
//  166 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  167 uint8 zdoDiscCounter = 1;
zdoDiscCounter:
        DATA8
        DS 1
        REQUIRE `?<Initializer for zdoDiscCounter>`
        REQUIRE __INIT_XDATA_I
//  168 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  169 zAddrType_t ZDAppNwkAddr;
ZDAppNwkAddr:
        DS 9
        REQUIRE __INIT_XDATA_Z
//  170 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  171 uint8 zdappMgmtNwkDiscRspTransSeq;
zdappMgmtNwkDiscRspTransSeq:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  172 uint8 zdappMgmtNwkDiscReqInProgress = FALSE;
zdappMgmtNwkDiscReqInProgress:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  173 zAddrType_t zdappMgmtNwkDiscRspAddr;
zdappMgmtNwkDiscRspAddr:
        DS 9
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  174 uint8 zdappMgmtNwkDiscStartIndex;
zdappMgmtNwkDiscStartIndex:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  175 uint8 zdappMgmtSavedNwkState;
zdappMgmtSavedNwkState:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  176 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  177 uint8 continueJoining = TRUE;
continueJoining:
        DATA8
        DS 1
        REQUIRE `?<Initializer for continueJoining>`
        REQUIRE __INIT_XDATA_I
//  178 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  179 uint8  _tmpRejoinState;
_tmpRejoinState:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  180 
//  181 // The extended PanID used in ZDO layer for rejoin.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  182 uint8 ZDO_UseExtendedPANID[Z_EXTADDR_LEN];
ZDO_UseExtendedPANID:
        DS 8
        REQUIRE __INIT_XDATA_Z
//  183 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  184 pfnZdoCb zdoCBFunc[MAX_ZDO_CB_FUNC];
zdoCBFunc:
        DS 18
        REQUIRE __INIT_XDATA_Z
//  185 
//  186 #if !defined ( ZDP_BIND_SKIP_VALIDATION )

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  187 ZDO_PendingBindReq_t *ZDAppPendingBindReq = NULL;
ZDAppPendingBindReq:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  188 #endif
//  189 
//  190 /*********************************************************************
//  191  * EXTERNAL VARIABLES
//  192  */
//  193 
//  194 /*********************************************************************
//  195  * EXTERNAL FUNCTIONS
//  196  */
//  197 
//  198 /*********************************************************************
//  199  * LOCAL FUNCTIONS
//  200  */
//  201 
//  202 void ZDApp_NetworkStartEvt( void );
//  203 void ZDApp_DeviceAuthEvt( void );
//  204 void ZDApp_SaveNetworkStateEvt( void );
//  205 
//  206 uint8 ZDApp_ReadNetworkRestoreState( void );
//  207 uint8 ZDApp_RestoreNetworkState( void );
//  208 void ZDAppDetermineDeviceType( void );
//  209 void ZDApp_InitUserDesc( void );
//  210 void ZDAppCheckForHoldKey( void );
//  211 void ZDApp_ProcessOSALMsg( osal_event_hdr_t *msgPtr );
//  212 void ZDApp_ProcessNetworkJoin( void );
//  213 void ZDApp_SetCoordAddress( uint8 endPoint, uint8 dstEP );
//  214 uint8 ZDApp_RestoreNwkKey( void );
//  215 networkDesc_t* ZDApp_NwkDescListProcessing(void);
//  216 
//  217 void ZDApp_SecInit( uint8 state );
//  218 UINT16 ZDApp_ProcessSecEvent( uint8 task_id, UINT16 events );
//  219 void ZDApp_ProcessSecMsg( osal_event_hdr_t *msgPtr );
//  220 
//  221 void ZDApp_SendMsg( uint8 taskID, uint8 cmd, uint8 len, uint8 *buf );
//  222 
//  223 void ZDApp_ResetTimerStart( uint16 delay );
//  224 void ZDApp_ResetTimerCancel( void );
//  225 void ZDApp_LeaveCtrlInit( void );
//  226 void ZDApp_LeaveCtrlSet( uint8 ra );
//  227 uint8 ZDApp_LeaveCtrlBypass( void );
//  228 void ZDApp_LeaveCtrlStartup( devStates_t* state, uint16* startDelay );
//  229 void ZDApp_LeaveUpdate( uint16 nwkAddr, uint8* extAddr,
//  230                         uint8 removeChildren );
//  231 void ZDApp_NodeProfileSync( uint8 stackProfile );
//  232 void ZDApp_ProcessMsgCBs( zdoIncomingMsg_t *inMsg );
//  233 void ZDApp_RegisterCBs( void );
//  234 void ZDApp_InitZdoCBFunc(void);
//  235 #if !defined ( ZDP_BIND_SKIP_VALIDATION )
//  236 void ZDApp_SetPendingBindDefault( ZDO_PendingBindReq_t *pendBindReq );
//  237 void ZDApp_InitPendingBind( void );
//  238 void ZDApp_ProcessPendingBindReq( uint8 *extAddr );
//  239 void ZDApp_AgeOutPendingBindEntry( void );
//  240 #endif
//  241 
//  242 /*********************************************************************
//  243  * LOCAL VARIABLES
//  244  */
//  245 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  246 uint8 ZDAppTaskID;
ZDAppTaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  247 uint8 nwkStatus;
nwkStatus:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  248 endPointDesc_t *ZDApp_AutoFindMode_epDesc = (endPointDesc_t *)NULL;
ZDApp_AutoFindMode_epDesc:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  249 uint8 ZDApp_LeaveCtrl;
ZDApp_LeaveCtrl:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  250 
//  251 #if defined( HOLD_AUTO_START )
//  252   devStates_t devState = DEV_HOLD;
//  253 #else

        RSEG XDATA_I:XDATA:NOROOT(0)
//  254   devStates_t devState = DEV_INIT;
devState:
        DATA8
        DS 1
        REQUIRE `?<Initializer for devState>`
        REQUIRE __INIT_XDATA_I
//  255 #endif
//  256 
//  257 #if ( ZG_BUILD_RTRONLY_TYPE ) || ( ZG_BUILD_ENDDEVICE_TYPE )
//  258   devStartModes_t devStartMode = MODE_JOIN;     // Assume joining
//  259   //devStartModes_t devStartMode = MODE_RESUME; // if already "directly joined"
//  260                         // to parent. Set to make the device do an Orphan scan.
//  261 #else
//  262   // Set the default to coodinator

        RSEG XDATA_I:XDATA:NOROOT(0)
//  263   devStartModes_t devStartMode = MODE_HARD;
devStartMode:
        DATA8
        DS 1
        REQUIRE `?<Initializer for devStartMode>`
        REQUIRE __INIT_XDATA_I
//  264 #endif
//  265 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  266 uint8 retryCnt;
retryCnt:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  267 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  268 endPointDesc_t ZDApp_epDesc =
ZDApp_epDesc:
        DATA8
        DS 6
        REQUIRE `?<Initializer for ZDApp_epDesc>`
        REQUIRE __INIT_XDATA_I
//  269 {
//  270   ZDO_EP,
//  271   &ZDAppTaskID,
//  272   (SimpleDescriptionFormat_t *)NULL,  // No Simple description for ZDO
//  273   (afNetworkLatencyReq_t)0            // No Network Latency req
//  274 };
//  275 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  276 uint16 ZDApp_SavedPollRate = POLL_RATE;
ZDApp_SavedPollRate:
        DATA16
        DS 2
        REQUIRE `?<Initializer for ZDApp_SavedPollRate>`
        REQUIRE __INIT_XDATA_I
//  277 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  278 ZDAppNewDevice_t *ZDApp_NewDeviceList = NULL;
ZDApp_NewDeviceList:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  279 
//  280 /* "Hold Key" status saved during ZDAppCheckForHoldKey() */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  281 static uint8 zdappHoldKeys;
zdappHoldKeys:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  282 
//  283 /*********************************************************************
//  284  * @fn      ZDApp_Init
//  285  *
//  286  * @brief   ZDApp Initialization function.
//  287  *
//  288  * @param   task_id - ZDApp Task ID
//  289  *
//  290  * @return  None
//  291  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  292 void ZDApp_Init( uint8 task_id )
ZDApp_Init:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function ZDApp_Init
        CODE
//  293 {
        FUNCALL ZDApp_Init, NLME_GetExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_Init, ZDO_Init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_Init, ZDApp_InitUserDesc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_Init, ZDOInitDevice
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_Init, ZDOInitDevice
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_Init, HalLedBlink
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_Init, ZDApp_InitZdoCBFunc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_Init, ZDApp_RegisterCBs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_Init, ZDApp_InitPendingBind
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
//  294   // Save the task ID
//  295   ZDAppTaskID = task_id;
        MOV     DPTR,#ZDAppTaskID
        MOVX    @DPTR,A
//  296    
//  297   // Initialize the ZDO global device short address storage
//  298   ZDAppNwkAddr.addrMode = Addr16Bit;
        MOV     DPTR,#ZDAppNwkAddr + 8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  299   ZDAppNwkAddr.addr.shortAddr = INVALID_NODE_ADDR;
        MOV     DPTR,#ZDAppNwkAddr
        MOV     A,#-0x2
        MOVX    @DPTR,A
        INC     DPTR
        INC     A
        MOVX    @DPTR,A
//  300   (void)NLME_GetExtAddr();  // Load the saveExtAddr pointer.
        ; Setup parameters for call to function NLME_GetExtAddr
        LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
//  301 
//  302   // Check for manual "Hold Auto Start"
//  303   // ZDAppCheckForHoldKey();
//  304 
//  305   // Initialize ZDO items and setup the device - type of device to create.
//  306   ZDO_Init();
        ; Setup parameters for call to function ZDO_Init
        LCALL   `??ZDO_Init::?relay` ; Banked call to: ZDO_Init
//  307 
//  308   // Register the endpoint description with the AF
//  309   // This task doesn't have a Simple description, but we still need
//  310   // to register the endpoint.
//  311   afRegister( (endPointDesc_t *)&ZDApp_epDesc );
        ; Setup parameters for call to function afRegister
        MOV     R2,#ZDApp_epDesc & 0xff
        MOV     R3,#(ZDApp_epDesc >> 8) & 0xff
        LCALL   `??afRegister::?relay`; Banked call to: afRegister
//  312 
//  313 #if defined( ZDO_USERDESC_RESPONSE )
//  314   ZDApp_InitUserDesc();
        ; Setup parameters for call to function ZDApp_InitUserDesc
        LCALL   `??ZDApp_InitUserDesc::?relay`; Banked call to: ZDApp_InitUserDesc
//  315 #endif // ZDO_USERDESC_RESPONSE
//  316 
//  317   
//  318   // Start the device?
//  319   if ( devState != DEV_HOLD )
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        JZ      ??ZDApp_Init_0
//  320   {
//  321     ZDOInitDevice( 0 );
        ; Setup parameters for call to function ZDOInitDevice
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   `??ZDOInitDevice::?relay`; Banked call to: ZDOInitDevice
        SJMP    ??ZDApp_Init_1
//  322   }
//  323   else
//  324   {
//  325     ZDOInitDevice( ZDO_INIT_HOLD_NWK_START );
??ZDApp_Init_0:
        ; Setup parameters for call to function ZDOInitDevice
        MOV     R2,#-0x1
        MOV     R3,#-0x1
        LCALL   `??ZDOInitDevice::?relay`; Banked call to: ZDOInitDevice
//  326     // Blink LED to indicate HOLD_START
//  327     HalLedBlink ( HAL_LED_4, 0, 50, 500 );
        ; Setup parameters for call to function HalLedBlink
        MOV     R4,#-0xc
        MOV     R5,#0x1
        MOV     R3,#0x32
        MOV     R2,#0x0
        MOV     R1,#0x8
        LCALL   `??HalLedBlink::?relay`; Banked call to: HalLedBlink
//  328   }
//  329 
//  330   // Initialize the ZDO callback function pointers zdoCBFunc[]
//  331   ZDApp_InitZdoCBFunc();
??ZDApp_Init_1:
        ; Setup parameters for call to function ZDApp_InitZdoCBFunc
        LCALL   `??ZDApp_InitZdoCBFunc::?relay`; Banked call to: ZDApp_InitZdoCBFunc
//  332 
//  333   ZDApp_RegisterCBs();
        ; Setup parameters for call to function ZDApp_RegisterCBs
        LCALL   `??ZDApp_RegisterCBs::?relay`; Banked call to: ZDApp_RegisterCBs
//  334 
//  335 #if !defined ( ZDP_BIND_SKIP_VALIDATION )
//  336 #if defined ( REFLECTOR )
//  337   ZDApp_InitPendingBind();
        ; Setup parameters for call to function ZDApp_InitPendingBind
        LCALL   `??ZDApp_InitPendingBind::?relay`; Banked call to: ZDApp_InitPendingBind
//  338 #endif
//  339 #endif
//  340 } /* ZDApp_Init() */
        LJMP    ??Subroutine56_0 & 0xFFFF
          CFI EndBlock cfiBlock0
//  341 
//  342 /*********************************************************************
//  343  * @fn          ZDApp_SecInit
//  344  *
//  345  * @brief       ZDApp initialize security.
//  346  *
//  347  * @param       state - device initialization state
//  348  *
//  349  * @return      none
//  350  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  351 void ZDApp_SecInit( uint8 state )
ZDApp_SecInit:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function ZDApp_SecInit
        CODE
//  352 {
        FUNCALL ZDApp_SecInit, ZDSecMgrInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SecInit, ZDSecMgrReadKeyFromNv
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SecInit, SSP_UpdateNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SecInit, SSP_SwitchNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SecInit, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SecInit, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 16
        MOV     A,#-0x10
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 25)
        MOV     ?V0,R1
//  353   uint8 zgPreConfigKey[SEC_KEY_LEN];
//  354 
//  355   if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
//  356   {
//  357     // Set the Trust Center bit
//  358     ZDO_Config_Node_Descriptor.ServerMask |= PRIM_TRUST_CENTER;
        MOV     DPTR,#ZDO_Config_Node_Descriptor + 8
        MOVX    A,@DPTR
        ORL     A,#0x1
        MOVX    @DPTR,A
//  359   }
//  360 
//  361   // Initialize ZigBee Device Security Manager
//  362   ZDSecMgrInit(state);
        ; Setup parameters for call to function ZDSecMgrInit
        LCALL   `??ZDSecMgrInit::?relay`; Banked call to: ZDSecMgrInit
//  363 
//  364   if ( ZG_SECURE_ENABLED )
//  365   {
//  366     if ( state != ZDO_INITDEV_RESTORED_NETWORK_STATE )
        MOV     A,?V0
        JZ      ??ZDApp_SecInit_0
//  367     {
//  368       nwkFrameCounter = 0;
        MOV     DPTR,#nwkFrameCounter
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  369 
//  370       if( _NIB.nwkKeyLoaded == FALSE )
        MOV     DPTR,#_NIB + 61
        MOVX    A,@DPTR
        JNZ     ??ZDApp_SecInit_0
//  371       {
//  372         if ( ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE          ) ||
//  373              ( ( zgSecurityMode == ZG_SECURITY_RESIDENTIAL ) && zgPreConfigKeys )    )
//  374         {
//  375             ZDSecMgrReadKeyFromNv(ZCD_NV_PRECFGKEY, zgPreConfigKey);
        ; Setup parameters for call to function ZDSecMgrReadKeyFromNv
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        MOV     R2,#0x62
        MOV     R3,#0x0
        LCALL   `??ZDSecMgrReadKeyFromNv::?relay`; Banked call to: ZDSecMgrReadKeyFromNv
//  376             SSP_UpdateNwkKey( zgPreConfigKey, 0);
        ; Setup parameters for call to function SSP_UpdateNwkKey
        MOV     R1,#0x0
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??SSP_UpdateNwkKey::?relay`; Banked call to: SSP_UpdateNwkKey
//  377             SSP_SwitchNwkKey( 0 );
        ; Setup parameters for call to function SSP_SwitchNwkKey
        MOV     R1,#0x0
        LCALL   `??SSP_SwitchNwkKey::?relay`; Banked call to: SSP_SwitchNwkKey
//  378 
//  379             // clear local copy of key
//  380             osal_memset(zgPreConfigKey, 0x00, SEC_KEY_LEN);
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x10
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
//  381         }
//  382       }
//  383     }
//  384 
//  385     // clean the new devices list when Security module is initialized
//  386     if ( ZDApp_NewDeviceList != NULL )
??ZDApp_SecInit_0:
        MOV     DPTR,#ZDApp_NewDeviceList
        LCALL   ??Subroutine54_0 & 0xFFFF
??CrossCallReturnLabel_91:
        JZ      ??ZDApp_SecInit_1
//  387     {
//  388       ZDAppNewDevice_t *pNewDeviceNext;
//  389 
//  390       while ( ZDApp_NewDeviceList )
//  391       {
//  392         pNewDeviceNext = (ZDAppNewDevice_t *) ZDApp_NewDeviceList->next;
??ZDApp_SecInit_2:
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_62:
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
//  393         osal_mem_free( ZDApp_NewDeviceList );
        ; Setup parameters for call to function osal_mem_free
        LCALL   ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_78:
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
//  394         ZDApp_NewDeviceList = pNewDeviceNext;
        MOV     A,R6
        MOV     R0,A
        MOV     A,R7
        MOV     R1,A
        MOV     DPTR,#ZDApp_NewDeviceList
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  395       }
        MOV     A,R0
        ORL     A,R1
        JNZ     ??ZDApp_SecInit_2
//  396     }
//  397   }
//  398 }
??ZDApp_SecInit_1:
        MOV     A,#0x10
        LJMP    ??Subroutine55_0 & 0xFFFF
          CFI EndBlock cfiBlock1

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine17:
          CFI Block cfiCond2 Using cfiCommon0
          CFI Function ZDApp_SecInit
          CFI Conditional ??CrossCallReturnLabel_62
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond3 Using cfiCommon0
          CFI (cfiCond3) Function ZDApp_ProcessSecEvent
          CFI (cfiCond3) Conditional ??CrossCallReturnLabel_63
          CFI (cfiCond3) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond3) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond3) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond3) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond3) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond3) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond3) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond3) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond3) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond3) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond3) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond3) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond3) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond3) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond3) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond3) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond3) CFA_SP SP+-2
          CFI (cfiCond3) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker4 Using cfiCommon1
          CFI (cfiPicker4) NoFunction
          CFI (cfiPicker4) Picker
        MOV     DPTR,#ZDApp_NewDeviceList
          CFI EndBlock cfiCond2
          CFI EndBlock cfiCond3
          CFI EndBlock cfiPicker4
        REQUIRE ??Subroutine45_0
        ; // Fall through to label ??Subroutine45_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine45_0:
          CFI Block cfiCond5 Using cfiCommon0
          CFI Function ZDApp_ProcessMsgCBs
          CFI Conditional ??CrossCallReturnLabel_59
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 56)
          CFI Block cfiCond6 Using cfiCommon0
          CFI (cfiCond6) Function ZDO_AddrChangeIndicationCB
          CFI (cfiCond6) Conditional ??CrossCallReturnLabel_60
          CFI (cfiCond6) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond6) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond6) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond6) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond6) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond6) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond6) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond6) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond6) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond6) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond6) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond6) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond6) CFA_SP SP+-2
          CFI (cfiCond6) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond7 Using cfiCommon0
          CFI (cfiCond7) Function ZDO_AddrChangeIndicationCB
          CFI (cfiCond7) Conditional ??CrossCallReturnLabel_61
          CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond7) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond7) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond7) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond7) CFA_SP SP+-2
          CFI (cfiCond7) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond8 Using cfiCommon0
          CFI (cfiCond8) Function ZDApp_SecInit
          CFI (cfiCond8) Conditional ??CrossCallReturnLabel_62
          CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond8) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond8) CFA_SP SP+-2
          CFI (cfiCond8) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond9 Using cfiCommon0
          CFI (cfiCond9) Function ZDApp_ProcessSecEvent
          CFI (cfiCond9) Conditional ??CrossCallReturnLabel_63
          CFI (cfiCond9) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond9) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond9) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond9) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond9) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond9) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond9) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond9) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond9) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond9) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond9) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond9) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond9) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond9) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond9) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond9) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond9) CFA_SP SP+-2
          CFI (cfiCond9) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker10 Using cfiCommon1
          CFI (cfiPicker10) NoFunction
          CFI (cfiPicker10) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond5
          CFI EndBlock cfiCond6
          CFI EndBlock cfiCond7
          CFI EndBlock cfiCond8
          CFI EndBlock cfiCond9
          CFI EndBlock cfiPicker10
//  399 
//  400 /*********************************************************************
//  401  * @fn      ZDApp_event_loop()
//  402  *
//  403  * @brief   Main event loop for Zigbee device objects task. This function
//  404  *          should be called at periodic intervals.
//  405  *
//  406  * @param   task_id - Task ID
//  407  * @param   events  - Bitmap of events
//  408  *
//  409  * @return  none
//  410  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  411 UINT16 ZDApp_event_loop( uint8 task_id, UINT16 events )
ZDApp_event_loop:
          CFI Block cfiBlock11 Using cfiCommon0
          CFI Function ZDApp_event_loop
        CODE
//  412 {
        FUNCALL ZDApp_event_loop, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, ZDO_StartDevice
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, ZDApp_ProcessOSALMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, ZDApp_NetworkStartEvt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, osal_pwrmgr_device
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, ZDO_UpdateNwkStatus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, zgWriteStartupOptions
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, Onboard_soft_reset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, ZDApp_AgeOutPendingBindEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, ZDApp_ProcessSecEvent
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V4
        REQUIRE ?V5
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     ?V2,R1
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  413   uint8 *msg_ptr;
//  414 
//  415   if ( events & SYS_EVENT_MSG )
        ANL     A,#0x80
        JNZ     ??ZDApp_event_loop_0
//  416   {
//  417     while ( (msg_ptr = osal_msg_receive( ZDAppTaskID )) )
//  418     {
//  419       ZDApp_ProcessOSALMsg( (osal_event_hdr_t *)msg_ptr );
//  420 
//  421       // Release the memory
//  422       osal_msg_deallocate( msg_ptr );
//  423     }
//  424 
//  425     // Return unprocessed events
//  426     return (events ^ SYS_EVENT_MSG);
//  427   }
//  428 
//  429   if ( events & ZDO_NETWORK_INIT )
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        JNC     ??ZDApp_event_loop_1
//  430   {
//  431     // Initialize apps and start the network
//  432     devState = DEV_INIT;
        MOV     DPTR,#devState
        MOV     A,#0x1
        LCALL   ??Subroutine47_0 & 0xFFFF
//  433     osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
??CrossCallReturnLabel_72:
        LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
//  434 
//  435     ZDO_StartDevice( (uint8)ZDO_Config_Node_Descriptor.LogicalType, devStartMode,
//  436                      DEFAULT_BEACON_ORDER, DEFAULT_SUPERFRAME_ORDER );
        ; Setup parameters for call to function ZDO_StartDevice
        MOV     R4,#0xf
        MOV     R3,#0xf
        MOV     DPTR,#devStartMode
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPTR,#ZDO_Config_Node_Descriptor
        MOVX    A,@DPTR
        ANL     A,#0x7
        MOV     R1,A
        LCALL   `??ZDO_StartDevice::?relay`; Banked call to: ZDO_StartDevice
//  437 
//  438     // Return unprocessed events
//  439     return (events ^ ZDO_NETWORK_INIT);
        MOV     A,R6
        XRL     A,#0x1
        LJMP    ??ZDApp_event_loop_2 & 0xFFFF
//  440   }
??ZDApp_event_loop_3:
        ; Setup parameters for call to function ZDApp_ProcessOSALMsg
        LCALL   `??ZDApp_ProcessOSALMsg::?relay`; Banked call to: ZDApp_ProcessOSALMsg
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
??ZDApp_event_loop_0:
        ; Setup parameters for call to function osal_msg_receive
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     A,R2
        ORL     A,?V1
        JNZ     ??ZDApp_event_loop_3
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x80
        LJMP    ??ZDApp_event_loop_4 & 0xFFFF
//  441 
//  442   if ( ZSTACK_ROUTER_BUILD )
//  443   {
//  444     if ( events & ZDO_NETWORK_START )
??ZDApp_event_loop_1:
        ANL     A,#0x2
        JZ      ??ZDApp_event_loop_5
//  445     {
//  446       ZDApp_NetworkStartEvt();
        ; Setup parameters for call to function ZDApp_NetworkStartEvt
        LCALL   `??ZDApp_NetworkStartEvt::?relay`; Banked call to: ZDApp_NetworkStartEvt
//  447 
//  448       // Return unprocessed events
//  449       return (events ^ ZDO_NETWORK_START);
        MOV     A,R6
        XRL     A,#0x2
        SJMP    ??ZDApp_event_loop_2
//  450     }
//  451 
//  452     if ( events & ZDO_ROUTER_START )
??ZDApp_event_loop_5:
        MOV     A,R6
        ANL     A,#0x20
        JZ      ??ZDApp_event_loop_6
//  453     {
//  454       if ( nwkStatus == ZSuccess )
        MOV     DPTR,#nwkStatus
        MOVX    A,@DPTR
        JNZ     ??ZDApp_event_loop_7
//  455       {
//  456         if ( devState == DEV_END_DEVICE )
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        XRL     A,#0x6
        JNZ     ??ZDApp_event_loop_8
//  457           devState = DEV_ROUTER;
        MOV     A,#0x7
        MOVX    @DPTR,A
//  458 
//  459         osal_pwrmgr_device( PWRMGR_ALWAYS_ON );
??ZDApp_event_loop_8:
        ; Setup parameters for call to function osal_pwrmgr_device
        MOV     R1,#0x0
        LCALL   `??osal_pwrmgr_device::?relay`; Banked call to: osal_pwrmgr_device
//  460       }
//  461       else
//  462       {
//  463         // remain as end device
//  464       }
//  465       osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
??ZDApp_event_loop_7:
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x10
        MOV     R3,#0x0
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
//  466 
//  467       // Return unprocessed events
//  468       return (events ^ ZDO_ROUTER_START);
        MOV     A,R6
        XRL     A,#0x20
        SJMP    ??ZDApp_event_loop_2
//  469     }
//  470   }
//  471 
//  472   if ( events & ZDO_STATE_CHANGE_EVT )
??ZDApp_event_loop_6:
        MOV     A,R6
        ANL     A,#0x10
        JZ      ??ZDApp_event_loop_9
//  473   {
//  474     ZDO_UpdateNwkStatus( devState );
        ; Setup parameters for call to function ZDO_UpdateNwkStatus
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??ZDO_UpdateNwkStatus::?relay`; Banked call to: ZDO_UpdateNwkStatus
//  475 
//  476     // At start up, do one MTO route discovery if the device is a concentrator
//  477     if ( zgConcentratorEnable == TRUE )
        MOV     DPTR,#zgConcentratorEnable
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDApp_event_loop_10
//  478     {
//  479       // Start next event
//  480       osal_start_timerEx( NWK_TaskID, NWK_MTO_RTG_REQ_EVT, 100 );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#__Constant_64
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     R2,#0x0
        MOV     R3,#0x8
        MOV     DPTR,#NWK_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
//  481     }
//  482 
//  483     // Return unprocessed events
//  484     return (events ^ ZDO_STATE_CHANGE_EVT);
??ZDApp_event_loop_10:
        MOV     A,R6
        XRL     A,#0x10
??ZDApp_event_loop_2:
        MOV     R2,A
        MOV     A,R7
        SJMP    ??ZDApp_event_loop_4
//  485   }
//  486 
//  487   if ( events & ZDO_COMMAND_CNF )
??ZDApp_event_loop_9:
        MOV     A,R6
        ANL     A,#0x8
        JZ      ??ZDApp_event_loop_11
//  488   {
//  489     // User defined logic
//  490 
//  491     // Return unprocessed events
//  492     return (events ^ ZDO_COMMAND_CNF);
        MOV     A,R6
        XRL     A,#0x8
        MOV     R2,A
        SJMP    ??ZDApp_event_loop_12
//  493   }
//  494 
//  495   if ( events & ZDO_NWK_UPDATE_NV )
??ZDApp_event_loop_11:
        MOV     A,R7
        ANL     A,#0x1
        JZ      ??ZDApp_event_loop_13
//  496   {
//  497     ZDApp_SaveNetworkStateEvt();
//  498 
//  499     // Return unprocessed events
//  500     return (events ^ ZDO_NWK_UPDATE_NV);
        MOV     A,R7
        XRL     A,#0x1
        SJMP    ??ZDApp_event_loop_4
//  501   }
//  502 
//  503   if ( events & ZDO_DEVICE_RESET )
??ZDApp_event_loop_13:
        MOV     A,R6
        ANL     A,#0x4
        JZ      ??ZDApp_event_loop_14
//  504   {
//  505 #ifdef ZBA_FALLBACK_NWKKEY
//  506     if ( devState == DEV_END_DEVICE_UNAUTH )
//  507     {
//  508       ZDSecMgrFallbackNwkKey();
//  509     }
//  510     else
//  511 #endif
//  512     {
//  513       // Set the NV startup option to force a "new" join.
//  514       zgWriteStartupOptions( ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
        ; Setup parameters for call to function zgWriteStartupOptions
        MOV     R2,#0x2
        MOV     R1,#-0x1
        LCALL   `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
//  515 
//  516       // The device has been in the UNAUTH state, so reset
//  517       // Note: there will be no return from this call
//  518       SystemResetSoft();
        ; Setup parameters for call to function Onboard_soft_reset
        LCALL   Onboard_soft_reset & 0xFFFF
//  519     }
//  520   }
//  521 
//  522 #if !defined ( ZDP_BIND_SKIP_VALIDATION )
//  523   if ( events & ZDO_PENDING_BIND_REQ_EVT )
??ZDApp_event_loop_14:
        MOV     A,R7
        ANL     A,#0x10
        JZ      ??ZDApp_event_loop_15
//  524   {
//  525 #if defined ( REFLECTOR )
//  526     ZDApp_AgeOutPendingBindEntry();
        ; Setup parameters for call to function ZDApp_AgeOutPendingBindEntry
        LCALL   `??ZDApp_AgeOutPendingBindEntry::?relay`; Banked call to: ZDApp_AgeOutPendingBindEntry
//  527 #endif
//  528     // Return unprocessed events
//  529     return (events ^ ZDO_PENDING_BIND_REQ_EVT);
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x10
??ZDApp_event_loop_4:
        MOV     R3,A
        SJMP    ??ZDApp_event_loop_12
//  530   }
//  531 #endif
//  532 
//  533   if ( ZG_SECURE_ENABLED )
//  534   {
//  535     return ( ZDApp_ProcessSecEvent( task_id, events ) );
??ZDApp_event_loop_15:
        ; Setup parameters for call to function ZDApp_ProcessSecEvent
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     R1,?V2
        LCALL   `??ZDApp_ProcessSecEvent::?relay`; Banked call to: ZDApp_ProcessSecEvent
//  536   }
??ZDApp_event_loop_12:
          CFI EndBlock cfiBlock11
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1
//  537   else
//  538   {
//  539     // Discard or make more handlers
//  540     return 0;
//  541   }
//  542 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock12 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock12
//  543 
//  544 /*********************************************************************
//  545  * @fn      ZDApp_ProcessSecEvent()
//  546  *
//  547  * @brief   Process incoming security events.
//  548  *
//  549  * @param   task_id - Task ID
//  550  * @param   events  - Bitmap of events
//  551  *
//  552  * @return  none
//  553  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  554 UINT16 ZDApp_ProcessSecEvent( uint8 task_id, UINT16 events )
ZDApp_ProcessSecEvent:
          CFI Block cfiBlock13 Using cfiCommon0
          CFI Function ZDApp_ProcessSecEvent
        CODE
//  555 {
        FUNCALL ZDApp_ProcessSecEvent, ZDSecMgrNewDeviceEvent
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessSecEvent, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessSecEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessSecEvent, ZDApp_DeviceAuthEvt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessSecEvent, ZDApp_SaveNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessSecEvent, ZDSecMgrSaveTCLinkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  556   (void)task_id;  // Intentionally unreferenced parameter
//  557 
//  558   if ( ZSTACK_ROUTER_BUILD )
//  559   {
//  560     if ( events & ZDO_NEW_DEVICE )
        MOV     A,R6
        ANL     A,#0x40
        JNZ     $+5
        LJMP    ??ZDApp_ProcessSecEvent_0 & 0xFFFF
//  561     {
//  562       // process the new device event
//  563       if ( ZDApp_NewDeviceList )
        MOV     DPTR,#ZDApp_NewDeviceList
        LCALL   ??Subroutine54_0 & 0xFFFF
??CrossCallReturnLabel_92:
        JZ      ??ZDApp_ProcessSecEvent_1
//  564       {
//  565         ZDAppNewDevice_t *pNewDevice;
//  566         uint16 timeDelta;
//  567 
//  568         (void) ZDSecMgrNewDeviceEvent( ZDApp_NewDeviceList->shortAddr );
        ; Setup parameters for call to function ZDSecMgrNewDeviceEvent
        LCALL   ??Subroutine57_0 & 0xFFFF
??CrossCallReturnLabel_112:
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine48_0 & 0xFFFF
??CrossCallReturnLabel_73:
        LCALL   `??ZDSecMgrNewDeviceEvent::?relay`; Banked call to: ZDSecMgrNewDeviceEvent
//  569 
//  570         pNewDevice = (ZDAppNewDevice_t *) ZDApp_NewDeviceList->next;
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_63:
        MOV     ?V0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V1,A
//  571         osal_mem_free( ZDApp_NewDeviceList );
        ; Setup parameters for call to function osal_mem_free
        LCALL   ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_79:
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
//  572         ZDApp_NewDeviceList = pNewDevice;
        MOV     DPTR,#ZDApp_NewDeviceList
        MOV     A,?V0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V1
        MOVX    @DPTR,A
//  573 
//  574         if ( pNewDevice )
        MOV     A,?V0
        ORL     A,?V1
        JZ      ??ZDApp_ProcessSecEvent_1
//  575         {
//  576           timeDelta = pNewDevice->timeDelta;
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V5,A
//  577           pNewDevice = pNewDevice->next;
        SJMP    ??ZDApp_ProcessSecEvent_2
//  578 
//  579           while ( pNewDevice )
//  580           {
//  581             pNewDevice->timeDelta -= timeDelta;
??ZDApp_ProcessSecEvent_3:
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,?V4
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,?V5
        MOVX    @DPTR,A
//  582             pNewDevice = pNewDevice->next;
??ZDApp_ProcessSecEvent_2:
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOVX    A,@DPTR
        MOV     ?V0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V1,A
//  583           }
        MOV     A,?V0
        ORL     A,?V1
        JNZ     ??ZDApp_ProcessSecEvent_3
//  584 
//  585           osal_start_timerEx( ZDAppTaskID, ZDO_NEW_DEVICE, timeDelta );
        ; Setup parameters for call to function osal_start_timerEx
        CLR     A
        MOV     ?V6,A
        MOV     ?V7,A
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_FOUR
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     R2,#0x40
        MOV     R3,#0x0
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
//  586         }
//  587       }
//  588 
//  589       // Return unprocessed events
//  590       return (events ^ ZDO_NEW_DEVICE);
??ZDApp_ProcessSecEvent_1:
        MOV     A,R6
        XRL     A,#0x40
        SJMP    ??ZDApp_ProcessSecEvent_4
//  591     }
//  592   }
//  593 
//  594   if ( events & ZDO_DEVICE_AUTH )
??ZDApp_ProcessSecEvent_0:
        MOV     A,R6
        ANL     A,#0x80
        JZ      ??ZDApp_ProcessSecEvent_5
//  595   {
//  596     ZDApp_DeviceAuthEvt();
        ; Setup parameters for call to function ZDApp_DeviceAuthEvt
        LCALL   `??ZDApp_DeviceAuthEvt::?relay`; Banked call to: ZDApp_DeviceAuthEvt
//  597 
//  598     // Return unprocessed events
//  599     return (events ^ ZDO_DEVICE_AUTH);
        MOV     A,R6
        XRL     A,#0x80
??ZDApp_ProcessSecEvent_4:
        MOV     R2,A
        MOV     A,R7
        SJMP    ??ZDApp_ProcessSecEvent_6
//  600   }
//  601 
//  602   if ( events & ZDO_FRAMECOUNTER_CHANGE )
??ZDApp_ProcessSecEvent_5:
        MOV     A,R7
        ANL     A,#0x2
        JZ      ??ZDApp_ProcessSecEvent_7
//  603   {
//  604     ZDApp_SaveNwkKey();
        ; Setup parameters for call to function ZDApp_SaveNwkKey
        LCALL   `??ZDApp_SaveNwkKey::?relay`; Banked call to: ZDApp_SaveNwkKey
//  605 
//  606     // Return unprocessed events
//  607     return (events ^ ZDO_FRAMECOUNTER_CHANGE);
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x2
        SJMP    ??ZDApp_ProcessSecEvent_6
//  608   }
//  609 
//  610   if ( events & ZDO_APS_FRAMECOUNTER_CHANGE )
??ZDApp_ProcessSecEvent_7:
        MOV     A,R7
        ANL     A,#0x8
        JZ      ??ZDApp_ProcessSecEvent_8
//  611   {
//  612 #if defined (NV_RESTORE)
//  613     ZDSecMgrSaveApsLinkKey();
//  614 #endif // (NV_RESTORE)
//  615 
//  616     // Return unprocessed events
//  617     return (events ^ ZDO_APS_FRAMECOUNTER_CHANGE);
        MOV     A,R7
        XRL     A,#0x8
        SJMP    ??ZDApp_ProcessSecEvent_6
//  618   }
//  619 
//  620   if ( events & ZDO_TCLK_FRAMECOUNTER_CHANGE )
??ZDApp_ProcessSecEvent_8:
        MOV     A,R7
        ANL     A,#0x4
        JZ      ??ZDApp_ProcessSecEvent_9
//  621   {
//  622     ZDSecMgrSaveTCLinkKey();
        ; Setup parameters for call to function ZDSecMgrSaveTCLinkKey
        LCALL   `??ZDSecMgrSaveTCLinkKey::?relay`; Banked call to: ZDSecMgrSaveTCLinkKey
//  623 
//  624     // Return unprocessed events
//  625     return (events ^ ZDO_TCLK_FRAMECOUNTER_CHANGE);
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x4
??ZDApp_ProcessSecEvent_6:
        MOV     R3,A
        SJMP    ??ZDApp_ProcessSecEvent_10
//  626   }
//  627 
//  628   // Discard or make more handlers
//  629   return 0;
??ZDApp_ProcessSecEvent_9:
        MOV     R2,#0x0
        MOV     R3,#0x0
??ZDApp_ProcessSecEvent_10:
          CFI EndBlock cfiBlock13
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2
//  630 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiBlock14 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock14
//  631 
//  632 /*********************************************************************
//  633  * Application Functions
//  634  */
//  635 
//  636 /*********************************************************************
//  637  * @fn      ZDOInitDevice
//  638  *
//  639  * @brief   Start the device in the network.  This function will read
//  640  *   ZCD_NV_STARTUP_OPTION (NV item) to determine whether or not to
//  641  *   restore the network state of the device.
//  642  *
//  643  * @param   startDelay - timeDelay to start device (in milliseconds).
//  644  *                       There is a jitter added to this delay:
//  645  *                       ((NWK_START_DELAY + startDelay)
//  646  *                       + (osal_rand() & EXTENDED_JOINING_RANDOM_MASK))
//  647  *                       When startDelay is set to ZDO_INIT_HOLD_NWK_START
//  648  *                       this function will hold the network init. Application
//  649  *                       can start the device.
//  650  *
//  651  * NOTE:    If the application would like to force a "new" join, the
//  652  *          application should set the ZCD_STARTOPT_DEFAULT_NETWORK_STATE
//  653  *          bit in the ZCD_NV_STARTUP_OPTION NV item before calling
//  654  *          this function. "new" join means to not restore the network
//  655  *          state of the device. Use zgWriteStartupOptions() to set these
//  656  *          options.
//  657  *
//  658  * @return
//  659  *    ZDO_INITDEV_RESTORED_NETWORK_STATE  - The device's network state was
//  660  *          restored.
//  661  *    ZDO_INITDEV_NEW_NETWORK_STATE - The network state was initialized.
//  662  *          This could mean that ZCD_NV_STARTUP_OPTION said to not restore, or
//  663  *          it could mean that there was no network state to restore.
//  664  *    ZDO_INITDEV_LEAVE_NOT_STARTED - Before the reset, a network leave was issued
//  665  *          with the rejoin option set to TRUE.  So, the device was not
//  666  *          started in the network (one time only).  The next time this
//  667  *          function is called it will start.
//  668  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  669 uint8 ZDOInitDevice( uint16 startDelay )
ZDOInitDevice:
          CFI Block cfiBlock15 Using cfiCommon0
          CFI Function ZDOInitDevice
        CODE
//  670 {
        FUNCALL ZDOInitDevice, zgInitItems
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDevice, ZDConfig_InitDescriptors
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDevice, ZDAppDetermineDeviceType
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDevice, osal_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDevice, ZDApp_SecInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDevice, ZDApp_LeaveCtrlInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDevice, ZDApp_LeaveCtrlStartup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDevice, zgWriteStartupOptions
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDevice, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDevice, ZDApp_NetworkInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDevice, NLME_SetBroadcastFilter
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        LCALL   ?Subroutine14 & 0xFFFF
//  671   uint8 networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
//  672   uint16 extendedDelay = 0;
//  673  
//  674   
//  675   
//  676 
//  677   if ( devState == DEV_HOLD )
??CrossCallReturnLabel_67:
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        JNZ     ??ZDOInitDevice_0
//  678   {
//  679     // Initialize the RAM items table, in case an NV item has been updated.
//  680     zgInitItems( FALSE );
        ; Setup parameters for call to function zgInitItems
        MOV     R1,#0x0
        LCALL   `??zgInitItems::?relay`; Banked call to: zgInitItems
//  681   }
//  682 
//  683   ZDConfig_InitDescriptors();
??ZDOInitDevice_0:
        ; Setup parameters for call to function ZDConfig_InitDescriptors
        LCALL   `??ZDConfig_InitDescriptors::?relay`; Banked call to: ZDConfig_InitDescriptors
//  684   //devtag.071807.todo - fix this temporary solution
//  685   _NIB.CapabilityFlags = ZDO_Config_Node_Descriptor.CapabilityFlags;
        MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
        MOVX    A,@DPTR
        MOV     DPTR,#_NIB + 14
        MOVX    @DPTR,A
//  686 
//  687 #if defined ( NV_RESTORE )
//  688   // Hold down the SW_BYPASS_NV key (defined in OnBoard.h)
//  689   // while booting to skip past NV Restore.
//  690   if ( zdappHoldKeys == SW_BYPASS_NV )
//  691   {
//  692     zdappHoldKeys = 0;   // Only once
//  693     networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
//  694   }
//  695   else
//  696   {
//  697     // Determine if NV should be restored
//  698     networkStateNV = ZDApp_ReadNetworkRestoreState();
//  699   }
//  700 
//  701   if ( networkStateNV == ZDO_INITDEV_RESTORED_NETWORK_STATE )
//  702   {
//  703     networkStateNV = ZDApp_RestoreNetworkState();
//  704   }
//  705   else
//  706   {
//  707     // Wipe out the network state in NV
//  708     NLME_InitNV();
//  709     NLME_SetDefaultNV();
//  710     // clear NWK key values
//  711     ZDSecMgrClearNVKeyValues();
//  712   }
//  713 #endif
//  714 
//  715   if ( networkStateNV == ZDO_INITDEV_NEW_NETWORK_STATE )
//  716   {
//  717     ZDAppDetermineDeviceType();
        ; Setup parameters for call to function ZDAppDetermineDeviceType
        LCALL   `??ZDAppDetermineDeviceType::?relay`; Banked call to: ZDAppDetermineDeviceType
//  718 
//  719     // Only delay if joining network - not restoring network state
//  720     extendedDelay = (uint16)((NWK_START_DELAY + startDelay)
//  721               + (osal_rand() & EXTENDED_JOINING_RANDOM_MASK));
        ; Setup parameters for call to function osal_rand
        LCALL   `??osal_rand::?relay`; Banked call to: osal_rand
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R2
        ANL     A,#0x7f
        MOV     R0,A
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R0
        ADD     A,#0x64
        MOV     R6,A
        CLR     A
        ADDC    A,R1
        MOV     R7,A
//  722   }
//  723 
//  724   // Initialize the security for type of device
//  725   ZDApp_SecInit( networkStateNV );
        ; Setup parameters for call to function ZDApp_SecInit
        MOV     R1,#0x1
        LCALL   `??ZDApp_SecInit::?relay`; Banked call to: ZDApp_SecInit
//  726 
//  727   if( ZDO_INIT_HOLD_NWK_START != startDelay )
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        CPL     A
        JNZ     ??ZDOInitDevice_1
        INC     DPTR
        MOVX    A,@DPTR
        CPL     A
??ZDOInitDevice_1:
        JZ      ??ZDOInitDevice_2
//  728   {
//  729     devState = DEV_INIT;    // Remove the Hold state
        MOV     DPTR,#devState
        MOV     A,#0x1
        MOVX    @DPTR,A
//  730 
//  731     // Initialize leave control logic
//  732     ZDApp_LeaveCtrlInit();
        ; Setup parameters for call to function ZDApp_LeaveCtrlInit
        LCALL   `??ZDApp_LeaveCtrlInit::?relay`; Banked call to: ZDApp_LeaveCtrlInit
//  733 
//  734     // Check leave control reset settings
//  735     ZDApp_LeaveCtrlStartup( &devState, &startDelay );
        ; Setup parameters for call to function ZDApp_LeaveCtrlStartup
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        MOV     R2,#devState & 0xff
        MOV     R3,#(devState >> 8) & 0xff
        LCALL   `??ZDApp_LeaveCtrlStartup::?relay`; Banked call to: ZDApp_LeaveCtrlStartup
//  736 
//  737     // Leave may make the hold state come back
//  738     if ( devState == DEV_HOLD )
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        JNZ     ??ZDOInitDevice_3
//  739     {
//  740       // Set the NV startup option to force a "new" join.
//  741       zgWriteStartupOptions( ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
        ; Setup parameters for call to function zgWriteStartupOptions
        MOV     R2,#0x2
        MOV     R1,#-0x1
        LCALL   `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
//  742 
//  743       // Notify the applications
//  744       osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x10
        MOV     R3,#0x0
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
//  745 
//  746       return ( ZDO_INITDEV_LEAVE_NOT_STARTED );   // Don't join - (one time).
        MOV     R1,#0x2
        SJMP    ??ZDOInitDevice_4
//  747     }
//  748 
//  749     // Trigger the network start
//  750     ZDApp_NetworkInit( extendedDelay );
??ZDOInitDevice_3:
        ; Setup parameters for call to function ZDApp_NetworkInit
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
//  751   }
//  752 
//  753   // set broadcast address mask to support broadcast filtering
//  754   NLME_SetBroadcastFilter( ZDO_Config_Node_Descriptor.CapabilityFlags );
??ZDOInitDevice_2:
        ; Setup parameters for call to function NLME_SetBroadcastFilter
        MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??NLME_SetBroadcastFilter::?relay`; Banked call to: NLME_SetBroadcastFilter
//  755 
//  756   return ( networkStateNV );
        MOV     R1,#0x1
??ZDOInitDevice_4:
        LJMP    ?Subroutine8 & 0xFFFF
//  757 }
          CFI EndBlock cfiBlock15

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine14:
          CFI Block cfiCond16 Using cfiCommon0
          CFI Function ZDOInitDevice
          CFI Conditional ??CrossCallReturnLabel_67
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond17 Using cfiCommon0
          CFI (cfiCond17) Function ZDO_ConcentratorIndicationCB
          CFI (cfiCond17) Conditional ??CrossCallReturnLabel_68
          CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond17) CFA_SP SP+-2
          CFI (cfiCond17) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond18 Using cfiCommon0
          CFI (cfiCond18) Function ZDO_SrcRtgIndCB
          CFI (cfiCond18) Conditional ??CrossCallReturnLabel_69
          CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond18) CFA_SP SP+-2
          CFI (cfiCond18) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker19 Using cfiCommon1
          CFI (cfiPicker19) NoFunction
          CFI (cfiPicker19) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
          CFI EndBlock cfiCond16
          CFI EndBlock cfiCond17
          CFI EndBlock cfiCond18
          CFI EndBlock cfiPicker19
        REQUIRE ??Subroutine46_0
        ; // Fall through to label ??Subroutine46_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine46_0:
          CFI Block cfiCond20 Using cfiCommon0
          CFI Function ZDO_beaconNotifyIndCB
          CFI Conditional ??CrossCallReturnLabel_64
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond21 Using cfiCommon0
          CFI (cfiCond21) Function ZDO_RegisterForZdoCB
          CFI (cfiCond21) Conditional ??CrossCallReturnLabel_65
          CFI (cfiCond21) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond21) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond21) CFA_SP SP+-7
          CFI Block cfiCond22 Using cfiCommon0
          CFI (cfiCond22) Function ZDApp_InitPendingBind
          CFI (cfiCond22) Conditional ??CrossCallReturnLabel_66
          CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond22) CFA_SP SP+-2
          CFI (cfiCond22) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond23 Using cfiCommon0
          CFI (cfiCond23) Function ZDOInitDevice
          CFI (cfiCond23) Conditional ??CrossCallReturnLabel_67
          CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond23) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond23) CFA_SP SP+-2
          CFI (cfiCond23) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond24 Using cfiCommon0
          CFI (cfiCond24) Function ZDO_ConcentratorIndicationCB
          CFI (cfiCond24) Conditional ??CrossCallReturnLabel_68
          CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond24) CFA_SP SP+-2
          CFI (cfiCond24) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond25 Using cfiCommon0
          CFI (cfiCond25) Function ZDO_SrcRtgIndCB
          CFI (cfiCond25) Conditional ??CrossCallReturnLabel_69
          CFI (cfiCond25) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond25) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond25) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond25) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond25) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond25) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond25) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond25) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond25) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond25) CFA_SP SP+-2
          CFI (cfiCond25) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker26 Using cfiCommon1
          CFI (cfiPicker26) NoFunction
          CFI (cfiPicker26) Picker
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        RET
          CFI EndBlock cfiCond20
          CFI EndBlock cfiCond21
          CFI EndBlock cfiCond22
          CFI EndBlock cfiCond23
          CFI EndBlock cfiCond24
          CFI EndBlock cfiCond25
          CFI EndBlock cfiPicker26
//  758 
//  759 /*********************************************************************
//  760  * @fn      ZDApp_ReadNetworkRestoreState
//  761  *
//  762  * @brief   Read the ZCD_NV_STARTUP_OPTION NV Item to state whether
//  763  *          or not to restore the network state.
//  764  *          If the read value has the ZCD_STARTOPT_DEFAULT_NETWORK_STATE
//  765  *          bit set return the ZDO_INITDEV_NEW_NETWORK_STATE.
//  766  *
//  767  * @param   none
//  768  *
//  769  * @return  ZDO_INITDEV_NEW_NETWORK_STATE
//  770  *          or ZDO_INITDEV_RESTORED_NETWORK_STATE based on whether or
//  771  *          not ZCD_STARTOPT_DEFAULT_NETWORK_STATE bit is set in
//  772  *          ZCD_NV_STARTUP_OPTION
//  773  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  774 uint8 ZDApp_ReadNetworkRestoreState( void )
ZDApp_ReadNetworkRestoreState:
          CFI Block cfiBlock27 Using cfiCommon0
          CFI Function ZDApp_ReadNetworkRestoreState
        CODE
//  775 {
        FUNCALL ZDApp_ReadNetworkRestoreState, zgReadStartupOptions
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  776   uint8 networkStateNV = ZDO_INITDEV_RESTORED_NETWORK_STATE;
        MOV     R6,#0x0
//  777 
//  778   // Look for the New Network State option.
//  779   if ( zgReadStartupOptions() & ZCD_STARTOPT_DEFAULT_NETWORK_STATE )
        ; Setup parameters for call to function zgReadStartupOptions
        LCALL   `??zgReadStartupOptions::?relay`; Banked call to: zgReadStartupOptions
        MOV     A,R1
        MOV     R0,A
        MOV     C,0xE0 /* A   */.1
        JNC     ??ZDApp_ReadNetworkRestoreState_0
//  780   {
//  781     networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
        MOV     R6,#0x1
//  782   }
//  783 
//  784   return ( networkStateNV );
??ZDApp_ReadNetworkRestoreState_0:
        MOV     A,R6
        MOV     R1,A
        LJMP    ??Subroutine56_0 & 0xFFFF
//  785 }
          CFI EndBlock cfiBlock27
//  786 
//  787 /*********************************************************************
//  788  * @fn      ZDAppDetermineDeviceType()
//  789  *
//  790  * @brief   Determines the type of device to start.
//  791  *
//  792  *          Looks at zgDeviceLogicalType and determines what type of
//  793  *          device to start.  The types are:
//  794  *            ZG_DEVICETYPE_COORDINATOR
//  795  *            ZG_DEVICETYPE_ROUTER
//  796  *            ZG_DEVICETYPE_ENDDEVICE
//  797  *
//  798  * @param   none
//  799  *
//  800  * @return  none
//  801  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  802 void ZDAppDetermineDeviceType( void )
ZDAppDetermineDeviceType:
          CFI Block cfiBlock28 Using cfiCommon0
          CFI Function ZDAppDetermineDeviceType
        CODE
//  803 {
        FUNCALL ZDAppDetermineDeviceType, nwk_ExtPANIDValid
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  804   if ( zgDeviceLogicalType == ZG_DEVICETYPE_COORDINATOR )
        MOV     DPTR,#zgDeviceLogicalType
        MOVX    A,@DPTR
        JNZ     ??ZDAppDetermineDeviceType_0
//  805   {
//  806     devStartMode = MODE_HARD;     // Start as a coordinator
        MOV     DPTR,#devStartMode
        MOV     A,#0x2
        MOVX    @DPTR,A
//  807     ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_COORDINATOR;
        MOV     DPTR,#ZDO_Config_Node_Descriptor
        MOVX    A,@DPTR
        ANL     A,#0xf8
        SJMP    ??ZDAppDetermineDeviceType_1
//  808   }
//  809   else
//  810   {
//  811     if ( zgDeviceLogicalType == ZG_DEVICETYPE_ROUTER  )
??ZDAppDetermineDeviceType_0:
        XRL     A,#0x1
        JNZ     ??ZDAppDetermineDeviceType_2
//  812       ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_ROUTER;
        MOV     DPTR,#ZDO_Config_Node_Descriptor
        MOVX    A,@DPTR
        ANL     A,#0xf8
        MOVX    @DPTR,A
        ORL     A,#0x1
        SJMP    ??ZDAppDetermineDeviceType_3
//  813     else if ( zgDeviceLogicalType == ZG_DEVICETYPE_ENDDEVICE )
??ZDAppDetermineDeviceType_2:
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??ZDAppDetermineDeviceType_4
//  814       ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_DEVICE;
        MOV     DPTR,#ZDO_Config_Node_Descriptor
        MOVX    A,@DPTR
        ANL     A,#0xf8
        MOVX    @DPTR,A
        ORL     A,#0x2
??ZDAppDetermineDeviceType_3:
        MOVX    @DPTR,A
//  815 
//  816     // If AIB_apsUseExtendedPANID is set to a non-zero value by commissioning
//  817     // The device shall do rejoin the network. Otherwise, do normal join
//  818     if ( nwk_ExtPANIDValid( AIB_apsUseExtendedPANID ) == false )
??ZDAppDetermineDeviceType_4:
        ; Setup parameters for call to function nwk_ExtPANIDValid
        MOV     R2,#AIB_apsUseExtendedPANID & 0xff
        MOV     R3,#(AIB_apsUseExtendedPANID >> 8) & 0xff
        LCALL   `??nwk_ExtPANIDValid::?relay`; Banked call to: nwk_ExtPANIDValid
        MOV     A,R1
        MOV     DPTR,#devStartMode
        JNZ     ??ZDAppDetermineDeviceType_5
//  819     {
//  820       devStartMode = MODE_JOIN;     // Assume joining
        CLR     A
        SJMP    ??ZDAppDetermineDeviceType_1
//  821     }
//  822     else
//  823     {
//  824       devStartMode = MODE_REJOIN;
??ZDAppDetermineDeviceType_5:
        MOV     A,#0x3
??ZDAppDetermineDeviceType_1:
        MOVX    @DPTR,A
//  825     }
//  826   }
//  827 }
        LJMP    ??Subroutine49_0 & 0xFFFF
          CFI EndBlock cfiBlock28
//  828 
//  829 /*********************************************************************
//  830  * @fn      ZDApp_NetworkStartEvt()
//  831  *
//  832  * @brief   Process the Network Start Event
//  833  *
//  834  * @param   none
//  835  *
//  836  * @return  none
//  837  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  838 void ZDApp_NetworkStartEvt( void )
ZDApp_NetworkStartEvt:
          CFI Block cfiBlock29 Using cfiCommon0
          CFI Function ZDApp_NetworkStartEvt
        CODE
//  839 {
        FUNCALL ZDApp_NetworkStartEvt, osal_pwrmgr_device
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NetworkStartEvt, osal_set_event
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NetworkStartEvt, NLME_GetEnergyThreshold
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NetworkStartEvt, NLME_GetEnergyThreshold
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NetworkStartEvt, NLME_SetEnergyThreshold
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NetworkStartEvt, osal_set_event
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NetworkStartEvt, osal_set_event
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  840   if ( nwkStatus == ZSuccess )
        MOV     DPTR,#nwkStatus
        MOVX    A,@DPTR
        JNZ     ??ZDApp_NetworkStartEvt_0
//  841   {
//  842     // Successfully started a ZigBee network
//  843     if ( devState == DEV_COORD_STARTING )
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        XRL     A,#0x8
        JNZ     ??ZDApp_NetworkStartEvt_1
//  844     {
//  845       devState = DEV_ZB_COORD;
        MOV     A,#0x9
        MOVX    @DPTR,A
//  846     }
//  847 
//  848     osal_pwrmgr_device( PWRMGR_ALWAYS_ON );
??ZDApp_NetworkStartEvt_1:
        ; Setup parameters for call to function osal_pwrmgr_device
        MOV     R1,#0x0
        LCALL   `??osal_pwrmgr_device::?relay`; Banked call to: osal_pwrmgr_device
//  849     osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
        ; Setup parameters for call to function osal_set_event
        SJMP    ??ZDApp_NetworkStartEvt_2
//  850   }
//  851   else
//  852   {
//  853     // Try again with a higher energy threshold
//  854     if ( ( NLME_GetEnergyThreshold() + ENERGY_SCAN_INCREMENT ) < 0xff )
??ZDApp_NetworkStartEvt_0:
        ; Setup parameters for call to function NLME_GetEnergyThreshold
        LCALL   `??NLME_GetEnergyThreshold::?relay`; Banked call to: NLME_GetEnergyThreshold
        MOV     A,R1
        MOV     R1,#0x0
        ADD     A,#0x10
        JNC     ??ZDApp_NetworkStartEvt_3
        INC     R1
??ZDApp_NetworkStartEvt_3:
        CLR     C
        SUBB    A,#-0x1
        MOV     A,R1
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JNC     ??ZDApp_NetworkStartEvt_4
//  855     {
//  856       NLME_SetEnergyThreshold( (uint8)(NLME_GetEnergyThreshold() + ENERGY_SCAN_INCREMENT) );
        ; Setup parameters for call to function NLME_GetEnergyThreshold
        LCALL   `??NLME_GetEnergyThreshold::?relay`; Banked call to: NLME_GetEnergyThreshold
        MOV     A,R1
        MOV     R0,A
        ; Setup parameters for call to function NLME_SetEnergyThreshold
        MOV     A,#0x10
        ADD     A,R1
        MOV     R1,A
        LCALL   `??NLME_SetEnergyThreshold::?relay`; Banked call to: NLME_SetEnergyThreshold
//  857       osal_set_event( ZDAppTaskID, ZDO_NETWORK_INIT );
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x1
        SJMP    ??ZDApp_NetworkStartEvt_5
//  858     }
//  859     else
//  860     {
//  861       // Failed to start network. Enter a dormant state (until user intervenes)
//  862       devState = DEV_INIT;
??ZDApp_NetworkStartEvt_4:
        MOV     DPTR,#devState
        MOV     A,#0x1
        MOVX    @DPTR,A
//  863       osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
        ; Setup parameters for call to function osal_set_event
??ZDApp_NetworkStartEvt_2:
        MOV     R2,#0x10
??ZDApp_NetworkStartEvt_5:
        MOV     R3,#0x0
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
//  864     }
//  865   }
//  866 }
        LJMP    ??Subroutine49_0 & 0xFFFF
          CFI EndBlock cfiBlock29
//  867 
//  868 /*********************************************************************
//  869  * @fn      ZDApp_DeviceAuthEvt()
//  870  *
//  871  * @brief   Process the Device Authentic Event
//  872  *
//  873  * @param   none
//  874  *
//  875  * @return  none
//  876  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  877 void ZDApp_DeviceAuthEvt( void )
ZDApp_DeviceAuthEvt:
          CFI Block cfiBlock30 Using cfiCommon0
          CFI Function ZDApp_DeviceAuthEvt
        CODE
//  878 {
        FUNCALL ZDApp_DeviceAuthEvt, ZDApp_ResetTimerCancel
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_DeviceAuthEvt, osal_set_event
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_DeviceAuthEvt, NLME_StartRouterRequest
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_DeviceAuthEvt, ZDApp_SaveNwkKey
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_DeviceAuthEvt, ZDApp_AnnounceNewAddress
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_DeviceAuthEvt, NLME_SetPollRate
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  879   // received authentication from trust center
//  880   if ( devState == DEV_END_DEVICE_UNAUTH )
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        XRL     A,#0x5
        JNZ     ??ZDApp_DeviceAuthEvt_0
//  881   {
//  882     // Stop the reset timer so it doesn't reset
//  883     ZDApp_ResetTimerCancel();
        ; Setup parameters for call to function ZDApp_ResetTimerCancel
        LCALL   `??ZDApp_ResetTimerCancel::?relay`; Banked call to: ZDApp_ResetTimerCancel
//  884 
//  885     devState = DEV_END_DEVICE;
        LCALL   ?Subroutine10 & 0xFFFF
//  886     osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
??CrossCallReturnLabel_70:
        LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
//  887 
//  888     // Set the Power Manager Device
//  889 #if defined ( POWER_SAVING )
//  890     osal_pwrmgr_device( PWRMGR_BATTERY );
//  891 #endif
//  892 
//  893     if ( ZSTACK_ROUTER_BUILD )
//  894     {
//  895       if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
        LCALL   ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_17:
        JZ      ??ZDApp_DeviceAuthEvt_1
//  896       {
//  897         // NOTE: first two parameters are not used, see NLMEDE.h for details
//  898         NLME_StartRouterRequest( 0, 0, false );
        ; Setup parameters for call to function NLME_StartRouterRequest
        MOV     R3,#0x0
        MOV     R2,#0x0
        MOV     R1,#0x0
        LCALL   `??NLME_StartRouterRequest::?relay`; Banked call to: NLME_StartRouterRequest
//  899       }
//  900     }
//  901 
//  902     // Notify to save info into NV
//  903     ZDApp_NVUpdate();
//  904 
//  905     // Save off the security
//  906     ZDApp_SaveNwkKey();
??ZDApp_DeviceAuthEvt_1:
        ; Setup parameters for call to function ZDApp_SaveNwkKey
        LCALL   `??ZDApp_SaveNwkKey::?relay`; Banked call to: ZDApp_SaveNwkKey
//  907 
//  908     ZDApp_AnnounceNewAddress();
        ; Setup parameters for call to function ZDApp_AnnounceNewAddress
        LCALL   `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
//  909 
//  910     if ( ( (ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE) == 0 )
//  911         || ( (ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE)
//  912 #if defined ( ZIGBEE_CHILD_AGING )
//  913           && (zgChildAgingEnable == TRUE)
//  914 #endif // ZIGBEE_CHILD_AGING
//  915              ) )
        MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.3
        JNC     ??ZDApp_DeviceAuthEvt_2
        MOV     DPTR,#zgChildAgingEnable
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDApp_DeviceAuthEvt_0
//  916     {
//  917       NLME_SetPollRate( ZDApp_SavedPollRate );
??ZDApp_DeviceAuthEvt_2:
        ; Setup parameters for call to function NLME_SetPollRate
        MOV     DPTR,#ZDApp_SavedPollRate
        LCALL   ??Subroutine48_0 & 0xFFFF
//  918     }
//  919   }
??CrossCallReturnLabel_74:
        LCALL   `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
//  920   else
//  921   {
//  922     ZDApp_NVUpdate();
//  923   }
//  924 }
??ZDApp_DeviceAuthEvt_0:
        LJMP    ??Subroutine49_0 & 0xFFFF
          CFI EndBlock cfiBlock30

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine10:
          CFI Block cfiCond31 Using cfiCommon0
          CFI Function ZDApp_DeviceAuthEvt
          CFI Conditional ??CrossCallReturnLabel_70
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond32 Using cfiCommon0
          CFI (cfiCond32) Function ZDApp_ProcessNetworkJoin
          CFI (cfiCond32) Conditional ??CrossCallReturnLabel_71
          CFI (cfiCond32) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond32) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond32) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond32) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond32) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond32) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond32) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond32) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond32) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond32) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond32) CFA_SP SP+-2
          CFI (cfiCond32) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker33 Using cfiCommon1
          CFI (cfiPicker33) NoFunction
          CFI (cfiPicker33) Picker
        MOV     DPTR,#devState
        MOV     A,#0x6
          CFI EndBlock cfiCond31
          CFI EndBlock cfiCond32
          CFI EndBlock cfiPicker33
        REQUIRE ??Subroutine47_0
        ; // Fall through to label ??Subroutine47_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine47_0:
          CFI Block cfiCond34 Using cfiCommon0
          CFI Function ZDApp_event_loop
          CFI Conditional ??CrossCallReturnLabel_72
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond35 Using cfiCommon0
          CFI (cfiCond35) Function ZDApp_DeviceAuthEvt
          CFI (cfiCond35) Conditional ??CrossCallReturnLabel_70
          CFI (cfiCond35) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond35) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond35) CFA_SP SP+-7
          CFI Block cfiCond36 Using cfiCommon0
          CFI (cfiCond36) Function ZDApp_ProcessNetworkJoin
          CFI (cfiCond36) Conditional ??CrossCallReturnLabel_71
          CFI (cfiCond36) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond36) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond36) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond36) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond36) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond36) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond36) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond36) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond36) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond36) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond36) CFA_SP SP+-2
          CFI (cfiCond36) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker37 Using cfiCommon1
          CFI (cfiPicker37) NoFunction
          CFI (cfiPicker37) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function osal_set_event
        ; Setup parameters for call to function osal_set_event
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x10
        MOV     R3,#0x0
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        RET
          CFI EndBlock cfiCond34
          CFI EndBlock cfiCond35
          CFI EndBlock cfiCond36
          CFI EndBlock cfiPicker37
//  925 
//  926 /*********************************************************************
//  927  * @fn      ZDApp_SaveNetworkStateEvt()
//  928  *
//  929  * @brief   Process the Save the Network State Event
//  930  *
//  931  * @param   none
//  932  *
//  933  * @return  none
//  934  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  935 void ZDApp_SaveNetworkStateEvt( void )
ZDApp_SaveNetworkStateEvt:
          CFI Block cfiBlock38 Using cfiCommon0
          CFI Function ZDApp_SaveNetworkStateEvt
        CODE
//  936 {
        ; Saved register size: 0
        ; Auto size: 0
//  937 #if defined ( NV_RESTORE )
//  938  #if defined ( NV_TURN_OFF_RADIO )
//  939   // Turn off the radio's receiver during an NV update
//  940   uint8 RxOnIdle;
//  941   uint8 x = false;
//  942   ZMacGetReq( ZMacRxOnIdle, &RxOnIdle );
//  943   ZMacSetReq( ZMacRxOnIdle, &x );
//  944  #endif
//  945 
//  946   // Update the Network State in NV
//  947   NLME_UpdateNV( NWK_NV_NIB_ENABLE        |
//  948                  NWK_NV_DEVICELIST_ENABLE |
//  949                  NWK_NV_BINDING_ENABLE    |
//  950                  NWK_NV_ADDRMGR_ENABLE );
//  951 
//  952   // Reset the NV startup option to resume from NV by
//  953   // clearing the "New" join option.
//  954   zgWriteStartupOptions( FALSE, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
//  955 
//  956  #if defined ( NV_TURN_OFF_RADIO )
//  957   ZMacSetReq( ZMacRxOnIdle, &RxOnIdle );
//  958  #endif
//  959 #endif // NV_RESTORE
//  960 }
        LJMP    ?BRET
          CFI EndBlock cfiBlock38
//  961 
//  962 #if defined ( NV_RESTORE )
//  963 /*********************************************************************
//  964  * @fn      ZDApp_RestoreNetworkState()
//  965  *
//  966  * @brief   This function will restore the network state of the
//  967  *          device if the network state is stored in NV.
//  968  *
//  969  * @param   none
//  970  *
//  971  * @return
//  972  *    ZDO_INITDEV_RESTORED_NETWORK_STATE  - The device's network state was
//  973  *          restored.
//  974  *    ZDO_INITDEV_NEW_NETWORK_STATE - The network state was not used.
//  975  *          This could mean that zgStartupOption said to not restore, or
//  976  *          it could mean that there was no network state to restore.
//  977  *
//  978  */
//  979 uint8 ZDApp_RestoreNetworkState( void )
//  980 {
//  981   uint8 nvStat;
//  982 
//  983   // Initialize NWK NV items
//  984   nvStat = NLME_InitNV();
//  985 
//  986   if ( nvStat != NV_OPER_FAILED )
//  987   {
//  988     if ( NLME_RestoreFromNV() )
//  989     {
//  990       // Are we a coordinator
//  991       ZDAppNwkAddr.addr.shortAddr = NLME_GetShortAddr();
//  992       if ( ZDAppNwkAddr.addr.shortAddr == 0 )
//  993         ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_COORDINATOR;
//  994       devStartMode = MODE_RESUME;
//  995       osal_cpyExtAddr( ZDO_UseExtendedPANID, _NIB.extendedPANID );
//  996     }
//  997     else
//  998       nvStat = NV_ITEM_UNINIT;
//  999 
// 1000     if ( ZG_SECURE_ENABLED )
// 1001     {
// 1002       nwkFrameCounterChanges = 0;
// 1003 
// 1004       if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
// 1005       {
// 1006         ZDApp_RestoreNwkKey();
// 1007       }
// 1008     }
// 1009 
// 1010     // The default for RxOnWhenIdle is true for Routers and false for end devices
// 1011     // [setup in the NLME_RestoreFromNV()].  Change it here if you want something
// 1012     // other than default.
// 1013   }
// 1014 
// 1015   if ( nvStat == ZSUCCESS )
// 1016     return ( ZDO_INITDEV_RESTORED_NETWORK_STATE );
// 1017   else
// 1018     return ( ZDO_INITDEV_NEW_NETWORK_STATE );
// 1019 }
// 1020 #endif // NV_RESTORE
// 1021 
// 1022 /*********************************************************************
// 1023  * @fn      ZDApp_InitUserDesc()
// 1024  *
// 1025  * @brief   Initialize the User Descriptor, the descriptor is read from NV
// 1026  *          when needed.  If you want to initialize the User descriptor to
// 1027  *          something other than all zero, do it here.
// 1028  *
// 1029  * @param   none
// 1030  *
// 1031  * @return  none
// 1032  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1033 void ZDApp_InitUserDesc( void )
ZDApp_InitUserDesc:
          CFI Block cfiBlock39 Using cfiCommon0
          CFI Function ZDApp_InitUserDesc
        CODE
// 1034 {
        FUNCALL ZDApp_InitUserDesc, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_InitUserDesc, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_InitUserDesc, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 17
        MOV     A,#-0x11
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 27)
// 1035   UserDescriptorFormat_t ZDO_DefaultUserDescriptor;
// 1036 
// 1037   // Initialize the User Descriptor, the descriptor is read from NV
// 1038   // when needed.  If you want to initialize the User descriptor to something
// 1039   // other than all zero, do it here.
// 1040   osal_memset( &ZDO_DefaultUserDescriptor, 0, sizeof( UserDescriptorFormat_t ) );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x11
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 1041   if ( ZSUCCESS == osal_nv_item_init( ZCD_NV_USERDESC,
// 1042          sizeof(UserDescriptorFormat_t), (void*)&ZDO_DefaultUserDescriptor ) )
        ; Setup parameters for call to function osal_nv_item_init
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 29)
        MOV     R4,#0x11
        MOV     R5,#0x0
        MOV     R2,#-0x7f
        MOV     R3,#0x0
        LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 27)
        MOV     A,R1
        JNZ     ??ZDApp_InitUserDesc_0
// 1043   {
// 1044     if ( ZSUCCESS == osal_nv_read( ZCD_NV_USERDESC, 0,
// 1045          sizeof(UserDescriptorFormat_t), (void*)&ZDO_DefaultUserDescriptor ) )
        ; Setup parameters for call to function osal_nv_read
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 29)
        MOV     ?V0,#0x11
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 31)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#-0x7f
        MOV     R3,#0x0
        LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 27)
        MOV     A,R1
        JNZ     ??ZDApp_InitUserDesc_0
// 1046     {
// 1047       if ( ZDO_DefaultUserDescriptor.len != 0 )
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        JZ      ??ZDApp_InitUserDesc_0
// 1048       {
// 1049         ZDO_Config_Node_Descriptor.UserDescAvail = TRUE;
        MOV     DPTR,#ZDO_Config_Node_Descriptor
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.4
        MOVX    @DPTR,A
// 1050       }
// 1051     }
// 1052   }
// 1053 }
??ZDApp_InitUserDesc_0:
        MOV     A,#0x11
        LJMP    ??Subroutine50_0 & 0xFFFF
          CFI EndBlock cfiBlock39
// 1054 
// 1055 /*********************************************************************
// 1056  * @fn      ZDAppCheckForHoldKey()
// 1057  *
// 1058  * @brief   Check for key to set the device into Hold Auto Start
// 1059  *
// 1060  * @param   none
// 1061  *
// 1062  * @return  none
// 1063  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1064 void ZDAppCheckForHoldKey( void )
ZDAppCheckForHoldKey:
          CFI Block cfiBlock40 Using cfiCommon0
          CFI Function ZDAppCheckForHoldKey
        CODE
// 1065 {
        FUNCALL ZDAppCheckForHoldKey, HalKeyRead
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDAppCheckForHoldKey, HalLcdWriteString
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDAppCheckForHoldKey, HalLcdWriteString
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1066 #if (defined HAL_KEY) && (HAL_KEY == TRUE)
// 1067   
// 1068   // Get Keypad directly to see if a HOLD is needed
// 1069   zdappHoldKeys = HalKeyRead();
        ; Setup parameters for call to function HalKeyRead
        LCALL   `??HalKeyRead::?relay`; Banked call to: HalKeyRead
        MOV     A,R1
        MOV     DPTR,#zdappHoldKeys
        MOVX    @DPTR,A
// 1070   if ( zdappHoldKeys == SW_BYPASS_START )
        XRL     A,#0x1
        MOV     R1,#0x0
        JNZ     ??ZDAppCheckForHoldKey_0
// 1071   {
// 1072     HalLcdWriteString("Ulazi u if.",0);
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R2,#`?<Constant "Ulazi u if.">` & 0xff
        MOV     R3,#(`?<Constant "Ulazi u if.">` >> 8) & 0xff
        SJMP    ??ZDAppCheckForHoldKey_1
// 1073   }
// 1074   else
// 1075   {
// 1076     HalLcdWriteString("Ne ulazi u if.",0);
??ZDAppCheckForHoldKey_0:
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R2,#`?<Constant "Ne ulazi u if.">` & 0xff
        MOV     R3,#(`?<Constant "Ne ulazi u if.">` >> 8) & 0xff
??ZDAppCheckForHoldKey_1:
        LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
// 1077   }
// 1078   // Hold down the SW_BYPASS_START key (see OnBoard.h)
// 1079   // while booting to avoid starting up the device.
// 1080   if ( zdappHoldKeys == SW_BYPASS_START )
        MOV     DPTR,#zdappHoldKeys
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDAppCheckForHoldKey_2
// 1081   {
// 1082     
// 1083     
// 1084     // Change the device state to HOLD on start up
// 1085     devState = DEV_HOLD;
        MOV     DPTR,#devState
        CLR     A
        MOVX    @DPTR,A
// 1086   }
// 1087 #endif // HAL_KEY
// 1088 }
??ZDAppCheckForHoldKey_2:
        LJMP    ??Subroutine49_0 & 0xFFFF
          CFI EndBlock cfiBlock40
// 1089 
// 1090 /*********************************************************************
// 1091  * @fn      ZDApp_ProcessOSALMsg()
// 1092  *
// 1093  * @brief   Process the incoming task message.
// 1094  *
// 1095  * @param   msgPtr - message to process
// 1096  *
// 1097  * @return  none
// 1098  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1099 void ZDApp_ProcessOSALMsg( osal_event_hdr_t *msgPtr )
ZDApp_ProcessOSALMsg:
          CFI Block cfiBlock41 Using cfiCommon0
          CFI Function ZDApp_ProcessOSALMsg
        CODE
// 1100 {
        FUNCALL ZDApp_ProcessOSALMsg, ZDP_IncomingData
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, ZDApp_ProcessMsgCBs
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, ZDApp_ProcessSecMsg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1101   // Data Confirmation message fields
// 1102   uint8 sentEP;       // This should always be 0
// 1103   uint8 sentStatus;
// 1104   afDataConfirm_t *afDataConfirm;
// 1105   uint8 tmp;
// 1106 
// 1107   switch ( msgPtr->event )
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        DEC     A
        JZ      ??ZDApp_ProcessOSALMsg_0
        DEC     A
        JZ      ??ZDApp_ProcessOSALMsg_0
        DEC     A
        JZ      ??ZDApp_ProcessOSALMsg_0
        ADD     A,#-0x17
        JZ      ??ZDApp_ProcessOSALMsg_1
        ADD     A,#0x47
        JZ      ??ZDApp_ProcessOSALMsg_2
        ADD     A,#-0x2a
        JZ      ??ZDApp_ProcessOSALMsg_3
        SJMP    ??ZDApp_ProcessOSALMsg_4
// 1108   {
// 1109     // Incoming ZDO Message
// 1110     case AF_INCOMING_MSG_CMD:
// 1111       ZDP_IncomingData( (afIncomingMSGPacket_t *)msgPtr );
??ZDApp_ProcessOSALMsg_1:
        ; Setup parameters for call to function ZDP_IncomingData
        LCALL   `??ZDP_IncomingData::?relay`; Banked call to: ZDP_IncomingData
// 1112       break;
        SJMP    ??ZDApp_ProcessOSALMsg_0
// 1113 
// 1114     case ZDO_CB_MSG:
// 1115       ZDApp_ProcessMsgCBs( (zdoIncomingMsg_t *)msgPtr );
??ZDApp_ProcessOSALMsg_2:
        ; Setup parameters for call to function ZDApp_ProcessMsgCBs
        LCALL   `??ZDApp_ProcessMsgCBs::?relay`; Banked call to: ZDApp_ProcessMsgCBs
// 1116       break;
        SJMP    ??ZDApp_ProcessOSALMsg_0
// 1117 
// 1118     case AF_DATA_CONFIRM_CMD:
// 1119       // This message is received as a confirmation of a data packet sent.
// 1120       // The status is of ZStatus_t type [defined in NLMEDE.h]
// 1121       // The message fields are defined in AF.h
// 1122       afDataConfirm = (afDataConfirm_t *)msgPtr;
// 1123       sentEP = afDataConfirm->endpoint;
// 1124       sentStatus = afDataConfirm->hdr.status;
// 1125 
// 1126       // Action taken when confirmation is received.
// 1127 #if defined ( ZIGBEE_FREQ_AGILITY )
// 1128       if ( pZDNwkMgr_ProcessDataConfirm )
??ZDApp_ProcessOSALMsg_3:
        MOV     DPTR,#pZDNwkMgr_ProcessDataConfirm
        LCALL   ??Subroutine54_0 & 0xFFFF
??CrossCallReturnLabel_93:
        JZ      ??ZDApp_ProcessOSALMsg_0
// 1129         pZDNwkMgr_ProcessDataConfirm( afDataConfirm );
        ; Setup parameters for indirect call
        LCALL   ??Subroutine57_0 & 0xFFFF
??CrossCallReturnLabel_113:
        LCALL   ?CALL_IND
        SJMP    ??ZDApp_ProcessOSALMsg_0
// 1130 #endif
// 1131       (void)sentEP;
// 1132       (void)sentStatus;
// 1133       break;
// 1134 
// 1135     case ZDO_NWK_DISC_CNF:
// 1136       if (devState != DEV_NWK_DISC)
// 1137         break;
// 1138 
// 1139       if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
// 1140       {
// 1141         // Process the network discovery scan results and choose a parent
// 1142         // device to join/rejoin itself
// 1143         networkDesc_t *pChosenNwk;
// 1144         if ( ( (pChosenNwk = ZDApp_NwkDescListProcessing()) != NULL ) && (zdoDiscCounter > NUM_DISC_ATTEMPTS) )
// 1145         {
// 1146           if ( devStartMode == MODE_JOIN )
// 1147           {
// 1148             devState = DEV_NWK_JOINING;
// 1149 
// 1150             ZDApp_NodeProfileSync( pChosenNwk->stackProfile);
// 1151 
// 1152             if ( NLME_JoinRequest( pChosenNwk->extendedPANID, pChosenNwk->panId,
// 1153                                   pChosenNwk->logicalChannel,
// 1154                                   ZDO_Config_Node_Descriptor.CapabilityFlags,
// 1155                                   pChosenNwk->chosenRouter, pChosenNwk->chosenRouterDepth ) != ZSuccess )
// 1156             {
// 1157               ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
// 1158                                           + ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
// 1159             }
// 1160           } // if ( devStartMode == MODE_JOIN )
// 1161           else if ( devStartMode == MODE_REJOIN )
// 1162           {
// 1163             ZStatus_t rejoinStatus;
// 1164 
// 1165             devState = DEV_NWK_REJOIN;
// 1166 
// 1167             // Before trying to do rejoin, check if the device has a valid short address
// 1168             // If not, generate a random short address for itself
// 1169             if ( _NIB.nwkDevAddress == INVALID_NODE_ADDR )
// 1170             {
// 1171               uint16 commNwkAddr;
// 1172 
// 1173               // Verify if the Network address has been commissioned by external tool
// 1174               if ( ( osal_nv_read( ZCD_NV_COMMISSIONED_NWK_ADDR, 0,
// 1175                                  sizeof(commNwkAddr),
// 1176                                  (void*)&commNwkAddr ) == ZSUCCESS )   &&
// 1177                    ( commNwkAddr != INVALID_NODE_ADDR ) )
// 1178               {
// 1179                 _NIB.nwkDevAddress = commNwkAddr;
// 1180 
// 1181                 // clear Allocate address bit because device has a commissioned address
// 1182                 _NIB.CapabilityFlags &= ~CAPINFO_ALLOC_ADDR;
// 1183               }
// 1184               else
// 1185               {
// 1186                 _NIB.nwkDevAddress = osal_rand();
// 1187               }
// 1188 
// 1189               ZMacSetReq( ZMacShortAddress, (byte*)&_NIB.nwkDevAddress );
// 1190             }
// 1191 
// 1192             // Check if the device has a valid PanID, if not, set it to the discovered Pan
// 1193             if ( _NIB.nwkPanId == INVALID_PAN_ID )
// 1194             {
// 1195               _NIB.nwkPanId = pChosenNwk->panId;
// 1196               ZMacSetReq( ZMacPanId, (byte*)&(_NIB.nwkPanId) );
// 1197             }
// 1198 
// 1199             tmp = true;
// 1200             ZMacSetReq( ZMacRxOnIdle, &tmp ); // Set receiver always on during rejoin
// 1201 
// 1202             // Perform Secure or Unsecure Rejoin depending on available configuration
// 1203             if ( ZG_SECURE_ENABLED && ( ZDApp_RestoreNwkKey() == TRUE ) )
// 1204             {
// 1205               rejoinStatus = NLME_ReJoinRequest( ZDO_UseExtendedPANID, pChosenNwk->logicalChannel);
// 1206             }
// 1207             else
// 1208             {
// 1209               rejoinStatus = NLME_ReJoinRequestUnsecure( ZDO_UseExtendedPANID, pChosenNwk->logicalChannel);
// 1210             }
// 1211 
// 1212             if ( rejoinStatus != ZSuccess )
// 1213             {
// 1214               ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
// 1215                                           + ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
// 1216             }
// 1217           } // else if ( devStartMode == MODE_REJOIN )
// 1218 
// 1219           // The receiver is on, turn network layer polling off.
// 1220           if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
// 1221           {
// 1222             // for an End Device with NO Child Table Management process or for a Router
// 1223             if ( ( ZG_DEVICE_RTR_TYPE )  ||
// 1224 #if defined ( ZIGBEE_CHILD_AGING )
// 1225                  ( (ZG_DEVICE_ENDDEVICE_TYPE) && ( zgChildAgingEnable == FALSE ) ) )
// 1226 #else
// 1227                  (ZG_DEVICE_ENDDEVICE_TYPE) )
// 1228 #endif // ZIGBEE_CHILD_AGING
// 1229             {
// 1230               NLME_SetPollRate( 0 );
// 1231               NLME_SetQueuedPollRate( 0 );
// 1232               NLME_SetResponseRate( 0 );
// 1233             }
// 1234           }
// 1235           else
// 1236           {
// 1237             if ( (ZG_SECURE_ENABLED) && (devStartMode == MODE_JOIN) )
// 1238             {
// 1239               ZDApp_SavedPollRate = zgPollRate;
// 1240               NLME_SetPollRate( zgRejoinPollRate );
// 1241             }
// 1242           }
// 1243         }
// 1244         else
// 1245         {
// 1246           if ( continueJoining )
// 1247           {
// 1248     #if defined ( MANAGED_SCAN )
// 1249             ZDApp_NetworkInit( MANAGEDSCAN_DELAY_BETWEEN_SCANS );
// 1250     #else
// 1251             zdoDiscCounter++;
// 1252             ZDApp_NetworkInit( (uint16)(BEACON_REQUEST_DELAY
// 1253                   + ((uint16)(osal_rand()& BEACON_REQ_DELAY_MASK))) );
// 1254     #endif
// 1255           }
// 1256         }
// 1257       }
// 1258       break;
// 1259 
// 1260     case ZDO_NWK_JOIN_IND:
// 1261       if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
// 1262       {
// 1263         ZDApp_ProcessNetworkJoin();
// 1264       }
// 1265       break;
// 1266 
// 1267     case ZDO_NWK_JOIN_REQ:
// 1268       if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
// 1269       {
// 1270         retryCnt = 0;
// 1271         devStartMode = MODE_RESUME;
// 1272         _tmpRejoinState = true;
// 1273         osal_cpyExtAddr( ZDO_UseExtendedPANID, _NIB.extendedPANID );
// 1274         zgDefaultStartingScanDuration = BEACON_ORDER_60_MSEC;
// 1275         ZDApp_NetworkInit( 0 );
// 1276       }
// 1277       break;
// 1278 
// 1279     default:
// 1280       if ( ZG_SECURE_ENABLED )
// 1281         ZDApp_ProcessSecMsg( msgPtr );
??ZDApp_ProcessOSALMsg_4:
        ; Setup parameters for call to function ZDApp_ProcessSecMsg
        LCALL   `??ZDApp_ProcessSecMsg::?relay`; Banked call to: ZDApp_ProcessSecMsg
// 1282       break;
// 1283   }
// 1284 
// 1285 }
??ZDApp_ProcessOSALMsg_0:
        LJMP    ??Subroutine49_0 & 0xFFFF
          CFI EndBlock cfiBlock41
// 1286 
// 1287 /*********************************************************************
// 1288  * @fn      ZDApp_ProcessMsgCBs()
// 1289  *
// 1290  * @brief   Process response messages
// 1291  *
// 1292  * @param   none
// 1293  *
// 1294  * @return  none
// 1295  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1296 void ZDApp_ProcessMsgCBs( zdoIncomingMsg_t *inMsg )
ZDApp_ProcessMsgCBs:
          CFI Block cfiBlock42 Using cfiCommon0
          CFI Function ZDApp_ProcessMsgCBs
        CODE
// 1297 {
        FUNCALL ZDApp_ProcessMsgCBs, ZDO_ParseAddrRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 56, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessMsgCBs, ZDO_UpdateAddrManager
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 56, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessMsgCBs, ZDApp_ProcessPendingBindReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 56, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessMsgCBs, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 56, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessMsgCBs, ZDO_ParseBindUnbindReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 56, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessMsgCBs, ZDO_ProcessBindUnbindReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 56, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessMsgCBs, ZDMatchSendState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 56, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessMsgCBs, ZDO_ParseEndDeviceBindReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 56, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessMsgCBs, ZDO_MatchEndDeviceBind
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 56, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessMsgCBs, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 56, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessMsgCBs, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 56, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 44
        MOV     A,#-0x2c
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 56)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 1298   switch ( inMsg->clusterID )
        LCALL   ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_30:
        MOV     ?V1,A
        MOV     R0,#?V0
        LCALL   ?US_SWITCH_SPARSE
`?<Jumptable for ZDApp_ProcessMsgCBs>_0`:
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        3
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        33
        DATA
        DATA16
        DATA
        DATA16
        DW        34
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDApp_ProcessMsgCBs_0
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        32768
        DATA
        DATA16
        DATA
        DATA16
        DW        32769
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDApp_ProcessMsgCBs_1
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        32801
        DATA
        DATA16
        DATA
        DATA16
        DW        32802
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDApp_ProcessMsgCBs_2
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        1
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        32
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDApp_ProcessMsgCBs_3
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDApp_ProcessMsgCBs_4
        CODE
// 1299   {
// 1300 #if defined ( ZDO_NWKADDR_REQUEST ) || defined ( ZDO_IEEEADDR_REQUEST ) || defined ( REFLECTOR )
// 1301     case NWK_addr_rsp:
// 1302     case IEEE_addr_rsp:
// 1303       {
// 1304         ZDO_NwkIEEEAddrResp_t *pAddrRsp;
// 1305 
// 1306         pAddrRsp = ZDO_ParseAddrRsp( inMsg );
??ZDApp_ProcessMsgCBs_1:
        ; Setup parameters for call to function ZDO_ParseAddrRsp
        LCALL   `??ZDO_ParseAddrRsp::?relay`; Banked call to: ZDO_ParseAddrRsp
        MOV     ?V0,R2
        MOV     ?V1,R3
// 1307         if ( pAddrRsp )
        MOV     A,R2
        ORL     A,?V1
        JNZ     $+5
        LJMP    ??ZDApp_ProcessMsgCBs_4 & 0xFFFF
// 1308         {
// 1309           if ( pAddrRsp->status == ZSuccess )
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        JNZ     ??ZDApp_ProcessMsgCBs_5
// 1310           {
// 1311             ZDO_UpdateAddrManager( pAddrRsp->nwkAddr, pAddrRsp->extAddr );
        ; Setup parameters for call to function ZDO_UpdateAddrManager
        MOV     A,R2
        ADD     A,#0x3
        MOV     R4,A
        CLR     A
        ADDC    A,?V1
        MOV     R5,A
        INC     DPTR
        LCALL   ??Subroutine48_0 & 0xFFFF
// 1312           }
??CrossCallReturnLabel_75:
        LCALL   `??ZDO_UpdateAddrManager::?relay`; Banked call to: ZDO_UpdateAddrManager
// 1313 
// 1314 #if !defined ( ZDP_BIND_SKIP_VALIDATION )
// 1315           // look for pending bind entry for NWK_addr_rsp Only
// 1316           if ( inMsg->clusterID == NWK_addr_rsp )
??ZDApp_ProcessMsgCBs_5:
        LCALL   ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_32:
        JNZ     ??ZDApp_ProcessMsgCBs_6
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x80
??ZDApp_ProcessMsgCBs_6:
        JNZ     ??ZDApp_ProcessMsgCBs_7
// 1317           {
// 1318 #if defined ( REFLECTOR )
// 1319             ZDApp_ProcessPendingBindReq( pAddrRsp->extAddr );
        ; Setup parameters for call to function ZDApp_ProcessPendingBindReq
        MOV     A,?V0
        ADD     A,#0x3
        MOV     R2,A
        CLR     A
        ADDC    A,?V1
        MOV     R3,A
        LCALL   `??ZDApp_ProcessPendingBindReq::?relay`; Banked call to: ZDApp_ProcessPendingBindReq
// 1320 #endif
// 1321           }
// 1322 #endif
// 1323 
// 1324           osal_mem_free( pAddrRsp );
??ZDApp_ProcessMsgCBs_7:
        ; Setup parameters for call to function osal_mem_free
        MOV     R2,?V0
        MOV     R3,?V1
        SJMP    ??CrossCallReturnLabel_77
// 1325         }
// 1326       }
// 1327       break;
// 1328 #endif
// 1329 
// 1330 #if defined ( REFLECTOR )
// 1331     case Bind_req:
// 1332     case Unbind_req:
// 1333       {
// 1334         ZDO_BindUnbindReq_t bindReq;
// 1335         ZDO_ParseBindUnbindReq( inMsg, &bindReq );
??ZDApp_ProcessMsgCBs_0:
        ; Setup parameters for call to function ZDO_ParseBindUnbindReq
        MOV     A,#0x17
        LCALL   ?XSTACK_DISP102_8
        LCALL   `??ZDO_ParseBindUnbindReq::?relay`; Banked call to: ZDO_ParseBindUnbindReq
// 1336         ZDO_ProcessBindUnbindReq( inMsg, &bindReq );
        ; Setup parameters for call to function ZDO_ProcessBindUnbindReq
        MOV     A,#0x17
        LCALL   ?XSTACK_DISP102_8
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??ZDO_ProcessBindUnbindReq::?relay`; Banked call to: ZDO_ProcessBindUnbindReq
// 1337       }
// 1338       break;
        SJMP    ??ZDApp_ProcessMsgCBs_4
// 1339 #endif
// 1340 
// 1341 #if ( ZG_BUILD_COORDINATOR_TYPE )
// 1342     case Bind_rsp:
// 1343     case Unbind_rsp:
// 1344       if (ZG_DEVICE_COORDINATOR_TYPE && matchED)
??ZDApp_ProcessMsgCBs_2:
        MOV     DPTR,#matchED
        LCALL   ??Subroutine54_0 & 0xFFFF
??CrossCallReturnLabel_94:
        JZ      ??ZDApp_ProcessMsgCBs_4
// 1345       {
// 1346         ZDMatchSendState(
// 1347              (uint8)((inMsg->clusterID == Bind_rsp) ? ZDMATCH_REASON_BIND_RSP : ZDMATCH_REASON_UNBIND_RSP),
// 1348              ZDO_ParseBindRsp(inMsg), inMsg->TransSeq );
        LCALL   ?Subroutine32 & 0xFFFF
// 1349       }
??CrossCallReturnLabel_33:
        XRL     A,#0x21
        JNZ     ??ZDApp_ProcessMsgCBs_8
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x80
??ZDApp_ProcessMsgCBs_8:
        JNZ     ??ZDApp_ProcessMsgCBs_9
        MOV     R1,#0x3
        SJMP    ??ZDApp_ProcessMsgCBs_10
??ZDApp_ProcessMsgCBs_9:
        MOV     R1,#0x2
??ZDApp_ProcessMsgCBs_10:
        ; Setup parameters for call to function ZDMatchSendState
        MOV     A,R6
        ADD     A,#0xf
        LCALL   ??Subroutine58_0 & 0xFFFF
??CrossCallReturnLabel_124:
        MOV     R3,A
        LCALL   ?Subroutine36 & 0xFFFF
??CrossCallReturnLabel_42:
        LCALL   ??Subroutine45_0 & 0xFFFF
??CrossCallReturnLabel_59:
        MOV     R2,A
        LCALL   `??ZDMatchSendState::?relay`; Banked call to: ZDMatchSendState
        SJMP    ??ZDApp_ProcessMsgCBs_4
// 1350       break;
// 1351 
// 1352     case End_Device_Bind_req:
// 1353       if (ZG_DEVICE_COORDINATOR_TYPE)
// 1354       {
// 1355         ZDEndDeviceBind_t bindReq;
// 1356         ZDO_ParseEndDeviceBindReq( inMsg, &bindReq );
??ZDApp_ProcessMsgCBs_3:
        ; Setup parameters for call to function ZDO_ParseEndDeviceBindReq
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        LCALL   `??ZDO_ParseEndDeviceBindReq::?relay`; Banked call to: ZDO_ParseEndDeviceBindReq
// 1357         ZDO_MatchEndDeviceBind( &bindReq );
        ; Setup parameters for call to function ZDO_MatchEndDeviceBind
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??ZDO_MatchEndDeviceBind::?relay`; Banked call to: ZDO_MatchEndDeviceBind
// 1358 
// 1359         // Freeing the cluster lists - if allocated.
// 1360         if ( bindReq.numInClusters )
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        JZ      ??ZDApp_ProcessMsgCBs_11
// 1361           osal_mem_free( bindReq.inClusters );
        ; Setup parameters for call to function osal_mem_free
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine48_0 & 0xFFFF
??CrossCallReturnLabel_76:
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 1362         if ( bindReq.numOutClusters )
??ZDApp_ProcessMsgCBs_11:
        MOV     A,#0x14
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        JZ      ??ZDApp_ProcessMsgCBs_4
// 1363           osal_mem_free( bindReq.outClusters );
        ; Setup parameters for call to function osal_mem_free
        MOV     A,#0x15
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine48_0 & 0xFFFF
// 1364       }
// 1365       break;
// 1366 #endif
// 1367   }
??CrossCallReturnLabel_77:
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 1368 }
??ZDApp_ProcessMsgCBs_4:
        MOV     A,#0x2c
        LJMP    ?Subroutine5 & 0xFFFF
          CFI EndBlock cfiBlock42

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine29:
          CFI Block cfiCond43 Using cfiCommon0
          CFI Function ZDApp_SecInit
          CFI Conditional ??CrossCallReturnLabel_78
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond44 Using cfiCommon0
          CFI (cfiCond44) Function ZDApp_ProcessSecEvent
          CFI (cfiCond44) Conditional ??CrossCallReturnLabel_79
          CFI (cfiCond44) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond44) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond44) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond44) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond44) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond44) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond44) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond44) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond44) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond44) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond44) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond44) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond44) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond44) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond44) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond44) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond44) CFA_SP SP+-2
          CFI (cfiCond44) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker45 Using cfiCommon1
          CFI (cfiPicker45) NoFunction
          CFI (cfiPicker45) Picker
        MOV     DPTR,#ZDApp_NewDeviceList
          CFI EndBlock cfiCond43
          CFI EndBlock cfiCond44
          CFI EndBlock cfiPicker45
        REQUIRE ??Subroutine48_0
        ; // Fall through to label ??Subroutine48_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine48_0:
          CFI Block cfiCond46 Using cfiCommon0
          CFI Function ZDApp_ProcessSecEvent
          CFI Conditional ??CrossCallReturnLabel_73
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond47 Using cfiCommon0
          CFI (cfiCond47) Function ZDApp_DeviceAuthEvt
          CFI (cfiCond47) Conditional ??CrossCallReturnLabel_74
          CFI (cfiCond47) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond47) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond47) CFA_SP SP+-7
          CFI Block cfiCond48 Using cfiCommon0
          CFI (cfiCond48) Function ZDApp_ProcessMsgCBs
          CFI (cfiCond48) Conditional ??CrossCallReturnLabel_75
          CFI (cfiCond48) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond48) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond48) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond48) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond48) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond48) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond48) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond48) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond48) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond48) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond48) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond48) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond48) CFA_SP SP+-2
          CFI (cfiCond48) CFA_XSP16 add(XSP16, 56)
          CFI Block cfiCond49 Using cfiCommon0
          CFI (cfiCond49) Function ZDApp_ProcessMsgCBs
          CFI (cfiCond49) Conditional ??CrossCallReturnLabel_76
          CFI (cfiCond49) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond49) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond49) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond49) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond49) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond49) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond49) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond49) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond49) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond49) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond49) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond49) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond49) CFA_SP SP+-2
          CFI (cfiCond49) CFA_XSP16 add(XSP16, 56)
          CFI Block cfiCond50 Using cfiCommon0
          CFI (cfiCond50) Function ZDApp_ProcessMsgCBs
          CFI (cfiCond50) Conditional ??CrossCallReturnLabel_77
          CFI (cfiCond50) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond50) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond50) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond50) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond50) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond50) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond50) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond50) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond50) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond50) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond50) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond50) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond50) CFA_SP SP+-2
          CFI (cfiCond50) CFA_XSP16 add(XSP16, 56)
          CFI Block cfiCond51 Using cfiCommon0
          CFI (cfiCond51) Function ZDApp_SecInit
          CFI (cfiCond51) Conditional ??CrossCallReturnLabel_78
          CFI (cfiCond51) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond51) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond51) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond51) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond51) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond51) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond51) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond51) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond51) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond51) CFA_SP SP+-2
          CFI (cfiCond51) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond52 Using cfiCommon0
          CFI (cfiCond52) Function ZDApp_ProcessSecEvent
          CFI (cfiCond52) Conditional ??CrossCallReturnLabel_79
          CFI (cfiCond52) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond52) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond52) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond52) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond52) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond52) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond52) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond52) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond52) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond52) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond52) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond52) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond52) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond52) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond52) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond52) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond52) CFA_SP SP+-2
          CFI (cfiCond52) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker53 Using cfiCommon1
          CFI (cfiPicker53) NoFunction
          CFI (cfiPicker53) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        RET
          CFI EndBlock cfiCond46
          CFI EndBlock cfiCond47
          CFI EndBlock cfiCond48
          CFI EndBlock cfiCond49
          CFI EndBlock cfiCond50
          CFI EndBlock cfiCond51
          CFI EndBlock cfiCond52
          CFI EndBlock cfiPicker53
// 1369 
// 1370 /*********************************************************************
// 1371  * @fn      ZDApp_RegisterCBs()
// 1372  *
// 1373  * @brief   Process response messages
// 1374  *
// 1375  * @param   none
// 1376  *
// 1377  * @return  none
// 1378  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1379 void ZDApp_RegisterCBs( void )
ZDApp_RegisterCBs:
          CFI Block cfiBlock54 Using cfiCommon0
          CFI Function ZDApp_RegisterCBs
        CODE
// 1380 {
        FUNCALL ZDApp_RegisterCBs, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RegisterCBs, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RegisterCBs, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RegisterCBs, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RegisterCBs, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RegisterCBs, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RegisterCBs, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1381 #if defined ( ZDO_IEEEADDR_REQUEST ) || defined ( REFLECTOR )
// 1382   ZDO_RegisterForZDOMsg( ZDAppTaskID, IEEE_addr_rsp );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x1
        MOV     R3,#-0x80
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
// 1383 #endif
// 1384 #if defined ( ZDO_NWKADDR_REQUEST ) || defined ( REFLECTOR )
// 1385   ZDO_RegisterForZDOMsg( ZDAppTaskID, NWK_addr_rsp );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x0
        MOV     R3,#-0x80
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
// 1386 #endif
// 1387 #if ZG_BUILD_COORDINATOR_TYPE
// 1388   ZDO_RegisterForZDOMsg( ZDAppTaskID, Bind_rsp );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x21
        MOV     R3,#-0x80
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
// 1389   ZDO_RegisterForZDOMsg( ZDAppTaskID, Unbind_rsp );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x22
        MOV     R3,#-0x80
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
// 1390   ZDO_RegisterForZDOMsg( ZDAppTaskID, End_Device_Bind_req );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x20
        MOV     R3,#0x0
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
// 1391 #endif
// 1392 #if defined ( REFLECTOR )
// 1393   ZDO_RegisterForZDOMsg( ZDAppTaskID, Bind_req );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x21
        MOV     R3,#0x0
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
// 1394   ZDO_RegisterForZDOMsg( ZDAppTaskID, Unbind_req );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x22
        MOV     R3,#0x0
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
// 1395 #endif
// 1396 }
        LJMP    ??Subroutine49_0 & 0xFFFF
          CFI EndBlock cfiBlock54
// 1397 
// 1398 /*********************************************************************
// 1399  * @fn      ZDApp_ProcessSecMsg()
// 1400  *
// 1401  * @brief   Process the incoming security message.
// 1402  *
// 1403  * @param   msgPtr - message to process
// 1404  *
// 1405  * @return  none
// 1406  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1407 void ZDApp_ProcessSecMsg( osal_event_hdr_t *msgPtr )
ZDApp_ProcessSecMsg:
          CFI Block cfiBlock55 Using cfiCommon0
          CFI Function ZDApp_ProcessSecMsg
        CODE
// 1408 {
        FUNCALL ZDApp_ProcessSecMsg, ZDSecMgrUpdateDeviceInd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1409   switch ( msgPtr->event )
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        XRL     A,#0x5
        JNZ     ??ZDApp_ProcessSecMsg_0
// 1410   {
// 1411     case ZDO_TRANSPORT_KEY_IND:
// 1412       if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
// 1413       {
// 1414         ZDSecMgrTransportKeyInd( (ZDO_TransportKeyInd_t*)msgPtr );
// 1415       }
// 1416       break;
// 1417 
// 1418     case ZDO_UPDATE_DEVICE_IND:
// 1419       if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
// 1420       {
// 1421         ZDSecMgrUpdateDeviceInd( (ZDO_UpdateDeviceInd_t*)msgPtr );
        ; Setup parameters for call to function ZDSecMgrUpdateDeviceInd
        LCALL   `??ZDSecMgrUpdateDeviceInd::?relay`; Banked call to: ZDSecMgrUpdateDeviceInd
// 1422       }
// 1423       break;
// 1424 
// 1425     case ZDO_REMOVE_DEVICE_IND:
// 1426       if ( ZG_BUILD_RTRONLY_TYPE && ( zgDeviceLogicalType == ZG_DEVICETYPE_ROUTER ) )
// 1427       {
// 1428         ZDSecMgrRemoveDeviceInd( (ZDO_RemoveDeviceInd_t*)msgPtr );
// 1429       }
// 1430       break;
// 1431 
// 1432     case ZDO_REQUEST_KEY_IND:
// 1433       if ( ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD ) )
// 1434       {
// 1435         if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
// 1436         {
// 1437           ZDSecMgrRequestKeyInd( (ZDO_RequestKeyInd_t*)msgPtr );
// 1438         }
// 1439       }
// 1440       break;
// 1441 
// 1442     case ZDO_SWITCH_KEY_IND:
// 1443       if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
// 1444       {
// 1445         ZDSecMgrSwitchKeyInd( (ZDO_SwitchKeyInd_t*)msgPtr );
// 1446       }
// 1447       break;
// 1448 
// 1449     default:
// 1450       // Unsupported messages
// 1451       break;
// 1452   }
// 1453 }
??ZDApp_ProcessSecMsg_0:
        LJMP    ??Subroutine49_0 & 0xFFFF
          CFI EndBlock cfiBlock55
// 1454 
// 1455 /*********************************************************************
// 1456  * @fn      ZDApp_ProcessNetworkJoin()
// 1457  *
// 1458  * @brief
// 1459  *
// 1460  *   Save off the Network key information.
// 1461  *
// 1462  * @param   none
// 1463  *
// 1464  * @return  none
// 1465  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1466 void ZDApp_ProcessNetworkJoin( void )
ZDApp_ProcessNetworkJoin:
          CFI Block cfiBlock56 Using cfiCommon0
          CFI Function ZDApp_ProcessNetworkJoin
        CODE
// 1467 {
        FUNCALL ZDApp_ProcessNetworkJoin, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, ZDApp_RestoreNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, ZDApp_ResetTimerStart
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, ZDApp_AnnounceNewAddress
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, NLME_StartRouterRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, ZMacSetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, nwkNeighborInitTable
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, NLME_NwkDiscTerm
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, osal_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, ZDApp_NetworkInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, ZDApp_RestoreNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, ZDApp_ResetTimerStart
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, NLME_SetPollRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, NLME_SetQueuedPollRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, NLME_SetResponseRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, NLME_StartRouterRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, ZDApp_AnnounceNewAddress
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, nwkNeighborInitTable
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, NLME_NwkDiscTerm
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, osal_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, ZDApp_NetworkInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, ZDApp_AnnounceNewAddress
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
// 1468   if ( (devState == DEV_NWK_JOINING) ||
// 1469       ((devState == DEV_NWK_ORPHAN)  &&
// 1470        (ZDO_Config_Node_Descriptor.LogicalType == NODETYPE_ROUTER)) )
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        XRL     A,#0x3
        JZ      ??ZDApp_ProcessNetworkJoin_0
        MOVX    A,@DPTR
        XRL     A,#0xa
        JZ      $+5
        LJMP    ??ZDApp_ProcessNetworkJoin_1 & 0xFFFF
        MOV     DPTR,#ZDO_Config_Node_Descriptor
        MOVX    A,@DPTR
        ANL     A,#0x7
        XRL     A,#0x1
        JZ      $+5
        LJMP    ??ZDApp_ProcessNetworkJoin_2 & 0xFFFF
// 1471   {
// 1472     // Result of a Join attempt by this device.
// 1473     if ( nwkStatus == ZSuccess )
??ZDApp_ProcessNetworkJoin_0:
        MOV     DPTR,#nwkStatus
        MOVX    A,@DPTR
        JNZ     ??ZDApp_ProcessNetworkJoin_3
// 1474     {
// 1475       osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x10
        MOV     R3,#0x0
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
// 1476 
// 1477 #if defined ( POWER_SAVING )
// 1478       osal_pwrmgr_device( PWRMGR_BATTERY );
// 1479 #endif
// 1480 
// 1481       if ( ZG_SECURE_ENABLED && ( ZDApp_RestoreNwkKey() == false ) )
        ; Setup parameters for call to function ZDApp_RestoreNwkKey
        LCALL   `??ZDApp_RestoreNwkKey::?relay`; Banked call to: ZDApp_RestoreNwkKey
        MOV     A,R1
        JNZ     $+5
        LJMP    ??ZDApp_ProcessNetworkJoin_4 & 0xFFFF
// 1482       {
// 1483         // wait for auth from trust center
// 1484         devState = DEV_END_DEVICE_UNAUTH;
// 1485 
// 1486         // Start the reset timer for MAX UNAUTH time
// 1487         ZDApp_ResetTimerStart( MAX_DEVICE_UNAUTH_TIMEOUT );
// 1488       }
// 1489       else
// 1490       {
// 1491         if ( ZSTACK_ROUTER_BUILD )
// 1492         {
// 1493           if ( devState == DEV_NWK_ORPHAN
// 1494             && ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        XRL     A,#0xa
        JNZ     ??ZDApp_ProcessNetworkJoin_5
        LCALL   ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_18:
        JZ      ??ZDApp_ProcessNetworkJoin_6
// 1495           {
// 1496             // Change NIB state to router for restore
// 1497             _NIB.nwkState = NWK_ROUTER;
        MOV     DPTR,#_NIB + 35
        MOV     A,#0x8
        MOVX    @DPTR,A
        SJMP    ??ZDApp_ProcessNetworkJoin_6
// 1498           }
// 1499         }
// 1500 
// 1501         if ( devState == DEV_NWK_JOINING )
??ZDApp_ProcessNetworkJoin_5:
        MOVX    A,@DPTR
        XRL     A,#0x3
        JNZ     ??ZDApp_ProcessNetworkJoin_6
// 1502         {
// 1503           ZDApp_AnnounceNewAddress();
        ; Setup parameters for call to function ZDApp_AnnounceNewAddress
        LCALL   `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
// 1504         }
// 1505 
// 1506         devState = DEV_END_DEVICE;
??ZDApp_ProcessNetworkJoin_6:
        MOV     DPTR,#devState
        MOV     A,#0x6
        MOVX    @DPTR,A
// 1507         if ( ZSTACK_ROUTER_BUILD )
// 1508         {
// 1509           // NOTE: first two parameters are not used, see NLMEDE.h for details
// 1510           if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
        LCALL   ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_19:
        JNZ     $+5
        LJMP    ??ZDApp_ProcessNetworkJoin_7 & 0xFFFF
// 1511           {
// 1512             NLME_StartRouterRequest( 0, 0, false );
        ; Setup parameters for call to function NLME_StartRouterRequest
        MOV     R3,#0x0
        MOV     R2,#0x0
        MOV     R1,#0x0
        LCALL   `??NLME_StartRouterRequest::?relay`; Banked call to: NLME_StartRouterRequest
        LJMP    ??ZDApp_ProcessNetworkJoin_7 & 0xFFFF
// 1513           }
// 1514         }
// 1515       }
// 1516     }
// 1517     else
// 1518     {
// 1519       if ( (devStartMode == MODE_RESUME) && (++retryCnt >= MAX_RESUME_RETRY) )
??ZDApp_ProcessNetworkJoin_3:
        MOV     DPTR,#devStartMode
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDApp_ProcessNetworkJoin_8
        MOV     DPTR,#retryCnt
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
        CLR     C
        SUBB    A,#0x3
        JC      ??ZDApp_ProcessNetworkJoin_8
// 1520       {
// 1521         if ( _NIB.nwkPanId == 0xFFFF || _NIB.nwkPanId == INVALID_PAN_ID )
        MOV     DPTR,#_NIB + 33
        MOVX    A,@DPTR
        CPL     A
        JNZ     ??ZDApp_ProcessNetworkJoin_9
        INC     DPTR
        MOVX    A,@DPTR
        CPL     A
??ZDApp_ProcessNetworkJoin_9:
        JZ      ??ZDApp_ProcessNetworkJoin_10
        MOV     DPTR,#_NIB + 33
        MOVX    A,@DPTR
        XRL     A,#0xfe
        JNZ     ??ZDApp_ProcessNetworkJoin_11
        INC     DPTR
        MOVX    A,@DPTR
        CPL     A
??ZDApp_ProcessNetworkJoin_11:
        JNZ     ??ZDApp_ProcessNetworkJoin_12
// 1522           devStartMode = MODE_JOIN;
??ZDApp_ProcessNetworkJoin_10:
        MOV     DPTR,#devStartMode
        CLR     A
        SJMP    ??ZDApp_ProcessNetworkJoin_13
// 1523         else
// 1524         {
// 1525           devStartMode = MODE_REJOIN;
??ZDApp_ProcessNetworkJoin_12:
        MOV     DPTR,#devStartMode
        MOV     A,#0x3
        MOVX    @DPTR,A
// 1526           _tmpRejoinState = true;
        MOV     DPTR,#_tmpRejoinState
        MOV     A,#0x1
??ZDApp_ProcessNetworkJoin_13:
        MOVX    @DPTR,A
// 1527         }
// 1528       }
// 1529 
// 1530       if ( (NLME_GetShortAddr() != INVALID_NODE_ADDR) ||
// 1531            (_NIB.nwkDevAddress != INVALID_NODE_ADDR) )
??ZDApp_ProcessNetworkJoin_8:
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     A,#-0x2
        XRL     A,?V0
        JNZ     ??ZDApp_ProcessNetworkJoin_14
        MOV     A,#-0x1
        XRL     A,?V1
??ZDApp_ProcessNetworkJoin_14:
        JNZ     ??ZDApp_ProcessNetworkJoin_15
        MOV     DPTR,#_NIB + 20
        MOVX    A,@DPTR
        XRL     A,#0xfe
        JNZ     ??ZDApp_ProcessNetworkJoin_16
        INC     DPTR
        MOVX    A,@DPTR
        CPL     A
??ZDApp_ProcessNetworkJoin_16:
        JZ      ??ZDApp_ProcessNetworkJoin_17
// 1532       {
// 1533         uint16 addr = INVALID_NODE_ADDR;
??ZDApp_ProcessNetworkJoin_15:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#-0x2
        MOVX    @DPTR,A
        INC     DPTR
        INC     A
        MOVX    @DPTR,A
// 1534         // Invalidate nwk addr so end device does not use in its data reqs.
// 1535         _NIB.nwkDevAddress = INVALID_NODE_ADDR;
        MOV     DPTR,#_NIB + 20
        DEC     A
        MOVX    @DPTR,A
        INC     DPTR
        INC     A
        LCALL   ?Subroutine13 & 0xFFFF
// 1536         ZMacSetReq( ZMacShortAddress, (uint8 *)&addr );
// 1537       }
??CrossCallReturnLabel_5:
        MOV     R1,#0x53
        LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
// 1538 
// 1539       // Clear the neighbor Table and network discovery tables.
// 1540       nwkNeighborInitTable();
??ZDApp_ProcessNetworkJoin_17:
        ; Setup parameters for call to function nwkNeighborInitTable
        LCALL   `??nwkNeighborInitTable::?relay`; Banked call to: nwkNeighborInitTable
// 1541       NLME_NwkDiscTerm();
        ; Setup parameters for call to function NLME_NwkDiscTerm
        LCALL   `??NLME_NwkDiscTerm::?relay`; Banked call to: NLME_NwkDiscTerm
// 1542 
// 1543       zdoDiscCounter = 1;
        MOV     DPTR,#zdoDiscCounter
        MOV     A,#0x1
        MOVX    @DPTR,A
// 1544 
// 1545 //      ZDApp_NetworkInit( (uint16)
// 1546 //                         ((NWK_START_DELAY * (osal_rand() & 0x0F)) +
// 1547 //                          (NWK_START_DELAY * 5)) );
// 1548       ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
// 1549            + ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
        ; Setup parameters for call to function osal_rand
        LJMP    ??ZDApp_ProcessNetworkJoin_18 & 0xFFFF
// 1550     }
// 1551   }
// 1552   else if ( devState == DEV_NWK_ORPHAN || devState == DEV_NWK_REJOIN )
??ZDApp_ProcessNetworkJoin_1:
        MOVX    A,@DPTR
        XRL     A,#0x4
        JZ      $+5
        LJMP    ??ZDApp_ProcessNetworkJoin_19 & 0xFFFF
// 1553   {
// 1554     // results of an orphaning attempt by this device
// 1555     if (nwkStatus == ZSuccess)
??ZDApp_ProcessNetworkJoin_2:
        MOV     DPTR,#nwkStatus
        MOVX    A,@DPTR
        JNZ     ??ZDApp_ProcessNetworkJoin_20
// 1556     {
// 1557       // Verify NWK key is available before sending Device_annce
// 1558       if ( ZG_SECURE_ENABLED && ( ZDApp_RestoreNwkKey() == false ) )
        ; Setup parameters for call to function ZDApp_RestoreNwkKey
        LCALL   `??ZDApp_RestoreNwkKey::?relay`; Banked call to: ZDApp_RestoreNwkKey
        MOV     A,R1
        JNZ     ??ZDApp_ProcessNetworkJoin_21
// 1559       {
// 1560         osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x10
        MOV     R3,#0x0
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
// 1561 
// 1562         // wait for auth from trust center
// 1563         devState = DEV_END_DEVICE_UNAUTH;
??ZDApp_ProcessNetworkJoin_4:
        MOV     DPTR,#devState
        MOV     A,#0x5
        MOVX    @DPTR,A
// 1564 
// 1565         // Start the reset timer for MAX UNAUTH time
// 1566         ZDApp_ResetTimerStart( MAX_DEVICE_UNAUTH_TIMEOUT );
        ; Setup parameters for call to function ZDApp_ResetTimerStart
        MOV     R2,#0x10
        MOV     R3,#0x27
        LCALL   `??ZDApp_ResetTimerStart::?relay`; Banked call to: ZDApp_ResetTimerStart
        LJMP    ??ZDApp_ProcessNetworkJoin_7 & 0xFFFF
// 1567       }
// 1568       else
// 1569       {
// 1570 
// 1571         devState = DEV_END_DEVICE;
??ZDApp_ProcessNetworkJoin_21:
        LCALL   ?Subroutine10 & 0xFFFF
// 1572         osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
??CrossCallReturnLabel_71:
        LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
// 1573         // setup Power Manager Device
// 1574 #if defined ( POWER_SAVING )
// 1575         osal_pwrmgr_device( PWRMGR_BATTERY );
// 1576 #endif
// 1577 
// 1578         // The receiver is on, turn network layer polling off.
// 1579         if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
        MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.3
        JNC     ??ZDApp_ProcessNetworkJoin_22
// 1580         {
// 1581 #if defined ( ZIGBEE_CHILD_AGING )
// 1582           // if Child Table Management process is not enabled
// 1583           if ( zgChildAgingEnable == FALSE )
        MOV     DPTR,#zgChildAgingEnable
        MOVX    A,@DPTR
        JNZ     ??ZDApp_ProcessNetworkJoin_22
// 1584 #endif // ZIGBEE_CHILD_AGING
// 1585           {
// 1586             NLME_SetPollRate( 0 );
        ; Setup parameters for call to function NLME_SetPollRate
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
// 1587             NLME_SetQueuedPollRate( 0 );
        ; Setup parameters for call to function NLME_SetQueuedPollRate
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   `??NLME_SetQueuedPollRate::?relay`; Banked call to: NLME_SetQueuedPollRate
// 1588             NLME_SetResponseRate( 0 );
        ; Setup parameters for call to function NLME_SetResponseRate
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   `??NLME_SetResponseRate::?relay`; Banked call to: NLME_SetResponseRate
// 1589           }
// 1590         }
// 1591 
// 1592         if ( ZSTACK_ROUTER_BUILD )
// 1593         {
// 1594           // NOTE: first two parameters are not used, see NLMEDE.h for details
// 1595           if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
??ZDApp_ProcessNetworkJoin_22:
        LCALL   ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_20:
        JZ      ??ZDApp_ProcessNetworkJoin_23
// 1596           {
// 1597             NLME_StartRouterRequest( 0, 0, false );
        ; Setup parameters for call to function NLME_StartRouterRequest
        MOV     R3,#0x0
        MOV     R2,#0x0
        MOV     R1,#0x0
        LCALL   `??NLME_StartRouterRequest::?relay`; Banked call to: NLME_StartRouterRequest
// 1598           }
// 1599         }
// 1600 
// 1601         ZDApp_AnnounceNewAddress();
??ZDApp_ProcessNetworkJoin_23:
        ; Setup parameters for call to function ZDApp_AnnounceNewAddress
        LCALL   `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
        SJMP    ??ZDApp_ProcessNetworkJoin_7
// 1602       }
// 1603     }
// 1604     else
// 1605     {
// 1606       if ( devStartMode == MODE_RESUME )
??ZDApp_ProcessNetworkJoin_20:
        MOV     DPTR,#devStartMode
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDApp_ProcessNetworkJoin_24
// 1607       {
// 1608         if ( ++retryCnt <= MAX_RESUME_RETRY )
        MOV     DPTR,#retryCnt
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
        CLR     C
        SUBB    A,#0x4
        JNC     ??ZDApp_ProcessNetworkJoin_25
// 1609         {
// 1610           if ( _NIB.nwkPanId == 0xFFFF || _NIB.nwkPanId == INVALID_PAN_ID )
        MOV     DPTR,#_NIB + 33
        MOVX    A,@DPTR
        CPL     A
        JNZ     ??ZDApp_ProcessNetworkJoin_26
        INC     DPTR
        MOVX    A,@DPTR
        CPL     A
??ZDApp_ProcessNetworkJoin_26:
        JZ      ??ZDApp_ProcessNetworkJoin_27
        MOV     DPTR,#_NIB + 33
        MOVX    A,@DPTR
        XRL     A,#0xfe
        JNZ     ??ZDApp_ProcessNetworkJoin_28
        INC     DPTR
        MOVX    A,@DPTR
        CPL     A
??ZDApp_ProcessNetworkJoin_28:
        JZ      ??ZDApp_ProcessNetworkJoin_27
// 1611             devStartMode = MODE_JOIN;
// 1612           else
// 1613           {
// 1614             devStartMode = MODE_REJOIN;
        MOV     DPTR,#devStartMode
        MOV     A,#0x3
        MOVX    @DPTR,A
// 1615             _tmpRejoinState = true;
        MOV     DPTR,#_tmpRejoinState
        MOV     A,#0x1
        SJMP    ??ZDApp_ProcessNetworkJoin_29
// 1616           }
// 1617         }
// 1618         // Do a normal join to the network after certain times of rejoin retries
// 1619         else if( AIB_apsUseInsecureJoin == true )
??ZDApp_ProcessNetworkJoin_25:
        MOV     DPTR,#AIB_apsUseInsecureJoin
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDApp_ProcessNetworkJoin_24
// 1620         {
// 1621           devStartMode = MODE_JOIN;
??ZDApp_ProcessNetworkJoin_27:
        MOV     DPTR,#devStartMode
        CLR     A
??ZDApp_ProcessNetworkJoin_29:
        MOVX    @DPTR,A
// 1622         }
// 1623       }
// 1624 
// 1625       // Clear the neighbor Table and network discovery tables.
// 1626       nwkNeighborInitTable();
??ZDApp_ProcessNetworkJoin_24:
        ; Setup parameters for call to function nwkNeighborInitTable
        LCALL   `??nwkNeighborInitTable::?relay`; Banked call to: nwkNeighborInitTable
// 1627       NLME_NwkDiscTerm();
        ; Setup parameters for call to function NLME_NwkDiscTerm
        LCALL   `??NLME_NwkDiscTerm::?relay`; Banked call to: NLME_NwkDiscTerm
// 1628 
// 1629       // setup a retry for later...
// 1630       ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
// 1631            + (osal_rand()& EXTENDED_JOINING_RANDOM_MASK)) );
        ; Setup parameters for call to function osal_rand
??ZDApp_ProcessNetworkJoin_18:
        LCALL   `??osal_rand::?relay`; Banked call to: osal_rand
        ; Setup parameters for call to function ZDApp_NetworkInit
        MOV     A,R2
        ANL     A,#0x7f
        ADD     A,#0x64
        MOV     R2,A
        MOV     R3,#0x0
        LCALL   `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
        SJMP    ??ZDApp_ProcessNetworkJoin_7
// 1632     }
// 1633   }
// 1634 #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
// 1635   else
// 1636   {
// 1637     // Assume from address conflict
// 1638     if ( _NIB.nwkAddrAlloc == NWK_ADDRESSING_STOCHASTIC )
??ZDApp_ProcessNetworkJoin_19:
        MOV     DPTR,#_NIB + 96
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??ZDApp_ProcessNetworkJoin_7
// 1639     {
// 1640       // Notify the network
// 1641       ZDApp_AnnounceNewAddress();
        ; Setup parameters for call to function ZDApp_AnnounceNewAddress
        LCALL   `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
// 1642 
// 1643       // Notify apps
// 1644       osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x10
        MOV     R3,#0x0
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
// 1645     }
// 1646   }
// 1647 #endif
// 1648 }
??ZDApp_ProcessNetworkJoin_7:
        LJMP    ?Subroutine8 & 0xFFFF
          CFI EndBlock cfiBlock56

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine24:
          CFI Block cfiCond57 Using cfiCommon0
          CFI Function ZDApp_DeviceAuthEvt
          CFI Conditional ??CrossCallReturnLabel_17
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond58 Using cfiCommon0
          CFI (cfiCond58) Function ZDApp_ProcessNetworkJoin
          CFI (cfiCond58) Conditional ??CrossCallReturnLabel_18
          CFI (cfiCond58) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond58) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond58) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond58) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond58) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond58) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond58) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond58) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond58) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond58) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond58) CFA_SP SP+-2
          CFI (cfiCond58) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond59 Using cfiCommon0
          CFI (cfiCond59) Function ZDApp_ProcessNetworkJoin
          CFI (cfiCond59) Conditional ??CrossCallReturnLabel_19
          CFI (cfiCond59) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond59) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond59) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond59) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond59) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond59) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond59) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond59) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond59) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond59) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond59) CFA_SP SP+-2
          CFI (cfiCond59) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond60 Using cfiCommon0
          CFI (cfiCond60) Function ZDApp_ProcessNetworkJoin
          CFI (cfiCond60) Conditional ??CrossCallReturnLabel_20
          CFI (cfiCond60) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond60) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond60) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond60) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond60) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond60) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond60) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond60) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond60) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond60) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond60) CFA_SP SP+-2
          CFI (cfiCond60) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond61 Using cfiCommon0
          CFI (cfiCond61) Function ZDO_LeaveInd
          CFI (cfiCond61) Conditional ??CrossCallReturnLabel_21
          CFI (cfiCond61) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond61) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond61) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond61) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond61) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond61) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond61) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond61) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond61) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond61) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond61) CFA_SP SP+-2
          CFI (cfiCond61) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker62 Using cfiCommon1
          CFI (cfiPicker62) NoFunction
          CFI (cfiPicker62) Picker
        MOV     DPTR,#ZDO_Config_Node_Descriptor
        MOVX    A,@DPTR
        ANL     A,#0x7
        XRL     A,#0x2
        RET
          CFI EndBlock cfiCond57
          CFI EndBlock cfiCond58
          CFI EndBlock cfiCond59
          CFI EndBlock cfiCond60
          CFI EndBlock cfiCond61
          CFI EndBlock cfiPicker62
// 1649 
// 1650 /*********************************************************************
// 1651  * @fn      ZDApp_SaveNwkKey()
// 1652  *
// 1653  * @brief   Save off the Network key information.
// 1654  *
// 1655  * @param   none
// 1656  *
// 1657  * @return  none
// 1658  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1659 void ZDApp_SaveNwkKey( void )
ZDApp_SaveNwkKey:
          CFI Block cfiBlock63 Using cfiCommon0
          CFI Function ZDApp_SaveNwkKey
        CODE
// 1660 {
        FUNCALL ZDApp_SaveNwkKey, SSP_ReadNwkActiveKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SaveNwkKey, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SaveNwkKey, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 21
        MOV     A,#-0x15
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 31)
// 1661   nwkActiveKeyItems keyItems;
// 1662 
// 1663   SSP_ReadNwkActiveKey( &keyItems );
        ; Setup parameters for call to function SSP_ReadNwkActiveKey
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??SSP_ReadNwkActiveKey::?relay`; Banked call to: SSP_ReadNwkActiveKey
// 1664 
// 1665   osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
// 1666                 (void *)&keyItems );
        ; Setup parameters for call to function osal_nv_write
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 33)
        MOV     ?V0,#0x15
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 35)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#-0x7e
        MOV     R3,#0x0
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 31)
// 1667 
// 1668   nwkFrameCounterChanges = 0;
        MOV     DPTR,#nwkFrameCounterChanges
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 1669 
// 1670   // Clear copy in RAM before return.
// 1671   osal_memset( &keyItems, 0x00, sizeof(keyItems) );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x15
        MOV     R5,A
        MOV     R1,A
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 1672 
// 1673 }
          CFI EndBlock cfiBlock63
        REQUIRE ?Subroutine9
        ; // Fall through to label ?Subroutine9

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine9:
          CFI Block cfiBlock64 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 31)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0x15
        LJMP    ??Subroutine50_0 & 0xFFFF
          CFI EndBlock cfiBlock64
// 1674 
// 1675 /*********************************************************************
// 1676  * @fn      ZDApp_ForceConcentratorChange()
// 1677  *
// 1678  * @brief   Force a network concentrator change by resetting 
// 1679  *          zgConcentratorEnable and zgConcentratorDiscoveryTime 
// 1680  *          from NV and set nwk event.
// 1681  *
// 1682  * @param   none
// 1683  *
// 1684  * @return  none
// 1685  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1686 void ZDApp_ForceConcentratorChange( void )
ZDApp_ForceConcentratorChange:
          CFI Block cfiBlock65 Using cfiCommon0
          CFI Function ZDApp_ForceConcentratorChange
        CODE
// 1687 {
        FUNCALL ZDApp_ForceConcentratorChange, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ForceConcentratorChange, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ForceConcentratorChange, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ForceConcentratorChange, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 1688   osal_nv_read( ZCD_NV_CONCENTRATOR_ENABLE, 0, sizeof(zgConcentratorEnable), &zgConcentratorEnable );
        ; Setup parameters for call to function osal_nv_read
        MOV     ?V0,#zgConcentratorEnable & 0xff
        MOV     ?V1,#(zgConcentratorEnable >> 8) & 0xff
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     ?V0,#0x1
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x32
        MOV     R3,#0x0
        LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
// 1689   osal_nv_read( ZCD_NV_CONCENTRATOR_DISCOVERY, 0, sizeof(zgConcentratorDiscoveryTime), &zgConcentratorDiscoveryTime );
        ; Setup parameters for call to function osal_nv_read
        MOV     ?V0,#zgConcentratorDiscoveryTime & 0xff
        MOV     ?V1,#(zgConcentratorDiscoveryTime >> 8) & 0xff
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     ?V0,#0x1
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x33
        MOV     R3,#0x0
        LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
// 1690  
// 1691   if ( zgConcentratorEnable == TRUE )
        MOV     DPTR,#zgConcentratorEnable
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDApp_ForceConcentratorChange_0
// 1692   {
// 1693     // Start next event
// 1694     osal_start_timerEx( NWK_TaskID, NWK_MTO_RTG_REQ_EVT, 100 );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#__Constant_64
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     R2,#0x0
        MOV     R3,#0x8
        MOV     DPTR,#NWK_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        SJMP    ??ZDApp_ForceConcentratorChange_1
// 1695   }
// 1696   else
// 1697   {
// 1698     // Stop the next event
// 1699     osal_stop_timerEx( NWK_TaskID, NWK_MTO_RTG_REQ_EVT );
??ZDApp_ForceConcentratorChange_0:
        ; Setup parameters for call to function osal_stop_timerEx
        MOV     R2,#0x0
        MOV     R3,#0x8
        MOV     DPTR,#NWK_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
// 1700   }
// 1701 }
??ZDApp_ForceConcentratorChange_1:
        LJMP    ??Subroutine51_0 & 0xFFFF
          CFI EndBlock cfiBlock65
// 1702 
// 1703 /*********************************************************************
// 1704  * @fn      ZDApp_ResetNwkKey()
// 1705  *
// 1706  * @brief   Reset the Network key information in NV.
// 1707  *
// 1708  * @param   none
// 1709  *
// 1710  * @return  none
// 1711  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1712 void ZDApp_ResetNwkKey( void )
ZDApp_ResetNwkKey:
          CFI Block cfiBlock66 Using cfiCommon0
          CFI Function ZDApp_ResetNwkKey
        CODE
// 1713 {
        FUNCALL ZDApp_ResetNwkKey, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ResetNwkKey, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 21
        MOV     A,#-0x15
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 31)
// 1714   nwkActiveKeyItems keyItems;
// 1715 
// 1716   osal_memset( &keyItems, 0, sizeof( nwkActiveKeyItems ) );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x15
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 1717   osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
// 1718                 (void *)&keyItems );
        ; Setup parameters for call to function osal_nv_write
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 33)
        MOV     ?V0,#0x15
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 35)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#-0x7e
        MOV     R3,#0x0
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 31)
// 1719 }
        LJMP    ?Subroutine9 & 0xFFFF
          CFI EndBlock cfiBlock66
// 1720 
// 1721 /*********************************************************************
// 1722  * @fn      ZDApp_RestoreNwkKey()
// 1723  *
// 1724  * @brief
// 1725  *
// 1726  *   Save off the Network key information.
// 1727  *
// 1728  * @param   none
// 1729  *
// 1730  * @return  true if restored from NV, false if not
// 1731  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1732 uint8 ZDApp_RestoreNwkKey( void )
ZDApp_RestoreNwkKey:
          CFI Block cfiBlock67 Using cfiCommon0
          CFI Function ZDApp_RestoreNwkKey
        CODE
// 1733 {
        FUNCALL ZDApp_RestoreNwkKey, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RestoreNwkKey, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 49, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RestoreNwkKey, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 52, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 52, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RestoreNwkKey, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RestoreNwkKey, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 49, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 37
        MOV     A,#-0x25
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 49)
// 1734   nwkActiveKeyItems keyItems;
// 1735   uint8 ret = FALSE;
        MOV     R6,#0x0
// 1736 
// 1737   // Restore the key information
// 1738   if ( osal_nv_read( ZCD_NV_NWKKEY, 0, sizeof(nwkActiveKeyItems), (void*)&keyItems )
// 1739       == ZSUCCESS )
        ; Setup parameters for call to function osal_nv_read
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 51)
        MOV     ?V0,#0x15
        MOV     ?V1,R6
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 53)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#-0x7e
        MOV     R3,#0x0
        LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 49)
        MOV     A,R1
        JZ      $+5
        LJMP    ??ZDApp_RestoreNwkKey_0 & 0xFFFF
// 1740   {
// 1741     uint8 nullKey[SEC_KEY_LEN];
// 1742 
// 1743     // initialize default value to compare to
// 1744     osal_memset( nullKey, 0x00, SEC_KEY_LEN );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x10
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     A,#0x15
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 1745 
// 1746     // if stored key is different than default value, then a key has been established
// 1747     if ( !osal_memcmp( keyItems.active.key, nullKey, SEC_KEY_LEN ) )
        ; Setup parameters for call to function osal_memcmp
        MOV     A,#0x15
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     ?V2,R6
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 52)
        MOV     R4,#0x10
        MOV     R5,#0x0
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R1,DPL
        MOV     R2,DPH
        MOV     R3,#0x0
        LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 49)
        MOV     A,R1
        JNZ     ??ZDApp_RestoreNwkKey_0
// 1748     {
// 1749       // Increment the frame counter stored in NV
// 1750       keyItems.frameCounter += ( MAX_NWK_FRAMECOUNTER_CHANGES +
// 1751                                  NWK_FRAMECOUNTER_CHANGES_RESTORE_DELTA );
        MOV     DPTR,#__Constant_4e2
        MOV     R0,#?V0
        LCALL   ?L_MOV_X
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0
        LCALL   ?L_ADD_TO_X
// 1752 
// 1753       nwkFrameCounter = keyItems.frameCounter;
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?XLOAD_R0123
        MOV     DPTR,#nwkFrameCounter
        LCALL   ?XSTORE_R0123
// 1754 
// 1755       // Save the updated Frame Counter right away
// 1756       osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
// 1757                      (void *)&keyItems );
        ; Setup parameters for call to function osal_nv_write
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 51)
        MOV     ?V0,#0x15
        MOV     ?V1,R6
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 53)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#-0x7e
        MOV     R3,#0x0
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 49)
// 1758 
// 1759       nwkFrameCounterChanges = 0;
        MOV     DPTR,#nwkFrameCounterChanges
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 1760 
// 1761       ret = TRUE;
        MOV     R6,#0x1
// 1762 
// 1763       // Clear copy in RAM before return.
// 1764       osal_memset( &keyItems, 0x00, sizeof(keyItems) );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x15
        MOV     R5,A
        MOV     R1,A
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 1765     }
// 1766   }
// 1767 
// 1768   return ( ret );
??ZDApp_RestoreNwkKey_0:
        MOV     A,R6
        MOV     R1,A
        MOV     A,#0x25
        LJMP    ?Subroutine5 & 0xFFFF
// 1769 }
          CFI EndBlock cfiBlock67
// 1770 
// 1771 /*********************************************************************
// 1772  * @fn      ZDApp_ResetTimerStart
// 1773  *
// 1774  * @brief   Start the reset timer.
// 1775  *
// 1776  * @param   delay - delay time(ms) before reset
// 1777  *
// 1778  * @return  none
// 1779  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1780 void ZDApp_ResetTimerStart( uint16 delay )
ZDApp_ResetTimerStart:
          CFI Block cfiBlock68 Using cfiCommon0
          CFI Function ZDApp_ResetTimerStart
        CODE
// 1781 {
        FUNCALL ZDApp_ResetTimerStart, osal_get_timeoutEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ResetTimerStart, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     ?V0,R2
        MOV     ?V1,R3
// 1782   if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_DEVICE_RESET ) )
        ; Setup parameters for call to function osal_get_timeoutEx
        MOV     R2,#0x4
        MOV     R3,#0x0
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
        MOV     A,R2
        ORL     A,R3
        ORL     A,R4
        ORL     A,R5
        JNZ     ??ZDApp_ResetTimerStart_0
// 1783   {
// 1784     // Start the rest timer
// 1785     osal_start_timerEx( ZDAppTaskID, ZDO_DEVICE_RESET, delay );
        ; Setup parameters for call to function osal_start_timerEx
        CLR     A
        MOV     ?V2,A
        MOV     ?V3,A
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_FOUR
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     R2,#0x4
        MOV     R3,#0x0
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
// 1786   }
// 1787 }
??ZDApp_ResetTimerStart_0:
        LJMP    ??Subroutine59_0 & 0xFFFF
          CFI EndBlock cfiBlock68
// 1788 
// 1789 /*********************************************************************
// 1790  * @fn      ZDApp_ResetTimerCancel
// 1791  *
// 1792  * @brief   Cancel the reset timer.
// 1793  *
// 1794  * @param   none
// 1795  *
// 1796  * @return  none
// 1797  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1798 void ZDApp_ResetTimerCancel( void )
ZDApp_ResetTimerCancel:
          CFI Block cfiBlock69 Using cfiCommon0
          CFI Function ZDApp_ResetTimerCancel
        CODE
// 1799 {
        FUNCALL ZDApp_ResetTimerCancel, osal_stop_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ResetTimerCancel, osal_clear_event
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1800   (void)osal_stop_timerEx(ZDAppTaskID, ZDO_DEVICE_RESET);
        ; Setup parameters for call to function osal_stop_timerEx
        MOV     R2,#0x4
        MOV     R3,#0x0
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
// 1801   (void)osal_clear_event(ZDAppTaskID, ZDO_DEVICE_RESET);
        ; Setup parameters for call to function osal_clear_event
        MOV     R2,#0x4
        MOV     R3,#0x0
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_clear_event::?relay`; Banked call to: osal_clear_event
// 1802 }
        LJMP    ??Subroutine49_0 & 0xFFFF
          CFI EndBlock cfiBlock69
// 1803 
// 1804 /*********************************************************************
// 1805  * @fn      ZDApp_LeaveCtrlInit
// 1806  *
// 1807  * @brief   Initialize the leave control logic.
// 1808  *
// 1809  * @param   none
// 1810  *
// 1811  * @return  none
// 1812  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1813 void ZDApp_LeaveCtrlInit( void )
ZDApp_LeaveCtrlInit:
          CFI Block cfiBlock70 Using cfiCommon0
          CFI Function ZDApp_LeaveCtrlInit
        CODE
// 1814 {
        FUNCALL ZDApp_LeaveCtrlInit, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveCtrlInit, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 1815   uint8 status;
// 1816 
// 1817 
// 1818   // Initialize control state
// 1819   ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_INIT;
        MOV     DPTR,#ZDApp_LeaveCtrl
        CLR     A
        MOVX    @DPTR,A
// 1820 
// 1821   status = osal_nv_item_init( ZCD_NV_LEAVE_CTRL,
// 1822                               sizeof(ZDApp_LeaveCtrl),
// 1823                               &ZDApp_LeaveCtrl );
// 1824 
// 1825   if ( status == ZSUCCESS )
        ; Setup parameters for call to function osal_nv_item_init
        MOV     ?V0,#ZDApp_LeaveCtrl & 0xff
        MOV     ?V1,#(ZDApp_LeaveCtrl >> 8) & 0xff
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     R4,#0x1
        MOV     R5,#0x0
        MOV     R2,#-0x7b
        MOV     R3,#0x0
        LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV     A,R1
        JNZ     ??ZDApp_LeaveCtrlInit_0
// 1826   {
// 1827     // Read saved control
// 1828     osal_nv_read( ZCD_NV_LEAVE_CTRL,
// 1829                   0,
// 1830                   sizeof( uint8 ),
// 1831                   &ZDApp_LeaveCtrl);
        ; Setup parameters for call to function osal_nv_read
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     ?V0,#0x1
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#-0x7b
        MOV     R3,#0x0
        LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
// 1832   }
// 1833 }
??ZDApp_LeaveCtrlInit_0:
        LJMP    ??Subroutine51_0 & 0xFFFF
          CFI EndBlock cfiBlock70
// 1834 
// 1835 /*********************************************************************
// 1836  * @fn      ZDApp_LeaveCtrlSet
// 1837  *
// 1838  * @brief   Set the leave control logic.
// 1839  *
// 1840  * @param   ra - reassociate flag
// 1841  *
// 1842  * @return  none
// 1843  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1844 void ZDApp_LeaveCtrlSet( uint8 ra )
ZDApp_LeaveCtrlSet:
          CFI Block cfiBlock71 Using cfiCommon0
          CFI Function ZDApp_LeaveCtrlSet
        CODE
// 1845 {
        FUNCALL ZDApp_LeaveCtrlSet, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
// 1846   ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_SET;
        MOV     DPTR,#ZDApp_LeaveCtrl
        MOV     A,#0x1
        MOVX    @DPTR,A
// 1847 
// 1848   if ( ra == TRUE )
        XRL     A,R6
        JNZ     ??ZDApp_LeaveCtrlSet_0
// 1849   {
// 1850     ZDApp_LeaveCtrl |= ZDAPP_LEAVE_CTRL_RA;
        MOV     A,#0x3
        MOVX    @DPTR,A
// 1851   }
// 1852 
// 1853   // Write the leave control
// 1854   osal_nv_write( ZCD_NV_LEAVE_CTRL,
// 1855                  0,
// 1856                  sizeof( uint8 ),
// 1857                  &ZDApp_LeaveCtrl);
??ZDApp_LeaveCtrlSet_0:
        ; Setup parameters for call to function osal_nv_write
        LJMP    ?Subroutine3 & 0xFFFF
// 1858 }
          CFI EndBlock cfiBlock71
// 1859 
// 1860 /*********************************************************************
// 1861  * @fn      ZDApp_LeaveCtrlReset
// 1862  *
// 1863  * @brief   Re-initialize the leave control logic.
// 1864  *
// 1865  * @param   none
// 1866  *
// 1867  * @return  none
// 1868  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1869 void ZDApp_LeaveCtrlReset( void )
ZDApp_LeaveCtrlReset:
          CFI Block cfiBlock72 Using cfiCommon0
          CFI Function ZDApp_LeaveCtrlReset
        CODE
// 1870 {
        FUNCALL ZDApp_LeaveCtrlReset, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 1871   // Set leave control to initialized state
// 1872   ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_INIT;
        MOV     DPTR,#ZDApp_LeaveCtrl
        CLR     A
        MOVX    @DPTR,A
// 1873 
// 1874   // Write initialized control
// 1875   osal_nv_write( ZCD_NV_LEAVE_CTRL,
// 1876                 0,
// 1877                 sizeof( uint8 ),
// 1878                 &ZDApp_LeaveCtrl);
        ; Setup parameters for call to function osal_nv_write
        LJMP    ?Subroutine3 & 0xFFFF
// 1879 }
          CFI EndBlock cfiBlock72
// 1880 
// 1881 /*********************************************************************
// 1882  * @fn      ZDApp_LeaveCtrlBypass
// 1883  *
// 1884  * @brief   Check if NV restore should be skipped during a leave reset.
// 1885  *
// 1886  * @param   none
// 1887  *
// 1888  * @return  uint8 - (TRUE bypass:FALSE do not bypass)
// 1889  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1890 uint8 ZDApp_LeaveCtrlBypass( void )
ZDApp_LeaveCtrlBypass:
          CFI Block cfiBlock73 Using cfiCommon0
          CFI Function ZDApp_LeaveCtrlBypass
        CODE
// 1891 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1892   uint8 bypass;
// 1893 
// 1894   if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_SET )
// 1895   {
// 1896     bypass = TRUE;
// 1897   }
// 1898   else
// 1899   {
// 1900     bypass = FALSE;
// 1901   }
// 1902 
// 1903   return bypass;
        MOV     DPTR,#ZDApp_LeaveCtrl
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.0
        CLR     A
        RLC     A
        MOV     R1,A
        SJMP    ??Subroutine49_0
// 1904 }
          CFI EndBlock cfiBlock73

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiBlock74 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI CFA_XSP16 add(XSP16, 3)
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock74
        REQUIRE ??Subroutine49_0
        ; // Fall through to label ??Subroutine49_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine49_0:
          CFI Block cfiBlock75 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP     DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP    ?BRET
          CFI EndBlock cfiBlock75
// 1905 
// 1906 /*********************************************************************
// 1907  * @fn      ZDApp_LeaveCtrlStartup
// 1908  *
// 1909  * @brief   Check for startup conditions during a leave reset.
// 1910  *
// 1911  * @param   state      - devState_t determined by leave control logic
// 1912  * @param   startDelay - startup delay
// 1913  *
// 1914  * @return  none
// 1915  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1916 void ZDApp_LeaveCtrlStartup( devStates_t* state, uint16* startDelay )
ZDApp_LeaveCtrlStartup:
          CFI Block cfiBlock76 Using cfiCommon0
          CFI Function ZDApp_LeaveCtrlStartup
        CODE
// 1917 {
        FUNCALL ZDApp_LeaveCtrlStartup, ZDApp_LeaveCtrlReset
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1918   *startDelay = 0;
        MOV     DPL,R4
        MOV     DPH,R5
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 1919 
// 1920   if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_SET )
        MOV     DPTR,#ZDApp_LeaveCtrl
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.0
        JNC     ??ZDApp_LeaveCtrlStartup_0
// 1921   {
// 1922     if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_RA )
        MOV     C,0xE0 /* A   */.1
        JNC     ??ZDApp_LeaveCtrlStartup_1
// 1923     {
// 1924       *startDelay = LEAVE_RESET_DELAY;
        MOV     DPL,R4
        MOV     DPH,R5
        MOV     A,#-0x78
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x13
        SJMP    ??ZDApp_LeaveCtrlStartup_2
// 1925     }
// 1926     else
// 1927     {
// 1928       *state = DEV_HOLD;
??ZDApp_LeaveCtrlStartup_1:
        MOV     DPL,R2
        MOV     DPH,R3
        CLR     A
??ZDApp_LeaveCtrlStartup_2:
        MOVX    @DPTR,A
// 1929     }
// 1930 
// 1931     // Reset leave control logic
// 1932     ZDApp_LeaveCtrlReset();
        ; Setup parameters for call to function ZDApp_LeaveCtrlReset
        LCALL   `??ZDApp_LeaveCtrlReset::?relay`; Banked call to: ZDApp_LeaveCtrlReset
// 1933   }
// 1934 }
??ZDApp_LeaveCtrlStartup_0:
        SJMP    ??Subroutine49_0
          CFI EndBlock cfiBlock76
// 1935 
// 1936 /*********************************************************************
// 1937  * @fn      ZDApp_LeaveReset
// 1938  *
// 1939  * @brief   Setup a device reset due to a leave indication/confirm.
// 1940  *
// 1941  * @param   ra - reassociate flag
// 1942  *
// 1943  * @return  none
// 1944  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1945 void ZDApp_LeaveReset( uint8 ra )
ZDApp_LeaveReset:
          CFI Block cfiBlock77 Using cfiCommon0
          CFI Function ZDApp_LeaveReset
        CODE
// 1946 {
        FUNCALL ZDApp_LeaveReset, ZDApp_LeaveCtrlSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveReset, ZDApp_ResetTimerStart
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
// 1947   ZDApp_LeaveCtrlSet( ra );
        ; Setup parameters for call to function ZDApp_LeaveCtrlSet
        LCALL   `??ZDApp_LeaveCtrlSet::?relay`; Banked call to: ZDApp_LeaveCtrlSet
// 1948 
// 1949   ZDApp_ResetTimerStart( LEAVE_RESET_DELAY );
        ; Setup parameters for call to function ZDApp_ResetTimerStart
        MOV     R2,#-0x78
        MOV     R3,#0x13
        LCALL   `??ZDApp_ResetTimerStart::?relay`; Banked call to: ZDApp_ResetTimerStart
// 1950 }
        LJMP    ??Subroutine56_0 & 0xFFFF
          CFI EndBlock cfiBlock77
// 1951 
// 1952 /*********************************************************************
// 1953  * @fn      ZDApp_LeaveUpdate
// 1954  *
// 1955  * @brief   Update local device data related to leaving device.
// 1956  *
// 1957  * @param   nwkAddr        - NWK address of leaving device
// 1958  * @param   extAddr        - EXT address of leaving device
// 1959  * @param   removeChildren - remove children of leaving device
// 1960  *
// 1961  * @return  none
// 1962  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1963 void ZDApp_LeaveUpdate( uint16 nwkAddr, uint8* extAddr,
ZDApp_LeaveUpdate:
          CFI Block cfiBlock78 Using cfiCommon0
          CFI Function ZDApp_LeaveUpdate
        CODE
// 1964                         uint8 removeChildren )
// 1965 {
        FUNCALL ZDApp_LeaveUpdate, ZDSecMgrDeviceRemoveByExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveUpdate, ZDSecMgrAddrClear
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveUpdate, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveUpdate, AssocIsChild
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveUpdate, APSME_UpdateDeviceReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveUpdate, NLME_RemoveChild
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveUpdate, RTG_RemoveRtgEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveUpdate, nwkNeighborRemove
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        MOV     A,#-0xf
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 17
        MOV     A,#-0x11
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 32)
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        MOV     ?V2,R1
// 1966   // Remove Apps Key for leaving device
// 1967   ZDSecMgrDeviceRemoveByExtAddr(extAddr);
        ; Setup parameters for call to function ZDSecMgrDeviceRemoveByExtAddr
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??ZDSecMgrDeviceRemoveByExtAddr::?relay`; Banked call to: ZDSecMgrDeviceRemoveByExtAddr
// 1968 
// 1969   // Clear SECURITY bit from Address Manager
// 1970   ZDSecMgrAddrClear( extAddr );
        ; Setup parameters for call to function ZDSecMgrAddrClear
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??ZDSecMgrAddrClear::?relay`; Banked call to: ZDSecMgrAddrClear
// 1971 
// 1972   if ( pbindRemoveDev )
        MOV     DPTR,#pbindRemoveDev
        LCALL   ??Subroutine54_0 & 0xFFFF
??CrossCallReturnLabel_95:
        JZ      ??ZDApp_LeaveUpdate_0
// 1973   {
// 1974     zAddrType_t devAddr;
// 1975 
// 1976     // Remove bind entry and all related data
// 1977     devAddr.addrMode = Addr64Bit;
        MOV     A,#0x10
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x3
        MOVX    @DPTR,A
// 1978     osal_memcpy(devAddr.addr.extAddr, extAddr, Z_EXTADDR_LEN);
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V4,R6
        MOV     ?V5,R7
        MOV     ?V6,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 35)
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 32)
// 1979 
// 1980     pbindRemoveDev(&devAddr);
        ; Setup parameters for indirect call
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP101_8
        MOV     DPTR,#pbindRemoveDev
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        LCALL   ??Subroutine57_0 & 0xFFFF
// 1981   }
??CrossCallReturnLabel_114:
        LCALL   ?CALL_IND
// 1982 
// 1983   // Remove if child
// 1984   if ( ZSTACK_ROUTER_BUILD )
// 1985   {
// 1986     // Router shall notify the Trust Center that a child device has left the network
// 1987     if ( AssocIsChild( nwkAddr ) == TRUE )
??ZDApp_LeaveUpdate_0:
        ; Setup parameters for call to function AssocIsChild
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   `??AssocIsChild::?relay`; Banked call to: AssocIsChild
        MOV     A,R1
        XRL     A,#0x1
        JNZ     ??ZDApp_LeaveUpdate_1
// 1988     {
// 1989         APSME_UpdateDeviceReq_t req;
// 1990 
// 1991         // forward authorization to the Trust Center
// 1992         req.dstAddr    = APSME_TRUSTCENTER_NWKADDR;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 1993         req.devAddr    = nwkAddr;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V1
        MOVX    @DPTR,A
// 1994         req.devExtAddr = extAddr;
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        MOVX    @DPTR,A
// 1995         req.status = APSME_UD_DEVICE_LEFT;
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
// 1996 
// 1997         if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
// 1998         {
// 1999           // For ZG_GLOBAL_LINK_KEY the message has to be sent twice one
// 2000           // un-encrypted and one APS encrypted, to make sure that it can interoperate
// 2001           // with legacy Coordinator devices which can only handle one or the other.
// 2002           if ( zgApsLinkKeyType == ZG_GLOBAL_LINK_KEY )
// 2003           {
// 2004             req.apsSecure = FALSE;
// 2005 
// 2006             // send and APSME_UPDATE_DEVICE request to the trust center
// 2007             APSME_UpdateDeviceReq( &req );
// 2008           }
// 2009 
// 2010           // send the message APS encrypted
// 2011           req.apsSecure = TRUE;
// 2012 
// 2013           // send and APSME_UPDATE_DEVICE request to the trust center
// 2014           APSME_UpdateDeviceReq( &req );
// 2015         }
// 2016         else
// 2017         {
// 2018           req.apsSecure = FALSE;
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        LCALL   ?Subroutine13 & 0xFFFF
// 2019 
// 2020           // send and APSME_UPDATE_DEVICE request to the trust center
// 2021           APSME_UpdateDeviceReq( &req );
// 2022         }
// 2023     }
??CrossCallReturnLabel_6:
        LCALL   `??APSME_UpdateDeviceReq::?relay`; Banked call to: APSME_UpdateDeviceReq
// 2024 
// 2025     NLME_RemoveChild( extAddr, removeChildren );
??ZDApp_LeaveUpdate_1:
        ; Setup parameters for call to function NLME_RemoveChild
        MOV     R1,?V2
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??NLME_RemoveChild::?relay`; Banked call to: NLME_RemoveChild
// 2026   }
// 2027 
// 2028   // Remove Routing table related entry
// 2029   RTG_RemoveRtgEntry( nwkAddr, 0 );
        ; Setup parameters for call to function RTG_RemoveRtgEntry
        MOV     R1,#0x0
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   `??RTG_RemoveRtgEntry::?relay`; Banked call to: RTG_RemoveRtgEntry
// 2030 
// 2031   // Remove entry from neighborTable
// 2032   nwkNeighborRemove( nwkAddr, _NIB.nwkPanId );
        ; Setup parameters for call to function nwkNeighborRemove
        MOV     DPTR,#_NIB + 33
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   `??nwkNeighborRemove::?relay`; Banked call to: nwkNeighborRemove
// 2033 
// 2034   // Schedule to save data to NV
// 2035   ZDApp_NwkWriteNVRequest();
// 2036 }
        MOV     A,#0x11
          CFI EndBlock cfiBlock78
        REQUIRE ?Subroutine6
        ; // Fall through to label ?Subroutine6

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiBlock79 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 32)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
          CFI Valid
        MOV     R7,#0x7
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock79
// 2037 
// 2038 /*********************************************************************
// 2039  * @fn      ZDApp_NetworkDiscoveryReq
// 2040  *
// 2041  * @brief   Request a network discovery.
// 2042  *
// 2043  * @param  scanChannels -
// 2044  * @param  scanDuration -
// 2045  *
// 2046  * @return  ZStatus_t
// 2047  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2048 ZStatus_t ZDApp_NetworkDiscoveryReq( uint32 scanChannels, uint8 scanDuration)
ZDApp_NetworkDiscoveryReq:
          CFI Block cfiBlock80 Using cfiCommon0
          CFI Function ZDApp_NetworkDiscoveryReq
        CODE
// 2049 {
        FUNCALL ZDApp_NetworkDiscoveryReq, NLME_NetworkDiscoveryRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
// 2050   // Setup optional filters - tbd
// 2051 
// 2052   // Request NLME network discovery
// 2053   return NLME_NetworkDiscoveryRequest(scanChannels, scanDuration);
        ; Setup parameters for call to function NLME_NetworkDiscoveryRequest
        LCALL   `??NLME_NetworkDiscoveryRequest::?relay`; Banked call to: NLME_NetworkDiscoveryRequest
        LJMP    ??Subroutine59_0 & 0xFFFF
// 2054 }
          CFI EndBlock cfiBlock80
// 2055 
// 2056 /*********************************************************************
// 2057  * @fn      ZDApp_JoinReq
// 2058  *
// 2059  * @brief   Request the device to join a parent in a network.
// 2060  *
// 2061  * @param   channel -
// 2062  * @param   panID -
// 2063  *
// 2064  * @return  ZStatus_t
// 2065  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2066 ZStatus_t ZDApp_JoinReq( uint8 channel, uint16 panID, uint8 *extendedPanID,
ZDApp_JoinReq:
          CFI Block cfiBlock81 Using cfiCommon0
          CFI Function ZDApp_JoinReq
        CODE
// 2067                          uint16 chosenParent, uint8 parentDepth, uint8 stackProfile )
// 2068 {
        FUNCALL ZDApp_JoinReq, ZDApp_NodeProfileSync
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_JoinReq, NLME_JoinRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     ?V2,R1
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
// 2069   // Sync up the node with the stack profile (In the case where a pro device
// 2070   // joins a non-pro network, or verse versa)
// 2071   ZDApp_NodeProfileSync( stackProfile);
        ; Setup parameters for call to function ZDApp_NodeProfileSync
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??ZDApp_NodeProfileSync::?relay`; Banked call to: ZDApp_NodeProfileSync
// 2072 
// 2073   // Request NLME Join Request
// 2074   return NLME_JoinRequest(extendedPanID, panID,channel,
// 2075                           ZDO_Config_Node_Descriptor.CapabilityFlags,
// 2076                           chosenParent, parentDepth);
        ; Setup parameters for call to function NLME_JoinRequest
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V3,A
        MOV     R0,#?V3
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 13)
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 15)
        MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
        MOVX    A,@DPTR
        MOV     ?V3,A
        MOV     R0,#?V3
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     R1,?V2
        MOV     R4,?V0
        MOV     R5,?V1
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??NLME_JoinRequest::?relay`; Banked call to: NLME_JoinRequest
        MOV     A,#0x4
        LJMP    ?Subroutine5 & 0xFFFF
// 2077 
// 2078 }
          CFI EndBlock cfiBlock81
// 2079 
// 2080 /*********************************************************************
// 2081  * @fn      ZDApp_DeviceConfigured
// 2082  *
// 2083  * @brief   Check to see if the local device is configured (i.e., part
// 2084  *          of a network).
// 2085  *
// 2086  * @param   none
// 2087  *
// 2088  * @return  TRUE if configured. FALSE, otherwise.
// 2089  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2090 uint8 ZDApp_DeviceConfigured( void )
ZDApp_DeviceConfigured:
          CFI Block cfiBlock82 Using cfiCommon0
          CFI Function ZDApp_DeviceConfigured
        CODE
// 2091 {
        FUNCALL ZDApp_DeviceConfigured, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
// 2092   uint16 nwkAddr = INVALID_NODE_ADDR;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#-0x2
        MOVX    @DPTR,A
        INC     DPTR
        INC     A
        MOVX    @DPTR,A
// 2093 
// 2094   osal_nv_read( ZCD_NV_NIB, osal_offsetof( nwkIB_t, nwkDevAddress ),
// 2095                 sizeof( uint16), &nwkAddr );
        ; Setup parameters for call to function osal_nv_read
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     ?V0,#0x2
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     R4,#0x14
        MOV     R5,#0x0
        MOV     R2,#0x21
        MOV     R3,#0x0
        LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
// 2096 
// 2097   // Does the NIB have anything more than default?
// 2098   return ( nwkAddr == INVALID_NODE_ADDR ? FALSE : TRUE );
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        XRL     A,#0xfe
        JNZ     ??ZDApp_DeviceConfigured_0
        INC     DPTR
        MOVX    A,@DPTR
        CPL     A
??ZDApp_DeviceConfigured_0:
        JNZ     ??ZDApp_DeviceConfigured_1
        MOV     R1,#0x0
        SJMP    ??ZDApp_DeviceConfigured_2
??ZDApp_DeviceConfigured_1:
        MOV     R1,#0x1
??ZDApp_DeviceConfigured_2:
          CFI EndBlock cfiBlock82
        REQUIRE ?Subroutine8
        ; // Fall through to label ?Subroutine8
// 2099 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine8:
          CFI Block cfiBlock83 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0x2
        SJMP    ??Subroutine50_0
          CFI EndBlock cfiBlock83

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiBlock84 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     ?V0,#ZDApp_LeaveCtrl & 0xff
        MOV     ?V1,#(ZDApp_LeaveCtrl >> 8) & 0xff
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     ?V0,#0x1
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#-0x7b
        MOV     R3,#0x0
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
          CFI EndBlock cfiBlock84
        REQUIRE ??Subroutine50_0
        ; // Fall through to label ??Subroutine50_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine50_0:
          CFI Block cfiBlock85 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock85
        REQUIRE ??Subroutine51_0
        ; // Fall through to label ??Subroutine51_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine51_0:
          CFI Block cfiBlock86 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock86
// 2100 
// 2101 /*********************************************************************
// 2102  * CALLBACK FUNCTIONS
// 2103  */
// 2104 
// 2105 
// 2106 /*********************************************************************
// 2107  * @fn      ZDApp_SendEventMsg()
// 2108  *
// 2109  * @brief
// 2110  *
// 2111  *   Sends a Network Join message
// 2112  *
// 2113  * @param  cmd - command ID
// 2114  * @param  len - length (in bytes) of the buf field
// 2115  * @param  buf - buffer for the rest of the message.
// 2116  *
// 2117  * @return  none
// 2118  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2119 void ZDApp_SendEventMsg( uint8 cmd, uint8 len, uint8 *buf )
ZDApp_SendEventMsg:
          CFI Block cfiBlock87 Using cfiCommon0
          CFI Function ZDApp_SendEventMsg
        CODE
// 2120 {
        FUNCALL ZDApp_SendEventMsg, ZDApp_SendMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
        MOV     A,R2
// 2121   ZDApp_SendMsg( ZDAppTaskID, cmd, len, buf );
        ; Setup parameters for call to function ZDApp_SendMsg
        MOV     R3,A
        MOV     A,R6
        MOV     R2,A
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??ZDApp_SendMsg::?relay`; Banked call to: ZDApp_SendMsg
// 2122 }
        LJMP    ??Subroutine56_0 & 0xFFFF
          CFI EndBlock cfiBlock87
// 2123 
// 2124 /*********************************************************************
// 2125  * @fn      ZDApp_SendMsg()
// 2126  *
// 2127  * @brief   Sends a OSAL message
// 2128  *
// 2129  * @param  taskID - Where to send the message
// 2130  * @param  cmd - command ID
// 2131  * @param  len - length (in bytes) of the buf field
// 2132  * @param  buf - buffer for the rest of the message.
// 2133  *
// 2134  * @return  none
// 2135  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2136 void ZDApp_SendMsg( uint8 taskID, uint8 cmd, uint8 len, uint8 *buf )
ZDApp_SendMsg:
          CFI Block cfiBlock88 Using cfiCommon0
          CFI Function ZDApp_SendMsg
        CODE
// 2137 {
        FUNCALL ZDApp_SendMsg, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SendMsg, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SendMsg, osal_msg_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV     ?V3,R1
        MOV     ?V4,R2
        MOV     ?V5,R3
        MOV     ?V0,R4
        MOV     ?V1,R5
// 2138   osal_event_hdr_t *msgPtr;
// 2139 
// 2140   // Send the address to the task
// 2141   msgPtr = (osal_event_hdr_t *)osal_msg_allocate( len );
        ; Setup parameters for call to function osal_msg_allocate
        MOV     R2,?V5
        MOV     R3,#0x0
        LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
        MOV     ?V6,R2
        MOV     ?V7,R3
        MOV     R6,?V6
        MOV     R7,?V7
// 2142   if ( msgPtr )
        MOV     A,R6
        ORL     A,R7
        JZ      ??ZDApp_SendMsg_0
// 2143   {
// 2144     if ( (len > 0) && (buf != NULL) )
        MOV     A,?V5
        JZ      ??ZDApp_SendMsg_1
        MOV     A,?V0
        ORL     A,?V1
        JZ      ??ZDApp_SendMsg_1
// 2145       osal_memcpy( msgPtr, buf, len );
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V2,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 19)
        MOV     R4,?V5
        MOV     R5,#0x0
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
// 2146 
// 2147     msgPtr->event = cmd;
??ZDApp_SendMsg_1:
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,?V4
        MOVX    @DPTR,A
// 2148     osal_msg_send( taskID, (uint8 *)msgPtr );
        ; Setup parameters for call to function osal_msg_send
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     R1,?V3
        LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
// 2149   }
// 2150 }
??ZDApp_SendMsg_0:
        LJMP    ?Subroutine2 & 0xFFFF
          CFI EndBlock cfiBlock88
// 2151 
// 2152 /*********************************************************************
// 2153  * Call Back Functions from NWK  - API
// 2154  */
// 2155 
// 2156 /*********************************************************************
// 2157  * @fn          ZDO_NetworkDiscoveryConfirmCB
// 2158  *
// 2159  * @brief       This function returns a choice of PAN to join.
// 2160  *
// 2161  * @param       status - return status of the nwk discovery confirm
// 2162  *
// 2163  * @return      ZStatus_t
// 2164  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2165 ZStatus_t ZDO_NetworkDiscoveryConfirmCB(uint8 status)
ZDO_NetworkDiscoveryConfirmCB:
          CFI Block cfiBlock89 Using cfiCommon0
          CFI Function ZDO_NetworkDiscoveryConfirmCB
        CODE
// 2166 {
        FUNCALL ZDO_NetworkDiscoveryConfirmCB, ZDApp_SendMsg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 3, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 3, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 3
        MOV     A,#-0x3
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 3)
        MOV     A,R1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
// 2167   osal_event_hdr_t msg;
// 2168 
// 2169   // If Scan is initiated by ZDO_MGMT_NWK_DISC_REQ
// 2170   // Send ZDO_MGMT_NWK_DISC_RSP back
// 2171 #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
// 2172   if ( zdappMgmtNwkDiscReqInProgress )
// 2173   {
// 2174     zdappMgmtNwkDiscReqInProgress = false;
// 2175     ZDO_FinishProcessingMgmtNwkDiscReq();
// 2176   }
// 2177   else
// 2178 #endif
// 2179   {
// 2180     // Pass the confirm to another task if it registers the callback
// 2181     // Otherwise, pass the confirm to ZDApp.
// 2182     if (zdoCBFunc[ZDO_NWK_DISCOVERY_CNF_CBID] != NULL )
        MOV     DPTR,#zdoCBFunc + 4
        LCALL   ??Subroutine54_0 & 0xFFFF
??CrossCallReturnLabel_96:
        JZ      ??ZDO_NetworkDiscoveryConfirmCB_0
// 2183     {
// 2184       zdoCBFunc[ZDO_NWK_DISCOVERY_CNF_CBID]( (void*)&status );
        ; Setup parameters for indirect call
        LCALL   ?Subroutine18 & 0xFFFF
// 2185     }
??CrossCallReturnLabel_120:
        LCALL   ?CALL_IND
        SJMP    ??ZDO_NetworkDiscoveryConfirmCB_1
// 2186     else
// 2187     {
// 2188       // Otherwise, send scan confirm to ZDApp task to proceed
// 2189       msg.status = ZDO_SUCCESS;
??ZDO_NetworkDiscoveryConfirmCB_0:
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
// 2190       ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_DISC_CNF, sizeof(osal_event_hdr_t), (uint8 *)&msg );
        ; Setup parameters for call to function ZDApp_SendMsg
        INC     A
        LCALL   ?XSTACK_DISP102_8
        MOV     R3,#0x2
        MOV     R2,#0x1
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??ZDApp_SendMsg::?relay`; Banked call to: ZDApp_SendMsg
// 2191     }
// 2192   }
// 2193   return (ZSuccess);
??ZDO_NetworkDiscoveryConfirmCB_1:
        MOV     R1,#0x0
        MOV     A,#0x3
        LJMP    ?Subroutine4 & 0xFFFF
// 2194 }  // ZDO_NetworkDiscoveryConfirmCB
          CFI EndBlock cfiBlock89
// 2195 
// 2196 /*********************************************************************
// 2197  * @fn          ZDApp_NwkDescListProcessing
// 2198  *
// 2199  * @brief       This function process the network discovery result and select
// 2200  *              a parent device to join itself.
// 2201  *
// 2202  * @param       none
// 2203  *
// 2204  * @return      ZStatus_t
// 2205  */
// 2206 #define STACK_PROFILE_MAX 2

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2207 networkDesc_t* ZDApp_NwkDescListProcessing(void)
ZDApp_NwkDescListProcessing:
          CFI Block cfiBlock90 Using cfiCommon0
          CFI Function ZDApp_NwkDescListProcessing
        CODE
// 2208 {
        FUNCALL ZDApp_NwkDescListProcessing, nwk_getNwkDescList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NwkDescListProcessing, nwk_getNwkDescList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NwkDescListProcessing, nwk_ExtPANIDValid
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NwkDescListProcessing, sAddrExtCmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
// 2209   networkDesc_t *pNwkDesc;
// 2210   uint8 i, ResultCount = 0;
        MOV     ?V1,#0x0
// 2211   uint8 stackProfile;
// 2212   uint8 stackProfilePro;
// 2213   uint8 selected;
// 2214 
// 2215   // Count the number of nwk descriptors in the list
// 2216   pNwkDesc = nwk_getNwkDescList();
        ; Setup parameters for call to function nwk_getNwkDescList
        LCALL   `??nwk_getNwkDescList::?relay`; Banked call to: nwk_getNwkDescList
        MOV     ?V2,R2
        MOV     ?V3,R3
        MOV     R6,?V2
        MOV     R7,?V3
        SJMP    ??CrossCallReturnLabel_88
// 2217   while (pNwkDesc)
// 2218   {
// 2219     ResultCount++;
??ZDApp_NwkDescListProcessing_0:
        INC     ?V1
// 2220     pNwkDesc = pNwkDesc->nextDesc;
        LCALL   ?Subroutine25 & 0xFFFF
// 2221   }
??CrossCallReturnLabel_88:
        MOV     A,R6
        ORL     A,R7
        JNZ     ??ZDApp_NwkDescListProcessing_0
// 2222 
// 2223   // process discovery results
// 2224   stackProfilePro = FALSE;
        MOV     ?V0,#0x0
// 2225   selected = FALSE;
// 2226 
// 2227 
// 2228   for ( stackProfile = 0; stackProfile < STACK_PROFILE_MAX; stackProfile++ )
        MOV     ?V2,#0x0
// 2229   {
// 2230     pNwkDesc = nwk_getNwkDescList();
??ZDApp_NwkDescListProcessing_1:
        ; Setup parameters for call to function nwk_getNwkDescList
        LCALL   `??nwk_getNwkDescList::?relay`; Banked call to: nwk_getNwkDescList
        MOV     ?V4,R2
        MOV     ?V5,R3
        MOV     R6,?V4
        MOV     R7,?V5
// 2231     for ( i = 0; i < ResultCount; i++, pNwkDesc = pNwkDesc->nextDesc )
        MOV     ?V3,#0x0
        SJMP    ??CrossCallReturnLabel_89
// 2232     {
// 2233        if ( nwk_ExtPANIDValid( ZDO_UseExtendedPANID ) == true )
// 2234       {
// 2235         // If the extended Pan ID is commissioned to a non zero value
// 2236         // Only join the Pan that has match EPID
// 2237         if ( osal_ExtAddrEqual( ZDO_UseExtendedPANID, pNwkDesc->extendedPANID) == false )
// 2238           continue;
// 2239 
// 2240       }
// 2241       else if ( zgConfigPANID != 0xFFFF )
// 2242       {
// 2243         // PAN Id is preconfigured. check if it matches
// 2244         if ( pNwkDesc->panId != zgConfigPANID )
// 2245           continue;
// 2246       }
// 2247 
// 2248       // check that network is allowing joining
// 2249       if ( ZSTACK_ROUTER_BUILD )
// 2250       {
// 2251         if ( stackProfilePro == FALSE )
// 2252         {
// 2253           if ( !pNwkDesc->routerCapacity )
// 2254           {
// 2255             continue;
// 2256           }
// 2257         }
// 2258         else
// 2259         {
// 2260           if ( !pNwkDesc->deviceCapacity )
// 2261           {
// 2262             continue;
// 2263           }
// 2264         }
// 2265       }
// 2266       else if ( ZSTACK_END_DEVICE_BUILD )
// 2267       {
// 2268         if ( !pNwkDesc->deviceCapacity )
// 2269         {
// 2270           continue;
// 2271         }
// 2272       }
// 2273 
// 2274       // check version of zigbee protocol
// 2275       if ( pNwkDesc->version != _NIB.nwkProtocolVersion )
// 2276         continue;
// 2277 
// 2278       // check version of stack profile
// 2279       if ( pNwkDesc->stackProfile != zgStackProfile  )
// 2280       {
// 2281         if ( ((zgStackProfile == HOME_CONTROLS) && (pNwkDesc->stackProfile == ZIGBEEPRO_PROFILE))
// 2282             || ((zgStackProfile == ZIGBEEPRO_PROFILE) && (pNwkDesc->stackProfile == HOME_CONTROLS))  )
??ZDApp_NwkDescListProcessing_2:
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??ZDApp_NwkDescListProcessing_3
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDApp_NwkDescListProcessing_3
// 2283         {
// 2284           stackProfilePro = TRUE;
??ZDApp_NwkDescListProcessing_4:
        MOV     ?V0,#0x1
// 2285         }
// 2286 
// 2287         if ( stackProfile == 0 )
??ZDApp_NwkDescListProcessing_3:
        MOV     A,?V2
        JZ      $+5
        LJMP    ??ZDApp_NwkDescListProcessing_5 & 0xFFFF
??ZDApp_NwkDescListProcessing_6:
        INC     ?V3
        LCALL   ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_89:
        MOV     A,?V3
        CLR     C
        SUBB    A,?V1
        JC      $+5
        LJMP    ??ZDApp_NwkDescListProcessing_7 & 0xFFFF
        ; Setup parameters for call to function nwk_ExtPANIDValid
        MOV     R2,#ZDO_UseExtendedPANID & 0xff
        MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
        LCALL   `??nwk_ExtPANIDValid::?relay`; Banked call to: nwk_ExtPANIDValid
        MOV     A,R1
        XRL     A,#0x1
        JNZ     ??ZDApp_NwkDescListProcessing_8
        ; Setup parameters for call to function sAddrExtCmp
        MOV     A,R6
        ADD     A,#0xb
        MOV     R4,A
        CLR     A
        ADDC    A,R7
        MOV     R5,A
        MOV     R2,#ZDO_UseExtendedPANID & 0xff
        MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
        LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
        MOV     A,R1
        JNZ     ??ZDApp_NwkDescListProcessing_9
        SJMP    ??ZDApp_NwkDescListProcessing_6
??ZDApp_NwkDescListProcessing_8:
        MOV     DPTR,#zgConfigPANID
        MOVX    A,@DPTR
        CPL     A
        JNZ     ??ZDApp_NwkDescListProcessing_10
        INC     DPTR
        MOVX    A,@DPTR
        CPL     A
??ZDApp_NwkDescListProcessing_10:
        JZ      ??ZDApp_NwkDescListProcessing_9
        LCALL   ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_83:
        MOV     DPTR,#zgConfigPANID
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??ZDApp_NwkDescListProcessing_11
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??ZDApp_NwkDescListProcessing_11:
        JNZ     ??ZDApp_NwkDescListProcessing_6
??ZDApp_NwkDescListProcessing_9:
        MOV     A,?V0
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        JNZ     ??ZDApp_NwkDescListProcessing_12
        MOVX    A,@DPTR
        JNZ     ??ZDApp_NwkDescListProcessing_13
        SJMP    ??ZDApp_NwkDescListProcessing_6
??ZDApp_NwkDescListProcessing_12:
        INC     DPTR
        MOVX    A,@DPTR
        JZ      ??ZDApp_NwkDescListProcessing_6
??ZDApp_NwkDescListProcessing_13:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     DPTR,#_NIB + 17
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??ZDApp_NwkDescListProcessing_6
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     DPTR,#zgStackProfile
        MOVX    A,@DPTR
        XRL     A,R0
        JZ      ??ZDApp_NwkDescListProcessing_5
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      $+5
        LJMP    ??ZDApp_NwkDescListProcessing_2 & 0xFFFF
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x2
        JZ      $+5
        LJMP    ??ZDApp_NwkDescListProcessing_3 & 0xFFFF
        LJMP    ??ZDApp_NwkDescListProcessing_4 & 0xFFFF
// 2288         {
// 2289           continue;
// 2290         }
// 2291       }
// 2292 
// 2293       break;
// 2294     }
// 2295 
// 2296     if (i < ResultCount)
// 2297     {
// 2298      selected = TRUE;
// 2299       break;
// 2300     }
// 2301 
// 2302     // break if selected or stack profile pro wasn't found
// 2303     if ( (selected == TRUE) || (stackProfilePro == FALSE) )
??ZDApp_NwkDescListProcessing_7:
        MOV     A,?V0
        JZ      ??ZDApp_NwkDescListProcessing_14
// 2304     {
// 2305       break;
// 2306     }
// 2307   }
        INC     ?V2
        MOV     A,?V2
        CLR     C
        SUBB    A,#0x2
        JNC     $+5
        LJMP    ??ZDApp_NwkDescListProcessing_1 & 0xFFFF
// 2308 
// 2309   if ( i == ResultCount )
??ZDApp_NwkDescListProcessing_14:
        MOV     A,?V1
        XRL     A,?V3
        JNZ     ??ZDApp_NwkDescListProcessing_5
// 2310   {
// 2311     return (NULL);   // couldn't find appropriate PAN to join !
        MOV     R2,#0x0
        MOV     R3,#0x0
        SJMP    ??ZDApp_NwkDescListProcessing_15
// 2312   }
// 2313   else
// 2314   {
// 2315     return (pNwkDesc);
??ZDApp_NwkDescListProcessing_5:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
// 2316   }
??ZDApp_NwkDescListProcessing_15:
        LJMP    ?Subroutine1 & 0xFFFF
// 2317 }// ZDApp_NwkDescListProcessing()
          CFI EndBlock cfiBlock90
// 2318 
// 2319 /*********************************************************************
// 2320  * @fn          ZDO_NetworkFormationConfirmCB
// 2321  *
// 2322  * @brief       This function reports the results of the request to
// 2323  *              initialize a coordinator in a network.
// 2324  *
// 2325  * @param       Status - Result of NLME_NetworkFormationRequest()
// 2326  *
// 2327  * @return      none
// 2328  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2329 void ZDO_NetworkFormationConfirmCB( ZStatus_t Status )
ZDO_NetworkFormationConfirmCB:
          CFI Block cfiBlock91 Using cfiCommon0
          CFI Function ZDO_NetworkFormationConfirmCB
        CODE
// 2330 {
        FUNCALL ZDO_NetworkFormationConfirmCB, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_NetworkFormationConfirmCB, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_NetworkFormationConfirmCB, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_NetworkFormationConfirmCB, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
// 2331   nwkStatus = (byte)Status;
        MOV     DPTR,#nwkStatus
        MOVX    @DPTR,A
// 2332 
// 2333   if ( Status == ZSUCCESS )
        JNZ     ??ZDO_NetworkFormationConfirmCB_0
// 2334   {
// 2335     // LED on shows Coordinator started
// 2336     HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
        MOV     R1,#0x4
        LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
// 2337 
// 2338     // LED off forgets HOLD_AUTO_START
// 2339     HalLedSet (HAL_LED_4, HAL_LED_MODE_OFF);
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
        MOV     R1,#0x8
        LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
// 2340 
// 2341 #if defined ( ZBIT )
// 2342     SIM_SetColor(0xd0ffd0);
// 2343 #endif
// 2344 
// 2345     if ( devState == DEV_HOLD )
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        JNZ     ??ZDO_NetworkFormationConfirmCB_1
// 2346     {
// 2347       // Began with HOLD_AUTO_START
// 2348       devState = DEV_COORD_STARTING;
        MOV     A,#0x8
        MOVX    @DPTR,A
        SJMP    ??ZDO_NetworkFormationConfirmCB_1
// 2349     }
// 2350   }
// 2351 #if defined(BLINK_LEDS)
// 2352   else
// 2353   {
// 2354     HalLedSet ( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
??ZDO_NetworkFormationConfirmCB_0:
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x4
        MOV     R1,#0x4
        LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
// 2355   }
// 2356 #endif
// 2357 
// 2358   osal_set_event( ZDAppTaskID, ZDO_NETWORK_START );
??ZDO_NetworkFormationConfirmCB_1:
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x2
        LJMP    ?Subroutine0 & 0xFFFF
// 2359 }
          CFI EndBlock cfiBlock91
// 2360 
// 2361 /****************************************************************************
// 2362  * @fn          ZDApp_beaconIndProcessing
// 2363  *
// 2364  * @brief       This function processes the incoming beacon indication.
// 2365  *
// 2366  *              When another task (MT or App) is registered to process
// 2367  *              beacon indication themselves, this function will parse the
// 2368  *              beacon payload and pass the beacon descriptor to that task
// 2369  *              If no other tasks registered, this function will process
// 2370  *              the beacon payload and generate the network descriptor link
// 2371  *              list.
// 2372  *
// 2373  * @param
// 2374  *
// 2375  * @return      none
// 2376  *
// 2377  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2378 void ZDO_beaconNotifyIndCB( NLME_beaconInd_t *pBeacon )
ZDO_beaconNotifyIndCB:
          CFI Block cfiBlock92 Using cfiCommon0
          CFI Function ZDO_beaconNotifyIndCB
        CODE
// 2379 {
        FUNCALL ZDO_beaconNotifyIndCB, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_beaconNotifyIndCB, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_beaconNotifyIndCB, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_beaconNotifyIndCB, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     ?V0,R2
        MOV     ?V1,R3
// 2380   // Pass the beacon Indication to another task if it registers the callback
// 2381   // Otherwise, process the beacon notification here.
// 2382   if (zdoCBFunc[ZDO_BEACON_NOTIFY_IND_CBID] != NULL )
        MOV     DPTR,#zdoCBFunc + 6
        LCALL   ??Subroutine54_0 & 0xFFFF
??CrossCallReturnLabel_97:
        JZ      ??ZDO_beaconNotifyIndCB_0
// 2383   {
// 2384     zdoCBFunc[ZDO_BEACON_NOTIFY_IND_CBID]( (void*)pBeacon );
        ; Setup parameters for indirect call
        LCALL   ??Subroutine57_0 & 0xFFFF
// 2385   }
??CrossCallReturnLabel_115:
        LCALL   ?CALL_IND
        LJMP    ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
// 2386   else
// 2387   {
// 2388     networkDesc_t *pNwkDesc;
// 2389     networkDesc_t *pLastNwkDesc;
// 2390     uint8 found = false;
// 2391 
// 2392     // Add the network to the Network Descriptor List
// 2393     pNwkDesc = NwkDescList;
??ZDO_beaconNotifyIndCB_0:
        MOV     DPTR,#NwkDescList
        LCALL   ??Subroutine53_0 & 0xFFFF
// 2394     pLastNwkDesc = NwkDescList;
??CrossCallReturnLabel_86:
        MOV     DPTR,#NwkDescList
        MOVX    A,@DPTR
        MOV     ?V2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V3,A
        SJMP    ??CrossCallReturnLabel_90
// 2395     while (pNwkDesc)
// 2396     {
// 2397       if ((pNwkDesc->panId == pBeacon->panID) &&
// 2398           (pNwkDesc->logicalChannel == pBeacon->logicalChannel))
??ZDO_beaconNotifyIndCB_2:
        LCALL   ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_84:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??ZDO_beaconNotifyIndCB_3
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??ZDO_beaconNotifyIndCB_3:
        JNZ     ??ZDO_beaconNotifyIndCB_4
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R0
        JZ      ??ZDO_beaconNotifyIndCB_5
// 2399       {
// 2400         found = true;
// 2401         break;
// 2402       }
// 2403       pLastNwkDesc = pNwkDesc;
??ZDO_beaconNotifyIndCB_4:
        MOV     ?V2,R6
        MOV     ?V3,R7
// 2404       pNwkDesc = pNwkDesc->nextDesc;
        LCALL   ?Subroutine25 & 0xFFFF
// 2405     }
??CrossCallReturnLabel_90:
        MOV     A,R6
        ORL     A,R7
        JNZ     ??ZDO_beaconNotifyIndCB_2
// 2406 
// 2407     // If no existing descriptor found, make a new one and add to the list
// 2408     if (found == false)
// 2409     {
// 2410       pNwkDesc = osal_mem_alloc( sizeof(networkDesc_t)  );
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0x16
        MOV     R3,#0x0
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV     ?V4,R2
        MOV     ?V5,R3
        MOV     R6,?V4
        MOV     R7,?V5
// 2411       if ( !pNwkDesc )
        MOV     A,R6
        ORL     A,R7
        JNZ     $+5
        LJMP    ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
// 2412       {
// 2413         // Memory alloc failed, discard this beacon
// 2414         return;
// 2415       }
// 2416 
// 2417       // Clear the network descriptor
// 2418       osal_memset( pNwkDesc, 0, sizeof(networkDesc_t)  );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x16
        MOV     R5,#0x0
        MOV     R1,#0x0
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 2419 
// 2420       // Initialize the descriptor
// 2421       pNwkDesc->chosenRouter = INVALID_NODE_ADDR;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,#-0x2
        MOVX    @DPTR,A
        INC     DPTR
        INC     A
        LCALL   ?Subroutine11 & 0xFFFF
// 2422       pNwkDesc->chosenRouterDepth = 0xFF;
??CrossCallReturnLabel_0:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    @DPTR,A
// 2423 
// 2424       // Save new entry into the descriptor list
// 2425       if ( !NwkDescList )
        MOV     DPTR,#NwkDescList
        LCALL   ??Subroutine54_0 & 0xFFFF
??CrossCallReturnLabel_98:
        JNZ     ??ZDO_beaconNotifyIndCB_6
// 2426       {
// 2427         NwkDescList = pNwkDesc;
        MOV     DPTR,#NwkDescList
        SJMP    ??ZDO_beaconNotifyIndCB_7
// 2428       }
// 2429       else
// 2430       {
// 2431         pLastNwkDesc->nextDesc = pNwkDesc;
??ZDO_beaconNotifyIndCB_6:
        MOV     A,?V2
        ADD     A,#0x14
        MOV     DPL,A
        CLR     A
        ADDC    A,?V3
        MOV     DPH,A
??ZDO_beaconNotifyIndCB_7:
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        MOVX    @DPTR,A
// 2432       }
// 2433     }
// 2434 
// 2435     // Update the descriptor with the incoming beacon
// 2436     pNwkDesc->stackProfile   = pBeacon->stackProfile;
??ZDO_beaconNotifyIndCB_5:
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_24:
        INC     DPTR
        MOVX    @DPTR,A
// 2437     pNwkDesc->version        = pBeacon->protocolVersion;
        MOV     A,?V0
        ADD     A,#0x8
        MOV     R0,A
        CLR     A
        ADDC    A,?V1
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        LCALL   ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_25:
        LCALL   ?Subroutine12 & 0xFFFF
// 2438     pNwkDesc->logicalChannel = pBeacon->logicalChannel;
??CrossCallReturnLabel_3:
        MOVX    A,@DPTR
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOVX    @DPTR,A
// 2439     pNwkDesc->panId          = pBeacon->panID;
        MOV     DPL,?V0
        MOV     DPH,?V1
        LCALL   ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_26:
        LCALL   ??Subroutine46_0 & 0xFFFF
// 2440     pNwkDesc->updateId       = pBeacon->updateID;
??CrossCallReturnLabel_64:
        MOV     A,?V0
        ADD     A,#0xc
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        LCALL   ?Subroutine36 & 0xFFFF
??CrossCallReturnLabel_43:
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 2441 
// 2442     // Save the extended PAN ID from the beacon payload only if 1.1 version network
// 2443     if ( pBeacon->protocolVersion != ZB_PROT_V1_0 )
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      ??ZDO_beaconNotifyIndCB_8
// 2444     {
// 2445       osal_cpyExtAddr( pNwkDesc->extendedPANID, pBeacon->extendedPanID );
        ; Setup parameters for call to function sAddrExtCpy
        MOV     A,?V0
        ADD     A,#0xd
        MOV     R4,A
        CLR     A
        ADDC    A,?V1
        MOV     R5,A
        MOV     A,R6
        ADD     A,#0xb
        MOV     R2,A
        CLR     A
        ADDC    A,R7
        MOV     R3,A
        LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
        SJMP    ??ZDO_beaconNotifyIndCB_9
// 2446     }
// 2447     else
// 2448     {
// 2449       osal_memset( pNwkDesc->extendedPANID, 0xFF, Z_EXTADDR_LEN );
??ZDO_beaconNotifyIndCB_8:
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     R1,#-0x1
        MOV     A,R6
        ADD     A,#0xb
        MOV     R2,A
        CLR     A
        ADDC    A,R7
        MOV     R3,A
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 2450     }
// 2451 
// 2452     // check if this device is a better choice to join...
// 2453     // ...dont bother checking assocPermit flag is doing a rejoin
// 2454     if ( ( pBeacon->LQI > gMIN_TREE_LQI ) &&
// 2455         ( ( pBeacon->permitJoining == TRUE ) || ( _tmpRejoinState ) ) )
??ZDO_beaconNotifyIndCB_9:
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     DPTR,#gMIN_TREE_LQI
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,R0
        JC      $+5
        LJMP    ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      ??ZDO_beaconNotifyIndCB_10
        MOV     DPTR,#_tmpRejoinState
        MOVX    A,@DPTR
        JNZ     $+5
        LJMP    ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
// 2456     {
// 2457       uint8 selected = FALSE;
// 2458       uint8 capacity = FALSE;
// 2459 
// 2460       if ( _NIB.nwkAddrAlloc == NWK_ADDRESSING_STOCHASTIC )
??ZDO_beaconNotifyIndCB_10:
        MOV     DPTR,#_NIB + 96
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??ZDO_beaconNotifyIndCB_11
// 2461       {
// 2462         if ( ((pBeacon->LQI   > pNwkDesc->chosenRouterLinkQuality) &&
// 2463               (pBeacon->depth < MAX_NODE_DEPTH)) ||
// 2464             ((pBeacon->LQI   == pNwkDesc->chosenRouterLinkQuality) &&
// 2465              (pBeacon->depth < pNwkDesc->chosenRouterDepth)) )
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,R0
        JNC     ??ZDO_beaconNotifyIndCB_12
        LCALL   ?Subroutine34 & 0xFFFF
// 2466         {
// 2467           selected = TRUE;
// 2468         }
// 2469       }
??CrossCallReturnLabel_37:
        SUBB    A,#0x14
        JC      ??ZDO_beaconNotifyIndCB_13
        SJMP    ??ZDO_beaconNotifyIndCB_14
??ZDO_beaconNotifyIndCB_12:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??ZDO_beaconNotifyIndCB_14
// 2470       else
// 2471       {
// 2472         if ( pBeacon->depth < pNwkDesc->chosenRouterDepth )
??ZDO_beaconNotifyIndCB_11:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        LCALL   ?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_38:
        SUBB    A,R0
        JNC     ??ZDO_beaconNotifyIndCB_14
// 2473         {
// 2474           selected = TRUE;
// 2475         }
// 2476       }
// 2477 
// 2478       if ( ZSTACK_ROUTER_BUILD )
// 2479       {
// 2480         capacity = pBeacon->routerCapacity;
// 2481       }
// 2482       else if ( ZSTACK_END_DEVICE_BUILD )
// 2483       {
// 2484         capacity = pBeacon->deviceCapacity;
// 2485       }
// 2486 
// 2487       if ( (capacity) && (selected) )
??ZDO_beaconNotifyIndCB_13:
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JZ      ??ZDO_beaconNotifyIndCB_14
// 2488       {
// 2489         // this is the new chosen router for joining...
// 2490         pNwkDesc->chosenRouter            = pBeacon->sourceAddr;
        MOV     DPL,?V0
        MOV     DPH,?V1
        LCALL   ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_13:
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        LCALL   ?Subroutine12 & 0xFFFF
// 2491         pNwkDesc->chosenRouterLinkQuality = pBeacon->LQI;
??CrossCallReturnLabel_4:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_15:
        MOVX    @DPTR,A
// 2492         pNwkDesc->chosenRouterDepth       = pBeacon->depth;
        LCALL   ?Subroutine42 & 0xFFFF
// 2493       }
??CrossCallReturnLabel_53:
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_16:
        INC     DPTR
        MOVX    @DPTR,A
// 2494 
// 2495       if ( pBeacon->deviceCapacity )
??ZDO_beaconNotifyIndCB_14:
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JZ      ??ZDO_beaconNotifyIndCB_15
// 2496         pNwkDesc->deviceCapacity = 1;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,#0x1
        MOVX    @DPTR,A
// 2497 
// 2498       if ( pBeacon->routerCapacity )
??ZDO_beaconNotifyIndCB_15:
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JZ      ??ZDO_beaconNotifyIndCB_1
// 2499         pNwkDesc->routerCapacity = 1;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,#0x1
        MOVX    @DPTR,A
// 2500     }
// 2501   }
// 2502 }
??ZDO_beaconNotifyIndCB_1:
        LJMP    ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock92

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine36:
          CFI Block cfiCond93 Using cfiCommon0
          CFI Function ZDApp_ProcessMsgCBs
          CFI Conditional ??CrossCallReturnLabel_42
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 56)
          CFI Block cfiCond94 Using cfiCommon0
          CFI (cfiCond94) Function ZDO_beaconNotifyIndCB
          CFI (cfiCond94) Conditional ??CrossCallReturnLabel_43
          CFI (cfiCond94) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond94) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond94) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond94) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond94) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond94) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond94) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond94) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond94) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond94) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond94) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond94) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond94) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond94) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond94) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker95 Using cfiCommon1
          CFI (cfiPicker95) NoFunction
          CFI (cfiPicker95) Picker
        MOV     A,R6
        ADD     A,#0x13
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        RET
          CFI EndBlock cfiCond93
          CFI EndBlock cfiCond94
          CFI EndBlock cfiPicker95

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine34:
          CFI Block cfiCond96 Using cfiCommon0
          CFI Function ZDO_beaconNotifyIndCB
          CFI Conditional ??CrossCallReturnLabel_37
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond97 Using cfiCommon0
          CFI (cfiCond97) Function ZDO_beaconNotifyIndCB
          CFI (cfiCond97) Conditional ??CrossCallReturnLabel_38
          CFI (cfiCond97) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond97) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond97) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond97) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond97) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond97) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond97) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond97) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond97) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond97) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond97) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond97) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond97) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond97) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond97) CFA_SP SP+-2
          CFI (cfiCond97) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker98 Using cfiCommon1
          CFI (cfiPicker98) NoFunction
          CFI (cfiPicker98) Picker
        LCALL   ?Subroutine42 & 0xFFFF
??CrossCallReturnLabel_54:
        MOVX    A,@DPTR
        CLR     C
        RET
          CFI EndBlock cfiCond96
          CFI EndBlock cfiCond97
          CFI EndBlock cfiPicker98

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine42:
          CFI Block cfiCond99 Using cfiCommon0
          CFI Function ZDO_beaconNotifyIndCB
          CFI Conditional ??CrossCallReturnLabel_53
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond100 Using cfiCommon0
          CFI (cfiCond100) Function ZDO_beaconNotifyIndCB
          CFI (cfiCond100) Conditional ??CrossCallReturnLabel_54, ??CrossCallReturnLabel_37
          CFI (cfiCond100) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond100) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond100) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond100) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond100) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond100) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond100) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond100) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond100) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond100) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond100) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond100) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond100) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond100) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond100) CFA_SP SP+-4
          CFI (cfiCond100) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond101 Using cfiCommon0
          CFI (cfiCond101) Function ZDO_beaconNotifyIndCB
          CFI (cfiCond101) Conditional ??CrossCallReturnLabel_54, ??CrossCallReturnLabel_38
          CFI (cfiCond101) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond101) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond101) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond101) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond101) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond101) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond101) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond101) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond101) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond101) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond101) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond101) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond101) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond101) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond101) CFA_SP SP+-4
          CFI (cfiCond101) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker102 Using cfiCommon1
          CFI (cfiPicker102) NoFunction
          CFI (cfiPicker102) Picker
        MOV     A,?V0
        ADD     A,#0xb
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        RET
          CFI EndBlock cfiCond99
          CFI EndBlock cfiCond100
          CFI EndBlock cfiCond101
          CFI EndBlock cfiPicker102

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine27:
          CFI Block cfiCond103 Using cfiCommon0
          CFI Function ZDO_beaconNotifyIndCB
          CFI Conditional ??CrossCallReturnLabel_24
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond104 Using cfiCommon0
          CFI (cfiCond104) Function ZDO_beaconNotifyIndCB
          CFI (cfiCond104) Conditional ??CrossCallReturnLabel_25
          CFI (cfiCond104) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond104) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond104) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond104) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond104) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond104) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond104) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond104) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond104) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond104) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond104) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond104) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond104) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond104) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond104) CFA_SP SP+-2
          CFI (cfiCond104) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker105 Using cfiCommon1
          CFI (cfiPicker105) NoFunction
          CFI (cfiPicker105) Picker
        LCALL   ?Subroutine39 & 0xFFFF
??CrossCallReturnLabel_50:
        RET
          CFI EndBlock cfiCond103
          CFI EndBlock cfiCond104
          CFI EndBlock cfiPicker105

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine39:
          CFI Block cfiCond106 Using cfiCommon0
          CFI Function ZDO_beaconNotifyIndCB
          CFI Conditional ??CrossCallReturnLabel_50, ??CrossCallReturnLabel_24
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond107 Using cfiCommon0
          CFI (cfiCond107) Function ZDO_beaconNotifyIndCB
          CFI (cfiCond107) Conditional ??CrossCallReturnLabel_50, ??CrossCallReturnLabel_25
          CFI (cfiCond107) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond107) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond107) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond107) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond107) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond107) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond107) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond107) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond107) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond107) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond107) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond107) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond107) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond107) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond107) CFA_SP SP+-4
          CFI (cfiCond107) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond108 Using cfiCommon0
          CFI (cfiCond108) Function ZDO_beaconNotifyIndCB
          CFI (cfiCond108) Conditional ??CrossCallReturnLabel_49, ??CrossCallReturnLabel_15
          CFI (cfiCond108) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond108) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond108) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond108) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond108) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond108) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond108) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond108) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond108) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond108) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond108) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond108) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond108) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond108) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond108) CFA_SP SP+-4
          CFI (cfiCond108) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond109 Using cfiCommon0
          CFI (cfiCond109) Function ZDO_beaconNotifyIndCB
          CFI (cfiCond109) Conditional ??CrossCallReturnLabel_49, ??CrossCallReturnLabel_16
          CFI (cfiCond109) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond109) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond109) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond109) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond109) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond109) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond109) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond109) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond109) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond109) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond109) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond109) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond109) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond109) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond109) CFA_SP SP+-4
          CFI (cfiCond109) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker110 Using cfiCommon1
          CFI (cfiPicker110) NoFunction
          CFI (cfiPicker110) Picker
        MOVX    A,@DPTR
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
          CFI EndBlock cfiCond106
          CFI EndBlock cfiCond107
          CFI EndBlock cfiCond108
          CFI EndBlock cfiCond109
          CFI EndBlock cfiPicker110

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine23:
          CFI Block cfiCond111 Using cfiCommon0
          CFI Function ZDApp_NwkDescListProcessing
          CFI Conditional ??CrossCallReturnLabel_83
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond112 Using cfiCommon0
          CFI (cfiCond112) Function ZDO_beaconNotifyIndCB
          CFI (cfiCond112) Conditional ??CrossCallReturnLabel_84
          CFI (cfiCond112) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond112) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond112) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond112) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond112) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond112) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond112) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond112) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond112) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond112) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond112) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond112) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond112) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond112) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond112) CFA_SP SP+-2
          CFI (cfiCond112) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond113 Using cfiCommon0
          CFI (cfiCond113) Function ZDO_AddrChangeIndicationCB
          CFI (cfiCond113) Conditional ??CrossCallReturnLabel_85
          CFI (cfiCond113) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond113) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond113) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond113) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond113) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond113) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond113) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond113) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond113) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond113) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond113) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond113) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond113) CFA_SP SP+-2
          CFI (cfiCond113) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker114 Using cfiCommon1
          CFI (cfiPicker114) NoFunction
          CFI (cfiPicker114) Picker
        MOV     DPL,R6
        MOV     DPH,R7
          CFI EndBlock cfiCond111
          CFI EndBlock cfiCond112
          CFI EndBlock cfiCond113
          CFI EndBlock cfiPicker114
        REQUIRE ??Subroutine52_0
        ; // Fall through to label ??Subroutine52_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine52_0:
          CFI Block cfiCond115 Using cfiCommon0
          CFI Function ZDO_JoinConfirmCB
          CFI Conditional ??CrossCallReturnLabel_80
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond116 Using cfiCommon0
          CFI (cfiCond116) Function ZDO_JoinConfirmCB
          CFI (cfiCond116) Conditional ??CrossCallReturnLabel_81
          CFI (cfiCond116) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond116) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond116) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond116) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond116) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond116) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond116) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond116) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond116) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond116) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond116) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond116) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond116) CFA_SP SP+-2
          CFI (cfiCond116) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond117 Using cfiCommon0
          CFI (cfiCond117) Function ZDO_JoinConfirmCB
          CFI (cfiCond117) Conditional ??CrossCallReturnLabel_82
          CFI (cfiCond117) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond117) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond117) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond117) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond117) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond117) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond117) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond117) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond117) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond117) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond117) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond117) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond117) CFA_SP SP+-2
          CFI (cfiCond117) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond118 Using cfiCommon0
          CFI (cfiCond118) Function ZDApp_NwkDescListProcessing
          CFI (cfiCond118) Conditional ??CrossCallReturnLabel_83
          CFI (cfiCond118) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond118) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond118) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond118) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond118) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond118) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond118) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond118) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond118) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond118) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond118) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond118) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond118) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond118) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond118) CFA_SP SP+-2
          CFI (cfiCond118) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond119 Using cfiCommon0
          CFI (cfiCond119) Function ZDO_beaconNotifyIndCB
          CFI (cfiCond119) Conditional ??CrossCallReturnLabel_84
          CFI (cfiCond119) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond119) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond119) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond119) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond119) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond119) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond119) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond119) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond119) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond119) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond119) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond119) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond119) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond119) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond119) CFA_SP SP+-2
          CFI (cfiCond119) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond120 Using cfiCommon0
          CFI (cfiCond120) Function ZDO_AddrChangeIndicationCB
          CFI (cfiCond120) Conditional ??CrossCallReturnLabel_85
          CFI (cfiCond120) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond120) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond120) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond120) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond120) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond120) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond120) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond120) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond120) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond120) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond120) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond120) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond120) CFA_SP SP+-2
          CFI (cfiCond120) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker121 Using cfiCommon1
          CFI (cfiPicker121) NoFunction
          CFI (cfiPicker121) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        RET
          CFI EndBlock cfiCond115
          CFI EndBlock cfiCond116
          CFI EndBlock cfiCond117
          CFI EndBlock cfiCond118
          CFI EndBlock cfiCond119
          CFI EndBlock cfiCond120
          CFI EndBlock cfiPicker121

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine22:
          CFI Block cfiCond122 Using cfiCommon0
          CFI Function ZDO_beaconNotifyIndCB
          CFI Conditional ??CrossCallReturnLabel_15
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond123 Using cfiCommon0
          CFI (cfiCond123) Function ZDO_beaconNotifyIndCB
          CFI (cfiCond123) Conditional ??CrossCallReturnLabel_16
          CFI (cfiCond123) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond123) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond123) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond123) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond123) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond123) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond123) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond123) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond123) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond123) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond123) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond123) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond123) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond123) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond123) CFA_SP SP+-2
          CFI (cfiCond123) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker124 Using cfiCommon1
          CFI (cfiPicker124) NoFunction
          CFI (cfiPicker124) Picker
        LCALL   ?Subroutine39 & 0xFFFF
??CrossCallReturnLabel_49:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
          CFI EndBlock cfiCond122
          CFI EndBlock cfiCond123
          CFI EndBlock cfiPicker124

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine12:
          CFI Block cfiCond125 Using cfiCommon0
          CFI Function ZDO_beaconNotifyIndCB
          CFI Conditional ??CrossCallReturnLabel_3
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond126 Using cfiCommon0
          CFI (cfiCond126) Function ZDO_beaconNotifyIndCB
          CFI (cfiCond126) Conditional ??CrossCallReturnLabel_4
          CFI (cfiCond126) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond126) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond126) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond126) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond126) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond126) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond126) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond126) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond126) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond126) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond126) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond126) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond126) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond126) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond126) CFA_SP SP+-2
          CFI (cfiCond126) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker127 Using cfiCommon1
          CFI (cfiPicker127) NoFunction
          CFI (cfiPicker127) Picker
        MOVX    @DPTR,A
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
          CFI EndBlock cfiCond125
          CFI EndBlock cfiCond126
          CFI EndBlock cfiPicker127
// 2503 
// 2504 /*********************************************************************
// 2505  * @fn          ZDO_StartRouterConfirmCB
// 2506  *
// 2507  * @brief       This function reports the results of the request to
// 2508  *              start functioning as a router in a network.
// 2509  *
// 2510  * @param       Status - Result of NLME_StartRouterRequest()
// 2511  *
// 2512  * @return      none
// 2513  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2514 void ZDO_StartRouterConfirmCB( ZStatus_t Status )
ZDO_StartRouterConfirmCB:
          CFI Block cfiBlock128 Using cfiCommon0
          CFI Function ZDO_StartRouterConfirmCB
        CODE
// 2515 {
        FUNCALL ZDO_StartRouterConfirmCB, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_StartRouterConfirmCB, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_StartRouterConfirmCB, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_StartRouterConfirmCB, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
// 2516   nwkStatus = (byte)Status;
        MOV     DPTR,#nwkStatus
        MOVX    @DPTR,A
// 2517 
// 2518   if ( Status == ZSUCCESS )
        JNZ     ??ZDO_StartRouterConfirmCB_0
// 2519   {
// 2520     // LED on shows Router started
// 2521     HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
        MOV     R1,#0x4
        LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
// 2522     // LED off forgets HOLD_AUTO_START
// 2523     HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF);
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
        MOV     R1,#0x8
        LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
// 2524     if ( devState == DEV_HOLD )
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        JNZ     ??ZDO_StartRouterConfirmCB_1
// 2525     {
// 2526       // Began with HOLD_AUTO_START
// 2527       devState = DEV_END_DEVICE;
        MOV     A,#0x6
        MOVX    @DPTR,A
        SJMP    ??ZDO_StartRouterConfirmCB_1
// 2528     }
// 2529   }
// 2530 #if defined(BLINK_LEDS)
// 2531   else
// 2532   {
// 2533     HalLedSet( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
??ZDO_StartRouterConfirmCB_0:
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x4
        MOV     R1,#0x4
        LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
// 2534   }
// 2535 #endif
// 2536 
// 2537   osal_set_event( ZDAppTaskID, ZDO_ROUTER_START );
??ZDO_StartRouterConfirmCB_1:
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x20
        LJMP    ?Subroutine0 & 0xFFFF
// 2538 }
          CFI EndBlock cfiBlock128
// 2539 
// 2540 /*********************************************************************
// 2541  * @fn          ZDO_JoinConfirmCB
// 2542  *
// 2543  * @brief       This function allows the next higher layer to be notified
// 2544  *              of the results of its request to join itself or another
// 2545  *              device to a network.
// 2546  *
// 2547  * @param       Status - Result of NLME_JoinRequest()
// 2548  *
// 2549  * @return      none
// 2550  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2551 void ZDO_JoinConfirmCB( uint16 PanId, ZStatus_t Status )
ZDO_JoinConfirmCB:
          CFI Block cfiBlock129 Using cfiCommon0
          CFI Function ZDO_JoinConfirmCB
        CODE
// 2552 {
        FUNCALL ZDO_JoinConfirmCB, nwkNeighborInitTable
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_JoinConfirmCB, nwkNeighborFindEmptySlot
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_JoinConfirmCB, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_JoinConfirmCB, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_JoinConfirmCB, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_JoinConfirmCB, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_JoinConfirmCB, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_JoinConfirmCB, ZDApp_SendMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 5
        MOV     A,#-0x5
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 17)
        MOV     ?V0,R1
// 2553   (void)PanId;  // remove if this parameter is used.
// 2554 
// 2555   nwkStatus = (byte)Status;
        MOV     A,R1
        MOV     DPTR,#nwkStatus
        MOVX    @DPTR,A
// 2556 
// 2557   if ( Status == ZSUCCESS )
        JZ      $+5
        LJMP    ??ZDO_JoinConfirmCB_0 & 0xFFFF
// 2558   {
// 2559     if ( ZSTACK_END_DEVICE_BUILD
// 2560       || (ZSTACK_ROUTER_BUILD && ((_NIB.CapabilityFlags & ZMAC_ASSOC_CAPINFO_FFD_TYPE) == 0)))
        MOV     DPTR,#_NIB + 14
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.1
        JC      ??ZDO_JoinConfirmCB_1
// 2561     {
// 2562       neighborEntry_t *pItem;
// 2563  
// 2564       // We don't need the neighbor table entries.  
// 2565       // Clear the neighbor Table to remove beacon information
// 2566       nwkNeighborInitTable();
        ; Setup parameters for call to function nwkNeighborInitTable
        LCALL   `??nwkNeighborInitTable::?relay`; Banked call to: nwkNeighborInitTable
// 2567  
// 2568       // Force a neighbor table entry for the parent
// 2569       pItem = nwkNeighborFindEmptySlot();
        ; Setup parameters for call to function nwkNeighborFindEmptySlot
        LCALL   `??nwkNeighborFindEmptySlot::?relay`; Banked call to: nwkNeighborFindEmptySlot
        MOV     ?V2,R2
        MOV     ?V3,R3
        MOV     R6,?V2
        MOV     R7,?V3
// 2570       if ( pItem != NULL )
        MOV     A,R6
        ORL     A,R7
        JZ      ??ZDO_JoinConfirmCB_1
// 2571       {
// 2572         osal_memset( pItem, 0x00, sizeof ( neighborEntry_t  )  );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x17
        MOV     R5,#0x0
        MOV     R1,#0x0
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 2573         pItem->neighborAddress = _NIB.nwkCoordAddress;
        MOV     DPTR,#_NIB + 23
        LCALL   ??Subroutine52_0 & 0xFFFF
??CrossCallReturnLabel_80:
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
// 2574         osal_cpyExtAddr( pItem ->neighborExtAddr, _NIB. nwkCoordExtAddress );
        ; Setup parameters for call to function sAddrExtCpy
        MOV     R4,#(_NIB + 25) & 0xff
        MOV     R5,#((_NIB + 25) >> 8) & 0xff
        LCALL   ?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_39:
        LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
// 2575         pItem->panId = _NIB. nwkPanId;
        MOV     DPTR,#_NIB + 33
        LCALL   ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_14:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
// 2576         pItem->linkInfo.rxLqi = DEF_LQI;
        MOV     A,R6
        ADD     A,#0xf
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOV     A,#-0x56
        MOVX    @DPTR,A
// 2577         pItem->linkInfo.txCounter = DEF_LINK_COUNTER;
        MOV     DPTR,#gLINK_DOWN_TRIGGER
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R1,#0x0
        ADD     A,#0x1
        MOV     R0,A
        JNC     ??ZDO_JoinConfirmCB_2
        INC     R1
??ZDO_JoinConfirmCB_2:
        MOV     R2,#0x2
        MOV     R3,#0x0
        LCALL   ?S_DIV_MOD
        MOV     A,R6
        ADD     A,#0xd
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOV     A,R0
        MOVX    @DPTR,A
// 2578         pItem->linkInfo.txCost = DEF_LINK_COST;
        MOV     A,R6
        ADD     A,#0xe
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOV     A,#0x1
        MOVX    @DPTR,A
// 2579       }
// 2580     }
// 2581     
// 2582     // LED on shows device joined
// 2583     HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
??ZDO_JoinConfirmCB_1:
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
        MOV     R1,#0x4
        LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
// 2584     // LED off forgets HOLD_AUTO_START
// 2585     HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF);
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
        MOV     R1,#0x8
        LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
// 2586     if ( (devState == DEV_HOLD) )
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        JNZ     ??ZDO_JoinConfirmCB_3
// 2587     {
// 2588       // Began with HOLD_AUTO_START
// 2589       devState = DEV_NWK_JOINING;
        MOV     A,#0x3
        MOVX    @DPTR,A
        SJMP    ??ZDO_JoinConfirmCB_3
// 2590     }
// 2591 
// 2592     if ( !ZG_SECURE_ENABLED )
// 2593     {
// 2594       // Notify to save info into NV
// 2595       ZDApp_NVUpdate();
// 2596     }
// 2597   }
// 2598   else
// 2599   {
// 2600 #if defined(BLINK_LEDS)
// 2601     HalLedSet ( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
??ZDO_JoinConfirmCB_0:
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x4
        MOV     R1,#0x4
        LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
// 2602 #endif
// 2603   }
// 2604 
// 2605   // Pass the join confirm to higher layer if callback registered
// 2606   if (zdoCBFunc[ZDO_JOIN_CNF_CBID] != NULL )
??ZDO_JoinConfirmCB_3:
        MOV     DPTR,#zdoCBFunc + 8
        LCALL   ??Subroutine54_0 & 0xFFFF
??CrossCallReturnLabel_99:
        JZ      ??ZDO_JoinConfirmCB_4
// 2607   {
// 2608     zdoJoinCnf_t joinCnf;
// 2609 
// 2610     joinCnf.status = Status;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,?V0
        MOVX    @DPTR,A
// 2611     joinCnf.deviceAddr = _NIB.nwkDevAddress;
        MOV     DPTR,#_NIB + 20
        LCALL   ??Subroutine52_0 & 0xFFFF
??CrossCallReturnLabel_81:
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
// 2612     joinCnf.parentAddr = _NIB.nwkCoordAddress;
        MOV     DPTR,#_NIB + 23
        LCALL   ??Subroutine52_0 & 0xFFFF
// 2613 
// 2614     zdoCBFunc[ZDO_JOIN_CNF_CBID]( (void*)&joinCnf );
// 2615   }
??CrossCallReturnLabel_82:
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_7:
        MOV     DPTR,#zdoCBFunc + 8
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        LCALL   ??Subroutine57_0 & 0xFFFF
??CrossCallReturnLabel_116:
        LCALL   ?CALL_IND
// 2616 
// 2617   // Notify ZDApp
// 2618   ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_JOIN_IND, sizeof(osal_event_hdr_t), (byte*)NULL );
??ZDO_JoinConfirmCB_4:
        ; Setup parameters for call to function ZDApp_SendMsg
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R3,#0x2
        MOV     R2,#0x2
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??ZDApp_SendMsg::?relay`; Banked call to: ZDApp_SendMsg
// 2619 
// 2620 }
        MOV     A,#0x5
        LJMP    ?Subroutine5 & 0xFFFF
          CFI EndBlock cfiBlock129

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine21:
          CFI Block cfiCond130 Using cfiCommon0
          CFI Function ZDO_beaconNotifyIndCB
          CFI Conditional ??CrossCallReturnLabel_13
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond131 Using cfiCommon0
          CFI (cfiCond131) Function ZDO_JoinConfirmCB
          CFI (cfiCond131) Conditional ??CrossCallReturnLabel_14
          CFI (cfiCond131) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond131) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond131) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond131) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond131) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond131) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond131) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond131) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond131) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond131) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond131) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond131) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond131) CFA_SP SP+-2
          CFI (cfiCond131) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiPicker132 Using cfiCommon1
          CFI (cfiPicker132) NoFunction
          CFI (cfiPicker132) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
          CFI EndBlock cfiCond130
          CFI EndBlock cfiCond131
          CFI EndBlock cfiPicker132

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine13:
          CFI Block cfiCond133 Using cfiCommon0
          CFI Function ZDApp_ProcessNetworkJoin
          CFI Conditional ??CrossCallReturnLabel_5
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond134 Using cfiCommon0
          CFI (cfiCond134) Function ZDApp_LeaveUpdate
          CFI (cfiCond134) Conditional ??CrossCallReturnLabel_6
          CFI (cfiCond134) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond134) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond134) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond134) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond134) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond134) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond134) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond134) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond134) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond134) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond134) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond134) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond134) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond134) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond134) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond134) CFA_SP SP+-2
          CFI (cfiCond134) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond135 Using cfiCommon0
          CFI (cfiCond135) Function ZDO_JoinConfirmCB
          CFI (cfiCond135) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond135) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond135) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond135) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond135) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond135) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond135) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond135) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond135) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond135) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond135) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond135) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond135) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond135) CFA_SP SP+-2
          CFI (cfiCond135) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond136 Using cfiCommon0
          CFI (cfiCond136) Function ZDO_LeaveInd
          CFI (cfiCond136) Conditional ??CrossCallReturnLabel_8
          CFI (cfiCond136) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond136) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond136) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond136) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond136) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond136) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond136) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond136) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond136) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond136) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond136) CFA_SP SP+-2
          CFI (cfiCond136) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker137 Using cfiCommon1
          CFI (cfiPicker137) NoFunction
          CFI (cfiPicker137) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function ZMacSetReq
        ; Setup parameters for call to function APSME_UpdateDeviceReq
        ; Setup parameters for indirect call
        ; Setup parameters for call to function NLME_LeaveRsp
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        RET
          CFI EndBlock cfiCond133
          CFI EndBlock cfiCond134
          CFI EndBlock cfiCond135
          CFI EndBlock cfiCond136
          CFI EndBlock cfiPicker137
// 2621 
// 2622 /*********************************************************************
// 2623  * @fn          ZDO_PermitJoinCB
// 2624  *
// 2625  * @brief      This function is called when there is a change in the
// 2626  *             device's permit join status.
// 2627  *
// 2628  * @param       duration - the new duration
// 2629  *
// 2630  * @return      none
// 2631  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2632 void ZDO_PermitJoinCB( uint8 duration )
ZDO_PermitJoinCB:
          CFI Block cfiBlock138 Using cfiCommon0
          CFI Function ZDO_PermitJoinCB
        CODE
// 2633 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 1)
        MOV     A,R1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
// 2634   // Pass the Permit Join status to higher layer if callback registered
// 2635   if (zdoCBFunc[ZDO_PERMIT_JOIN_CBID] != NULL )
        MOV     DPTR,#zdoCBFunc + 14
        LCALL   ??Subroutine54_0 & 0xFFFF
??CrossCallReturnLabel_100:
        JZ      ??ZDO_PermitJoinCB_0
// 2636   {
// 2637     zdoCBFunc[ZDO_PERMIT_JOIN_CBID]( (void*)&duration );
        ; Setup parameters for indirect call
        LCALL   ?Subroutine18 & 0xFFFF
// 2638   }
??CrossCallReturnLabel_121:
        LCALL   ?CALL_IND
// 2639 }
??ZDO_PermitJoinCB_0:
        MOV     A,#0x1
        LJMP    ?Subroutine4 & 0xFFFF
          CFI EndBlock cfiBlock138
// 2640 
// 2641 /*********************************************************************
// 2642  * @fn          ZDO_AddrChangeIndicationCB
// 2643  *
// 2644  * @brief       This function notifies the application that this
// 2645  *              device's address has changed.  Could happen in
// 2646  *              a network with stochastic addressing (PRO).
// 2647  *
// 2648  * @param       newAddr - the new address
// 2649  *
// 2650  * @return      none
// 2651  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2652 void ZDO_AddrChangeIndicationCB( uint16 newAddr )
ZDO_AddrChangeIndicationCB:
          CFI Block cfiBlock139 Using cfiCommon0
          CFI Function ZDO_AddrChangeIndicationCB
        CODE
// 2653 {
        FUNCALL ZDO_AddrChangeIndicationCB, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_AddrChangeIndicationCB, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_AddrChangeIndicationCB, osal_msg_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_AddrChangeIndicationCB, ZDApp_AnnounceNewAddress
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     ?V0,R2
        MOV     ?V1,R3
// 2654   ZDO_AddrChangeInd_t *pZDOAddrChangeMsg;
// 2655   epList_t *pItem = epList;
        MOV     DPTR,#epList
        LCALL   ??Subroutine53_0 & 0xFFFF
// 2656 
// 2657   // Notify to save info into NV
// 2658   ZDApp_NVUpdate();
// 2659 
// 2660   // Notify the applications
// 2661   osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
??CrossCallReturnLabel_87:
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x10
        MOV     R3,#0x0
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
        SJMP    ??ZDO_AddrChangeIndicationCB_0
// 2662 
// 2663   while (pItem != NULL)
// 2664   {
// 2665     if (pItem->epDesc->endPoint != ZDO_EP)
??ZDO_AddrChangeIndicationCB_1:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine45_0 & 0xFFFF
??CrossCallReturnLabel_60:
        JZ      ??ZDO_AddrChangeIndicationCB_2
// 2666     {
// 2667       pZDOAddrChangeMsg = (ZDO_AddrChangeInd_t *)osal_msg_allocate( sizeof( ZDO_AddrChangeInd_t ) );
        ; Setup parameters for call to function osal_msg_allocate
        MOV     R2,#0x4
        MOV     R3,#0x0
        LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
// 2668       if (pZDOAddrChangeMsg != NULL)
        MOV     A,R2
        ORL     A,R3
        JZ      ??ZDO_AddrChangeIndicationCB_2
// 2669       {
// 2670         pZDOAddrChangeMsg->hdr.event = ZDO_ADDR_CHANGE_IND;
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,#-0x2a
        MOVX    @DPTR,A
// 2671         pZDOAddrChangeMsg->shortAddr = newAddr;
        INC     DPTR
        INC     DPTR
        MOV     A,?V0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V1
        LCALL   ?Subroutine11 & 0xFFFF
// 2672         osal_msg_send( *(pItem->epDesc->task_id), (uint8 *)pZDOAddrChangeMsg );
// 2673       }
// 2674     }
??CrossCallReturnLabel_1:
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        LCALL   ??Subroutine57_0 & 0xFFFF
??CrossCallReturnLabel_117:
        INC     DPTR
        LCALL   ??Subroutine45_0 & 0xFFFF
??CrossCallReturnLabel_61:
        MOV     R1,A
        LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
// 2675     pItem = pItem->nextDesc;
??ZDO_AddrChangeIndicationCB_2:
        LCALL   ?Subroutine23 & 0xFFFF
// 2676   }
??CrossCallReturnLabel_85:
        MOV     A,R0
        MOV     R6,A
        MOV     A,R1
        MOV     R7,A
??ZDO_AddrChangeIndicationCB_0:
        MOV     A,R6
        ORL     A,R7
        JNZ     ??ZDO_AddrChangeIndicationCB_1
// 2677 
// 2678   // Send out a device announce
// 2679   ZDApp_AnnounceNewAddress();
        ; Setup parameters for call to function ZDApp_AnnounceNewAddress
        LCALL   `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
// 2680 }
        LJMP    ??Subroutine59_0 & 0xFFFF
          CFI EndBlock cfiBlock139

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine25:
          CFI Block cfiCond140 Using cfiCommon0
          CFI Function ZDApp_NwkDescListProcessing
          CFI Conditional ??CrossCallReturnLabel_88
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond141 Using cfiCommon0
          CFI (cfiCond141) Function ZDApp_NwkDescListProcessing
          CFI (cfiCond141) Conditional ??CrossCallReturnLabel_89
          CFI (cfiCond141) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond141) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond141) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond141) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond141) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond141) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond141) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond141) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond141) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond141) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond141) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond141) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond141) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond141) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond141) CFA_SP SP+-2
          CFI (cfiCond141) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond142 Using cfiCommon0
          CFI (cfiCond142) Function ZDO_beaconNotifyIndCB
          CFI (cfiCond142) Conditional ??CrossCallReturnLabel_90
          CFI (cfiCond142) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond142) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond142) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond142) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond142) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond142) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond142) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond142) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond142) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond142) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond142) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond142) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond142) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond142) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond142) CFA_SP SP+-2
          CFI (cfiCond142) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker143 Using cfiCommon1
          CFI (cfiPicker143) NoFunction
          CFI (cfiPicker143) Picker
        MOV     A,R6
        ADD     A,#0x14
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
          CFI EndBlock cfiCond140
          CFI EndBlock cfiCond141
          CFI EndBlock cfiCond142
          CFI EndBlock cfiPicker143
        REQUIRE ??Subroutine53_0
        ; // Fall through to label ??Subroutine53_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine53_0:
          CFI Block cfiCond144 Using cfiCommon0
          CFI Function ZDO_beaconNotifyIndCB
          CFI Conditional ??CrossCallReturnLabel_86
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond145 Using cfiCommon0
          CFI (cfiCond145) Function ZDO_AddrChangeIndicationCB
          CFI (cfiCond145) Conditional ??CrossCallReturnLabel_87
          CFI (cfiCond145) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond145) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond145) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond145) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond145) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond145) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond145) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond145) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond145) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond145) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond145) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond145) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond145) CFA_SP SP+-2
          CFI (cfiCond145) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond146 Using cfiCommon0
          CFI (cfiCond146) Function ZDApp_NwkDescListProcessing
          CFI (cfiCond146) Conditional ??CrossCallReturnLabel_88
          CFI (cfiCond146) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond146) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond146) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond146) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond146) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond146) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond146) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond146) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond146) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond146) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond146) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond146) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond146) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond146) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond146) CFA_SP SP+-2
          CFI (cfiCond146) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond147 Using cfiCommon0
          CFI (cfiCond147) Function ZDApp_NwkDescListProcessing
          CFI (cfiCond147) Conditional ??CrossCallReturnLabel_89
          CFI (cfiCond147) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond147) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond147) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond147) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond147) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond147) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond147) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond147) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond147) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond147) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond147) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond147) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond147) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond147) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond147) CFA_SP SP+-2
          CFI (cfiCond147) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond148 Using cfiCommon0
          CFI (cfiCond148) Function ZDO_beaconNotifyIndCB
          CFI (cfiCond148) Conditional ??CrossCallReturnLabel_90
          CFI (cfiCond148) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond148) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond148) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond148) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond148) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond148) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond148) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond148) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond148) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond148) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond148) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond148) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond148) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond148) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond148) CFA_SP SP+-2
          CFI (cfiCond148) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker149 Using cfiCommon1
          CFI (cfiPicker149) NoFunction
          CFI (cfiPicker149) Picker
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
        RET
          CFI EndBlock cfiCond144
          CFI EndBlock cfiCond145
          CFI EndBlock cfiCond146
          CFI EndBlock cfiCond147
          CFI EndBlock cfiCond148
          CFI EndBlock cfiPicker149

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine11:
          CFI Block cfiCond150 Using cfiCommon0
          CFI Function ZDO_beaconNotifyIndCB
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond151 Using cfiCommon0
          CFI (cfiCond151) Function ZDO_AddrChangeIndicationCB
          CFI (cfiCond151) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond151) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond151) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond151) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond151) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond151) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond151) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond151) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond151) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond151) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond151) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond151) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond151) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond151) CFA_SP SP+-2
          CFI (cfiCond151) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond152 Using cfiCommon0
          CFI (cfiCond152) Function ZDO_JoinIndicationCB
          CFI (cfiCond152) Conditional ??CrossCallReturnLabel_2
          CFI (cfiCond152) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond152) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond152) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond152) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond152) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond152) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond152) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond152) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond152) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond152) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond152) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond152) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond152) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond152) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond152) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond152) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond152) CFA_SP SP+-2
          CFI (cfiCond152) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker153 Using cfiCommon1
          CFI (cfiPicker153) NoFunction
          CFI (cfiPicker153) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function osal_msg_send
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        RET
          CFI EndBlock cfiCond150
          CFI EndBlock cfiCond151
          CFI EndBlock cfiCond152
          CFI EndBlock cfiPicker153
// 2681 
// 2682 /*********************************************************************
// 2683  * @fn          ZDO_JoinIndicationCB
// 2684  *
// 2685  * @brief       This function allows the next higher layer of a
// 2686  *              coordinator to be notified of a remote join request.
// 2687  *
// 2688  * @param       ShortAddress - 16-bit address
// 2689  * @param       ExtendedAddress - IEEE (64-bit) address
// 2690  * @param       CapabilityFlags - Association Capability Flags
// 2691  * @param       type - of joining -
// 2692  *                          NWK_ASSOC_JOIN
// 2693  *                          NWK_ASSOC_REJOIN_UNSECURE
// 2694  *                          NWK_ASSOC_REJOIN_SECURE
// 2695  *
// 2696  * @return      ZStatus_t
// 2697  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2698 ZStatus_t ZDO_JoinIndicationCB(uint16 ShortAddress, uint8 *ExtendedAddress,
ZDO_JoinIndicationCB:
          CFI Block cfiBlock154 Using cfiCommon0
          CFI Function ZDO_JoinIndicationCB
        CODE
// 2699                                 uint8 CapabilityFlags, uint8 type)
// 2700 {
        FUNCALL ZDO_JoinIndicationCB, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_JoinIndicationCB, osal_get_timeoutEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_JoinIndicationCB, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     A,#0x10
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R0,A
// 2701   (void)ExtendedAddress;
// 2702 #if ZDO_NV_SAVE_RFDs
// 2703   (void)CapabilityFlags;
// 2704 
// 2705 #else  // if !ZDO_NV_SAVE_RFDs
// 2706   if (CapabilityFlags & CAPINFO_DEVICETYPE_FFD)
// 2707 #endif
// 2708   {
// 2709     ZDApp_NVUpdate();  // Notify to save info into NV.
// 2710   }
// 2711 
// 2712   if (ZG_SECURE_ENABLED)  // Send notification to TC of new device.
// 2713   {
// 2714     if ( type == NWK_ASSOC_JOIN ||
// 2715          type == NWK_ASSOC_REJOIN_UNSECURE ||
// 2716          type == NWK_ASSOC_REJOIN_SECURE )
        JZ      ??ZDO_JoinIndicationCB_0
        MOV     A,#0x1
        XRL     A,R0
        JZ      ??ZDO_JoinIndicationCB_0
        MOV     A,#0x2
        XRL     A,R0
        JZ      $+5
        LJMP    ??ZDO_JoinIndicationCB_1 & 0xFFFF
// 2717     {
// 2718       uint16 timeToFire;
// 2719       ZDAppNewDevice_t *pNewDevice, *pDeviceList;
// 2720 
// 2721       pNewDevice = (ZDAppNewDevice_t *) osal_mem_alloc( sizeof(ZDAppNewDevice_t) );
??ZDO_JoinIndicationCB_0:
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0x6
        MOV     R3,#0x0
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV     ?V2,R2
        MOV     ?V3,R3
        MOV     R6,?V2
        MOV     R7,?V3
// 2722 
// 2723       if ( pNewDevice == NULL )
        MOV     A,R6
        ORL     A,R7
        JNZ     ??ZDO_JoinIndicationCB_2
// 2724       {
// 2725         // Memory alloc failed
// 2726         return ZMemError;
        MOV     R1,#0x10
        LJMP    ??ZDO_JoinIndicationCB_3 & 0xFFFF
// 2727       }
// 2728 
// 2729       // Add the new device to the New Device List
// 2730       if ( ZDApp_NewDeviceList == NULL )
??ZDO_JoinIndicationCB_2:
        MOV     DPTR,#ZDApp_NewDeviceList
        LCALL   ??Subroutine54_0 & 0xFFFF
??CrossCallReturnLabel_101:
        MOV     DPTR,#ZDApp_NewDeviceList
        JNZ     ??ZDO_JoinIndicationCB_4
// 2731       {
// 2732         // The list is empty, add the first element
// 2733         ZDApp_NewDeviceList = pNewDevice;
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        SJMP    ??ZDO_JoinIndicationCB_5
// 2734       }
// 2735       else
// 2736       {
// 2737         pDeviceList = ZDApp_NewDeviceList;
??ZDO_JoinIndicationCB_4:
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        SJMP    ??ZDO_JoinIndicationCB_6
// 2738 
// 2739         // Walk the list to last element
// 2740         while ( pDeviceList->next )
// 2741         {
// 2742           pDeviceList = (ZDAppNewDevice_t *) pDeviceList->next;
??ZDO_JoinIndicationCB_7:
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
??ZDO_JoinIndicationCB_6:
        MOV     R3,A
// 2743         }
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ??Subroutine54_0 & 0xFFFF
??CrossCallReturnLabel_102:
        JNZ     ??ZDO_JoinIndicationCB_7
// 2744 
// 2745         // Add new device at the end
// 2746         pDeviceList->next = pNewDevice;
        MOV     A,R6
        MOV     R0,A
        MOV     A,R7
        MOV     R1,A
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
??ZDO_JoinIndicationCB_5:
        MOVX    @DPTR,A
// 2747       }
// 2748 
// 2749       // get the remaining time of the timer
// 2750       timeToFire = osal_get_timeoutEx( ZDAppTaskID, ZDO_NEW_DEVICE );
        ; Setup parameters for call to function osal_get_timeoutEx
        MOV     R2,#0x40
        MOV     R3,#0x0
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
        MOV     ?V4,R2
        MOV     ?V5,R3
// 2751 
// 2752       pNewDevice->next = NULL;
        MOV     DPL,R6
        MOV     DPH,R7
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        LCALL   ?Subroutine11 & 0xFFFF
// 2753       pNewDevice->shortAddr = ShortAddress;
??CrossCallReturnLabel_2:
        MOV     A,?V0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V1
        MOVX    @DPTR,A
// 2754       pNewDevice->timeDelta = ZDAPP_NEW_DEVICE_TIME - timeToFire;
        MOV     A,#0x58
        CLR     C
        SUBB    A,?V4
        MOV     R0,A
        MOV     A,#0x2
        SUBB    A,?V5
        MOV     R1,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
// 2755 
// 2756       // Start the timer only if there is no pending timer
// 2757       if ( pNewDevice->timeDelta == ZDAPP_NEW_DEVICE_TIME )
        MOV     A,#0x58
        XRL     A,R0
        JNZ     ??ZDO_JoinIndicationCB_8
        MOV     A,#0x2
        XRL     A,R1
??ZDO_JoinIndicationCB_8:
        JNZ     ??ZDO_JoinIndicationCB_1
// 2758       {
// 2759         osal_start_timerEx( ZDAppTaskID, ZDO_NEW_DEVICE, ZDAPP_NEW_DEVICE_TIME );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#__Constant_258
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     R2,#0x40
        MOV     R3,#0x0
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
// 2760       }
// 2761     }
// 2762   }
// 2763 
// 2764   return ZSuccess;
??ZDO_JoinIndicationCB_1:
        MOV     R1,#0x0
??ZDO_JoinIndicationCB_3:
        LJMP    ?Subroutine2 & 0xFFFF
// 2765 }
          CFI EndBlock cfiBlock154

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine15:
          CFI Block cfiCond155 Using cfiCommon0
          CFI Function ZDApp_InitPendingBind
          CFI Conditional ??CrossCallReturnLabel_107
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond156 Using cfiCommon0
          CFI (cfiCond156) Function ZDApp_InitPendingBind
          CFI (cfiCond156) Conditional ??CrossCallReturnLabel_108
          CFI (cfiCond156) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond156) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond156) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond156) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond156) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond156) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond156) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond156) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond156) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond156) CFA_SP SP+-2
          CFI (cfiCond156) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond157 Using cfiCommon0
          CFI (cfiCond157) Function ZDApp_GetEmptyPendingBindReq
          CFI (cfiCond157) Conditional ??CrossCallReturnLabel_109
          CFI (cfiCond157) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond157) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond157) CFA_SP SP+-7
          CFI Block cfiCond158 Using cfiCommon0
          CFI (cfiCond158) Function ZDApp_ProcessPendingBindReq
          CFI (cfiCond158) Conditional ??CrossCallReturnLabel_110
          CFI (cfiCond158) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond158) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond158) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond158) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond158) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond158) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond158) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond158) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond158) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond158) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond158) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond158) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond158) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond158) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond158) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond158) CFA_SP SP+-2
          CFI (cfiCond158) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond159 Using cfiCommon0
          CFI (cfiCond159) Function ZDApp_AgeOutPendingBindEntry
          CFI (cfiCond159) Conditional ??CrossCallReturnLabel_111
          CFI (cfiCond159) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond159) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond159) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond159) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond159) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond159) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond159) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond159) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond159) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond159) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond159) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond159) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond159) CFA_SP SP+-2
          CFI (cfiCond159) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiPicker160 Using cfiCommon1
          CFI (cfiPicker160) NoFunction
          CFI (cfiPicker160) Picker
        MOV     DPTR,#ZDAppPendingBindReq
          CFI EndBlock cfiCond155
          CFI EndBlock cfiCond156
          CFI EndBlock cfiCond157
          CFI EndBlock cfiCond158
          CFI EndBlock cfiCond159
          CFI EndBlock cfiPicker160
        REQUIRE ??Subroutine54_0
        ; // Fall through to label ??Subroutine54_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine54_0:
          CFI Block cfiCond161 Using cfiCommon0
          CFI Function ZDApp_SecInit
          CFI Conditional ??CrossCallReturnLabel_91
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond162 Using cfiCommon0
          CFI (cfiCond162) Function ZDApp_ProcessSecEvent
          CFI (cfiCond162) Conditional ??CrossCallReturnLabel_92
          CFI (cfiCond162) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond162) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond162) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond162) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond162) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond162) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond162) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond162) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond162) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond162) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond162) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond162) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond162) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond162) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond162) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond162) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond162) CFA_SP SP+-2
          CFI (cfiCond162) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond163 Using cfiCommon0
          CFI (cfiCond163) Function ZDApp_ProcessOSALMsg
          CFI (cfiCond163) Conditional ??CrossCallReturnLabel_93
          CFI (cfiCond163) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond163) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond163) CFA_SP SP+-7
          CFI Block cfiCond164 Using cfiCommon0
          CFI (cfiCond164) Function ZDApp_ProcessMsgCBs
          CFI (cfiCond164) Conditional ??CrossCallReturnLabel_94
          CFI (cfiCond164) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond164) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond164) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond164) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond164) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond164) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond164) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond164) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond164) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond164) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond164) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond164) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond164) CFA_SP SP+-2
          CFI (cfiCond164) CFA_XSP16 add(XSP16, 56)
          CFI Block cfiCond165 Using cfiCommon0
          CFI (cfiCond165) Function ZDApp_LeaveUpdate
          CFI (cfiCond165) Conditional ??CrossCallReturnLabel_95
          CFI (cfiCond165) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond165) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond165) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond165) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond165) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond165) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond165) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond165) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond165) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond165) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond165) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond165) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond165) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond165) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond165) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond165) CFA_SP SP+-2
          CFI (cfiCond165) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond166 Using cfiCommon0
          CFI (cfiCond166) Function ZDO_NetworkDiscoveryConfirmCB
          CFI (cfiCond166) Conditional ??CrossCallReturnLabel_96
          CFI (cfiCond166) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond166) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond166) CFA_SP SP+-7
          CFI (cfiCond166) CFA_XSP16 add(XSP16, 3)
          CFI Block cfiCond167 Using cfiCommon0
          CFI (cfiCond167) Function ZDO_beaconNotifyIndCB
          CFI (cfiCond167) Conditional ??CrossCallReturnLabel_97
          CFI (cfiCond167) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond167) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond167) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond167) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond167) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond167) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond167) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond167) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond167) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond167) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond167) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond167) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond167) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond167) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond167) CFA_SP SP+-2
          CFI (cfiCond167) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond168 Using cfiCommon0
          CFI (cfiCond168) Function ZDO_beaconNotifyIndCB
          CFI (cfiCond168) Conditional ??CrossCallReturnLabel_98
          CFI (cfiCond168) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond168) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond168) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond168) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond168) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond168) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond168) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond168) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond168) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond168) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond168) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond168) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond168) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond168) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond168) CFA_SP SP+-2
          CFI (cfiCond168) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond169 Using cfiCommon0
          CFI (cfiCond169) Function ZDO_JoinConfirmCB
          CFI (cfiCond169) Conditional ??CrossCallReturnLabel_99
          CFI (cfiCond169) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond169) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond169) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond169) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond169) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond169) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond169) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond169) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond169) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond169) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond169) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond169) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond169) CFA_SP SP+-2
          CFI (cfiCond169) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond170 Using cfiCommon0
          CFI (cfiCond170) Function ZDO_PermitJoinCB
          CFI (cfiCond170) Conditional ??CrossCallReturnLabel_100
          CFI (cfiCond170) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond170) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond170) CFA_SP SP+-7
          CFI (cfiCond170) CFA_XSP16 add(XSP16, 1)
          CFI Block cfiCond171 Using cfiCommon0
          CFI (cfiCond171) Function ZDO_JoinIndicationCB
          CFI (cfiCond171) Conditional ??CrossCallReturnLabel_101
          CFI (cfiCond171) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond171) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond171) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond171) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond171) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond171) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond171) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond171) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond171) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond171) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond171) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond171) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond171) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond171) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond171) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond171) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond171) CFA_SP SP+-2
          CFI (cfiCond171) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond172 Using cfiCommon0
          CFI (cfiCond172) Function ZDO_JoinIndicationCB
          CFI (cfiCond172) Conditional ??CrossCallReturnLabel_102
          CFI (cfiCond172) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond172) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond172) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond172) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond172) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond172) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond172) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond172) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond172) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond172) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond172) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond172) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond172) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond172) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond172) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond172) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond172) CFA_SP SP+-2
          CFI (cfiCond172) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond173 Using cfiCommon0
          CFI (cfiCond173) Function ZDO_ConcentratorIndicationCB
          CFI (cfiCond173) Conditional ??CrossCallReturnLabel_103
          CFI (cfiCond173) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond173) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond173) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond173) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond173) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond173) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond173) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond173) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond173) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond173) CFA_SP SP+-2
          CFI (cfiCond173) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond174 Using cfiCommon0
          CFI (cfiCond174) Function ZDO_LeaveCnf
          CFI (cfiCond174) Conditional ??CrossCallReturnLabel_104
          CFI (cfiCond174) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond174) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond174) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond174) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond174) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond174) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond174) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond174) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond174) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond174) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond174) CFA_SP SP+-2
          CFI (cfiCond174) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond175 Using cfiCommon0
          CFI (cfiCond175) Function ZDO_LeaveInd
          CFI (cfiCond175) Conditional ??CrossCallReturnLabel_105
          CFI (cfiCond175) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond175) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond175) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond175) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond175) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond175) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond175) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond175) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond175) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond175) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond175) CFA_SP SP+-2
          CFI (cfiCond175) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond176 Using cfiCommon0
          CFI (cfiCond176) Function ZDO_SrcRtgIndCB
          CFI (cfiCond176) Conditional ??CrossCallReturnLabel_106
          CFI (cfiCond176) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond176) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond176) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond176) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond176) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond176) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond176) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond176) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond176) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond176) CFA_SP SP+-2
          CFI (cfiCond176) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond177 Using cfiCommon0
          CFI (cfiCond177) Function ZDApp_InitPendingBind
          CFI (cfiCond177) Conditional ??CrossCallReturnLabel_107
          CFI (cfiCond177) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond177) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond177) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond177) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond177) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond177) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond177) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond177) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond177) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond177) CFA_SP SP+-2
          CFI (cfiCond177) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond178 Using cfiCommon0
          CFI (cfiCond178) Function ZDApp_InitPendingBind
          CFI (cfiCond178) Conditional ??CrossCallReturnLabel_108
          CFI (cfiCond178) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond178) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond178) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond178) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond178) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond178) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond178) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond178) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond178) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond178) CFA_SP SP+-2
          CFI (cfiCond178) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond179 Using cfiCommon0
          CFI (cfiCond179) Function ZDApp_GetEmptyPendingBindReq
          CFI (cfiCond179) Conditional ??CrossCallReturnLabel_109
          CFI (cfiCond179) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond179) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond179) CFA_SP SP+-7
          CFI Block cfiCond180 Using cfiCommon0
          CFI (cfiCond180) Function ZDApp_ProcessPendingBindReq
          CFI (cfiCond180) Conditional ??CrossCallReturnLabel_110
          CFI (cfiCond180) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond180) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond180) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond180) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond180) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond180) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond180) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond180) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond180) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond180) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond180) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond180) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond180) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond180) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond180) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond180) CFA_SP SP+-2
          CFI (cfiCond180) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond181 Using cfiCommon0
          CFI (cfiCond181) Function ZDApp_AgeOutPendingBindEntry
          CFI (cfiCond181) Conditional ??CrossCallReturnLabel_111
          CFI (cfiCond181) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond181) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond181) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond181) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond181) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond181) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond181) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond181) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond181) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond181) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond181) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond181) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond181) CFA_SP SP+-2
          CFI (cfiCond181) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiPicker182 Using cfiCommon1
          CFI (cfiPicker182) NoFunction
          CFI (cfiPicker182) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        RET
          CFI EndBlock cfiCond161
          CFI EndBlock cfiCond162
          CFI EndBlock cfiCond163
          CFI EndBlock cfiCond164
          CFI EndBlock cfiCond165
          CFI EndBlock cfiCond166
          CFI EndBlock cfiCond167
          CFI EndBlock cfiCond168
          CFI EndBlock cfiCond169
          CFI EndBlock cfiCond170
          CFI EndBlock cfiCond171
          CFI EndBlock cfiCond172
          CFI EndBlock cfiCond173
          CFI EndBlock cfiCond174
          CFI EndBlock cfiCond175
          CFI EndBlock cfiCond176
          CFI EndBlock cfiCond177
          CFI EndBlock cfiCond178
          CFI EndBlock cfiCond179
          CFI EndBlock cfiCond180
          CFI EndBlock cfiCond181
          CFI EndBlock cfiPicker182
// 2766 
// 2767 /*********************************************************************
// 2768  * @fn          ZDO_ConcentratorIndicationCB
// 2769  *
// 2770  * @brief       This function allows the next higher layer of a
// 2771  *              device to be notified of existence of the concentrator.
// 2772  *
// 2773  * @param       nwkAddr - 16-bit NWK address of the concentrator
// 2774  * @param       extAddr - pointer to extended Address
// 2775  *                        NULL if not available
// 2776  * @param       pktCost - PktCost from RREQ
// 2777  *
// 2778  * @return      void
// 2779  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2780 void ZDO_ConcentratorIndicationCB( uint16 nwkAddr, uint8 *extAddr, uint8 pktCost )
ZDO_ConcentratorIndicationCB:
          CFI Block cfiBlock183 Using cfiCommon0
          CFI Function ZDO_ConcentratorIndicationCB
        CODE
// 2781 {
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 5
        MOV     A,#-0x5
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
// 2782   zdoConcentratorInd_t conInd;
// 2783 
// 2784   conInd.nwkAddr = nwkAddr;
        LCALL   ?Subroutine14 & 0xFFFF
// 2785   conInd.extAddr = extAddr;
??CrossCallReturnLabel_68:
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
// 2786   conInd.pktCost = pktCost;
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R1
        MOVX    @DPTR,A
// 2787 
// 2788   if( zdoCBFunc[ZDO_CONCENTRATOR_IND_CBID] != NULL )
        MOV     DPTR,#zdoCBFunc + 2
        LCALL   ??Subroutine54_0 & 0xFFFF
??CrossCallReturnLabel_103:
        JZ      ??ZDO_ConcentratorIndicationCB_0
// 2789   {
// 2790     zdoCBFunc[ZDO_CONCENTRATOR_IND_CBID]( (void*)&conInd );
        ; Setup parameters for indirect call
        LCALL   ?Subroutine18 & 0xFFFF
// 2791   }
??CrossCallReturnLabel_122:
        LCALL   ?CALL_IND
// 2792 }
??ZDO_ConcentratorIndicationCB_0:
          CFI EndBlock cfiBlock183
        REQUIRE ?Subroutine7
        ; // Fall through to label ?Subroutine7

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine7:
          CFI Block cfiBlock184 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0x5
          CFI EndBlock cfiBlock184
        REQUIRE ??Subroutine55_0
        ; // Fall through to label ??Subroutine55_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine55_0:
          CFI Block cfiBlock185 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 25)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Valid
        SJMP    ??Subroutine56_0
          CFI EndBlock cfiBlock185

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock186 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R3,#0x0
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
          CFI EndBlock cfiBlock186
        REQUIRE ??Subroutine56_0
        ; // Fall through to label ??Subroutine56_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine56_0:
          CFI Block cfiBlock187 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock187
// 2793 
// 2794 /*********************************************************************
// 2795  * @fn          ZDO_LeaveCnf
// 2796  *
// 2797  * @brief       This function allows the next higher layer to be
// 2798  *              notified of the results of its request for this or
// 2799  *              a child device to leave the network.
// 2800  *
// 2801  * @param       cnf - NLME_LeaveCnf_t
// 2802  *
// 2803  * @return      none
// 2804  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2805 void ZDO_LeaveCnf( NLME_LeaveCnf_t* cnf )
ZDO_LeaveCnf:
          CFI Block cfiBlock188 Using cfiCommon0
          CFI Function ZDO_LeaveCnf
        CODE
// 2806 {
        FUNCALL ZDO_LeaveCnf, NLME_GetExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_LeaveCnf, sAddrExtCmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_LeaveCnf, ZDApp_LeaveReset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_LeaveCnf, ZDApp_LeaveUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 2807   // Check for this device
// 2808   if ( osal_ExtAddrEqual( cnf->extAddr,
// 2809                           NLME_GetExtAddr() ) == TRUE )
        ; Setup parameters for call to function NLME_GetExtAddr
        LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     R4,?V0
        MOV     R5,?V1
        ; Setup parameters for call to function sAddrExtCmp
        LCALL   ?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_40:
        LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
        MOV     A,R1
        XRL     A,#0x1
        JNZ     ??ZDO_LeaveCnf_0
// 2810   {
// 2811     // Pass the leave confirm to higher layer if callback registered
// 2812     if ( ( zdoCBFunc[ZDO_LEAVE_CNF_CBID] == NULL ) ||
// 2813          ( (*zdoCBFunc[ZDO_LEAVE_CNF_CBID])( cnf ) == NULL ) )
        MOV     DPTR,#zdoCBFunc + 10
        LCALL   ??Subroutine54_0 & 0xFFFF
??CrossCallReturnLabel_104:
        JZ      ??ZDO_LeaveCnf_1
        ; Setup parameters for indirect call
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??Subroutine57_0 & 0xFFFF
??CrossCallReturnLabel_118:
        LCALL   ?CALL_IND
        MOV     ?V1,R3
        MOV     A,R2
        ORL     A,?V1
        JNZ     ??ZDO_LeaveCnf_2
// 2814     {
// 2815       // Prepare to leave with reset
// 2816       ZDApp_LeaveReset( cnf->rejoin );
??ZDO_LeaveCnf_1:
        ; Setup parameters for call to function ZDApp_LeaveReset
        LCALL   ?Subroutine33 & 0xFFFF
// 2817     }
// 2818   }
??CrossCallReturnLabel_128:
        MOV     R1,A
        LCALL   `??ZDApp_LeaveReset::?relay`; Banked call to: ZDApp_LeaveReset
        SJMP    ??ZDO_LeaveCnf_2
// 2819   else if ( ZSTACK_ROUTER_BUILD )
// 2820   {
// 2821     // Remove device address(optionally descendents) from data
// 2822     ZDApp_LeaveUpdate( cnf->dstAddr,
// 2823                        cnf->extAddr,
// 2824                        cnf->removeChildren );
??ZDO_LeaveCnf_0:
        ; Setup parameters for call to function ZDApp_LeaveUpdate
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine19 & 0xFFFF
// 2825   }
??CrossCallReturnLabel_9:
        LCALL   `??ZDApp_LeaveUpdate::?relay`; Banked call to: ZDApp_LeaveUpdate
// 2826 }
??ZDO_LeaveCnf_2:
        LJMP    ??Subroutine51_0 & 0xFFFF
          CFI EndBlock cfiBlock188

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine35:
          CFI Block cfiCond189 Using cfiCommon0
          CFI Function ZDO_JoinConfirmCB
          CFI Conditional ??CrossCallReturnLabel_39
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond190 Using cfiCommon0
          CFI (cfiCond190) Function ZDO_LeaveCnf
          CFI (cfiCond190) Conditional ??CrossCallReturnLabel_40
          CFI (cfiCond190) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond190) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond190) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond190) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond190) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond190) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond190) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond190) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond190) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond190) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond190) CFA_SP SP+-2
          CFI (cfiCond190) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond191 Using cfiCommon0
          CFI (cfiCond191) Function ZDApp_InMsgCB
          CFI (cfiCond191) Conditional ??CrossCallReturnLabel_41
          CFI (cfiCond191) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond191) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond191) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond191) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond191) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond191) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond191) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond191) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond191) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond191) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond191) CFA_SP SP+-2
          CFI (cfiCond191) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker192 Using cfiCommon1
          CFI (cfiPicker192) NoFunction
          CFI (cfiPicker192) Picker
        MOV     A,R6
        ADD     A,#0x2
        MOV     R2,A
        CLR     A
        ADDC    A,R7
        MOV     R3,A
        RET
          CFI EndBlock cfiCond189
          CFI EndBlock cfiCond190
          CFI EndBlock cfiCond191
          CFI EndBlock cfiPicker192

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine18:
          CFI Block cfiCond193 Using cfiCommon0
          CFI Function ZDO_NetworkDiscoveryConfirmCB
          CFI Conditional ??CrossCallReturnLabel_120
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI CFA_XSP16 add(XSP16, 3)
          CFI Block cfiCond194 Using cfiCommon0
          CFI (cfiCond194) Function ZDO_PermitJoinCB
          CFI (cfiCond194) Conditional ??CrossCallReturnLabel_121
          CFI (cfiCond194) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond194) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond194) CFA_SP SP+-7
          CFI (cfiCond194) CFA_XSP16 add(XSP16, 1)
          CFI Block cfiCond195 Using cfiCommon0
          CFI (cfiCond195) Function ZDO_ConcentratorIndicationCB
          CFI (cfiCond195) Conditional ??CrossCallReturnLabel_122
          CFI (cfiCond195) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond195) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond195) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond195) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond195) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond195) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond195) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond195) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond195) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond195) CFA_SP SP+-2
          CFI (cfiCond195) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond196 Using cfiCommon0
          CFI (cfiCond196) Function ZDO_SrcRtgIndCB
          CFI (cfiCond196) Conditional ??CrossCallReturnLabel_123
          CFI (cfiCond196) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond196) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond196) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond196) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond196) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond196) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond196) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond196) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond196) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond196) CFA_SP SP+-2
          CFI (cfiCond196) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker197 Using cfiCommon1
          CFI (cfiPicker197) NoFunction
          CFI (cfiPicker197) Picker
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
          CFI EndBlock cfiCond193
          CFI EndBlock cfiCond194
          CFI EndBlock cfiCond195
          CFI EndBlock cfiCond196
          CFI EndBlock cfiPicker197
        REQUIRE ??Subroutine57_0
        ; // Fall through to label ??Subroutine57_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine57_0:
          CFI Block cfiCond198 Using cfiCommon0
          CFI Function ZDApp_ProcessSecEvent
          CFI Conditional ??CrossCallReturnLabel_112
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond199 Using cfiCommon0
          CFI (cfiCond199) Function ZDApp_ProcessOSALMsg
          CFI (cfiCond199) Conditional ??CrossCallReturnLabel_113
          CFI (cfiCond199) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond199) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond199) CFA_SP SP+-7
          CFI Block cfiCond200 Using cfiCommon0
          CFI (cfiCond200) Function ZDApp_LeaveUpdate
          CFI (cfiCond200) Conditional ??CrossCallReturnLabel_114
          CFI (cfiCond200) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond200) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond200) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond200) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond200) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond200) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond200) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond200) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond200) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond200) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond200) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond200) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond200) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond200) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond200) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond200) CFA_SP SP+-2
          CFI (cfiCond200) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond201 Using cfiCommon0
          CFI (cfiCond201) Function ZDO_beaconNotifyIndCB
          CFI (cfiCond201) Conditional ??CrossCallReturnLabel_115
          CFI (cfiCond201) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond201) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond201) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond201) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond201) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond201) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond201) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond201) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond201) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond201) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond201) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond201) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond201) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond201) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond201) CFA_SP SP+-2
          CFI (cfiCond201) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond202 Using cfiCommon0
          CFI (cfiCond202) Function ZDO_JoinConfirmCB
          CFI (cfiCond202) Conditional ??CrossCallReturnLabel_116
          CFI (cfiCond202) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond202) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond202) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond202) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond202) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond202) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond202) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond202) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond202) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond202) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond202) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond202) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond202) CFA_SP SP+-2
          CFI (cfiCond202) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond203 Using cfiCommon0
          CFI (cfiCond203) Function ZDO_AddrChangeIndicationCB
          CFI (cfiCond203) Conditional ??CrossCallReturnLabel_117
          CFI (cfiCond203) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond203) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond203) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond203) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond203) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond203) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond203) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond203) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond203) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond203) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond203) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond203) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond203) CFA_SP SP+-2
          CFI (cfiCond203) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond204 Using cfiCommon0
          CFI (cfiCond204) Function ZDO_LeaveCnf
          CFI (cfiCond204) Conditional ??CrossCallReturnLabel_118
          CFI (cfiCond204) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond204) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond204) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond204) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond204) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond204) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond204) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond204) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond204) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond204) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond204) CFA_SP SP+-2
          CFI (cfiCond204) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond205 Using cfiCommon0
          CFI (cfiCond205) Function ZDO_LeaveInd
          CFI (cfiCond205) Conditional ??CrossCallReturnLabel_119
          CFI (cfiCond205) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond205) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond205) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond205) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond205) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond205) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond205) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond205) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond205) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond205) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond205) CFA_SP SP+-2
          CFI (cfiCond205) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond206 Using cfiCommon0
          CFI (cfiCond206) Function ZDO_NetworkDiscoveryConfirmCB
          CFI (cfiCond206) Conditional ??CrossCallReturnLabel_120
          CFI (cfiCond206) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond206) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond206) CFA_SP SP+-7
          CFI (cfiCond206) CFA_XSP16 add(XSP16, 3)
          CFI Block cfiCond207 Using cfiCommon0
          CFI (cfiCond207) Function ZDO_PermitJoinCB
          CFI (cfiCond207) Conditional ??CrossCallReturnLabel_121
          CFI (cfiCond207) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond207) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond207) CFA_SP SP+-7
          CFI (cfiCond207) CFA_XSP16 add(XSP16, 1)
          CFI Block cfiCond208 Using cfiCommon0
          CFI (cfiCond208) Function ZDO_ConcentratorIndicationCB
          CFI (cfiCond208) Conditional ??CrossCallReturnLabel_122
          CFI (cfiCond208) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond208) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond208) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond208) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond208) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond208) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond208) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond208) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond208) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond208) CFA_SP SP+-2
          CFI (cfiCond208) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond209 Using cfiCommon0
          CFI (cfiCond209) Function ZDO_SrcRtgIndCB
          CFI (cfiCond209) Conditional ??CrossCallReturnLabel_123
          CFI (cfiCond209) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond209) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond209) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond209) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond209) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond209) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond209) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond209) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond209) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond209) CFA_SP SP+-2
          CFI (cfiCond209) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker210 Using cfiCommon1
          CFI (cfiPicker210) NoFunction
          CFI (cfiPicker210) Picker
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        RET
          CFI EndBlock cfiCond198
          CFI EndBlock cfiCond199
          CFI EndBlock cfiCond200
          CFI EndBlock cfiCond201
          CFI EndBlock cfiCond202
          CFI EndBlock cfiCond203
          CFI EndBlock cfiCond204
          CFI EndBlock cfiCond205
          CFI EndBlock cfiCond206
          CFI EndBlock cfiCond207
          CFI EndBlock cfiCond208
          CFI EndBlock cfiCond209
          CFI EndBlock cfiPicker210
// 2827 
// 2828 /*********************************************************************
// 2829  * @fn          ZDO_LeaveInd
// 2830  *
// 2831  * @brief       This function allows the next higher layer of a
// 2832  *              device to be notified of a remote leave request or
// 2833  *              indication.
// 2834  *
// 2835  * @param       ind - NLME_LeaveInd_t
// 2836  *
// 2837  * @return      none
// 2838  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2839 void ZDO_LeaveInd( NLME_LeaveInd_t* ind )
ZDO_LeaveInd:
          CFI Block cfiBlock211 Using cfiCommon0
          CFI Function ZDO_LeaveInd
        CODE
// 2840 {
        FUNCALL ZDO_LeaveInd, NLME_LeaveRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_LeaveInd, NLME_GetCoordShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_LeaveInd, ZDApp_LeaveReset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_LeaveInd, ZDApp_LeaveUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 2841   uint8 leave;
// 2842 
// 2843 
// 2844   // Parent is requesting the leave - NWK layer filters out illegal
// 2845   // requests
// 2846   if ( ind->request == TRUE )
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDO_LeaveInd_0
// 2847   {
// 2848     // Only respond if we are not rejoining the network
// 2849     if ( ind->rejoin == FALSE )
        LCALL   ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_34:
        JNZ     ??ZDO_LeaveInd_1
// 2850     {
// 2851       // Notify network of leave
// 2852       NLME_LeaveRsp_t rsp;
// 2853       rsp.rejoin = ind->rejoin;
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
// 2854 
// 2855       if ( ZSTACK_ROUTER_BUILD )
// 2856       {
// 2857         rsp.removeChildren = ind->removeChildren;
        LCALL   ?Subroutine33 & 0xFFFF
// 2858       }
// 2859       else if ( ZSTACK_END_DEVICE_BUILD )
// 2860       {
// 2861         rsp.removeChildren = 0;
// 2862       }
// 2863 
// 2864       NLME_LeaveRsp( &rsp );
// 2865     }
// 2866 
// 2867     if ( ZSTACK_END_DEVICE_BUILD )
// 2868     {
// 2869       // Stop polling and get ready to reset
// 2870       NLME_SetPollRate( 0 );
// 2871     }
// 2872 
// 2873     // Prepare to leave with reset
// 2874     ZDApp_LeaveReset( ind->rejoin );
// 2875   }
??CrossCallReturnLabel_129:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_8:
        LCALL   `??NLME_LeaveRsp::?relay`; Banked call to: NLME_LeaveRsp
        SJMP    ??ZDO_LeaveInd_1
// 2876   else
// 2877   {
// 2878     leave = FALSE;
// 2879 
// 2880     // Check if this device needs to leave as a child or descendent
// 2881     if ( ind->srcAddr == NLME_GetCoordShortAddr() )
??ZDO_LeaveInd_0:
        ; Setup parameters for call to function NLME_GetCoordShortAddr
        LCALL   `??NLME_GetCoordShortAddr::?relay`; Banked call to: NLME_GetCoordShortAddr
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     R0,?V0
        MOV     R1,?V1
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??ZDO_LeaveInd_2
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??ZDO_LeaveInd_2:
        JNZ     ??ZDO_LeaveInd_3
// 2882     {
// 2883       if ( ( ind->removeChildren == TRUE               ) ||
// 2884            ( ZDO_Config_Node_Descriptor.LogicalType ==
// 2885              NODETYPE_DEVICE                           )    )
        LCALL   ?Subroutine33 & 0xFFFF
// 2886       {
// 2887         leave = TRUE;
// 2888       }
// 2889     }
??CrossCallReturnLabel_130:
        XRL     A,#0x1
        JZ      ??ZDO_LeaveInd_1
        LCALL   ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_21:
        JNZ     ??ZDO_LeaveInd_3
// 2890     else if ( ind->removeChildren == TRUE )
// 2891     {
// 2892       // Check NWK address allocation algorithm
// 2893       //leave = RTG_ANCESTOR(nwkAddr,thisAddr);
// 2894     }
// 2895 
// 2896     if ( leave == TRUE )
// 2897     {
// 2898       // Prepare to leave with reset
// 2899       ZDApp_LeaveReset( ind->rejoin );
??ZDO_LeaveInd_1:
        ; Setup parameters for call to function ZDApp_LeaveReset
        LCALL   ?Subroutine32 & 0xFFFF
// 2900     }
??CrossCallReturnLabel_35:
        MOV     R1,A
        LCALL   `??ZDApp_LeaveReset::?relay`; Banked call to: ZDApp_LeaveReset
        SJMP    ??ZDO_LeaveInd_4
// 2901     else
// 2902     {
// 2903       // Remove device address(optionally descendents) from data
// 2904       ZDApp_LeaveUpdate( ind->srcAddr,
// 2905                          ind->extAddr,
// 2906                          ind->removeChildren );
??ZDO_LeaveInd_3:
        ; Setup parameters for call to function ZDApp_LeaveUpdate
        MOV     A,R6
        ADD     A,#0xb
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        LCALL   ?Subroutine19 & 0xFFFF
// 2907     }
// 2908   }
??CrossCallReturnLabel_10:
        LCALL   `??ZDApp_LeaveUpdate::?relay`; Banked call to: ZDApp_LeaveUpdate
// 2909 
// 2910   // Pass the leave indication to higher layer if callback registered.
// 2911   if (zdoCBFunc[ZDO_LEAVE_IND_CBID] != NULL)
??ZDO_LeaveInd_4:
        MOV     DPTR,#zdoCBFunc + 12
        LCALL   ??Subroutine54_0 & 0xFFFF
??CrossCallReturnLabel_105:
        JZ      ??ZDO_LeaveInd_5
// 2912   {
// 2913     (void)zdoCBFunc[ZDO_LEAVE_IND_CBID](ind);
        ; Setup parameters for indirect call
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??Subroutine57_0 & 0xFFFF
// 2914   }
??CrossCallReturnLabel_119:
        LCALL   ?CALL_IND
// 2915 }
??ZDO_LeaveInd_5:
        LJMP    ?Subroutine8 & 0xFFFF
          CFI EndBlock cfiBlock211

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine32:
          CFI Block cfiCond212 Using cfiCommon0
          CFI Function ZDApp_ProcessMsgCBs
          CFI Conditional ??CrossCallReturnLabel_32
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 56)
          CFI Block cfiCond213 Using cfiCommon0
          CFI (cfiCond213) Function ZDApp_ProcessMsgCBs
          CFI (cfiCond213) Conditional ??CrossCallReturnLabel_33
          CFI (cfiCond213) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond213) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond213) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond213) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond213) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond213) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond213) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond213) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond213) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond213) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond213) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond213) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond213) CFA_SP SP+-2
          CFI (cfiCond213) CFA_XSP16 add(XSP16, 56)
          CFI Block cfiCond214 Using cfiCommon0
          CFI (cfiCond214) Function ZDO_LeaveInd
          CFI (cfiCond214) Conditional ??CrossCallReturnLabel_34
          CFI (cfiCond214) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond214) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond214) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond214) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond214) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond214) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond214) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond214) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond214) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond214) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond214) CFA_SP SP+-2
          CFI (cfiCond214) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond215 Using cfiCommon0
          CFI (cfiCond215) Function ZDO_LeaveInd
          CFI (cfiCond215) Conditional ??CrossCallReturnLabel_35
          CFI (cfiCond215) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond215) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond215) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond215) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond215) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond215) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond215) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond215) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond215) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond215) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond215) CFA_SP SP+-2
          CFI (cfiCond215) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond216 Using cfiCommon0
          CFI (cfiCond216) Function ZDApp_InMsgCB
          CFI (cfiCond216) Conditional ??CrossCallReturnLabel_36
          CFI (cfiCond216) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond216) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond216) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond216) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond216) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond216) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond216) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond216) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond216) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond216) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond216) CFA_SP SP+-2
          CFI (cfiCond216) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker217 Using cfiCommon1
          CFI (cfiPicker217) NoFunction
          CFI (cfiPicker217) Picker
        LCALL   ?Subroutine43 & 0xFFFF
??CrossCallReturnLabel_56:
        RET
          CFI EndBlock cfiCond212
          CFI EndBlock cfiCond213
          CFI EndBlock cfiCond214
          CFI EndBlock cfiCond215
          CFI EndBlock cfiCond216
          CFI EndBlock cfiPicker217

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine43:
          CFI Block cfiCond218 Using cfiCommon0
          CFI Function ZDApp_ProcessMsgCBs
          CFI Conditional ??CrossCallReturnLabel_56, ??CrossCallReturnLabel_32
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 56)
          CFI Block cfiCond219 Using cfiCommon0
          CFI (cfiCond219) Function ZDApp_ProcessMsgCBs
          CFI (cfiCond219) Conditional ??CrossCallReturnLabel_56, ??CrossCallReturnLabel_33
          CFI (cfiCond219) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond219) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond219) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond219) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond219) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond219) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond219) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond219) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond219) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond219) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond219) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond219) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond219) CFA_SP SP+-4
          CFI (cfiCond219) CFA_XSP16 add(XSP16, 56)
          CFI Block cfiCond220 Using cfiCommon0
          CFI (cfiCond220) Function ZDO_LeaveInd
          CFI (cfiCond220) Conditional ??CrossCallReturnLabel_56, ??CrossCallReturnLabel_34
          CFI (cfiCond220) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond220) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond220) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond220) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond220) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond220) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond220) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond220) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond220) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond220) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond220) CFA_SP SP+-4
          CFI (cfiCond220) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond221 Using cfiCommon0
          CFI (cfiCond221) Function ZDO_LeaveInd
          CFI (cfiCond221) Conditional ??CrossCallReturnLabel_56, ??CrossCallReturnLabel_35
          CFI (cfiCond221) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond221) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond221) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond221) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond221) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond221) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond221) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond221) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond221) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond221) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond221) CFA_SP SP+-4
          CFI (cfiCond221) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond222 Using cfiCommon0
          CFI (cfiCond222) Function ZDApp_InMsgCB
          CFI (cfiCond222) Conditional ??CrossCallReturnLabel_56, ??CrossCallReturnLabel_36
          CFI (cfiCond222) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond222) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond222) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond222) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond222) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond222) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond222) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond222) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond222) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond222) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond222) CFA_SP SP+-4
          CFI (cfiCond222) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond223 Using cfiCommon0
          CFI (cfiCond223) Function ZDApp_ProcessMsgCBs
          CFI (cfiCond223) Conditional ??CrossCallReturnLabel_55, ??CrossCallReturnLabel_30
          CFI (cfiCond223) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond223) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond223) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond223) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond223) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond223) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond223) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond223) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond223) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond223) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond223) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond223) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond223) CFA_SP SP+-4
          CFI (cfiCond223) CFA_XSP16 add(XSP16, 56)
          CFI Block cfiCond224 Using cfiCommon0
          CFI (cfiCond224) Function ZDApp_InMsgCB
          CFI (cfiCond224) Conditional ??CrossCallReturnLabel_55, ??CrossCallReturnLabel_31
          CFI (cfiCond224) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond224) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond224) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond224) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond224) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond224) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond224) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond224) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond224) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond224) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond224) CFA_SP SP+-4
          CFI (cfiCond224) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker225 Using cfiCommon1
          CFI (cfiPicker225) NoFunction
          CFI (cfiPicker225) Picker
        LCALL   ?Subroutine44 & 0xFFFF
??CrossCallReturnLabel_58:
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond218
          CFI EndBlock cfiCond219
          CFI EndBlock cfiCond220
          CFI EndBlock cfiCond221
          CFI EndBlock cfiCond222
          CFI EndBlock cfiCond223
          CFI EndBlock cfiCond224
          CFI EndBlock cfiPicker225

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine19:
          CFI Block cfiCond226 Using cfiCommon0
          CFI Function ZDO_LeaveCnf
          CFI Conditional ??CrossCallReturnLabel_9
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond227 Using cfiCommon0
          CFI (cfiCond227) Function ZDO_LeaveInd
          CFI (cfiCond227) Conditional ??CrossCallReturnLabel_10
          CFI (cfiCond227) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond227) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond227) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond227) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond227) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond227) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond227) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond227) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond227) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond227) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond227) CFA_SP SP+-2
          CFI (cfiCond227) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker228 Using cfiCommon1
          CFI (cfiPicker228) NoFunction
          CFI (cfiPicker228) Picker
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R6
        ADD     A,#0x2
        MOV     R4,A
        CLR     A
        ADDC    A,R7
        MOV     R5,A
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        RET
          CFI EndBlock cfiCond226
          CFI EndBlock cfiCond227
          CFI EndBlock cfiPicker228
// 2916 
// 2917 /*********************************************************************
// 2918  * @fn          ZDO_SyncIndicationCB
// 2919  *
// 2920  * @brief       This function allows the next higher layer of a
// 2921  *              coordinator to be notified of a loss of synchronization
// 2922  *                          with the parent/child device.
// 2923  *
// 2924  * @param       type: 0 - child; 1 - parent
// 2925  *
// 2926  *
// 2927  * @return      none
// 2928  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2929 void ZDO_SyncIndicationCB( uint8 type, uint16 shortAddr )
ZDO_SyncIndicationCB:
          CFI Block cfiBlock229 Using cfiCommon0
          CFI Function ZDO_SyncIndicationCB
        CODE
// 2930 {
        FUNCALL ZDO_SyncIndicationCB, nwkNeighborInitTable
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_SyncIndicationCB, ZDApp_SendMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
// 2931   (void)shortAddr;  // Remove this line if this parameter is used.
// 2932 
// 2933   if ( ZSTACK_END_DEVICE_BUILD
// 2934     || (ZSTACK_ROUTER_BUILD && ((_NIB.CapabilityFlags & ZMAC_ASSOC_CAPINFO_FFD_TYPE) == 0)))
        MOV     DPTR,#_NIB + 14
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.1
        JC      ??ZDO_SyncIndicationCB_0
// 2935   {
// 2936     if ( type == 1 )
        MOV     A,#0x1
        XRL     A,R6
        JNZ     ??ZDO_SyncIndicationCB_0
// 2937     {
// 2938       // We lost contact with our parent.  Clear the neighbor Table.
// 2939       nwkNeighborInitTable();
        ; Setup parameters for call to function nwkNeighborInitTable
        LCALL   `??nwkNeighborInitTable::?relay`; Banked call to: nwkNeighborInitTable
// 2940 
// 2941       // Start the rejoin process.
// 2942       ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_JOIN_REQ, sizeof(osal_event_hdr_t), NULL );
        ; Setup parameters for call to function ZDApp_SendMsg
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R3,#0x2
        MOV     R2,#0x3
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??ZDApp_SendMsg::?relay`; Banked call to: ZDApp_SendMsg
// 2943     }
// 2944   }
// 2945 }
??ZDO_SyncIndicationCB_0:
        LJMP    ??Subroutine56_0 & 0xFFFF
          CFI EndBlock cfiBlock229
// 2946 
// 2947 /*********************************************************************
// 2948  * @fn          ZDO_ManytoOneFailureIndicationCB
// 2949  *
// 2950  * @brief       This function allows the next higher layer of a
// 2951  *              concentrator to be notified of a many-to-one route
// 2952  *              failure.
// 2953  *
// 2954  * @param       none
// 2955  *
// 2956  *
// 2957  * @return      none
// 2958  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2959 void ZDO_ManytoOneFailureIndicationCB()
ZDO_ManytoOneFailureIndicationCB:
          CFI Block cfiBlock230 Using cfiCommon0
          CFI Function ZDO_ManytoOneFailureIndicationCB
        CODE
// 2960 {
        FUNCALL ZDO_ManytoOneFailureIndicationCB, RTG_MTORouteReq
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 2961   // By default, the concentrator automatically redo many-to-one route
// 2962   // discovery to update all many-to-one routes in the network
// 2963   // If you want anything processing other than the default,
// 2964   // please replace the following code.
// 2965 
// 2966   RTG_MTORouteReq();
        ; Setup parameters for call to function RTG_MTORouteReq
        LCALL   `??RTG_MTORouteReq::?relay`; Banked call to: RTG_MTORouteReq
// 2967 }
        LJMP    ??Subroutine49_0 & 0xFFFF
          CFI EndBlock cfiBlock230
// 2968 
// 2969 /*********************************************************************
// 2970  * @fn          ZDO_PollConfirmCB
// 2971  *
// 2972  * @brief       This function allows the next higher layer to be
// 2973  *              notified of a Poll Confirm.
// 2974  *
// 2975  * @param       none
// 2976  *
// 2977  * @return      none
// 2978  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2979 void ZDO_PollConfirmCB( uint8 status )
ZDO_PollConfirmCB:
          CFI Block cfiBlock231 Using cfiCommon0
          CFI Function ZDO_PollConfirmCB
        CODE
// 2980 {
        ; Saved register size: 0
        ; Auto size: 0
// 2981   (void)status;  // Remove this line if this parameter is used.
// 2982   return;
        LJMP    ?BRET
// 2983 }
          CFI EndBlock cfiBlock231
// 2984 
// 2985 /*********************************************************************
// 2986  * @fn          ZDO_NetworkStatusCB
// 2987  *
// 2988  * @brief       Network Status Callback function
// 2989  *
// 2990  * @param       nwkDstAddr - message's destination address- used to determine
// 2991  *                           if the message was intended for this device or
// 2992  *                           a sleeping end device.
// 2993  * @param       statusCode - message's status code (ie. NWKSTAT_NONTREE_LINK_FAILURE)
// 2994  * @param       dstAddr - the destination address related to the status code
// 2995  *
// 2996  * @return      none
// 2997  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2998 void ZDO_NetworkStatusCB( uint16 nwkDstAddr, uint8 statusCode, uint16 dstAddr )
ZDO_NetworkStatusCB:
          CFI Block cfiBlock232 Using cfiCommon0
          CFI Function ZDO_NetworkStatusCB
        CODE
// 2999 {
        FUNCALL ZDO_NetworkStatusCB, NLME_GetShortAddr
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 3000   (void)dstAddr;     // Remove this line if this parameter is used.
// 3001 
// 3002   if ( (nwkDstAddr == NLME_GetShortAddr())
// 3003       && (statusCode == NWKSTAT_NONTREE_LINK_FAILURE) )
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
// 3004   {
// 3005     // Routing error for dstAddr, this is informational and a Route
// 3006     // Request should happen automatically.
// 3007   }
// 3008 }
        LJMP    ??Subroutine49_0 & 0xFFFF
          CFI EndBlock cfiBlock232
// 3009 
// 3010 /******************************************************************************
// 3011  * @fn          ZDApp_NwkWriteNVRequest (stubs AddrMgrWriteNVRequest)
// 3012  *
// 3013  * @brief       Stub routine implemented by NHLE. NHLE should call
// 3014  *              <AddrMgrWriteNV> when appropriate.
// 3015  *
// 3016  * @param       none
// 3017  *
// 3018  * @return      none
// 3019  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3020 void ZDApp_NwkWriteNVRequest( void )
AddrMgrWriteNVRequest:
          CFI Block cfiBlock233 Using cfiCommon0
          CFI Function AddrMgrWriteNVRequest
        CODE
// 3021 {
        ; Saved register size: 0
        ; Auto size: 0
// 3022 #if defined ( NV_RESTORE )
// 3023   if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV ) )
// 3024   {
// 3025     // Trigger to save info into NV
// 3026     ZDApp_NVUpdate();
// 3027   }
// 3028 #endif
// 3029 }
        LJMP    ?BRET
          CFI EndBlock cfiBlock233
// 3030 
// 3031 /*********************************************************************
// 3032  * Call Back Functions from Security  - API
// 3033  */
// 3034 
// 3035  /*********************************************************************
// 3036  * @fn          ZDO_UpdateDeviceIndication
// 3037  *
// 3038  * @brief       This function notifies the "Trust Center" of a
// 3039  *              network when a device joins or leaves the network.
// 3040  *
// 3041  * @param       extAddr - pointer to 64 bit address of new device
// 3042  * @param       status  - 0 if a new device joined securely
// 3043  *                      - 1 if a new device joined un-securely
// 3044  *                      - 2 if a device left the network
// 3045  *
// 3046  * @return      true if newly joined device should be allowed to
// 3047  *                                              remain on network
// 3048  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3049 ZStatus_t ZDO_UpdateDeviceIndication( uint8 *extAddr, uint8 status )
ZDO_UpdateDeviceIndication:
          CFI Block cfiBlock234 Using cfiCommon0
          CFI Function ZDO_UpdateDeviceIndication
        CODE
// 3050 {
        ; Saved register size: 0
        ; Auto size: 0
// 3051   // can implement a network access policy based on the
// 3052   // IEEE address of newly joining devices...
// 3053   (void)extAddr;
// 3054   (void)status;
// 3055 
// 3056   return ZSuccess;
        MOV     R1,#0x0
        LJMP    ?BRET
// 3057 }
          CFI EndBlock cfiBlock234
// 3058 
// 3059 /*********************************************************************
// 3060  * @fn          ZDApp_InMsgCB
// 3061  *
// 3062  * @brief       This function is called to pass up any message that is
// 3063  *              not yet supported.  This allows for the developer to
// 3064  *              support features themselves..
// 3065  *
// 3066  * @return      none
// 3067  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3068 void ZDApp_InMsgCB( zdoIncomingMsg_t *inMsg )
ZDApp_InMsgCB:
          CFI Block cfiBlock235 Using cfiCommon0
          CFI Function ZDApp_InMsgCB
        CODE
// 3069 {
        FUNCALL ZDApp_InMsgCB, ZDP_GenericRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 3070   if ( inMsg->clusterID & ZDO_RESPONSE_BIT )
        LCALL   ?Subroutine44 & 0xFFFF
??CrossCallReturnLabel_57:
        INC     DPTR
        MOVX    A,@DPTR
        ANL     A,#0x80
        JNZ     ??ZDApp_InMsgCB_0
// 3071   {
// 3072     // Handle the response message
// 3073   }
// 3074   else
// 3075   {
// 3076     // Handle the request message by sending a generic "not supported".
// 3077     // Device Announce doesn't have a response.
// 3078     if ( !(inMsg->wasBroadcast) && inMsg->clusterID != Device_annce )
        LCALL   ?Subroutine33 & 0xFFFF
??CrossCallReturnLabel_131:
        JNZ     ??ZDApp_InMsgCB_0
        LCALL   ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_36:
        XRL     A,#0x13
        JNZ     ??ZDApp_InMsgCB_1
        INC     DPTR
        MOVX    A,@DPTR
??ZDApp_InMsgCB_1:
        JZ      ??ZDApp_InMsgCB_0
// 3079     {
// 3080       ZDP_GenericRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_NOT_SUPPORTED, 0,
// 3081                       (uint16)(inMsg->clusterID | ZDO_RESPONSE_BIT), inMsg->SecurityUse );
        ; Setup parameters for call to function ZDP_GenericRsp
        LCALL   ?Subroutine31 & 0xFFFF
// 3082     }
// 3083   }
??CrossCallReturnLabel_31:
        ORL     A,#0x80
        MOV     ?V1,A
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        CLR     A
        MOV     ?V0,A
        MOV     ?V1,A
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     A,R6
        ADD     A,#0xe
        LCALL   ??Subroutine58_0 & 0xFFFF
??CrossCallReturnLabel_125:
        MOV     R5,A
        MOV     R4,#-0x7c
        LCALL   ?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_41:
        MOV     A,R6
        ADD     A,#0xf
        LCALL   ??Subroutine58_0 & 0xFFFF
??CrossCallReturnLabel_126:
        MOV     R1,A
        LCALL   `??ZDP_GenericRsp::?relay`; Banked call to: ZDP_GenericRsp
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
// 3084 }
??ZDApp_InMsgCB_0:
        LJMP    ??Subroutine51_0 & 0xFFFF
          CFI EndBlock cfiBlock235

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine44:
          CFI Block cfiCond236 Using cfiCommon0
          CFI Function ZDApp_ProcessMsgCBs
          CFI Conditional ??CrossCallReturnLabel_58, ??CrossCallReturnLabel_56, ??CrossCallReturnLabel_32
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-6
          CFI CFA_XSP16 add(XSP16, 56)
          CFI Block cfiCond237 Using cfiCommon0
          CFI (cfiCond237) Function ZDApp_ProcessMsgCBs
          CFI (cfiCond237) Conditional ??CrossCallReturnLabel_58, ??CrossCallReturnLabel_56, ??CrossCallReturnLabel_33
          CFI (cfiCond237) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond237) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond237) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond237) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond237) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond237) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond237) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond237) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond237) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond237) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond237) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond237) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond237) CFA_SP SP+-6
          CFI (cfiCond237) CFA_XSP16 add(XSP16, 56)
          CFI Block cfiCond238 Using cfiCommon0
          CFI (cfiCond238) Function ZDO_LeaveInd
          CFI (cfiCond238) Conditional ??CrossCallReturnLabel_58, ??CrossCallReturnLabel_56, ??CrossCallReturnLabel_34
          CFI (cfiCond238) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond238) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond238) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond238) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond238) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond238) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond238) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond238) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond238) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond238) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond238) CFA_SP SP+-6
          CFI (cfiCond238) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond239 Using cfiCommon0
          CFI (cfiCond239) Function ZDO_LeaveInd
          CFI (cfiCond239) Conditional ??CrossCallReturnLabel_58, ??CrossCallReturnLabel_56, ??CrossCallReturnLabel_35
          CFI (cfiCond239) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond239) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond239) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond239) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond239) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond239) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond239) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond239) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond239) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond239) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond239) CFA_SP SP+-6
          CFI (cfiCond239) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond240 Using cfiCommon0
          CFI (cfiCond240) Function ZDApp_InMsgCB
          CFI (cfiCond240) Conditional ??CrossCallReturnLabel_58, ??CrossCallReturnLabel_56, ??CrossCallReturnLabel_36
          CFI (cfiCond240) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond240) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond240) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond240) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond240) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond240) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond240) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond240) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond240) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond240) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond240) CFA_SP SP+-6
          CFI (cfiCond240) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond241 Using cfiCommon0
          CFI (cfiCond241) Function ZDApp_ProcessMsgCBs
          CFI (cfiCond241) Conditional ??CrossCallReturnLabel_58, ??CrossCallReturnLabel_55, ??CrossCallReturnLabel_30
          CFI (cfiCond241) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond241) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond241) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond241) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond241) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond241) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond241) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond241) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond241) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond241) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond241) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond241) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond241) CFA_SP SP+-6
          CFI (cfiCond241) CFA_XSP16 add(XSP16, 56)
          CFI Block cfiCond242 Using cfiCommon0
          CFI (cfiCond242) Function ZDApp_InMsgCB
          CFI (cfiCond242) Conditional ??CrossCallReturnLabel_58, ??CrossCallReturnLabel_55, ??CrossCallReturnLabel_31
          CFI (cfiCond242) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond242) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond242) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond242) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond242) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond242) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond242) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond242) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond242) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond242) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond242) CFA_SP SP+-6
          CFI (cfiCond242) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond243 Using cfiCommon0
          CFI (cfiCond243) Function ZDApp_InMsgCB
          CFI (cfiCond243) Conditional ??CrossCallReturnLabel_57
          CFI (cfiCond243) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond243) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond243) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond243) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond243) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond243) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond243) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond243) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond243) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond243) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond243) CFA_SP SP+-2
          CFI (cfiCond243) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker244 Using cfiCommon1
          CFI (cfiPicker244) NoFunction
          CFI (cfiPicker244) Picker
        MOV     A,R6
        ADD     A,#0xc
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        RET
          CFI EndBlock cfiCond236
          CFI EndBlock cfiCond237
          CFI EndBlock cfiCond238
          CFI EndBlock cfiCond239
          CFI EndBlock cfiCond240
          CFI EndBlock cfiCond241
          CFI EndBlock cfiCond242
          CFI EndBlock cfiCond243
          CFI EndBlock cfiPicker244

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine31:
          CFI Block cfiCond245 Using cfiCommon0
          CFI Function ZDApp_ProcessMsgCBs
          CFI Conditional ??CrossCallReturnLabel_30
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 56)
          CFI Block cfiCond246 Using cfiCommon0
          CFI (cfiCond246) Function ZDApp_InMsgCB
          CFI (cfiCond246) Conditional ??CrossCallReturnLabel_31
          CFI (cfiCond246) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond246) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond246) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond246) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond246) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond246) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond246) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond246) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond246) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond246) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond246) CFA_SP SP+-2
          CFI (cfiCond246) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker247 Using cfiCommon1
          CFI (cfiPicker247) NoFunction
          CFI (cfiPicker247) Picker
        LCALL   ?Subroutine43 & 0xFFFF
??CrossCallReturnLabel_55:
        MOV     ?V0,A
        INC     DPTR
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond245
          CFI EndBlock cfiCond246
          CFI EndBlock cfiPicker247
// 3085 
// 3086 
// 3087 /*********************************************************************
// 3088  * @fn      ZDApp_ChangeMatchDescRespPermission()
// 3089  *
// 3090  * @brief   Changes the Match Descriptor Response permission.
// 3091  *
// 3092  * @param   endpoint - endpoint to allow responses
// 3093  * @param   action - true to allow responses, false to not
// 3094  *
// 3095  * @return  none
// 3096  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3097 void ZDApp_ChangeMatchDescRespPermission( uint8 endpoint, uint8 action )
ZDApp_ChangeMatchDescRespPermission:
          CFI Block cfiBlock248 Using cfiCommon0
          CFI Function ZDApp_ChangeMatchDescRespPermission
        CODE
// 3098 {
        FUNCALL ZDApp_ChangeMatchDescRespPermission, afSetMatch
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
// 3099   // Store the action
// 3100   afSetMatch( endpoint, action );
        ; Setup parameters for call to function afSetMatch
        LCALL   `??afSetMatch::?relay`; Banked call to: afSetMatch
// 3101 }
        LJMP    ??Subroutine56_0 & 0xFFFF
          CFI EndBlock cfiBlock248
// 3102 
// 3103 /*********************************************************************
// 3104  * @fn      ZDApp_NetworkInit()
// 3105  *
// 3106  * @brief   Used to start the network joining process
// 3107  *
// 3108  * @param   delay - mSec delay to wait before starting
// 3109  *
// 3110  * @return  none
// 3111  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3112 void ZDApp_NetworkInit( uint16 delay )
ZDApp_NetworkInit:
          CFI Block cfiBlock249 Using cfiCommon0
          CFI Function ZDApp_NetworkInit
        CODE
// 3113 {
        FUNCALL ZDApp_NetworkInit, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NetworkInit, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
// 3114   if ( delay )
        MOV     A,R2
        ORL     A,R3
        JZ      ??ZDApp_NetworkInit_0
// 3115   {
// 3116     // Wait awhile before starting the device
// 3117     osal_start_timerEx( ZDAppTaskID, ZDO_NETWORK_INIT, delay );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     ?V0,R2
        MOV     ?V1,R3
        CLR     A
        MOV     ?V2,A
        MOV     ?V3,A
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_FOUR
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        SJMP    ??ZDApp_NetworkInit_1
// 3118   }
// 3119   else
// 3120   {
// 3121     osal_set_event( ZDAppTaskID, ZDO_NETWORK_INIT );
??ZDApp_NetworkInit_0:
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
// 3122   }
// 3123 }
??ZDApp_NetworkInit_1:
        LJMP    ??Subroutine59_0 & 0xFFFF
          CFI EndBlock cfiBlock249
// 3124 
// 3125 /*********************************************************************
// 3126  * @fn      ZDApp_NwkStateUpdateCB()
// 3127  *
// 3128  * @brief   This function notifies that this device's network
// 3129  *          state info has been changed.
// 3130  *
// 3131  * @param   none
// 3132  *
// 3133  * @return  none
// 3134  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3135 void ZDApp_NwkStateUpdateCB( void )
ZDApp_NwkStateUpdateCB:
          CFI Block cfiBlock250 Using cfiCommon0
          CFI Function ZDApp_NwkStateUpdateCB
        CODE
// 3136 {
        FUNCALL ZDApp_NwkStateUpdateCB, osal_get_timeoutEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 3137   // Notify to save info into NV
// 3138   if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV ) )
        ; Setup parameters for call to function osal_get_timeoutEx
        MOV     R2,#0x0
        MOV     R3,#0x1
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
// 3139   {
// 3140     // Trigger to save info into NV
// 3141     ZDApp_NVUpdate();
// 3142   }
// 3143 }
        LJMP    ??Subroutine49_0 & 0xFFFF
          CFI EndBlock cfiBlock250
// 3144 
// 3145 /*********************************************************************
// 3146  * @fn      ZDApp_NodeProfileSync()
// 3147  *
// 3148  * @brief   Sync node with stack profile.
// 3149  *
// 3150  * @param   stackProfile - stack profile of the network to join
// 3151  *
// 3152  * @return  none
// 3153  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3154 void ZDApp_NodeProfileSync( uint8 stackProfile )
ZDApp_NodeProfileSync:
          CFI Block cfiBlock251 Using cfiCommon0
          CFI Function ZDApp_NodeProfileSync
        CODE
// 3155 {
        FUNCALL ZDApp_NodeProfileSync, NLME_SetBroadcastFilter
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
// 3156   if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_DEVICETYPE_FFD  )
        MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.1
        JNC     ??ZDApp_NodeProfileSync_0
// 3157   {
// 3158     if ( stackProfile != zgStackProfile )
        MOV     DPTR,#zgStackProfile
        MOVX    A,@DPTR
        XRL     A,R6
        JZ      ??ZDApp_NodeProfileSync_0
// 3159     {
// 3160       ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_DEVICE;
        MOV     DPTR,#ZDO_Config_Node_Descriptor
        MOVX    A,@DPTR
        ANL     A,#0xf8
        MOVX    @DPTR,A
        ORL     A,#0x2
        MOVX    @DPTR,A
// 3161       ZDO_Config_Node_Descriptor.CapabilityFlags = CAPINFO_DEVICETYPE_RFD | CAPINFO_POWER_AC | CAPINFO_RCVR_ON_IDLE;
        MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
        MOV     A,#0xc
        MOVX    @DPTR,A
// 3162       NLME_SetBroadcastFilter( ZDO_Config_Node_Descriptor.CapabilityFlags );
        ; Setup parameters for call to function NLME_SetBroadcastFilter
        MOV     R1,A
        LCALL   `??NLME_SetBroadcastFilter::?relay`; Banked call to: NLME_SetBroadcastFilter
// 3163     }
// 3164   }
// 3165 }
??ZDApp_NodeProfileSync_0:
        LJMP    ??Subroutine56_0 & 0xFFFF
          CFI EndBlock cfiBlock251
// 3166 
// 3167 /*********************************************************************
// 3168  * @fn      ZDApp_StartJoiningCycle()
// 3169  *
// 3170  * @brief   Starts the joining cycle of a device.  This will only
// 3171  *          continue an already started (or stopped) joining cycle.
// 3172  *
// 3173  * @param   none
// 3174  *
// 3175  * @return  TRUE if joining stopped, FALSE if joining or rejoining
// 3176  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3177 uint8 ZDApp_StartJoiningCycle( void )
ZDApp_StartJoiningCycle:
          CFI Block cfiBlock252 Using cfiCommon0
          CFI Function ZDApp_StartJoiningCycle
        CODE
// 3178 {
        FUNCALL ZDApp_StartJoiningCycle, ZDApp_NetworkInit
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 3179   if ( devState == DEV_INIT || devState == DEV_NWK_DISC )
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      ??ZDApp_StartJoiningCycle_0
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??ZDApp_StartJoiningCycle_1
// 3180   {
// 3181     continueJoining = TRUE;
??ZDApp_StartJoiningCycle_0:
        MOV     DPTR,#continueJoining
        MOV     A,#0x1
        MOVX    @DPTR,A
// 3182     ZDApp_NetworkInit( 0 );
        ; Setup parameters for call to function ZDApp_NetworkInit
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
// 3183 
// 3184     return ( TRUE );
        MOV     R1,#0x1
        SJMP    ??ZDApp_StartJoiningCycle_2
// 3185   }
// 3186   else
// 3187     return ( FALSE );
??ZDApp_StartJoiningCycle_1:
        MOV     R1,#0x0
??ZDApp_StartJoiningCycle_2:
        LJMP    ??Subroutine49_0 & 0xFFFF
// 3188 }
          CFI EndBlock cfiBlock252
// 3189 
// 3190 /*********************************************************************
// 3191  * @fn      ZDApp_StopJoiningCycle()
// 3192  *
// 3193  * @brief   Stops the joining or rejoining process of a device.
// 3194  *
// 3195  * @param   none
// 3196  *
// 3197  * @return  TRUE if joining stopped, FALSE if joining or rejoining
// 3198  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3199 uint8 ZDApp_StopJoiningCycle( void )
ZDApp_StopJoiningCycle:
          CFI Block cfiBlock253 Using cfiCommon0
          CFI Function ZDApp_StopJoiningCycle
        CODE
// 3200 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 3201   if ( devState == DEV_INIT || devState == DEV_NWK_DISC )
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      ??ZDApp_StopJoiningCycle_0
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??ZDApp_StopJoiningCycle_1
// 3202   {
// 3203     continueJoining = FALSE;
??ZDApp_StopJoiningCycle_0:
        MOV     DPTR,#continueJoining
        CLR     A
        MOVX    @DPTR,A
// 3204     return ( TRUE );
        MOV     R1,#0x1
        SJMP    ??ZDApp_StopJoiningCycle_2
// 3205   }
// 3206   else
// 3207     return ( FALSE );
??ZDApp_StopJoiningCycle_1:
        MOV     R1,#0x0
??ZDApp_StopJoiningCycle_2:
        LJMP    ??Subroutine49_0 & 0xFFFF
// 3208 }
          CFI EndBlock cfiBlock253
// 3209 
// 3210 /*********************************************************************
// 3211  * @fn      ZDApp_AnnounceNewAddress()
// 3212  *
// 3213  * @brief   Send Device Announce and hold all transmissions for
// 3214  *          new address timeout.
// 3215  *
// 3216  * @param   none
// 3217  *
// 3218  * @return  none
// 3219  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3220 void ZDApp_AnnounceNewAddress( void )
ZDApp_AnnounceNewAddress:
          CFI Block cfiBlock254 Using cfiCommon0
          CFI Function ZDApp_AnnounceNewAddress
        CODE
// 3221 {
        FUNCALL ZDApp_AnnounceNewAddress, APSME_HoldDataRequests
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_AnnounceNewAddress, NLME_GetExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_AnnounceNewAddress, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_AnnounceNewAddress, ZDP_DeviceAnnce
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_AnnounceNewAddress, APSME_HoldDataRequests
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 3222 #if defined ( ZIGBEE_NWK_UNIQUE_ADDR_CHECK )
// 3223   // Turn off data request hold
// 3224   APSME_HoldDataRequests( 0 );
        ; Setup parameters for call to function APSME_HoldDataRequests
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   `??APSME_HoldDataRequests::?relay`; Banked call to: APSME_HoldDataRequests
// 3225 #endif
// 3226 
// 3227   ZDP_DeviceAnnce( NLME_GetShortAddr(), NLME_GetExtAddr(),
// 3228                      ZDO_Config_Node_Descriptor.CapabilityFlags, 0 );
        ; Setup parameters for call to function NLME_GetExtAddr
        LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     R6,?V0
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
        ; Setup parameters for call to function ZDP_DeviceAnnce
        MOV     ?V0,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 11)
        MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R6
        MOV     R4,A
        MOV     R5,?V1
        LCALL   `??ZDP_DeviceAnnce::?relay`; Banked call to: ZDP_DeviceAnnce
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
// 3229 
// 3230 #if defined ( ZIGBEE_NWK_UNIQUE_ADDR_CHECK )
// 3231   // Setup the timeout
// 3232   APSME_HoldDataRequests( ZDAPP_HOLD_DATA_REQUESTS_TIMEOUT );
        ; Setup parameters for call to function APSME_HoldDataRequests
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   `??APSME_HoldDataRequests::?relay`; Banked call to: APSME_HoldDataRequests
// 3233 #endif
// 3234 }
        LJMP    ??Subroutine51_0 & 0xFFFF
          CFI EndBlock cfiBlock254
// 3235 
// 3236 /*********************************************************************
// 3237  * @fn          ZDApp_NVUpdate
// 3238  *
// 3239  * @brief       Set the NV Update Timer.
// 3240  *
// 3241  * @param       none
// 3242  *
// 3243  * @return      none
// 3244  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3245 void ZDApp_NVUpdate( void )
ZDApp_NVUpdate:
          CFI Block cfiBlock255 Using cfiCommon0
          CFI Function ZDApp_NVUpdate
        CODE
// 3246 {
        ; Saved register size: 0
        ; Auto size: 0
// 3247 #if defined ( NV_RESTORE )
// 3248   osal_start_timerEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV, ZDAPP_UPDATE_NWK_NV_TIME );
// 3249 #endif
// 3250 }
        LJMP    ?BRET
          CFI EndBlock cfiBlock255
// 3251 
// 3252 /*********************************************************************
// 3253  * @fn      ZDApp_CoordStartPANIDConflictCB()
// 3254  *
// 3255  * @brief   Returns a PAN ID for the network layer to use during
// 3256  *          a coordinator start and there is another network with
// 3257  *          the intended PANID.
// 3258  *
// 3259  * @param   panid - the intended PAN ID
// 3260  *
// 3261  * @return  PANID to try
// 3262  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3263 uint16 ZDApp_CoordStartPANIDConflictCB( uint16 panid )
ZDApp_CoordStartPANIDConflictCB:
          CFI Block cfiBlock256 Using cfiCommon0
          CFI Function ZDApp_CoordStartPANIDConflictCB
        CODE
// 3264 {
        ; Saved register size: 0
        ; Auto size: 0
// 3265   return ( panid + 1 );
        MOV     A,R2
        ADD     A,#0x1
        INC     R2
        JNC     ??ZDApp_CoordStartPANIDConflictCB_0
        INC     R3
??ZDApp_CoordStartPANIDConflictCB_0:
        LJMP    ?BRET
// 3266 }
          CFI EndBlock cfiBlock256
// 3267 
// 3268 /*********************************************************************
// 3269  * @fn          ZDO_SrcRtgIndCB
// 3270  *
// 3271  * @brief       This function notifies the ZDO available src route record received.
// 3272  *
// 3273  * @param       srcAddr - source address of the source route
// 3274  * @param       relayCnt - number of devices in the relay list
// 3275  * @param       relayList - relay list of the source route
// 3276  *
// 3277  * @return      none
// 3278  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3279 void ZDO_SrcRtgIndCB (uint16 srcAddr, uint8 relayCnt, uint16* pRelayList )
ZDO_SrcRtgIndCB:
          CFI Block cfiBlock257 Using cfiCommon0
          CFI Function ZDO_SrcRtgIndCB
        CODE
// 3280 {
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 5
        MOV     A,#-0x5
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
// 3281   zdoSrcRtg_t srcRtg;
// 3282 
// 3283   srcRtg.srcAddr = srcAddr;
        LCALL   ?Subroutine14 & 0xFFFF
// 3284   srcRtg.relayCnt = relayCnt;
??CrossCallReturnLabel_69:
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R1
        MOVX    @DPTR,A
// 3285   srcRtg.pRelayList = pRelayList;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
// 3286 
// 3287   if( zdoCBFunc[ZDO_SRC_RTG_IND_CBID] != NULL )
        MOV     DPTR,#zdoCBFunc
        LCALL   ??Subroutine54_0 & 0xFFFF
??CrossCallReturnLabel_106:
        JZ      ??ZDO_SrcRtgIndCB_0
// 3288   {
// 3289     zdoCBFunc[ZDO_SRC_RTG_IND_CBID]( (void*)&srcRtg );
        ; Setup parameters for indirect call
        LCALL   ?Subroutine18 & 0xFFFF
// 3290   }
??CrossCallReturnLabel_123:
        LCALL   ?CALL_IND
// 3291 }
??ZDO_SrcRtgIndCB_0:
        LJMP    ?Subroutine7 & 0xFFFF
          CFI EndBlock cfiBlock257
// 3292 
// 3293 /*********************************************************************
// 3294  * @fn          ZDApp_InitZdoCBFunc
// 3295  *
// 3296  * @brief       Call this function to initialize zdoCBFunc[]
// 3297  *
// 3298  * @param       none
// 3299  *
// 3300  * @return      none
// 3301  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3302 void ZDApp_InitZdoCBFunc( void )
ZDApp_InitZdoCBFunc:
          CFI Block cfiBlock258 Using cfiCommon0
          CFI Function ZDApp_InitZdoCBFunc
        CODE
// 3303 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 3304   uint8 i;
// 3305 
// 3306   for ( i=0; i< MAX_ZDO_CB_FUNC; i++ )
        MOV     R2,#0x0
// 3307   {
// 3308     zdoCBFunc[i] = NULL;
??ZDApp_InitZdoCBFunc_0:
        MOV     A,R2
        ADD     A,0xE0 /* A   */
        LCALL   ?Subroutine41 & 0xFFFF
// 3309   }
??CrossCallReturnLabel_51:
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        INC     R2
        MOV     A,R2
        CLR     C
        SUBB    A,#0x9
        JC      ??ZDApp_InitZdoCBFunc_0
// 3310 }
        LJMP    ??Subroutine49_0 & 0xFFFF
          CFI EndBlock cfiBlock258
// 3311 
// 3312 /*********************************************************************
// 3313  * @fn          ZDO_RegisterForZdoCB
// 3314  *
// 3315  * @brief       Call this function to register the higher layer (for
// 3316  *              example, the Application layer or MT layer) with ZDO
// 3317  *              callbacks to get notified of some ZDO indication like
// 3318  *              existence of a concentrator or receipt of a source
// 3319  *              route record.
// 3320  *
// 3321  * @param       indID - ZDO Indication ID
// 3322  * @param       pFn   - Callback function pointer
// 3323  *
// 3324  * @return      ZSuccess - successful, ZInvalidParameter if not
// 3325  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3326 ZStatus_t ZDO_RegisterForZdoCB( uint8 indID, pfnZdoCb pFn )
ZDO_RegisterForZdoCB:
          CFI Block cfiBlock259 Using cfiCommon0
          CFI Function ZDO_RegisterForZdoCB
        CODE
// 3327 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        MOV     A,R1
        MOV     R4,A
// 3328   // Check the range of the indication ID
// 3329   if ( indID < MAX_ZDO_CB_FUNC )
        CLR     C
        SUBB    A,#0x9
        JNC     ??ZDO_RegisterForZdoCB_0
// 3330   {
// 3331     zdoCBFunc[indID] = pFn;
        MOV     A,R4
        LCALL   ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_28:
        LCALL   ??Subroutine46_0 & 0xFFFF
// 3332     return ZSuccess;
??CrossCallReturnLabel_65:
        MOV     R1,#0x0
        SJMP    ??ZDO_RegisterForZdoCB_1
// 3333   }
// 3334 
// 3335   return ZInvalidParameter;
??ZDO_RegisterForZdoCB_0:
        MOV     R1,#0x2
??ZDO_RegisterForZdoCB_1:
        LJMP    ??Subroutine49_0 & 0xFFFF
// 3336 }
          CFI EndBlock cfiBlock259
// 3337 
// 3338 /*********************************************************************
// 3339  * @fn          ZDO_DeregisterForZdoCB
// 3340  *
// 3341  * @brief       Call this function to de-register the higher layer (for
// 3342  *              example, the Application layer or MT layer) with ZDO
// 3343  *              callbacks to get notified of some ZDO indication like
// 3344  *              existence of a concentrator or receipt of a source
// 3345  *              route record.
// 3346  *
// 3347  * @param       indID - ZDO Indication ID
// 3348  *
// 3349  * @return      ZSuccess - successful, ZInvalidParameter if not
// 3350  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3351 ZStatus_t ZDO_DeregisterForZdoCB( uint8 indID )
ZDO_DeregisterForZdoCB:
          CFI Block cfiBlock260 Using cfiCommon0
          CFI Function ZDO_DeregisterForZdoCB
        CODE
// 3352 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        MOV     A,R1
        MOV     R2,A
// 3353   // Check the range of the indication ID
// 3354   if ( indID < MAX_ZDO_CB_FUNC )
        CLR     C
        SUBB    A,#0x9
        JNC     ??ZDO_DeregisterForZdoCB_0
// 3355   {
// 3356     zdoCBFunc[indID] = NULL;
        MOV     A,R2
        LCALL   ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_29:
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 3357     return ZSuccess;
        MOV     R1,A
        SJMP    ??ZDO_DeregisterForZdoCB_1
// 3358   }
// 3359 
// 3360   return ZInvalidParameter;
??ZDO_DeregisterForZdoCB_0:
        MOV     R1,#0x2
??ZDO_DeregisterForZdoCB_1:
        LJMP    ??Subroutine49_0 & 0xFFFF
// 3361 }
          CFI EndBlock cfiBlock260

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine30:
          CFI Block cfiCond261 Using cfiCommon0
          CFI Function ZDO_RegisterForZdoCB
          CFI Conditional ??CrossCallReturnLabel_28
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond262 Using cfiCommon0
          CFI (cfiCond262) Function ZDO_DeregisterForZdoCB
          CFI (cfiCond262) Conditional ??CrossCallReturnLabel_29
          CFI (cfiCond262) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond262) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond262) CFA_SP SP+-7
          CFI Block cfiPicker263 Using cfiCommon1
          CFI (cfiPicker263) NoFunction
          CFI (cfiPicker263) Picker
        ADD     A,R1
        LCALL   ?Subroutine41 & 0xFFFF
??CrossCallReturnLabel_52:
        RET
          CFI EndBlock cfiCond261
          CFI EndBlock cfiCond262
          CFI EndBlock cfiPicker263

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine41:
          CFI Block cfiCond264 Using cfiCommon0
          CFI Function ZDApp_InitZdoCBFunc
          CFI Conditional ??CrossCallReturnLabel_51
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond265 Using cfiCommon0
          CFI (cfiCond265) Function ZDO_RegisterForZdoCB
          CFI (cfiCond265) Conditional ??CrossCallReturnLabel_52, ??CrossCallReturnLabel_28
          CFI (cfiCond265) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond265) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond265) CFA_SP SP+-9
          CFI Block cfiCond266 Using cfiCommon0
          CFI (cfiCond266) Function ZDO_DeregisterForZdoCB
          CFI (cfiCond266) Conditional ??CrossCallReturnLabel_52, ??CrossCallReturnLabel_29
          CFI (cfiCond266) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond266) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond266) CFA_SP SP+-9
          CFI Block cfiPicker267 Using cfiCommon1
          CFI (cfiPicker267) NoFunction
          CFI (cfiPicker267) Picker
        MOV     R0,A
        CLR     A
        RLC     A
        MOV     R1,A
        MOV     A,#zdoCBFunc & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(zdoCBFunc >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        RET
          CFI EndBlock cfiCond264
          CFI EndBlock cfiCond265
          CFI EndBlock cfiCond266
          CFI EndBlock cfiPicker267
// 3362 
// 3363 #if !defined ( ZDP_BIND_SKIP_VALIDATION )
// 3364 #if defined ( REFLECTOR )
// 3365 /*********************************************************************
// 3366  * @fn          ZDApp_SetPendingBindDefault
// 3367  *
// 3368  * @brief       This function initializes a specific entry of pending
// 3369  *              Bind Request.
// 3370  *
// 3371  * @param       pendBindReq - pointer to the entry in the table
// 3372  *
// 3373  * @return      none
// 3374  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3375 void ZDApp_SetPendingBindDefault( ZDO_PendingBindReq_t *pendBindReq )
ZDApp_SetPendingBindDefault:
          CFI Block cfiBlock268 Using cfiCommon0
          CFI Function ZDApp_SetPendingBindDefault
        CODE
// 3376 {
        FUNCALL ZDApp_SetPendingBindDefault, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 3377   // Set it to an initial value
// 3378   osal_memset( pendBindReq, 0xFF, sizeof( ZDO_PendingBindReq_t ) );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x21
        MOV     R5,#0x0
        MOV     R1,#-0x1
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 3379 
// 3380   // We are checking for age 0 for aged-out records
// 3381   pendBindReq->age = 0;
        MOV     A,R6
        ADD     A,#0x20
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        CLR     A
        MOVX    @DPTR,A
// 3382 }
        LJMP    ??Subroutine56_0 & 0xFFFF
          CFI EndBlock cfiBlock268
// 3383 
// 3384 /*********************************************************************
// 3385  * @fn          ZDApp_InitPendingBind
// 3386  *
// 3387  * @brief       This function initializes the buffer that holds
// 3388  *              pending Bind Request messages if no valid NWK address
// 3389  *              exists in Address Manager and a Network Address Req
// 3390  *              has been sent out.
// 3391  *
// 3392  * @param       none
// 3393  *
// 3394  * @return      none
// 3395  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3396 void ZDApp_InitPendingBind( void )
ZDApp_InitPendingBind:
          CFI Block cfiBlock269 Using cfiCommon0
          CFI Function ZDApp_InitPendingBind
        CODE
// 3397 {
        FUNCALL ZDApp_InitPendingBind, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_InitPendingBind, ZDApp_SetPendingBindDefault
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
// 3398   if ( ZDAppPendingBindReq == NULL )
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_107:
        JNZ     ??ZDApp_InitPendingBind_0
// 3399   {
// 3400     if ( ( ZDAppPendingBindReq = osal_mem_alloc( sizeof(ZDO_PendingBindReq_t) * MAX_PENDING_BIND_REQ ) ) != NULL )
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0x63
        MOV     R3,#0x0
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV     DPTR,#ZDAppPendingBindReq
        LCALL   ??Subroutine46_0 & 0xFFFF
??CrossCallReturnLabel_66:
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_108:
        JZ      ??ZDApp_InitPendingBind_0
// 3401     {
// 3402       uint8 i;
// 3403 
// 3404       for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
        MOV     R6,#0x0
// 3405       {
// 3406         // Set to default values
// 3407         ZDApp_SetPendingBindDefault( &ZDAppPendingBindReq[i] );
??ZDApp_InitPendingBind_1:
        ; Setup parameters for call to function ZDApp_SetPendingBindDefault
        MOV     A,R6
        MOV     B,#0x21
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     DPTR,#ZDAppPendingBindReq
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOV     R3,A
        LCALL   `??ZDApp_SetPendingBindDefault::?relay`; Banked call to: ZDApp_SetPendingBindDefault
// 3408       }
        INC     R6
        MOV     A,R6
        CLR     C
        SUBB    A,#0x3
        JC      ??ZDApp_InitPendingBind_1
// 3409     }
// 3410   }
// 3411 }
??ZDApp_InitPendingBind_0:
        LJMP    ??Subroutine56_0 & 0xFFFF
          CFI EndBlock cfiBlock269
// 3412 
// 3413 /*********************************************************************
// 3414  * @fn          ZDApp_GetEmptyPendingBindReq
// 3415  *
// 3416  * @brief       This function looks for an empty entry.
// 3417  *
// 3418  * @param       none
// 3419  *
// 3420  * @return      Pointer to entry
// 3421  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3422 ZDO_PendingBindReq_t *ZDApp_GetEmptyPendingBindReq( void )
ZDApp_GetEmptyPendingBindReq:
          CFI Block cfiBlock270 Using cfiCommon0
          CFI Function ZDApp_GetEmptyPendingBindReq
        CODE
// 3423 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 3424   uint8 i;
// 3425 
// 3426   if ( ZDAppPendingBindReq != NULL )
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_109:
        JZ      ??ZDApp_GetEmptyPendingBindReq_0
// 3427   {
// 3428     for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
        MOV     R2,#0x0
// 3429     {
// 3430       if ( ZDAppPendingBindReq[i].age == 0 )
??ZDApp_GetEmptyPendingBindReq_1:
        MOV     A,R2
        MOV     B,#0x21
        MUL     AB
        MOV     R0,A
        MOV     R3,B
        MOV     A,R3
        LCALL   ??Subroutine61_0 & 0xFFFF
??CrossCallReturnLabel_132:
        JNZ     ??ZDApp_GetEmptyPendingBindReq_2
// 3431       {
// 3432         return ( &ZDAppPendingBindReq[i] );
        MOV     A,R2
        MOV     B,#0x21
        MUL     AB
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        MOV     DPTR,#ZDAppPendingBindReq
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOV     R3,A
        SJMP    ??ZDApp_GetEmptyPendingBindReq_3
// 3433       }
// 3434     }
??ZDApp_GetEmptyPendingBindReq_2:
        INC     R2
        MOV     A,R2
        CLR     C
        SUBB    A,#0x3
        JC      ??ZDApp_GetEmptyPendingBindReq_1
// 3435   }
// 3436 
// 3437   // No empty entry was found
// 3438   return NULL;
??ZDApp_GetEmptyPendingBindReq_0:
        MOV     R2,#0x0
        MOV     R3,#0x0
??ZDApp_GetEmptyPendingBindReq_3:
        LJMP    ??Subroutine49_0 & 0xFFFF
// 3439 }
          CFI EndBlock cfiBlock270
// 3440 
// 3441 /*********************************************************************
// 3442  * @fn          ZDApp_ProcessPendingBindReq
// 3443  *
// 3444  * @brief       Process pending entry based on EXT address.
// 3445  *
// 3446  * @param       extAddr - of device to look up
// 3447  *
// 3448  * @return      none
// 3449  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3450 void ZDApp_ProcessPendingBindReq( uint8 *extAddr )
ZDApp_ProcessPendingBindReq:
          CFI Block cfiBlock271 Using cfiCommon0
          CFI Function ZDApp_ProcessPendingBindReq
        CODE
// 3451 {
        FUNCALL ZDApp_ProcessPendingBindReq, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessPendingBindReq, APSME_BindRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessPendingBindReq, ZDP_SendData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessPendingBindReq, ZDApp_SetPendingBindDefault
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        MOV     A,#-0xf
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     ?V2,R2
        MOV     ?V3,R3
// 3452   uint8 i;
// 3453 
// 3454   // Loop through all the pending entries for that Ext Address
// 3455   // to create Bind Entries and send Bind Rsp
// 3456   if ( ZDAppPendingBindReq != NULL )
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_110:
        JNZ     $+5
        LJMP    ??ZDApp_ProcessPendingBindReq_0 & 0xFFFF
// 3457   {
// 3458     for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
        MOV     ?V0,#0x0
// 3459     {
// 3460       if ( osal_memcmp( ZDAppPendingBindReq[i].bindReq.dstAddress.addr.extAddr,
// 3461                         extAddr, Z_EXTADDR_LEN ) == TRUE )
??ZDApp_ProcessPendingBindReq_1:
        ; Setup parameters for call to function osal_memcmp
        MOV     ?V4,?V2
        MOV     ?V5,?V3
        MOV     ?V6,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 19)
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     A,?V0
        MOV     B,#0x21
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        LCALL   ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_22:
        MOV     ?V4,A
        CLR     A
        ADDC    A,R1
        MOV     R1,?V4
        MOV     R2,A
        MOV     R3,#0x0
        LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     A,R1
        XRL     A,#0x1
        JZ      $+5
        LJMP    ??ZDApp_ProcessPendingBindReq_2 & 0xFFFF
// 3462       {
// 3463         uint8 bindStat = ZDP_TABLE_FULL; // Assume table is full
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#-0x74
        MOVX    @DPTR,A
// 3464 
// 3465         // Add Bind entry
// 3466         if ( APSME_BindRequest( ZDAppPendingBindReq[i].bindReq.srcEndpoint,
// 3467                                 ZDAppPendingBindReq[i].bindReq.clusterID,
// 3468                                 &(ZDAppPendingBindReq[i].bindReq.dstAddress),
// 3469                                 ZDAppPendingBindReq[i].bindReq.dstEndpoint ) == ZSuccess )
        MOV     A,?V0
        MOV     B,#0x21
        MUL     AB
        MOV     R6,A
        MOV     R7,B
        MOV     DPTR,#ZDAppPendingBindReq
        MOVX    A,@DPTR
        ADD     A,R6
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R7
        MOV     R7,A
        ; Setup parameters for call to function APSME_BindRequest
        MOV     A,R6
        ADD     A,#0x14
        LCALL   ??Subroutine58_0 & 0xFFFF
??CrossCallReturnLabel_127:
        MOV     ?V1,A
        MOV     R0,#?V1
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 17)
        MOV     A,R6
        ADD     A,#0xb
        MOV     R4,A
        CLR     A
        ADDC    A,R7
        MOV     R5,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_27:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??APSME_BindRequest::?relay`; Banked call to: APSME_BindRequest
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     A,R1
        JNZ     ??ZDApp_ProcessPendingBindReq_3
// 3470         {
// 3471           // valid entry
// 3472           bindStat = ZDP_SUCCESS;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        MOVX    @DPTR,A
// 3473 
// 3474           // Notify to save info into NV
// 3475           ZDApp_NVUpdate();
// 3476         }
// 3477 
// 3478         // Send back a response message
// 3479         ZDP_BindRsp( ZDAppPendingBindReq[i].transSeq, &(ZDAppPendingBindReq[i].srcAddr),
// 3480                      bindStat, ZDAppPendingBindReq[i].securityUse );
??ZDApp_ProcessPendingBindReq_3:
        MOV     A,?V0
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_11:
        MOV     ?V1,A
        MOV     R0,#?V1
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 17)
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V4,R0
        MOV     ?V5,R1
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 19)
        MOV     ?V4,#0x21
        MOV     ?V5,#-0x80
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 21)
        LCALL   ?Subroutine37 & 0xFFFF
??CrossCallReturnLabel_44:
        JNC     ??ZDApp_ProcessPendingBindReq_4
        INC     R3
??ZDApp_ProcessPendingBindReq_4:
        LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
// 3481 
// 3482         // Set the pending request entry to default values
// 3483         ZDApp_SetPendingBindDefault( &ZDAppPendingBindReq[i] );
        ; Setup parameters for call to function ZDApp_SetPendingBindDefault
        LCALL   ?Subroutine38 & 0xFFFF
// 3484       }
// 3485     }
??CrossCallReturnLabel_46:
        LCALL   `??ZDApp_SetPendingBindDefault::?relay`; Banked call to: ZDApp_SetPendingBindDefault
??ZDApp_ProcessPendingBindReq_2:
        INC     ?V0
        MOV     A,?V0
        CLR     C
        SUBB    A,#0x3
        JNC     $+5
        LJMP    ??ZDApp_ProcessPendingBindReq_1 & 0xFFFF
// 3486   }
// 3487 }
??ZDApp_ProcessPendingBindReq_0:
        MOV     A,#0x1
        LJMP    ?Subroutine6 & 0xFFFF
          CFI EndBlock cfiBlock271

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine33:
          CFI Block cfiCond272 Using cfiCommon0
          CFI Function ZDO_LeaveCnf
          CFI Conditional ??CrossCallReturnLabel_128
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond273 Using cfiCommon0
          CFI (cfiCond273) Function ZDO_LeaveInd
          CFI (cfiCond273) Conditional ??CrossCallReturnLabel_129
          CFI (cfiCond273) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond273) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond273) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond273) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond273) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond273) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond273) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond273) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond273) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond273) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond273) CFA_SP SP+-2
          CFI (cfiCond273) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond274 Using cfiCommon0
          CFI (cfiCond274) Function ZDO_LeaveInd
          CFI (cfiCond274) Conditional ??CrossCallReturnLabel_130
          CFI (cfiCond274) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond274) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond274) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond274) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond274) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond274) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond274) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond274) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond274) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond274) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond274) CFA_SP SP+-2
          CFI (cfiCond274) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond275 Using cfiCommon0
          CFI (cfiCond275) Function ZDApp_InMsgCB
          CFI (cfiCond275) Conditional ??CrossCallReturnLabel_131
          CFI (cfiCond275) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond275) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond275) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond275) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond275) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond275) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond275) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond275) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond275) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond275) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond275) CFA_SP SP+-2
          CFI (cfiCond275) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker276 Using cfiCommon1
          CFI (cfiPicker276) NoFunction
          CFI (cfiPicker276) Picker
        MOV     A,R6
        ADD     A,#0xb
          CFI EndBlock cfiCond272
          CFI EndBlock cfiCond273
          CFI EndBlock cfiCond274
          CFI EndBlock cfiCond275
          CFI EndBlock cfiPicker276
        REQUIRE ??Subroutine58_0
        ; // Fall through to label ??Subroutine58_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine58_0:
          CFI Block cfiCond277 Using cfiCommon0
          CFI Function ZDApp_ProcessMsgCBs
          CFI Conditional ??CrossCallReturnLabel_124
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 56)
          CFI Block cfiCond278 Using cfiCommon0
          CFI (cfiCond278) Function ZDApp_InMsgCB
          CFI (cfiCond278) Conditional ??CrossCallReturnLabel_125
          CFI (cfiCond278) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond278) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond278) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond278) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond278) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond278) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond278) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond278) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond278) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond278) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond278) CFA_SP SP+-2
          CFI (cfiCond278) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond279 Using cfiCommon0
          CFI (cfiCond279) Function ZDApp_InMsgCB
          CFI (cfiCond279) Conditional ??CrossCallReturnLabel_126
          CFI (cfiCond279) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond279) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond279) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond279) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond279) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond279) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond279) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond279) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond279) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond279) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond279) CFA_SP SP+-2
          CFI (cfiCond279) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond280 Using cfiCommon0
          CFI (cfiCond280) Function ZDApp_ProcessPendingBindReq
          CFI (cfiCond280) Conditional ??CrossCallReturnLabel_127
          CFI (cfiCond280) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond280) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond280) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond280) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond280) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond280) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond280) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond280) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond280) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond280) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond280) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond280) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond280) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond280) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond280) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond280) CFA_SP SP+-2
          CFI (cfiCond280) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond281 Using cfiCommon0
          CFI (cfiCond281) Function ZDO_LeaveCnf
          CFI (cfiCond281) Conditional ??CrossCallReturnLabel_128
          CFI (cfiCond281) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond281) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond281) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond281) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond281) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond281) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond281) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond281) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond281) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond281) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond281) CFA_SP SP+-2
          CFI (cfiCond281) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond282 Using cfiCommon0
          CFI (cfiCond282) Function ZDO_LeaveInd
          CFI (cfiCond282) Conditional ??CrossCallReturnLabel_129
          CFI (cfiCond282) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond282) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond282) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond282) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond282) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond282) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond282) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond282) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond282) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond282) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond282) CFA_SP SP+-2
          CFI (cfiCond282) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond283 Using cfiCommon0
          CFI (cfiCond283) Function ZDO_LeaveInd
          CFI (cfiCond283) Conditional ??CrossCallReturnLabel_130
          CFI (cfiCond283) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond283) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond283) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond283) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond283) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond283) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond283) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond283) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond283) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond283) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond283) CFA_SP SP+-2
          CFI (cfiCond283) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond284 Using cfiCommon0
          CFI (cfiCond284) Function ZDApp_InMsgCB
          CFI (cfiCond284) Conditional ??CrossCallReturnLabel_131
          CFI (cfiCond284) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond284) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond284) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond284) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond284) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond284) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond284) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond284) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond284) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond284) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond284) CFA_SP SP+-2
          CFI (cfiCond284) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker285 Using cfiCommon1
          CFI (cfiPicker285) NoFunction
          CFI (cfiPicker285) Picker
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond277
          CFI EndBlock cfiCond278
          CFI EndBlock cfiCond279
          CFI EndBlock cfiCond280
          CFI EndBlock cfiCond281
          CFI EndBlock cfiCond282
          CFI EndBlock cfiCond283
          CFI EndBlock cfiCond284
          CFI EndBlock cfiPicker285

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine28:
          CFI Block cfiCond286 Using cfiCommon0
          CFI Function ZDO_beaconNotifyIndCB
          CFI Conditional ??CrossCallReturnLabel_26
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond287 Using cfiCommon0
          CFI (cfiCond287) Function ZDApp_ProcessPendingBindReq
          CFI (cfiCond287) Conditional ??CrossCallReturnLabel_27
          CFI (cfiCond287) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond287) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond287) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond287) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond287) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond287) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond287) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond287) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond287) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond287) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond287) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond287) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond287) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond287) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond287) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond287) CFA_SP SP+-2
          CFI (cfiCond287) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiPicker288 Using cfiCommon1
          CFI (cfiPicker288) NoFunction
          CFI (cfiPicker288) Picker
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     DPL,R6
        MOV     DPH,R7
        RET
          CFI EndBlock cfiCond286
          CFI EndBlock cfiCond287
          CFI EndBlock cfiPicker288
// 3488 
// 3489 /*********************************************************************
// 3490  * @fn          ZDApp_AgeOutPendingBindEntry
// 3491  *
// 3492  * @brief       Age out pending Bind Req entries.
// 3493  *
// 3494  * @param       none
// 3495  *
// 3496  * @return      none
// 3497  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3498 void ZDApp_AgeOutPendingBindEntry( void )
ZDApp_AgeOutPendingBindEntry:
          CFI Block cfiBlock289 Using cfiCommon0
          CFI Function ZDApp_AgeOutPendingBindEntry
        CODE
// 3499 {
        FUNCALL ZDApp_AgeOutPendingBindEntry, AddrMgrExtAddrSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_AgeOutPendingBindEntry, AddrMgrEntryLookupExt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_AgeOutPendingBindEntry, AddrMgrEntryRelease
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_AgeOutPendingBindEntry, ZDP_SendData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_AgeOutPendingBindEntry, ZDApp_SetPendingBindDefault
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_AgeOutPendingBindEntry, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_AgeOutPendingBindEntry, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 14
        MOV     A,#-0xe
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 26)
// 3500   uint8 i;
// 3501   bool entryFound = FALSE;
        MOV     ?V0,#0x0
// 3502 
// 3503   if ( ZDAppPendingBindReq != NULL )
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_111:
        JNZ     $+5
        LJMP    ??ZDApp_AgeOutPendingBindEntry_0 & 0xFFFF
// 3504   {
// 3505     for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
        MOV     ?V1,#0x0
// 3506     {
// 3507       if ( ZDAppPendingBindReq[i].age > 1 )
??ZDApp_AgeOutPendingBindEntry_1:
        MOV     A,?V1
        MOV     B,#0x21
        MUL     AB
        MOV     R0,A
        MOV     R2,B
        LCALL   ??Subroutine60_0 & 0xFFFF
??CrossCallReturnLabel_133:
        CLR     C
        SUBB    A,#0x2
        MOV     A,?V1
        MOV     B,#0x21
        JC      ??ZDApp_AgeOutPendingBindEntry_2
// 3508       {
// 3509         ZDAppPendingBindReq[i].age--;
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_134:
        DEC     A
        MOVX    @DPTR,A
// 3510 
// 3511         entryFound = TRUE;
        MOV     ?V0,#0x1
        LJMP    ??ZDApp_AgeOutPendingBindEntry_3 & 0xFFFF
// 3512       }
// 3513       else if ( ZDAppPendingBindReq[i].age == 1 )
??ZDApp_AgeOutPendingBindEntry_2:
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_135:
        XRL     A,#0x1
        JZ      $+5
        LJMP    ??ZDApp_AgeOutPendingBindEntry_3 & 0xFFFF
// 3514       {
// 3515         // The record has aged out and has valid data
// 3516         AddrMgrEntry_t entry;
// 3517         uint8 bindStat = ZDP_TABLE_FULL; // Assume table is full
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#-0x74
        MOVX    @DPTR,A
// 3518 
// 3519         entry.user = ADDRMGR_USER_BINDING;
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x4
        MOVX    @DPTR,A
// 3520 
// 3521         // Remove the entry in address manager so we do not keep entries
// 3522         // with invalid addresses
// 3523         AddrMgrExtAddrSet( entry.extAddr, ZDAppPendingBindReq[i].bindReq.dstAddress.addr.extAddr );
        ; Setup parameters for call to function AddrMgrExtAddrSet
        MOV     A,?V1
        MOV     B,#0x21
        MUL     AB
        MOV     R0,A
        MOV     A,R2
        MOV     R1,A
        LCALL   ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_23:
        MOV     R4,A
        CLR     A
        ADDC    A,R1
        MOV     R5,A
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
// 3524 
// 3525         if ( AddrMgrEntryLookupExt( &entry ) == TRUE )
        ; Setup parameters for call to function AddrMgrEntryLookupExt
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??AddrMgrEntryLookupExt::?relay`; Banked call to: AddrMgrEntryLookupExt
        MOV     A,R1
        XRL     A,#0x1
        JNZ     ??ZDApp_AgeOutPendingBindEntry_4
// 3526         {
// 3527           if ( entry.nwkAddr == INVALID_NODE_ADDR )
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,#0xfe
        JNZ     ??ZDApp_AgeOutPendingBindEntry_5
        INC     DPTR
        MOVX    A,@DPTR
        CPL     A
??ZDApp_AgeOutPendingBindEntry_5:
        JNZ     ??ZDApp_AgeOutPendingBindEntry_4
// 3528           {
// 3529             // Release the entry that contains an invalid NWK address
// 3530             AddrMgrEntryRelease( &entry );
        ; Setup parameters for call to function AddrMgrEntryRelease
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??AddrMgrEntryRelease::?relay`; Banked call to: AddrMgrEntryRelease
// 3531           }
// 3532         }
// 3533 
// 3534         // Send the Bind Response with failure status
// 3535         ZDP_BindRsp( ZDAppPendingBindReq[i].transSeq,
// 3536                      &(ZDAppPendingBindReq[i].srcAddr),
// 3537                      bindStat, ZDAppPendingBindReq[i].securityUse );
??ZDApp_AgeOutPendingBindEntry_4:
        MOV     A,?V1
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_12:
        MOV     ?V2,A
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 27)
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V2,R0
        MOV     ?V3,R1
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 29)
        MOV     ?V2,#0x21
        MOV     ?V3,#-0x80
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 31)
        LCALL   ?Subroutine37 & 0xFFFF
??CrossCallReturnLabel_45:
        JNC     ??ZDApp_AgeOutPendingBindEntry_6
        INC     R3
??ZDApp_AgeOutPendingBindEntry_6:
        LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 26)
// 3538 
// 3539         // Clear the record and set to default values
// 3540         ZDApp_SetPendingBindDefault( &ZDAppPendingBindReq[i] );
        ; Setup parameters for call to function ZDApp_SetPendingBindDefault
        LCALL   ?Subroutine38 & 0xFFFF
// 3541       }
// 3542     }
??CrossCallReturnLabel_47:
        LCALL   `??ZDApp_SetPendingBindDefault::?relay`; Banked call to: ZDApp_SetPendingBindDefault
??ZDApp_AgeOutPendingBindEntry_3:
        INC     ?V1
        MOV     A,?V1
        CLR     C
        SUBB    A,#0x3
        JNC     $+5
        LJMP    ??ZDApp_AgeOutPendingBindEntry_1 & 0xFFFF
// 3543   }
// 3544 
// 3545   if ( entryFound == FALSE )
        MOV     A,?V0
        MOV     C,0xE0 /* A   */.0
        JC      ??ZDApp_AgeOutPendingBindEntry_7
// 3546   {
// 3547     osal_stop_timerEx( ZDAppTaskID, ZDO_PENDING_BIND_REQ_EVT );
??ZDApp_AgeOutPendingBindEntry_0:
        ; Setup parameters for call to function osal_stop_timerEx
        MOV     R2,#0x0
        MOV     R3,#0x10
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
        SJMP    ??ZDApp_AgeOutPendingBindEntry_8
// 3548   }
// 3549   else
// 3550   {
// 3551     osal_start_timerEx( ZDAppTaskID, ZDO_PENDING_BIND_REQ_EVT,
// 3552                         AGE_OUT_PEND_BIND_REQ_DELAY );
??ZDApp_AgeOutPendingBindEntry_7:
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#__Constant_3e8
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 30)
        MOV     R2,#0x0
        MOV     R3,#0x10
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 26)
// 3553   }
// 3554 }
??ZDApp_AgeOutPendingBindEntry_8:
        MOV     A,#0xe
          CFI EndBlock cfiBlock289
        REQUIRE ?Subroutine5
        ; // Fall through to label ?Subroutine5

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiBlock290 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 56)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock290
        REQUIRE ??Subroutine59_0
        ; // Fall through to label ??Subroutine59_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine59_0:
          CFI Block cfiBlock291 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock291

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine38:
          CFI Block cfiCond292 Using cfiCommon0
          CFI Function ZDApp_ProcessPendingBindReq
          CFI Conditional ??CrossCallReturnLabel_46
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond293 Using cfiCommon0
          CFI (cfiCond293) Function ZDApp_AgeOutPendingBindEntry
          CFI (cfiCond293) Conditional ??CrossCallReturnLabel_47
          CFI (cfiCond293) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond293) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond293) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond293) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond293) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond293) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond293) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond293) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond293) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond293) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond293) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond293) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond293) CFA_SP SP+-2
          CFI (cfiCond293) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond294 Using cfiCommon0
          CFI (cfiCond294) Function ZDApp_ProcessPendingBindReq
          CFI (cfiCond294) Conditional ??CrossCallReturnLabel_48, ??CrossCallReturnLabel_11
          CFI (cfiCond294) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond294) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond294) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond294) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond294) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond294) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond294) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond294) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond294) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond294) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond294) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond294) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond294) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond294) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond294) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond294) CFA_SP SP+-4
          CFI (cfiCond294) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond295 Using cfiCommon0
          CFI (cfiCond295) Function ZDApp_AgeOutPendingBindEntry
          CFI (cfiCond295) Conditional ??CrossCallReturnLabel_48, ??CrossCallReturnLabel_12
          CFI (cfiCond295) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond295) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond295) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond295) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond295) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond295) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond295) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond295) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond295) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond295) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond295) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond295) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond295) CFA_SP SP+-4
          CFI (cfiCond295) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiPicker296 Using cfiCommon1
          CFI (cfiPicker296) NoFunction
          CFI (cfiPicker296) Picker
        MOV     DPTR,#ZDAppPendingBindReq
        MOVX    A,@DPTR
        ADD     A,R6
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R7
        MOV     R3,A
        RET
          CFI EndBlock cfiCond292
          CFI EndBlock cfiCond293
          CFI EndBlock cfiCond294
          CFI EndBlock cfiCond295
          CFI EndBlock cfiPicker296

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine37:
          CFI Block cfiCond297 Using cfiCommon0
          CFI Function ZDApp_ProcessPendingBindReq
          CFI Conditional ??CrossCallReturnLabel_44
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond298 Using cfiCommon0
          CFI (cfiCond298) Function ZDApp_AgeOutPendingBindEntry
          CFI (cfiCond298) Conditional ??CrossCallReturnLabel_45
          CFI (cfiCond298) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond298) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond298) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond298) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond298) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond298) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond298) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond298) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond298) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond298) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond298) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond298) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond298) CFA_SP SP+-2
          CFI (cfiCond298) CFA_XSP16 add(XSP16, 31)
          CFI Block cfiPicker299 Using cfiCommon1
          CFI (cfiPicker299) NoFunction
          CFI (cfiPicker299) Picker
        MOV     R1,#0x1
        MOV     A,R2
        ADD     A,#0x15
        MOV     R4,A
        CLR     A
        ADDC    A,R3
        MOV     R5,A
        MOV     A,R2
        ADD     A,#0x1f
        MOV     R2,A
        RET
          CFI EndBlock cfiCond297
          CFI EndBlock cfiCond298
          CFI EndBlock cfiPicker299

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine26:
          CFI Block cfiCond300 Using cfiCommon0
          CFI Function ZDApp_ProcessPendingBindReq
          CFI Conditional ??CrossCallReturnLabel_22
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond301 Using cfiCommon0
          CFI (cfiCond301) Function ZDApp_AgeOutPendingBindEntry
          CFI (cfiCond301) Conditional ??CrossCallReturnLabel_23
          CFI (cfiCond301) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond301) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond301) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond301) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond301) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond301) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond301) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond301) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond301) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond301) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond301) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond301) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond301) CFA_SP SP+-2
          CFI (cfiCond301) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiPicker302 Using cfiCommon1
          CFI (cfiPicker302) NoFunction
          CFI (cfiPicker302) Picker
        LCALL   ?Subroutine40 & 0xFFFF
??CrossCallReturnLabel_136:
        ADD     A,#0xb
        RET
          CFI EndBlock cfiCond300
          CFI EndBlock cfiCond301
          CFI EndBlock cfiPicker302

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine20:
          CFI Block cfiCond303 Using cfiCommon0
          CFI Function ZDApp_ProcessPendingBindReq
          CFI Conditional ??CrossCallReturnLabel_11
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond304 Using cfiCommon0
          CFI (cfiCond304) Function ZDApp_AgeOutPendingBindEntry
          CFI (cfiCond304) Conditional ??CrossCallReturnLabel_12
          CFI (cfiCond304) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond304) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond304) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond304) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond304) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond304) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond304) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond304) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond304) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond304) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond304) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond304) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond304) CFA_SP SP+-2
          CFI (cfiCond304) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiPicker305 Using cfiCommon1
          CFI (cfiPicker305) NoFunction
          CFI (cfiPicker305) Picker
        MOV     B,#0x21
        MUL     AB
        MOV     R6,A
        MOV     R7,B
        LCALL   ?Subroutine38 & 0xFFFF
??CrossCallReturnLabel_48:
        ; Setup parameters for call to function ZDP_SendData
        ; Setup parameters for call to function ZDP_SendData
        MOV     A,R2
        ADD     A,#0x1e
        MOV     DPL,A
        CLR     A
        ADDC    A,R3
        MOV     DPH,A
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond303
          CFI EndBlock cfiCond304
          CFI EndBlock cfiPicker305

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine16:
          CFI Block cfiCond306 Using cfiCommon0
          CFI Function ZDApp_AgeOutPendingBindEntry
          CFI Conditional ??CrossCallReturnLabel_134
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond307 Using cfiCommon0
          CFI (cfiCond307) Function ZDApp_AgeOutPendingBindEntry
          CFI (cfiCond307) Conditional ??CrossCallReturnLabel_135
          CFI (cfiCond307) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond307) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond307) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond307) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond307) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond307) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond307) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond307) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond307) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond307) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond307) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond307) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond307) CFA_SP SP+-2
          CFI (cfiCond307) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiPicker308 Using cfiCommon1
          CFI (cfiPicker308) NoFunction
          CFI (cfiPicker308) Picker
        MUL     AB
        MOV     R0,A
          CFI EndBlock cfiCond306
          CFI EndBlock cfiCond307
          CFI EndBlock cfiPicker308
        REQUIRE ??Subroutine60_0
        ; // Fall through to label ??Subroutine60_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine60_0:
          CFI Block cfiCond309 Using cfiCommon0
          CFI Function ZDApp_AgeOutPendingBindEntry
          CFI Conditional ??CrossCallReturnLabel_133
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond310 Using cfiCommon0
          CFI (cfiCond310) Function ZDApp_AgeOutPendingBindEntry
          CFI (cfiCond310) Conditional ??CrossCallReturnLabel_134
          CFI (cfiCond310) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond310) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond310) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond310) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond310) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond310) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond310) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond310) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond310) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond310) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond310) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond310) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond310) CFA_SP SP+-2
          CFI (cfiCond310) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond311 Using cfiCommon0
          CFI (cfiCond311) Function ZDApp_AgeOutPendingBindEntry
          CFI (cfiCond311) Conditional ??CrossCallReturnLabel_135
          CFI (cfiCond311) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond311) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond311) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond311) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond311) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond311) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond311) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond311) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond311) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond311) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond311) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond311) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond311) CFA_SP SP+-2
          CFI (cfiCond311) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiPicker312 Using cfiCommon1
          CFI (cfiPicker312) NoFunction
          CFI (cfiPicker312) Picker
        MOV     A,R2
          CFI EndBlock cfiCond309
          CFI EndBlock cfiCond310
          CFI EndBlock cfiCond311
          CFI EndBlock cfiPicker312
        REQUIRE ??Subroutine61_0
        ; // Fall through to label ??Subroutine61_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine61_0:
          CFI Block cfiCond313 Using cfiCommon0
          CFI Function ZDApp_GetEmptyPendingBindReq
          CFI Conditional ??CrossCallReturnLabel_132
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond314 Using cfiCommon0
          CFI (cfiCond314) Function ZDApp_AgeOutPendingBindEntry
          CFI (cfiCond314) Conditional ??CrossCallReturnLabel_133
          CFI (cfiCond314) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond314) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond314) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond314) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond314) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond314) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond314) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond314) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond314) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond314) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond314) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond314) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond314) CFA_SP SP+-2
          CFI (cfiCond314) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond315 Using cfiCommon0
          CFI (cfiCond315) Function ZDApp_AgeOutPendingBindEntry
          CFI (cfiCond315) Conditional ??CrossCallReturnLabel_134
          CFI (cfiCond315) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond315) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond315) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond315) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond315) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond315) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond315) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond315) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond315) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond315) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond315) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond315) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond315) CFA_SP SP+-2
          CFI (cfiCond315) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond316 Using cfiCommon0
          CFI (cfiCond316) Function ZDApp_AgeOutPendingBindEntry
          CFI (cfiCond316) Conditional ??CrossCallReturnLabel_135
          CFI (cfiCond316) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond316) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond316) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond316) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond316) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond316) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond316) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond316) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond316) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond316) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond316) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond316) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond316) CFA_SP SP+-2
          CFI (cfiCond316) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiPicker317 Using cfiCommon1
          CFI (cfiPicker317) NoFunction
          CFI (cfiPicker317) Picker
        MOV     R1,A
        LCALL   ?Subroutine40 & 0xFFFF
??CrossCallReturnLabel_137:
        ADD     A,#0x20
        MOV     DPL,A
        CLR     A
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond313
          CFI EndBlock cfiCond314
          CFI EndBlock cfiCond315
          CFI EndBlock cfiCond316
          CFI EndBlock cfiPicker317

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine40:
          CFI Block cfiCond318 Using cfiCommon0
          CFI Function ZDApp_ProcessPendingBindReq
          CFI Conditional ??CrossCallReturnLabel_136, ??CrossCallReturnLabel_22
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond319 Using cfiCommon0
          CFI (cfiCond319) Function ZDApp_AgeOutPendingBindEntry
          CFI (cfiCond319) Conditional ??CrossCallReturnLabel_136, ??CrossCallReturnLabel_23
          CFI (cfiCond319) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond319) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond319) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond319) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond319) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond319) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond319) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond319) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond319) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond319) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond319) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond319) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond319) CFA_SP SP+-4
          CFI (cfiCond319) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond320 Using cfiCommon0
          CFI (cfiCond320) Function ZDApp_AgeOutPendingBindEntry
          CFI (cfiCond320) Conditional ??CrossCallReturnLabel_137, ??CrossCallReturnLabel_134
          CFI (cfiCond320) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond320) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond320) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond320) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond320) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond320) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond320) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond320) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond320) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond320) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond320) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond320) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond320) CFA_SP SP+-4
          CFI (cfiCond320) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond321 Using cfiCommon0
          CFI (cfiCond321) Function ZDApp_AgeOutPendingBindEntry
          CFI (cfiCond321) Conditional ??CrossCallReturnLabel_137, ??CrossCallReturnLabel_135
          CFI (cfiCond321) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond321) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond321) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond321) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond321) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond321) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond321) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond321) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond321) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond321) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond321) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond321) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond321) CFA_SP SP+-4
          CFI (cfiCond321) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond322 Using cfiCommon0
          CFI (cfiCond322) Function ZDApp_AgeOutPendingBindEntry
          CFI (cfiCond322) Conditional ??CrossCallReturnLabel_137, ??CrossCallReturnLabel_133
          CFI (cfiCond322) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond322) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond322) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond322) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond322) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond322) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond322) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond322) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond322) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond322) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond322) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond322) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond322) CFA_SP SP+-4
          CFI (cfiCond322) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond323 Using cfiCommon0
          CFI (cfiCond323) Function ZDApp_GetEmptyPendingBindReq
          CFI (cfiCond323) Conditional ??CrossCallReturnLabel_137, ??CrossCallReturnLabel_132
          CFI (cfiCond323) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond323) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond323) CFA_SP SP+-9
          CFI Block cfiPicker324 Using cfiCommon1
          CFI (cfiPicker324) NoFunction
          CFI (cfiPicker324) Picker
        MOV     DPTR,#ZDAppPendingBindReq
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOV     R1,A
        MOV     A,R0
        RET
          CFI EndBlock cfiCond318
          CFI EndBlock cfiCond319
          CFI EndBlock cfiCond320
          CFI EndBlock cfiCond321
          CFI EndBlock cfiCond322
          CFI EndBlock cfiCond323
          CFI EndBlock cfiPicker324

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zdoDiscCounter>`:
        DATA8
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for continueJoining>`:
        DATA8
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for devState>`:
        DATA8
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for devStartMode>`:
        DATA8
        DB 2

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for ZDApp_epDesc>`:
        DATA8
        DB 0
        DATA16
        DW ZDAppTaskID
        DW 0H
        DATA8
        DB 0

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for ZDApp_SavedPollRate>`:
        DATA16
        DW 1000

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_Init::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_SecInit::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_SecInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_event_loop::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_event_loop

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_ProcessSecEvent::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_ProcessSecEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDOInitDevice::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDOInitDevice

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_ReadNetworkRestoreState::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_ReadNetworkRestoreState

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDAppDetermineDeviceType::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDAppDetermineDeviceType

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_NetworkStartEvt::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_NetworkStartEvt

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_DeviceAuthEvt::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_DeviceAuthEvt

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_SaveNetworkStateEvt::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_SaveNetworkStateEvt

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_InitUserDesc::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_InitUserDesc

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDAppCheckForHoldKey::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDAppCheckForHoldKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_ProcessOSALMsg::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_ProcessOSALMsg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_ProcessMsgCBs::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_ProcessMsgCBs

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_RegisterCBs::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_RegisterCBs

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_ProcessSecMsg::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_ProcessSecMsg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_ProcessNetworkJoin::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_ProcessNetworkJoin

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_SaveNwkKey::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_SaveNwkKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_ForceConcentratorChange::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_ForceConcentratorChange

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_ResetNwkKey::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_ResetNwkKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_RestoreNwkKey::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_RestoreNwkKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_ResetTimerStart::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_ResetTimerStart

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_ResetTimerCancel::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_ResetTimerCancel

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_LeaveCtrlInit::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_LeaveCtrlInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_LeaveCtrlSet::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_LeaveCtrlSet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_LeaveCtrlReset::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_LeaveCtrlReset

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_LeaveCtrlBypass::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_LeaveCtrlBypass

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_LeaveCtrlStartup::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_LeaveCtrlStartup

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_LeaveReset::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_LeaveReset

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_LeaveUpdate::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_LeaveUpdate

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_NetworkDiscoveryReq::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_NetworkDiscoveryReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_JoinReq::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_JoinReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_DeviceConfigured::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_DeviceConfigured

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_SendEventMsg::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_SendEventMsg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_SendMsg::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_SendMsg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_NetworkDiscoveryConfirmCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_NetworkDiscoveryConfirmCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_NwkDescListProcessing::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_NwkDescListProcessing

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_NetworkFormationConfirmCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_NetworkFormationConfirmCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_beaconNotifyIndCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_beaconNotifyIndCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_StartRouterConfirmCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_StartRouterConfirmCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_JoinConfirmCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_JoinConfirmCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_PermitJoinCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_PermitJoinCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_AddrChangeIndicationCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_AddrChangeIndicationCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_JoinIndicationCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_JoinIndicationCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_ConcentratorIndicationCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_ConcentratorIndicationCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_LeaveCnf::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_LeaveCnf

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_LeaveInd::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_LeaveInd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_SyncIndicationCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_SyncIndicationCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_ManytoOneFailureIndicationCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_ManytoOneFailureIndicationCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_PollConfirmCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_PollConfirmCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_NetworkStatusCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_NetworkStatusCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??AddrMgrWriteNVRequest::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    AddrMgrWriteNVRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_UpdateDeviceIndication::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_UpdateDeviceIndication

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_InMsgCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_InMsgCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_ChangeMatchDescRespPermission::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_ChangeMatchDescRespPermission

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_NetworkInit::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_NetworkInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_NwkStateUpdateCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_NwkStateUpdateCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_NodeProfileSync::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_NodeProfileSync

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_StartJoiningCycle::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_StartJoiningCycle

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_StopJoiningCycle::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_StopJoiningCycle

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_AnnounceNewAddress::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_AnnounceNewAddress

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_NVUpdate::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_NVUpdate

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_CoordStartPANIDConflictCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_CoordStartPANIDConflictCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_SrcRtgIndCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_SrcRtgIndCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_InitZdoCBFunc::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_InitZdoCBFunc

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_RegisterForZdoCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_RegisterForZdoCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_DeregisterForZdoCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_DeregisterForZdoCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_SetPendingBindDefault::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_SetPendingBindDefault

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_InitPendingBind::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_InitPendingBind

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_GetEmptyPendingBindReq::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_GetEmptyPendingBindReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_ProcessPendingBindReq::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_ProcessPendingBindReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_AgeOutPendingBindEntry::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_AgeOutPendingBindEntry

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Ulazi u if.">`:
        DB "Ulazi u if."

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Ne ulazi u if.">`:
        DB "Ne ulazi u if."

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_64:
        DD 100

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_4e2:
        DD 1250

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_258:
        DD 600

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_3e8:
        DD 1000

        END
// 3555 #endif
// 3556 #endif
// 3557 
// 3558 /*********************************************************************
// 3559 *********************************************************************/
// 
// 6 947 bytes in segment BANKED_CODE
//   432 bytes in segment BANK_RELAYS
//    12 bytes in segment XDATA_I
//    12 bytes in segment XDATA_ID
//    43 bytes in segment XDATA_ROM_C
//    61 bytes in segment XDATA_Z
// 
//   444 bytes of CODE     memory
//    27 bytes of CONST    memory (+ 16 bytes shared)
// 6 947 bytes of HUGECODE memory
//    73 bytes of XDATA    memory
//
//Errors: none
//Warnings: none
