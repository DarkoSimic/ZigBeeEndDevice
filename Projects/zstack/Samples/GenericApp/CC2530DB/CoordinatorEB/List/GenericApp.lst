###############################################################################
#
# IAR C/C++ Compiler V9.30.3.3983 for 8051                06/Apr/2017  08:49:15
# Copyright 2004-2016 IAR Systems AB.
# Evaluation license - IAR Embedded Workbench for 8051, Evaluation version 9.30
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\Source\GenericApp.c
#    Command line       =  
#        -f
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0x0422
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\Source\GenericApp.c
#        -D ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D
#        LCD_SUPPORTED=DEBUG -lC
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\List
#        -lA
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\List
#        --diag_suppress Pe001,Pa010 -o
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\Obj
#        -e --no_code_motion --debug --core=plain --dptr=16,1
#        --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 16 -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\Source\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -Ohz --require_prototypes
#    List file          =  
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\List\GenericApp.lst
#    Object file        =  
#        C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\Obj\GenericApp.r51
#
###############################################################################

C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\Source\GenericApp.c
      1          /******************************************************************************
      2            Filename:       GenericApp.c
      3            Revised:        $Date: 2014-09-07 13:36:30 -0700 (Sun, 07 Sep 2014) $
      4            Revision:       $Revision: 40046 $
      5          
      6            Description:    Generic Application (no Profile).
      7          
      8          
      9            Copyright 2004-2014 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License"). You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product. Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          ******************************************************************************/
     39          
     40          /*********************************************************************
     41            This application isn't intended to do anything useful - it is
     42            intended to be a simple example of an application's structure.
     43          
     44            This application periodically sends a "Hello World" message to
     45            another "Generic" application (see 'txMsgDelay'). The application
     46            will also receive "Hello World" packets.
     47          
     48            This application doesn't have a profile, so it handles everything
     49            directly - by itself.
     50          
     51            Key control:
     52              SW1:  changes the delay between TX packets
     53              SW2:  initiates end device binding
     54              SW3:
     55              SW4:  initiates a match description request
     56          *********************************************************************/
     57          
     58          /*********************************************************************
     59           * INCLUDES
     60           */
     61          #include "OSAL.h"
     62          #include "AF.h"
     63          #include "ZDApp.h"
     64          #include "ZDObject.h"
     65          #include "ZDProfile.h"
     66          
     67          #include "GenericApp.h"
     68          #include "DebugTrace.h"
     69          
     70          #if !defined( WIN32 ) || defined( ZBIT )
     71            #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf4
   \   unsigned char volatile __sfr P1SEL
   \                     P1SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf7
   \   unsigned char volatile __sfr P2INP
   \                     P2INP:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfe
   \   unsigned char volatile __sfr P1DIR
   \                     P1DIR:
   \   000000                DS 1
     72          #endif
     73          
     74          /* HAL */
     75          #include "hal_lcd.h"
     76          #include "hal_led.h"
     77          #include "hal_key.h"
     78          #include "hal_uart.h"
     79          #include "hal_adc.h"
     80          
     81          /* RTOS */
     82          #if defined( IAR_ARMCM3_LM )
     83          #include "RTOS_App.h"
     84          #endif
     85          
     86          /*********************************************************************
     87           * MACROS
     88           */
     89          
     90          
     91          #define GENERICAPP_ENDPOINT           10
     92          
     93          #define GENERICAPP_PROFID             0x0F04
     94          #define GENERICAPP_DEVICEID           0x0001
     95          #define GENERICAPP_DEVICE_VERSION     0
     96          #define GENERICAPP_FLAGS              0
     97          
     98          #define GENERICAPP_MAX_CLUSTERS       1
     99          #define GENERICAPP_CLUSTERID          1
    100          
    101          
    102          #define MAX_NUMBER_OF_ENDDEVICES      10
    103          
    104          
    105          // magnetic switch macros
    106          #define DOOR_CLOSED_DETECTION         P1_2
    107          #define TRUE 1
    108          #define CLOSED 1
    109          #define OPENED 0
    110          // magnetic switch macros end
    111          
    112          #define MOTION_DETECTION_PIN           P1_2  
    113             
    114          #define MOTION_SENSOR                  1
    115          #define MAGNETIC_SENSOR                0
    116          #define OPTICAL_SENSOR                 0
    117          #define HELLO_WORLD                    0 
    118          /*********************************************************************
    119           * CONSTANTS
    120           */
    121          
    122          /*********************************************************************
    123           * TYPEDEFS
    124           */
    125          
    126          /*********************************************************************
    127           * GLOBAL VARIABLES
    128           */
    129          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    130          uint8 coin = 1;
   \                     coin:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for coin>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    131          char prevData = 0;
   \                     prevData:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    132          
    133          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    134          uint8 keyPressSW4 = 1;
   \                     keyPressSW4:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for keyPressSW4>`
   \   000001                REQUIRE __INIT_XDATA_I
    135          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    136          uint8 dataBuffer[10];
   \                     dataBuffer:
   \   000000                DS 10
   \   00000A                REQUIRE __INIT_XDATA_Z
    137             

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    138          int counter = 0;
   \                     counter:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    139          
    140          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    141          uint16 shortAddressOfEndDevice[MAX_NUMBER_OF_ENDDEVICES] = {0,0};
   \                     shortAddressOfEndDevice:
   \   000000                DS 20
   \   000014                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    142          uint16 SAddr[MAX_NUMBER_OF_ENDDEVICES] = {0,0};
   \                     SAddr:
   \   000000                DS 20
   \   000014                REQUIRE __INIT_XDATA_Z
    143          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    144          uint8 index = 0;
   \                     index:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    145          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    146          int brojac = 0; 
   \                     brojac:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    147          
    148          
    149          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
    150          const cId_t GenericApp_ClusterList[GENERICAPP_MAX_CLUSTERS] =
   \                     GenericApp_ClusterList:
   \   000000   0100         DW 1
    151          {
    152            GENERICAPP_CLUSTERID
    153          };
    154          

   \                                 In  segment XDATA_ROM_C, align 1
    155          const SimpleDescriptionFormat_t GenericApp_SimpleDesc =
   \                     GenericApp_SimpleDesc:
   \   000000   0A           DB 10
   \   000001   040F         DW 3844
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   01           DB 1
   \   000007   ....         DW GenericApp_ClusterList
   \   000009   01           DB 1
   \   00000A   ....         DW GenericApp_ClusterList
    156          {
    157            GENERICAPP_ENDPOINT,              //  int Endpoint;
    158            GENERICAPP_PROFID,                //  uint16 AppProfId[2];
    159            GENERICAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    160            GENERICAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    161            GENERICAPP_FLAGS,                 //  int   AppFlags:4;
    162            GENERICAPP_MAX_CLUSTERS,          //  byte  AppNumInClusters;
    163            (cId_t *)GenericApp_ClusterList,  //  byte *pAppInClusterList;
    164            GENERICAPP_MAX_CLUSTERS,          //  byte  AppNumInClusters;
    165            (cId_t *)GenericApp_ClusterList   //  byte *pAppInClusterList;
    166          };
    167          
    168          // This is the Endpoint/Interface description.  It is defined here, but
    169          // filled-in in GenericApp_Init().  Another way to go would be to fill
    170          // in the structure here and make it a "const" (in code space).  The
    171          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    172          endPointDesc_t GenericApp_epDesc;
   \                     GenericApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    173          
    174          /*********************************************************************
    175           * EXTERNAL VARIABLES
    176           */
    177          
    178          /*********************************************************************
    179           * EXTERNAL FUNCTIONS
    180           */
    181          
    182            extern void uartInit(void);
    183            extern void uartSend(char);
    184          
    185          
    186          /*********************************************************************
    187           * LOCAL VARIABLES
    188           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    189          byte GenericApp_TaskID;   // Task ID for internal task/event processing
   \                     GenericApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    190                                    // This variable will be received when
    191                                    // GenericApp_Init() is called.
    192          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    193          devStates_t GenericApp_NwkState;
   \                     GenericApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    194          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    195          byte GenericApp_TransID;  // This is the unique message ID (counter)
   \                     GenericApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    196          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    197          afAddrType_t GenericApp_DstAddr;
   \                     GenericApp_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    198          afAddrType_t GenericApp_DstAddr1;
   \                     GenericApp_DstAddr1:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    199          afAddrType_t GenericApp_DstAddr2;
   \                     GenericApp_DstAddr2:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    200          // Number of recieved messages

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    201          static uint16 rxMsgCount;
   \                     rxMsgCount:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    202          
    203          // Time interval between sending messages

   \                                 In  segment XDATA_I, align 1, keep-with-next
    204          static uint32 txMsgDelay = GENERICAPP_SEND_MSG_TIMEOUT;
   \                     txMsgDelay:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for txMsgDelay>`
   \   000004                REQUIRE __INIT_XDATA_I
    205          
    206          /*********************************************************************
    207           * LOCAL FUNCTIONS
    208           */
    209          static void GenericApp_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg );
    210          static void GenericApp_HandleKeys( byte shift, byte keys );
    211          static void GenericApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    212          static void GenericApp_SendTheMessage( void );
    213          
    214          static void GenericApp_EndPointList(uint16);
    215          
    216          
    217          
    218          
    219          #if defined( IAR_ARMCM3_LM )
    220          static void GenericApp_ProcessRtosMessage( void );
    221          #endif
    222          
    223          /*********************************************************************
    224           * NETWORK LAYER CALLBACKS
    225           */
    226          
    227          /*********************************************************************
    228           * PUBLIC FUNCTIONS
    229           */
    230          
    231          /*********************************************************************
    232           * @fn      GenericApp_Init
    233           *
    234           * @brief   Initialization function for the Generic App Task.
    235           *          This is called during initialization and should contain
    236           *          any application specific initialization (ie. hardware
    237           *          initialization/setup, table initialization, power up
    238           *          notificaiton ... ).
    239           *
    240           * @param   task_id - the ID assigned by OSAL.  This ID should be
    241           *                    used to send messages and set timers.
    242           *
    243           * @return  none
    244           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    245          void GenericApp_Init( uint8 task_id )
   \                     GenericApp_Init:
    246          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    247            GenericApp_TaskID = task_id;
   \   000006   90....       MOV     DPTR,#GenericApp_TaskID
   \   000009   F0           MOVX    @DPTR,A
    248            GenericApp_NwkState = DEV_INIT;
   \   00000A   90....       MOV     DPTR,#GenericApp_NwkState
   \   00000D   7401         MOV     A,#0x1
   \   00000F   F0           MOVX    @DPTR,A
    249            GenericApp_TransID = 0;
   \   000010   90....       MOV     DPTR,#GenericApp_TransID
   \   000013   E4           CLR     A
   \   000014   F0           MOVX    @DPTR,A
    250            
    251            // Device hardware initialization can be added here or in main() (Zmain.c).
    252            // If the hardware is application specific - add it here.
    253            // If the hardware is other parts of the device add it in main().
    254          
    255            GenericApp_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \   000015   90....       MOV     DPTR,#GenericApp_DstAddr + 8
   \   000018   7402         MOV     A,#0x2
   \   00001A   F0           MOVX    @DPTR,A
    256            GenericApp_DstAddr.endPoint = GENERICAPP_ENDPOINT;
   \   00001B   A3           INC     DPTR
   \   00001C   740A         MOV     A,#0xa
   \   00001E   F0           MOVX    @DPTR,A
    257            //This is address of Coordinator
    258            GenericApp_DstAddr.addr.shortAddr = 0x0000;                                   
   \   00001F   90....       MOV     DPTR,#GenericApp_DstAddr
   \   000022   E4           CLR     A
   \   000023   F0           MOVX    @DPTR,A
   \   000024   A3           INC     DPTR
   \   000025   F0           MOVX    @DPTR,A
    259          
    260            // Fill out the endpoint description.
    261            GenericApp_epDesc.endPoint = GENERICAPP_ENDPOINT;
   \   000026   90....       MOV     DPTR,#GenericApp_epDesc
   \   000029   740A         MOV     A,#0xa
   \   00002B   F0           MOVX    @DPTR,A
    262            GenericApp_epDesc.task_id = &GenericApp_TaskID;
   \   00002C   A3           INC     DPTR
   \   00002D   74..         MOV     A,#GenericApp_TaskID & 0xff
   \   00002F   F0           MOVX    @DPTR,A
   \   000030   A3           INC     DPTR
   \   000031   74..         MOV     A,#(GenericApp_TaskID >> 8) & 0xff
   \   000033   F0           MOVX    @DPTR,A
    263            GenericApp_epDesc.simpleDesc
    264                      = (SimpleDescriptionFormat_t *)&GenericApp_SimpleDesc;
   \   000034   A3           INC     DPTR
   \   000035   74..         MOV     A,#GenericApp_SimpleDesc & 0xff
   \   000037   F0           MOVX    @DPTR,A
   \   000038   A3           INC     DPTR
   \   000039   74..         MOV     A,#(GenericApp_SimpleDesc >> 8) & 0xff
   \   00003B   F0           MOVX    @DPTR,A
    265            GenericApp_epDesc.latencyReq = noLatencyReqs;
   \   00003C   A3           INC     DPTR
   \   00003D   E4           CLR     A
   \   00003E   F0           MOVX    @DPTR,A
    266          
    267            // Register the endpoint description with the AF
    268            afRegister( &GenericApp_epDesc );
   \   00003F                ; Setup parameters for call to function afRegister
   \   00003F   7A..         MOV     R2,#GenericApp_epDesc & 0xff
   \   000041   7B..         MOV     R3,#(GenericApp_epDesc >> 8) & 0xff
   \   000043   12....       LCALL   `??afRegister::?relay`; Banked call to: afRegister
    269          
    270            // Register for all key events - This app will handle all key events
    271            RegisterForKeys( GenericApp_TaskID );
   \   000046                ; Setup parameters for call to function RegisterForKeys
   \   000046   90....       MOV     DPTR,#GenericApp_TaskID
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   F9           MOV     R1,A
   \   00004B   12....       LCALL   `??RegisterForKeys::?relay`; Banked call to: RegisterForKeys
    272          
    273            // Update the display
    274          #if defined ( LCD_SUPPORTED )
    275            HalLcdWriteString( "GenericApp", HAL_LCD_LINE_1 );
   \   00004E                ; Setup parameters for call to function HalLcdWriteString
   \   00004E   7901         MOV     R1,#0x1
   \   000050   7A..         MOV     R2,#`?<Constant "GenericApp">` & 0xff
   \   000052   7B..         MOV     R3,#(`?<Constant "GenericApp">` >> 8) & 0xff
   \   000054   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    276          #endif
    277          
    278            ZDO_RegisterForZDOMsg( GenericApp_TaskID, End_Device_Bind_rsp );
   \   000057                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000057   7A20         MOV     R2,#0x20
   \   000059   7B80         MOV     R3,#-0x80
   \   00005B   90....       MOV     DPTR,#GenericApp_TaskID
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   F9           MOV     R1,A
   \   000060   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
    279            ZDO_RegisterForZDOMsg( GenericApp_TaskID, Match_Desc_rsp );
   \   000063                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000063   7A06         MOV     R2,#0x6
   \   000065   7B80         MOV     R3,#-0x80
   \   000067   90....       MOV     DPTR,#GenericApp_TaskID
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   F9           MOV     R1,A
   \   00006C   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
    280          
    281          #if defined( IAR_ARMCM3_LM )
    282            // Register this task with RTOS task initiator
    283            RTOS_RegisterApp( task_id, GENERICAPP_RTOS_MSG_EVT );
    284          #endif
    285          }
   \   00006F   7F01         MOV     R7,#0x1
   \   000071   02....       LJMP    ?BANKED_LEAVE_XDATA
    286          /*********************************************************************
    287           * @fn      GenericApp_EndPointList
    288           *
    289           * @brief   Get's short address of end device and put in the end device 
    290                      array
    291           *
    292           * @param   shAddr  - Short Address of connected End Device
    293           * 
    294           * @return  none
    295           */
    296          static void GenericApp_EndPointList(uint16 shAddr)
    297          {
    298           
    299            if(index > MAX_NUMBER_OF_ENDDEVICES)
    300            {
    301              HalLcdWriteString("Max number of end devices overflow.",0);
    302            }
    303            else
    304            {
    305              shortAddressOfEndDevice[index];
                     ^
Warning[Pe174]: expression has no effect
    306              index++;
    307            }
    308            
    309            
    310          }
    311          /*********************************************************************
    312           * @fn      GenericApp_ProcessEvent
    313           *
    314           * @brief   Generic Application Task event processor.  This function
    315           *          is called to process all events for the task.  Events
    316           *          include timers, messages and any other user defined events.
    317           *
    318           * @param   task_id  - The OSAL assigned task ID.
    319           * @param   events - events to process.  This is a bit map and can
    320           *                   contain more than one event.
    321           *
    322           * @return  none
    323           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    324          uint16 GenericApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     GenericApp_ProcessEvent:
    325          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV     A,#-0xb
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
    326            afIncomingMSGPacket_t *MSGpkt;
    327            afDataConfirm_t *afDataConfirm;
    328            zAddrType_t dstAddr;
    329          
    330              char shAddr[5];
                          ^
Warning[Pe550]: variable "shAddr" was set but never used
    331              shAddr[4] = '\0';
    332              
    333              uint8 i;
                           ^
Warning[Pe177]: variable "i" was declared but never referenced
    334              uint16 shortAdrress;
                            ^
Warning[Pe177]: variable "shortAdrress" was declared but never referenced
    335            // Data Confirmation message fields
    336            byte sentEP;
    337            ZStatus_t sentStatus;
    338            byte sentTransID;       // This should match the value sent
    339            (void)task_id;  // Intentionally unreferenced parameter
    340          
    341            if ( events & SYS_EVENT_MSG )
   \   00000E   EB           MOV     A,R3
   \   00000F   5480         ANL     A,#0x80
   \   000011   7003         JNZ     $+5
   \   000013   02....       LJMP    ??GenericApp_ProcessEvent_0 & 0xFFFF
    342            {
    343              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( GenericApp_TaskID );
   \   000016                ; Setup parameters for call to function osal_msg_receive
   \   000016   8013         SJMP    ??GenericApp_ProcessEvent_1
    344              
    345              while ( MSGpkt )
    346              {
    347                switch ( MSGpkt->hdr.event )
    348                {
    349                  case ZDO_CB_MSG:
    350                    
    351                    GenericApp_ProcessZDOMsgs( (zdoIncomingMsg_t *)MSGpkt );
    352                    
    353                    break;
    354          
    355                  case KEY_CHANGE:
    356            
    357                    // GenericApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    358                    break;
    359          
    360                  case AF_DATA_CONFIRM_CMD:
    361                    // This message is received as a confirmation of a data packet sent.
    362                    // The status is of ZStatus_t type [defined in ZComDef.h]
    363                    // The message fields are defined in AF.h
    364                   
    365                    afDataConfirm = (afDataConfirm_t *)MSGpkt;
    366          
    367                    sentEP = afDataConfirm->endpoint;
    368                    (void)sentEP;  // This info not used now
    369                    sentTransID = afDataConfirm->transID;
    370                    (void)sentTransID;  // This info not used now
    371          
    372                    sentStatus = afDataConfirm->hdr.status;
    373                    // Action taken when confirmation is received.
    374                    if ( sentStatus != ZSuccess )
    375                    {
    376                      // The data wasn't delivered -- Do something
    377                    }
    378                    break;
    379          
    380                  case AF_INCOMING_MSG_CMD:
    381                    
    382                   //Receive "The" Message
    383                   GenericApp_MessageMSGCB( MSGpkt );
    384                   
    385          
    386                    break;
    387          
    388                  case ZDO_STATE_CHANGE:
    389                     
    390                  
    391                    
    392                    GenericApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
    393                    if ( (GenericApp_NwkState == DEV_ZB_COORD) ||
    394                         (GenericApp_NwkState == DEV_ROUTER) ||
    395                         (GenericApp_NwkState == DEV_END_DEVICE) )
    396                    {
    397                      
    398                     
    399                      // Start sending "the" message in a regular interval.
    400                      osal_start_timerEx( GenericApp_TaskID,
    401                                          GENERICAPP_SEND_MSG_EVT,
    402                                          txMsgDelay );
    403                      
    404          
    405                    }
    406                                
    407                    break;
    408          
    409                  default:
    410                     
    411                    
    412                      osal_set_event(GenericApp_TaskID,GENERICAPP_SEND_MSG_EVT);
   \                     ??GenericApp_ProcessEvent_2:
   \   000018                ; Setup parameters for call to function osal_set_event
   \   000018   7A01         MOV     R2,#0x1
   \   00001A   7B00         MOV     R3,#0x0
   \   00001C   90....       MOV     DPTR,#GenericApp_TaskID
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F9           MOV     R1,A
   \   000021   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
    413                     break;
    414                }
    415          
    416                // Release the memory
    417                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??GenericApp_ProcessEvent_3:
   \   000024                ; Setup parameters for call to function osal_msg_deallocate
   \   000024   EE           MOV     A,R6
   \   000025   FA           MOV     R2,A
   \   000026   EF           MOV     A,R7
   \   000027   FB           MOV     R3,A
   \   000028   12....       LCALL   `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
    418          
    419                // Next
    420                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( GenericApp_TaskID );
   \   00002B                ; Setup parameters for call to function osal_msg_receive
   \                     ??GenericApp_ProcessEvent_1:
   \   00002B   90....       MOV     DPTR,#GenericApp_TaskID
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   F9           MOV     R1,A
   \   000030   12....       LCALL   `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   000033   8A..         MOV     ?V2,R2
   \   000035   8B..         MOV     ?V3,R3
   \   000037   AE..         MOV     R6,?V2
   \   000039   AF..         MOV     R7,?V3
   \   00003B   EE           MOV     A,R6
   \   00003C   4F           ORL     A,R7
   \   00003D   7003         JNZ     $+5
   \   00003F   02....       LJMP    ??GenericApp_ProcessEvent_4 & 0xFFFF
   \   000042   8E82         MOV     DPL,R6
   \   000044   8F83         MOV     DPH,R7
   \   000046   E0           MOVX    A,@DPTR
   \   000047   24E6         ADD     A,#-0x1a
   \   000049   7003         JNZ     $+5
   \   00004B   02....       LJMP    ??GenericApp_ProcessEvent_5 & 0xFFFF
   \   00004E   245A         ADD     A,#0x5a
   \   000050   60D2         JZ      ??GenericApp_ProcessEvent_3
   \   000052   24EF         ADD     A,#-0x11
   \   000054   7003         JNZ     $+5
   \   000056   02....       LJMP    ??GenericApp_ProcessEvent_6 & 0xFFFF
   \   000059   24FE         ADD     A,#-0x2
   \   00005B   6006         JZ      ??GenericApp_ProcessEvent_7
   \   00005D   24D6         ADD     A,#-0x2a
   \   00005F   60C3         JZ      ??GenericApp_ProcessEvent_3
   \   000061   80B5         SJMP    ??GenericApp_ProcessEvent_2
   \                     ??GenericApp_ProcessEvent_7:
   \   000063   EE           MOV     A,R6
   \   000064   240C         ADD     A,#0xc
   \   000066   F582         MOV     DPL,A
   \   000068   E4           CLR     A
   \   000069   3F           ADDC    A,R7
   \   00006A   F583         MOV     DPH,A
   \   00006C   E0           MOVX    A,@DPTR
   \   00006D   F5..         MOV     ?V2,A
   \   00006F   A3           INC     DPTR
   \   000070   E0           MOVX    A,@DPTR
   \   000071   F5..         MOV     ?V3,A
   \   000073   78..         MOV     R0,#?V2
   \   000075   12....       LCALL   ?US_SWITCH_SPARSE
   \                     `?<Jumptable for GenericApp_ProcessEvent>_0`:
   \   000078   0000         DW        0
   \   00007A   0200         DW        2
   \   00007C   0680         DW        32774
   \   00007E   ....         DW        ??GenericApp_ProcessEvent_8
   \   000080   2080         DW        32800
   \   000082   ....         DW        ??GenericApp_ProcessEvent_9
   \   000084   ....         DW        ??GenericApp_ProcessEvent_3
   \                     ??GenericApp_ProcessEvent_8:
   \   000086                ; Setup parameters for call to function ZDO_ParseEPListRsp
   \   000086   EE           MOV     A,R6
   \   000087   FA           MOV     R2,A
   \   000088   EF           MOV     A,R7
   \   000089   FB           MOV     R3,A
   \   00008A   12....       LCALL   `??ZDO_ParseEPListRsp::?relay`; Banked call to: ZDO_ParseEPListRsp
   \   00008D   8A..         MOV     ?V2,R2
   \   00008F   8B..         MOV     ?V3,R3
   \   000091   EA           MOV     A,R2
   \   000092   45..         ORL     A,?V3
   \   000094   608E         JZ      ??GenericApp_ProcessEvent_3
   \   000096   8A82         MOV     DPL,R2
   \   000098   8B83         MOV     DPH,R3
   \   00009A   E0           MOVX    A,@DPTR
   \   00009B   7032         JNZ     ??GenericApp_ProcessEvent_10
   \   00009D   A3           INC     DPTR
   \   00009E   A3           INC     DPTR
   \   00009F   A3           INC     DPTR
   \   0000A0   E0           MOVX    A,@DPTR
   \   0000A1   602C         JZ      ??GenericApp_ProcessEvent_10
   \   0000A3   90....       MOV     DPTR,#GenericApp_DstAddr + 8
   \   0000A6   7402         MOV     A,#0x2
   \   0000A8   F0           MOVX    @DPTR,A
   \   0000A9   8A82         MOV     DPL,R2
   \   0000AB   8B83         MOV     DPH,R3
   \   0000AD   A3           INC     DPTR
   \   0000AE   E0           MOVX    A,@DPTR
   \   0000AF   F8           MOV     R0,A
   \   0000B0   A3           INC     DPTR
   \   0000B1   E0           MOVX    A,@DPTR
   \   0000B2   F9           MOV     R1,A
   \   0000B3   90....       MOV     DPTR,#GenericApp_DstAddr
   \   0000B6   E8           MOV     A,R0
   \   0000B7   F0           MOVX    @DPTR,A
   \   0000B8   A3           INC     DPTR
   \   0000B9   E9           MOV     A,R1
   \   0000BA   F0           MOVX    @DPTR,A
   \   0000BB   8A82         MOV     DPL,R2
   \   0000BD   8B83         MOV     DPH,R3
   \   0000BF   A3           INC     DPTR
   \   0000C0   A3           INC     DPTR
   \   0000C1   A3           INC     DPTR
   \   0000C2   A3           INC     DPTR
   \   0000C3   E0           MOVX    A,@DPTR
   \   0000C4   90....       MOV     DPTR,#GenericApp_DstAddr + 9
   \   0000C7   F0           MOVX    @DPTR,A
   \   0000C8                ; Setup parameters for call to function HalLedSet
   \   0000C8   7A01         MOV     R2,#0x1
   \   0000CA   7908         MOV     R1,#0x8
   \   0000CC   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   \                     ??GenericApp_ProcessEvent_10:
   \   0000CF                ; Setup parameters for call to function osal_mem_free
   \   0000CF   AA..         MOV     R2,?V2
   \   0000D1   AB..         MOV     R3,?V3
   \   0000D3   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0000D6   02....       LJMP    ??GenericApp_ProcessEvent_3 & 0xFFFF
   \                     ??GenericApp_ProcessEvent_9:
   \   0000D9   EE           MOV     A,R6
   \   0000DA   2413         ADD     A,#0x13
   \   0000DC   F582         MOV     DPL,A
   \   0000DE   E4           CLR     A
   \   0000DF   3F           ADDC    A,R7
   \   0000E0   F583         MOV     DPH,A
   \   0000E2   E0           MOVX    A,@DPTR
   \   0000E3   F8           MOV     R0,A
   \   0000E4   A3           INC     DPTR
   \   0000E5   E0           MOVX    A,@DPTR
   \   0000E6   F583         MOV     DPH,A
   \   0000E8   8882         MOV     DPL,R0
   \   0000EA   E0           MOVX    A,@DPTR
   \   0000EB   700A         JNZ     ??GenericApp_ProcessEvent_11
   \   0000ED                ; Setup parameters for call to function HalLedSet
   \   0000ED   7A01         MOV     R2,#0x1
   \                     ??GenericApp_ProcessEvent_12:
   \   0000EF   7908         MOV     R1,#0x8
   \   0000F1   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   \   0000F4   02....       LJMP    ??GenericApp_ProcessEvent_3 & 0xFFFF
   \                     ??GenericApp_ProcessEvent_11:
   \   0000F7                ; Setup parameters for call to function HalLedSet
   \   0000F7   7A04         MOV     R2,#0x4
   \   0000F9   80F4         SJMP    ??GenericApp_ProcessEvent_12
   \                     ??GenericApp_ProcessEvent_5:
   \   0000FB   A3           INC     DPTR
   \   0000FC   A3           INC     DPTR
   \   0000FD   A3           INC     DPTR
   \   0000FE   A3           INC     DPTR
   \   0000FF   E0           MOVX    A,@DPTR
   \   000100   6401         XRL     A,#0x1
   \   000102   7002         JNZ     ??GenericApp_ProcessEvent_13
   \   000104   A3           INC     DPTR
   \   000105   E0           MOVX    A,@DPTR
   \                     ??GenericApp_ProcessEvent_13:
   \   000106   706B         JNZ     ??GenericApp_ProcessEvent_14
   \   000108   90....       MOV     DPTR,#rxMsgCount
   \   00010B   E0           MOVX    A,@DPTR
   \   00010C   2401         ADD     A,#0x1
   \   00010E   F0           MOVX    @DPTR,A
   \   00010F   A3           INC     DPTR
   \   000110   E0           MOVX    A,@DPTR
   \   000111   3400         ADDC    A,#0x0
   \   000113   F0           MOVX    @DPTR,A
   \   000114                ; Setup parameters for call to function HalLcdWriteString
   \   000114   7900         MOV     R1,#0x0
   \   000116   7A..         MOV     R2,#`?<Constant "---------------------...">` & 0xff
   \   000118   7B..         MOV     R3,#(`?<Constant "---------------------...">` >> 8) & 0xff
   \   00011A   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
   \   00011D                ; Setup parameters for call to function HalLcdWriteString
   \   00011D   7900         MOV     R1,#0x0
   \   00011F   7A..         MOV     R2,#`?<Constant "Received data:">` & 0xff
   \   000121   7B..         MOV     R3,#(`?<Constant "Received data:">` >> 8) & 0xff
   \   000123   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
   \   000126   75..00       MOV     ?V2,#0x0
   \   000129   801D         SJMP    ??GenericApp_ProcessEvent_15
   \                     ??GenericApp_ProcessEvent_16:
   \   00012B                ; Setup parameters for call to function uartSend
   \   00012B   A8..         MOV     R0,?V2
   \   00012D   EE           MOV     A,R6
   \   00012E   2422         ADD     A,#0x22
   \   000130   F582         MOV     DPL,A
   \   000132   E4           CLR     A
   \   000133   3F           ADDC    A,R7
   \   000134   F583         MOV     DPH,A
   \   000136   E0           MOVX    A,@DPTR
   \   000137   28           ADD     A,R0
   \   000138   FA           MOV     R2,A
   \   000139   A3           INC     DPTR
   \   00013A   E0           MOVX    A,@DPTR
   \   00013B   3400         ADDC    A,#0x0
   \   00013D   8A82         MOV     DPL,R2
   \   00013F   F583         MOV     DPH,A
   \   000141   E0           MOVX    A,@DPTR
   \   000142   F9           MOV     R1,A
   \   000143   12....       LCALL   `??uartSend::?relay` ; Banked call to: uartSend
   \   000146   05..         INC     ?V2
   \                     ??GenericApp_ProcessEvent_15:
   \   000148   EE           MOV     A,R6
   \   000149   2420         ADD     A,#0x20
   \   00014B   F582         MOV     DPL,A
   \   00014D   E4           CLR     A
   \   00014E   3F           ADDC    A,R7
   \   00014F   F583         MOV     DPH,A
   \   000151   E0           MOVX    A,@DPTR
   \   000152   FA           MOV     R2,A
   \   000153   A3           INC     DPTR
   \   000154   E0           MOVX    A,@DPTR
   \   000155   FB           MOV     R3,A
   \   000156   C3           CLR     C
   \   000157   E5..         MOV     A,?V2
   \   000159   9A           SUBB    A,R2
   \   00015A   E4           CLR     A
   \   00015B   9B           SUBB    A,R3
   \   00015C   40CD         JC      ??GenericApp_ProcessEvent_16
   \   00015E                ; Setup parameters for call to function HalLcdWriteString
   \   00015E   7900         MOV     R1,#0x0
   \   000160   7A..         MOV     R2,#`?<Constant "">` & 0xff
   \   000162   7B..         MOV     R3,#(`?<Constant "">` >> 8) & 0xff
   \   000164   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
   \   000167                ; Setup parameters for call to function HalLcdWriteString
   \   000167   7900         MOV     R1,#0x0
   \   000169   7A..         MOV     R2,#`?<Constant "---------------------...">` & 0xff
   \   00016B   7B..         MOV     R3,#(`?<Constant "---------------------...">` >> 8) & 0xff
   \                     ??GenericApp_ProcessEvent_17:
   \   00016D   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
   \   000170   02....       LJMP    ??GenericApp_ProcessEvent_3 & 0xFFFF
   \                     ??GenericApp_ProcessEvent_14:
   \   000173                ; Setup parameters for call to function HalLcdWriteString
   \   000173   7900         MOV     R1,#0x0
   \   000175   7A..         MOV     R2,#`?<Constant "Podatak nije primljen.">` & 0xff
   \   000177   7B..         MOV     R3,#(`?<Constant "Podatak nije primljen.">` >> 8) & 0xff
   \   000179   80F2         SJMP    ??GenericApp_ProcessEvent_17
   \                     ??GenericApp_ProcessEvent_6:
   \   00017B   A3           INC     DPTR
   \   00017C   E0           MOVX    A,@DPTR
   \   00017D   90....       MOV     DPTR,#GenericApp_NwkState
   \   000180   F0           MOVX    @DPTR,A
   \   000181   6409         XRL     A,#0x9
   \   000183   600D         JZ      ??GenericApp_ProcessEvent_18
   \   000185   E0           MOVX    A,@DPTR
   \   000186   6407         XRL     A,#0x7
   \   000188   6008         JZ      ??GenericApp_ProcessEvent_18
   \   00018A   E0           MOVX    A,@DPTR
   \   00018B   6406         XRL     A,#0x6
   \   00018D   6003         JZ      $+5
   \   00018F   02....       LJMP    ??GenericApp_ProcessEvent_3 & 0xFFFF
   \                     ??GenericApp_ProcessEvent_18:
   \   000192                ; Setup parameters for call to function osal_start_timerEx
   \   000192   90....       MOV     DPTR,#txMsgDelay
   \   000195   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000198   7A01         MOV     R2,#0x1
   \   00019A   7B00         MOV     R3,#0x0
   \   00019C   90....       MOV     DPTR,#GenericApp_TaskID
   \   00019F   E0           MOVX    A,@DPTR
   \   0001A0   F9           MOV     R1,A
   \   0001A1   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   0001A4   7404         MOV     A,#0x4
   \   0001A6   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001A9   02....       LJMP    ??GenericApp_ProcessEvent_3 & 0xFFFF
    421                  
    422              }
    423          
    424              // return unprocessed events
    425              return (events ^ SYS_EVENT_MSG);
   \                     ??GenericApp_ProcessEvent_4:
   \   0001AC   AA..         MOV     R2,?V0
   \   0001AE   E5..         MOV     A,?V1
   \   0001B0   6480         XRL     A,#0x80
   \   0001B2   FB           MOV     R3,A
   \   0001B3   02....       LJMP    ??GenericApp_ProcessEvent_19 & 0xFFFF
    426            }
    427          
    428            // Send a message out - This event is generated by a timer
    429            //  (setup in GenericApp_Init()).
    430            if ( events & GENERICAPP_SEND_MSG_EVT )
   \                     ??GenericApp_ProcessEvent_0:
   \   0001B6   EA           MOV     A,R2
   \   0001B7   A2E0         MOV     C,0xE0 /* A   */.0
   \   0001B9   4003         JC      $+5
   \   0001BB   02....       LJMP    ??GenericApp_ProcessEvent_20 & 0xFFFF
    431            {
    432            
    433              if(keyPressSW4)
   \   0001BE   90....       MOV     DPTR,#keyPressSW4
   \   0001C1   E0           MOVX    A,@DPTR
   \   0001C2   6071         JZ      ??GenericApp_ProcessEvent_21
    434              {
    435               /*
    436                dstAddr.addrMode = Addr16Bit;
    437                dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVALL;
    438                ZDP_MatchDescReq( &dstAddr,NWK_BROADCAST_SHORTADDR_DEVALL,
    439                                  GENERICAPP_PROFID,
    440                                  GENERICAPP_MAX_CLUSTERS, (cId_t *)GenericApp_ClusterList,
    441                                  GENERICAPP_MAX_CLUSTERS, (cId_t *)GenericApp_ClusterList,
    442                                  FALSE );
    443               
    444             
    445               */ 
    446                
    447                dstAddr.addrMode = Addr16Bit;
   \   0001C4   740A         MOV     A,#0xa
   \   0001C6   12....       LCALL   ?XSTACK_DISP0_8
   \   0001C9   7402         MOV     A,#0x2
   \   0001CB   F0           MOVX    @DPTR,A
    448                dstAddr.addr.shortAddr = NLME_GetShortAddr();
   \   0001CC                ; Setup parameters for call to function NLME_GetShortAddr
   \   0001CC   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   0001CF   7402         MOV     A,#0x2
   \   0001D1   12....       LCALL   ?XSTACK_DISP0_8
   \   0001D4   EA           MOV     A,R2
   \   0001D5   F0           MOVX    @DPTR,A
   \   0001D6   A3           INC     DPTR
   \   0001D7   EB           MOV     A,R3
   \   0001D8   F0           MOVX    @DPTR,A
    449                ZDP_EndDeviceBindReq( &dstAddr, 0x0000,
    450                                      GenericApp_epDesc.endPoint,
    451                                      GENERICAPP_PROFID,
    452                                      GENERICAPP_MAX_CLUSTERS, (cId_t *)GenericApp_ClusterList,
    453                                      GENERICAPP_MAX_CLUSTERS, (cId_t *)GenericApp_ClusterList,
    454                                      FALSE );
   \   0001D9   75....       MOV     ?V2,#GenericApp_ClusterList & 0xff
   \   0001DC   75....       MOV     ?V3,#(GenericApp_ClusterList >> 8) & 0xff
   \   0001DF                ; Setup parameters for call to function ZDP_EndDeviceBindReq
   \   0001DF   75..00       MOV     ?V4,#0x0
   \   0001E2   78..         MOV     R0,#?V4
   \   0001E4   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001E7   78..         MOV     R0,#?V2
   \   0001E9   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001EC   75..01       MOV     ?V4,#0x1
   \   0001EF   78..         MOV     R0,#?V4
   \   0001F1   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001F4   78..         MOV     R0,#?V2
   \   0001F6   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001F9   75..01       MOV     ?V2,#0x1
   \   0001FC   78..         MOV     R0,#?V2
   \   0001FE   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000201   75..04       MOV     ?V2,#0x4
   \   000204   75..0F       MOV     ?V3,#0xf
   \   000207   78..         MOV     R0,#?V2
   \   000209   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00020C   90....       MOV     DPTR,#GenericApp_epDesc
   \   00020F   E0           MOVX    A,@DPTR
   \   000210   F9           MOV     R1,A
   \   000211   7C00         MOV     R4,#0x0
   \   000213   7D00         MOV     R5,#0x0
   \   000215   740B         MOV     A,#0xb
   \   000217   12....       LCALL   ?XSTACK_DISP101_8
   \   00021A   12....       LCALL   `??ZDP_EndDeviceBindReq::?relay`; Banked call to: ZDP_EndDeviceBindReq
   \   00021D   7409         MOV     A,#0x9
   \   00021F   12....       LCALL   ?DEALLOC_XSTACK8
    455                
    456               
    457               
    458                
    459                keyPressSW4 = 0;
   \   000222   90....       MOV     DPTR,#keyPressSW4
   \   000225   E4           CLR     A
   \   000226   F0           MOVX    @DPTR,A
    460                
    461                osal_set_event(GenericApp_TaskID,GENERICAPP_SEND_MSG_EVT);
   \   000227                ; Setup parameters for call to function osal_set_event
   \   000227   7A01         MOV     R2,#0x1
   \   000229   FB           MOV     R3,A
   \   00022A   90....       MOV     DPTR,#GenericApp_TaskID
   \   00022D   E0           MOVX    A,@DPTR
   \   00022E   F9           MOV     R1,A
   \   00022F   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   000232   02....       LJMP    ??GenericApp_ProcessEvent_22 & 0xFFFF
    462                
    463              }
    464              else
    465              {
    466               
    467                
    468              // Send "the" message
    469              GenericApp_SendTheMessage();
   \                     ??GenericApp_ProcessEvent_21:
   \   000235   90....       MOV     DPTR,#`?<Constant {49}>`
   \   000238   7401         MOV     A,#0x1
   \   00023A   12....       LCALL   ?XSTACK_DISP102_8
   \   00023D   7401         MOV     A,#0x1
   \   00023F   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   \   000242   90....       MOV     DPTR,#`?<Constant {48}>`
   \   000245   AC..         MOV     R4,?XSP + 0
   \   000247   AD..         MOV     R5,?XSP + 1
   \   000249   04           INC     A
   \   00024A   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   \   00024D   90....       MOV     DPTR,#GenericApp_DstAddr
   \   000250   F0           MOVX    @DPTR,A
   \   000251   A3           INC     DPTR
   \   000252   F0           MOVX    @DPTR,A
   \   000253                ; Setup parameters for call to function motionDetection
   \   000253   12....       LCALL   `??motionDetection::?relay`; Banked call to: motionDetection
   \   000256   E9           MOV     A,R1
   \   000257   75..1E       MOV     ?V2,#0x1e
   \   00025A   78..         MOV     R0,#?V2
   \   00025C   6049         JZ      ??GenericApp_ProcessEvent_23
   \   00025E                ; Setup parameters for call to function AF_DataRequest
   \   00025E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000261   75....       MOV     ?V2,#GenericApp_TransID & 0xff
   \   000264   75....       MOV     ?V3,#(GenericApp_TransID >> 8) & 0xff
   \   000267   78..         MOV     R0,#?V2
   \   000269   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00026C   7404         MOV     A,#0x4
   \   00026E   12....       LCALL   ?XSTACK_DISP100_8
   \   000271   88..         MOV     ?V2,R0
   \   000273   89..         MOV     ?V3,R1
   \   000275   78..         MOV     R0,#?V2
   \   000277   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00027A   75..02       MOV     ?V2,#0x2
   \   00027D   75..00       MOV     ?V3,#0x0
   \   000280   78..         MOV     R0,#?V2
   \   000282   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000285   75..01       MOV     ?V2,#0x1
   \   000288   78..         MOV     R0,#?V2
   \   00028A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00028D   7900         MOV     R1,#0x0
   \   00028F   7C..         MOV     R4,#GenericApp_epDesc & 0xff
   \   000291   7D..         MOV     R5,#(GenericApp_epDesc >> 8) & 0xff
   \   000293   7A..         MOV     R2,#GenericApp_DstAddr & 0xff
   \   000295   7B..         MOV     R3,#(GenericApp_DstAddr >> 8) & 0xff
   \   000297   12....       LCALL   `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   00029A   7409         MOV     A,#0x9
   \   00029C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00029F                ; Setup parameters for call to function HalLcdWriteString
   \   00029F   7900         MOV     R1,#0x0
   \   0002A1   7A..         MOV     R2,#`?<Constant "Pokret je detektovan.">` & 0xff
   \   0002A3   7B..         MOV     R3,#(`?<Constant "Pokret je detektovan.">` >> 8) & 0xff
   \   0002A5   8047         SJMP    ??GenericApp_ProcessEvent_24
   \                     ??GenericApp_ProcessEvent_23:
   \   0002A7                ; Setup parameters for call to function AF_DataRequest
   \   0002A7   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0002AA   75....       MOV     ?V2,#GenericApp_TransID & 0xff
   \   0002AD   75....       MOV     ?V3,#(GenericApp_TransID >> 8) & 0xff
   \   0002B0   78..         MOV     R0,#?V2
   \   0002B2   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0002B5   7403         MOV     A,#0x3
   \   0002B7   12....       LCALL   ?XSTACK_DISP100_8
   \   0002BA   88..         MOV     ?V2,R0
   \   0002BC   89..         MOV     ?V3,R1
   \   0002BE   78..         MOV     R0,#?V2
   \   0002C0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0002C3   75..02       MOV     ?V2,#0x2
   \   0002C6   75..00       MOV     ?V3,#0x0
   \   0002C9   78..         MOV     R0,#?V2
   \   0002CB   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0002CE   75..01       MOV     ?V2,#0x1
   \   0002D1   78..         MOV     R0,#?V2
   \   0002D3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0002D6   7900         MOV     R1,#0x0
   \   0002D8   7C..         MOV     R4,#GenericApp_epDesc & 0xff
   \   0002DA   7D..         MOV     R5,#(GenericApp_epDesc >> 8) & 0xff
   \   0002DC   7A..         MOV     R2,#GenericApp_DstAddr & 0xff
   \   0002DE   7B..         MOV     R3,#(GenericApp_DstAddr >> 8) & 0xff
   \   0002E0   12....       LCALL   `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   0002E3   7409         MOV     A,#0x9
   \   0002E5   12....       LCALL   ?DEALLOC_XSTACK8
   \   0002E8                ; Setup parameters for call to function HalLcdWriteString
   \   0002E8   7900         MOV     R1,#0x0
   \   0002EA   7A..         MOV     R2,#`?<Constant "Nema kretanja.">` & 0xff
   \   0002EC   7B..         MOV     R3,#(`?<Constant "Nema kretanja.">` >> 8) & 0xff
   \                     ??GenericApp_ProcessEvent_24:
   \   0002EE   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    470               
    471              
    472               //Setup to send message again evry 1000 ms
    473               osal_start_timerEx( GenericApp_TaskID,
    474                                   GENERICAPP_SEND_MSG_EVT,
    475                                   2000);
   \   0002F1                ; Setup parameters for call to function osal_start_timerEx
   \   0002F1   90....       MOV     DPTR,#__Constant_7d0
   \   0002F4   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   0002F7   7A01         MOV     R2,#0x1
   \   0002F9   7B00         MOV     R3,#0x0
   \   0002FB   90....       MOV     DPTR,#GenericApp_TaskID
   \   0002FE   E0           MOVX    A,@DPTR
   \   0002FF   F9           MOV     R1,A
   \   000300   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000303   7404         MOV     A,#0x4
   \   000305   12....       LCALL   ?DEALLOC_XSTACK8
    476              
    477              
    478              }
    479              // return unprocessed events
    480              return (events ^ GENERICAPP_SEND_MSG_EVT);
   \                     ??GenericApp_ProcessEvent_22:
   \   000308   E5..         MOV     A,?V0
   \   00030A   6401         XRL     A,#0x1
   \   00030C   FA           MOV     R2,A
   \   00030D   AB..         MOV     R3,?V1
   \   00030F   8004         SJMP    ??GenericApp_ProcessEvent_19
    481            }
    482          
    483          #if defined( IAR_ARMCM3_LM )
    484            // Receive a message from the RTOS queue
    485            if ( events & GENERICAPP_RTOS_MSG_EVT )
    486            {
    487              // Process message from RTOS queue
    488              GenericApp_ProcessRtosMessage();
    489          
    490              // return unprocessed events
    491              return (events ^ GENERICAPP_RTOS_MSG_EVT);
    492            }
    493          #endif
    494          
    495            // Discard unknown events
    496            return 0;
   \                     ??GenericApp_ProcessEvent_20:
   \   000311   7A00         MOV     R2,#0x0
   \   000313   7B00         MOV     R3,#0x0
   \                     ??GenericApp_ProcessEvent_19:
   \   000315   740B         MOV     A,#0xb
   \   000317   12....       LCALL   ?DEALLOC_XSTACK8
   \   00031A   7F06         MOV     R7,#0x6
   \   00031C   02....       LJMP    ?BANKED_LEAVE_XDATA
    497          }
    498          
    499          /*********************************************************************
    500           * Event Generation Functions
    501           */
    502          
    503          /*********************************************************************
    504           * @fn      GenericApp_ProcessZDOMsgs()
    505           *
    506           * @brief   Process response messages
    507           *
    508           * @param   none
    509           *
    510           * @return  none
    511           */
    512          static void GenericApp_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg )
    513          {
    514           
    515            switch ( inMsg->clusterID )
    516            {
    517              case End_Device_Bind_rsp:
    518                if ( ZDO_ParseBindRsp( inMsg ) == ZSuccess )
    519                {
    520                  // Light LED
    521                  HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
    522                }
    523          #if defined( BLINK_LEDS )
    524                else
    525                {
    526                  // Flash LED to show failure
    527                  HalLedSet ( HAL_LED_4, HAL_LED_MODE_FLASH );
    528                }
    529          #endif
    530                break;
    531          
    532              case Match_Desc_rsp:
    533                {
    534                  ZDO_ActiveEndpointRsp_t *pRsp = ZDO_ParseEPListRsp( inMsg );
    535                  if ( pRsp )
    536                  {
    537                    
    538                    
    539                        if ( pRsp->status == ZSuccess && pRsp->cnt )
    540                        {
    541                          
    542                      GenericApp_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
    543                      GenericApp_DstAddr.addr.shortAddr = pRsp->nwkAddr;
    544                      // Take the first endpoint, Can be changed to search through endpoints
    545                      GenericApp_DstAddr.endPoint = pRsp->epList[0];
    546          
    547                      // Light LED
    548                      HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
    549                    }
    550                    osal_mem_free( pRsp );
    551                  }
    552                }
    553                break;
    554            }
    555          }
    556          
    557          /*********************************************************************
    558           * @fn      GenericApp_HandleKeys
    559           *
    560           * @brief   Handles all key events for this device.
    561           *
    562           * @param   shift - true if in shift/alt.
    563           * @param   keys - bit field for key events. Valid entries:
    564           *                 HAL_KEY_SW_4
    565           *                 HAL_KEY_SW_3
    566           *                 HAL_KEY_SW_2
    567           *                 HAL_KEY_SW_1
    568           *
    569           * @return  none
    570           */
    571          static void GenericApp_HandleKeys( uint8 shift, uint8 keys )
    572          {
    573            zAddrType_t dstAddr;
    574          
    575            // Shift is used to make each button/switch dual purpose.
    576            if ( shift )
    577            {
    578              if ( keys & HAL_KEY_SW_1 )
    579              {
    580              }
    581              if ( keys & HAL_KEY_SW_2 )
    582              {
    583              }
    584              if ( keys & HAL_KEY_SW_3 )
    585              {
    586              }
    587              if ( keys & HAL_KEY_SW_4 )
    588              {
    589              }
    590            }
    591            else
    592            {
    593              if ( keys & HAL_KEY_SW_1 )
    594              {
    595          #if defined( SWITCH1_BIND )
    596                // We can use SW1 to simulate SW2 for devices that only have one switch,
    597                keys |= HAL_KEY_SW_2;
    598          #elif defined( SWITCH1_MATCH )
    599                // or use SW1 to simulate SW4 for devices that only have one switch
    600                keys |= HAL_KEY_SW_4;
    601          #else
    602                // Normally, SW1 changes the rate that messages are sent
    603                if ( txMsgDelay > 100 )
    604                {
    605                  // Cut the message TX delay in half
    606                  txMsgDelay /= 2;
    607                }
    608                else
    609                {
    610                  // Reset to the default
    611                  txMsgDelay = GENERICAPP_SEND_MSG_TIMEOUT;
    612                }
    613          #endif
    614              }
    615          
    616              if ( keys & HAL_KEY_SW_2 )
    617              {
    618                HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
    619          
    620                // Initiate an End Device Bind Request for the mandatory endpoint
    621                dstAddr.addrMode = Addr16Bit;
    622                dstAddr.addr.shortAddr = 0x0000; // Coordinator
    623                ZDP_EndDeviceBindReq( &dstAddr, NLME_GetShortAddr(),
    624                                      GenericApp_epDesc.endPoint,
    625                                      GENERICAPP_PROFID,
    626                                      GENERICAPP_MAX_CLUSTERS, (cId_t *)GenericApp_ClusterList,
    627                                      GENERICAPP_MAX_CLUSTERS, (cId_t *)GenericApp_ClusterList,
    628                                      FALSE );
    629              }
    630          
    631              if ( keys & HAL_KEY_SW_3 )
    632              {
    633              }
    634          
    635              if ( keys & HAL_KEY_SW_4 )
    636              {
    637                HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
    638                // Initiate a Match Description Request (Service Discovery)
    639                dstAddr.addrMode = AddrBroadcast;
    640                dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR;
    641                ZDP_MatchDescReq( &dstAddr, NWK_BROADCAST_SHORTADDR,
    642                                  GENERICAPP_PROFID,
    643                                  GENERICAPP_MAX_CLUSTERS, (cId_t *)GenericApp_ClusterList,
    644                                  GENERICAPP_MAX_CLUSTERS, (cId_t *)GenericApp_ClusterList,
    645                                  FALSE );
    646              }
    647            }
    648          }
    649          
    650          /*********************************************************************
    651           * LOCAL FUNCTIONS
    652           */
    653          
    654          /*********************************************************************
    655           * @fn      GenericApp_MessageMSGCB
    656           *
    657           * @brief   Data message processor callback.  This function processes
    658           *          any incoming data - probably from other devices.  So, based
    659           *          on cluster ID, perform the intended action.
    660           *
    661           * @param   none
    662           *
    663           * @return  none
    664           */
    665          static void GenericApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
    666          { 
    667            uint8 i;
    668           
    669          
    670            switch ( pkt->clusterId )
    671            {
    672              case GENERICAPP_CLUSTERID:
    673                
    674                      // Count this message
    675                      rxMsgCount += 1;  
    676                
    677                      HalLcdWriteString("--------------------------------",0);
    678                      HalLcdWriteString("Received data:",0);
    679                
    680                      for(i = 0;i < pkt->cmd.DataLength;i++)
    681                      {
    682                      uartSend(*(pkt->cmd.Data + i));
    683                      }
    684                
    685                      HalLcdWriteString("",0);
    686                      HalLcdWriteString("--------------------------------",0);
    687                
    688                break;
    689                
    690              default:
    691                      HalLcdWriteString("Podatak nije primljen.",0);
    692                  
    693              break;
    694                
    695            }
    696          
    697          
    698          }
    699          
    700          /*********************************************************************
    701           * @fn      GenericApp_SendTheMessage
    702           *
    703           * @brief   Send "the" message.
    704           *
    705           * @param   none
    706           *
    707           * @return  none
    708           */
    709          static void GenericApp_SendTheMessage( void )
    710          {
    711            uint16 shortAdrress;
                          ^
Warning[Pe177]: variable "shortAdrress" was declared but never referenced
    712            char shAddr[4];
                        ^
Warning[Pe177]: variable "shAddr" was declared but never referenced
    713            uint8 i;
                         ^
Warning[Pe177]: variable "i" was declared but never referenced
    714            
    715           
    716            char theMessageData[] = "Hello World";
                        ^
Warning[Pe177]: variable "theMessageData" was declared but never referenced
    717            char doorOpened[] = {'1'};
                        ^
Warning[Pe177]: variable "doorOpened" was declared but never referenced
    718            char doorClosed[] = {'0'};
                        ^
Warning[Pe177]: variable "doorClosed" was declared but never referenced
    719            char motionDetected[] = {'1'};
    720            char motionNotDetected[] = {'0'};
    721            
    722            char theOpticalData[5];
                        ^
Warning[Pe177]: variable "theOpticalData" was declared but never referenced
    723            uint16 optDat;
                          ^
Warning[Pe177]: variable "optDat" was declared but never referenced

  static void GenericApp_HandleKeys( uint8 shift, uint8 keys )
              ^
"C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\Source\GenericApp.c",571  Warning[Pe177]: 
          function "GenericApp_HandleKeys" was declared but never referenced

  static void GenericApp_EndPointList(uint16 shAddr)
              ^
"C:\Users\bsavanovic\Desktop\EndDevice\ZigBeeEndDevice\Projects\zstack\Samples\GenericApp\Source\GenericApp.c",296  Warning[Pe177]: 
          function "GenericApp_EndPointList" was declared but never referenced
    724            
    725            
    726             GenericApp_DstAddr.addr.shortAddr = 0x0000;   
    727          //*****************************************************************************
    728          //Motion detection
    729          //*****************************************************************************
    730           #if MOTION_SENSOR
    731          
    732          
    733            if ( motionDetection() )
    734            {
    735              // Successfully requested to be sent.
    736              //HalLcdWriteString("Podatak je poslan.",0);
    737              AF_DataRequest( &GenericApp_DstAddr, &GenericApp_epDesc,
    738                                 GENERICAPP_CLUSTERID,
    739                                 2,                                                       
    740                                 (byte *)&motionDetected,
    741                                 &GenericApp_TransID,
    742                                 AF_DISCV_ROUTE, AF_DEFAULT_RADIUS );
    743              
    744              HalLcdWriteString("Pokret je detektovan.",0);
    745              
    746            }
    747            else
    748            {
    749              
    750              // Error occurred in request to send.
    751              // HalLcdWriteString("Podatak nije poslan.",0);
    752              AF_DataRequest( &GenericApp_DstAddr, &GenericApp_epDesc,
    753                                 GENERICAPP_CLUSTERID,
    754                                 2,                                                       
    755                                 (byte *)&motionNotDetected,
    756                                 &GenericApp_TransID,
    757                                 AF_DISCV_ROUTE, AF_DEFAULT_RADIUS );
    758            
    759              HalLcdWriteString("Nema kretanja.",0);
    760              
    761            }
    762            
    763          #endif   
    764          //*****************************************************************************
    765          //Motion detection end
    766          //*****************************************************************************  
    767            
    768          #if OPTICAL_SENSOR
    769            
    770            optDat = HalAdcRead(HAL_ADC_CHANNEL_1,HAL_ADC_RESOLUTION_12);
    771          
    772             for(i = 0;i<4;i++)
    773             {
    774                  theOpticalData[3-i] =  optDat % 10  + '0';
    775                  optDat /= 10;
    776             }
    777                
    778             theOpticalData[4] = '\0';
    779             
    780             if ( AF_DataRequest( &GenericApp_DstAddr, &GenericApp_epDesc,
    781                                  GENERICAPP_CLUSTERID,
    782                                  (byte)osal_strlen( theOpticalData ) + 1,
    783                                  (byte *)&theOpticalData,
    784                                  &GenericApp_TransID,
    785                                  AF_DISCV_ROUTE, AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
    786             {
    787                // Successfully requested to be sent.
    788                HalLcdWriteString("Podatak je poslan.",0);
    789                //HalLcdWriteString(theMessageData,0);
    790             }
    791             else
    792             {
    793                // Error occurred in request to send.
    794                HalLcdWriteString("Podatak nije poslan.",0);
    795             }
    796          #endif  
    797          #if MAGNETIC_SENSOR
    798          
    799          
    800            if ( !magneticSwitch_DoorDetection() )
    801            {
    802              // Successfully requested to be sent.
    803              //HalLcdWriteString("Podatak je poslan.",0);
    804              AF_DataRequest( &GenericApp_DstAddr, &GenericApp_epDesc,
    805                                 GENERICAPP_CLUSTERID,
    806                                 2,                                                       
    807                                 (byte *)&doorOpened,
    808                                 &GenericApp_TransID,
    809                                 AF_DISCV_ROUTE, AF_DEFAULT_RADIUS );
    810              
    811              HalLcdWriteString("Vrata su otvorena.",0);
    812              
    813            }
    814            else
    815            {
    816              
    817              // Error occurred in request to send.
    818              // HalLcdWriteString("Podatak nije poslan.",0);
    819              AF_DataRequest( &GenericApp_DstAddr, &GenericApp_epDesc,
    820                                 GENERICAPP_CLUSTERID,
    821                                 2,                                                       
    822                                 (byte *)&doorClosed,
    823                                 &GenericApp_TransID,
    824                                 AF_DISCV_ROUTE, AF_DEFAULT_RADIUS );
    825            
    826              HalLcdWriteString("Vrata su zatvorena.",0);
    827              
    828            }
    829            
    830          #endif 
    831            
    832            
    833            
    834          #if HELLO_WORLD
    835          
    836            
    837            
    838             if ( AF_DataRequest( &GenericApp_DstAddr, &GenericApp_epDesc,
    839                                  GENERICAPP_CLUSTERID,
    840                                  (byte)osal_strlen( theMessageData ) + 1,
    841                                  (byte *)&theMessageData,
    842                                  &GenericApp_TransID,
    843                                  AF_DISCV_ROUTE, AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
    844             {
    845                // Successfully requested to be sent.
    846                HalLcdWriteString("Podatak je poslan.",0);
    847                //HalLcdWriteString(theMessageData,0);
    848             }
    849             else
    850             {
    851                // Error occurred in request to send.
    852                HalLcdWriteString("Podatak nije poslan.",0);
    853             }
    854           
    855          
    856          #endif
    857          }
    858          
    859          #if defined( IAR_ARMCM3_LM )
    860          /*********************************************************************
    861           * @fn      GenericApp_ProcessRtosMessage
    862           *
    863           * @brief   Receive message from RTOS queue, send response back.
    864           *
    865           * @param   none
    866           *
    867           * @return  none
    868           */
    869          static void GenericApp_ProcessRtosMessage( void )
    870          {
    871            osalQueue_t inMsg;
    872          
    873            if ( osal_queue_receive( OsalQueue, &inMsg, 0 ) == pdPASS )
    874            {
    875              uint8 cmndId = inMsg.cmnd;
    876              uint32 counter = osal_build_uint32( inMsg.cbuf, 4 );
    877          
    878              switch ( cmndId )
    879              {
    880                case CMD_INCR:
    881                  counter += 1;  /* Increment the incoming counter */
    882                                 /* Intentionally fall through next case */
    883          
    884                case CMD_ECHO:
    885                {
    886                  userQueue_t outMsg;
    887          
    888                  outMsg.resp = RSP_CODE | cmndId;  /* Response ID */
    889                  osal_buffer_uint32( outMsg.rbuf, counter );    /* Increment counter */
    890                  osal_queue_send( UserQueue1, &outMsg, 0 );  /* Send back to UserTask */
    891                  break;
    892                }
    893          
    894                default:
    895                  break;  /* Ignore unknown command */
    896              }
    897            }
    898          }
    899          #endif
    900          
    901          /*********************************************************************
    902           * @fn      magneticSwitchInit()
    903           *
    904           * @brief   Initialize pins for magnetic switch
    905           *
    906           * @param   none
    907           *
    908           * @return  none
    909           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    910          void magneticSwitchInit(void)
   \                     magneticSwitchInit:
    911          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    912           // Set GPIO function for P1_3  
    913           P1SEL &= 0xFC;
   \   000000                REQUIRE ?Subroutine0
   \   000000                REQUIRE P1SEL
   \   000000                REQUIRE P1DIR
   \   000000                REQUIRE P2INP
   \   000000                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   53F4FC       ANL     0xf4,#0xfc
    914           
    915           // Set inputs on P0_0
    916           P1DIR &= 0xFC;
   \   000003   53FEFC       ANL     0xfe,#0xfc
    917           
    918           // Set pulldown for port 0 pins
    919           P2INP |= 0x40;
   \   000006   43F740       ORL     0xf7,#0x40
    920            
    921          }
   \   000009   02....       LJMP    ?BRET
    922          
    923          /*********************************************************************
    924           * @fn      magneticSwitch_DoorDetection()
    925           *
    926           * @brief   Detects if door are closed/opened
    927           *
    928           * @param   none
    929           *
    930           * @return  1 if closed, 0 if opened
    931           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    932          uint8 magneticSwitch_DoorDetection()
   \                     magneticSwitch_DoorDetection:
    933          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    934              
    935           if(TRUE == DOOR_CLOSED_DETECTION) 
   \   000000   A292         MOV     C,0x90.2
   \   000002   5004         JNC     ??magneticSwitch_DoorDetection_0
    936                  { 
    937                    return 0;
   \   000004   7900         MOV     R1,#0x0
   \   000006   8002         SJMP    ??magneticSwitch_DoorDetection_1
    938           }
    939                  else
    940                  {
    941                    return 1;
   \                     ??magneticSwitch_DoorDetection_0:
   \   000008   7901         MOV     R1,#0x1
   \                     ??magneticSwitch_DoorDetection_1:
   \   00000A   02....       LJMP    ?BRET
   \   00000D                REQUIRE _A_P1
    942                  }
    943           
    944          } 
    945          /*********************************************************************
    946           * @fn      motionInit()
    947           *
    948           * @brief   Initialize pins for motion sensor
    949           *
    950           * @param   none
    951           *
    952           * @return  none
    953           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    954          void motionInit(void)
   \                     motionInit:
    955          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    956           // Set GPIO function for P1_3  
    957           P1SEL &= 0xFC;
   \   000000   80..         SJMP    ?Subroutine0
   \   000002                REQUIRE P1SEL
   \   000002                REQUIRE P1DIR
   \   000002                REQUIRE P2INP
    958           
    959           // Set inputs on P0_0
    960           P1DIR &= 0xFC;
    961           
    962           // Set pulldown for port 0 pins
    963           P2INP |= 0x40;
    964            
    965          }
    966          /*********************************************************************
    967           * @fn      motionDetection()
    968           *
    969           * @brief   Detects there is motion or not
    970           *
    971           * @param   none
    972           *
    973           * @return  1 if motion detected, 0 if not
    974           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    975          uint8 motionDetection()
   \                     motionDetection:
    976          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    977              
    978                  if(TRUE == MOTION_DETECTION_PIN) 
   \   000000   A292         MOV     C,0x90.2
   \   000002   5004         JNC     ??motionDetection_0
    979                  { 
    980                    return 1;
   \   000004   7901         MOV     R1,#0x1
   \   000006   8002         SJMP    ??motionDetection_1
    981                  }
    982                  else
    983                  {
    984                    return 0;
   \                     ??motionDetection_0:
   \   000008   7900         MOV     R1,#0x0
   \                     ??motionDetection_1:
   \   00000A   02....       LJMP    ?BRET
   \   00000D                REQUIRE _A_P1
    985                  }
    986           
    987          }  

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for coin>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for keyPressSW4>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for txMsgDelay>`:
   \   000000   88130000     DD 5000

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??GenericApp_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GenericApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??GenericApp_ProcessEvent::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GenericApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??magneticSwitchInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    magneticSwitchInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??magneticSwitch_DoorDetection::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    magneticSwitch_DoorDetection

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??motionInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    motionInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??motionDetection::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    motionDetection

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "GenericApp">`:
   \   000000   47656E65     DB "GenericApp"
   \            72696341
   \            707000  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "---------------------...">`:
   \   000000   2D2D2D2D     DB "--------------------------------"
   \            2D2D2D2D
   \            2D2D2D2D
   \            2D2D2D2D
   \            2D2D2D2D
   \            2D2D2D2D
   \            2D2D2D2D
   \            2D2D2D2D
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Received data:">`:
   \   000000   52656365     DB "Received data:"
   \            69766564
   \            20646174
   \            613A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "">`:
   \   000000   00           DB ""

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Podatak nije primljen.">`:
   \   000000   506F6461     DB "Podatak nije primljen."
   \            74616B20
   \            6E696A65
   \            20707269
   \            6D6C6A65
   \            6E2E00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {49}>`:
   \   000000   31           DB 49

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {48}>`:
   \   000000   30           DB 48

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Pokret je detektovan.">`:
   \   000000   506F6B72     DB "Pokret je detektovan."
   \            6574206A
   \            65206465
   \            74656B74
   \            6F76616E
   \            2E00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Nema kretanja.">`:
   \   000000   4E656D61     DB "Nema kretanja."
   \            206B7265
   \            74616E6A
   \            612E00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_7d0:
   \   000000   D0070000     DD 2000
    988          
    989          
    990          
    991          /*********************************************************************
    992           */

   Maximum stack usage in bytes:

   XSTACK Function
   ------ --------
      9   GenericApp_Init
        9   -> HalLcdWriteString
        9   -> RegisterForKeys
        9   -> ZDO_RegisterForZDOMsg
        9   -> afRegister
     34   GenericApp_ProcessEvent
       34   -> AF_DataRequest
       25   -> HalLcdWriteString
       25   -> HalLedSet
       25   -> NLME_GetShortAddr
       25   -> ZDO_ParseEPListRsp
       34   -> ZDP_EndDeviceBindReq
       25   -> motionDetection
       25   -> osal_mem_free
       25   -> osal_msg_deallocate
       25   -> osal_msg_receive
       25   -> osal_set_event
       29   -> osal_start_timerEx
       25   -> uartSend
      0   magneticSwitchInit
      0   magneticSwitch_DoorDetection
     25   motionDetection
      0   motionInit


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  ?<Constant "">
      33  ?<Constant "---------------------...">
      11  ?<Constant "GenericApp">
      15  ?<Constant "Nema kretanja.">
      23  ?<Constant "Podatak nije primljen.">
      22  ?<Constant "Pokret je detektovan.">
      15  ?<Constant "Received data:">
       1  ?<Constant {48}>
       1  ?<Constant {49}>
       1  ?<Initializer for coin>
       1  ?<Initializer for keyPressSW4>
       4  ?<Initializer for txMsgDelay>
      12  ?Subroutine0
       2  GenericApp_ClusterList
      12  GenericApp_DstAddr
      12  GenericApp_DstAddr1
      12  GenericApp_DstAddr2
     116  GenericApp_Init
       6  GenericApp_Init::?relay
       1  GenericApp_NwkState
     799  GenericApp_ProcessEvent
       6  GenericApp_ProcessEvent::?relay
      12  GenericApp_SimpleDesc
       1  GenericApp_TaskID
       1  GenericApp_TransID
       6  GenericApp_epDesc
       1  P1DIR
       1  P1SEL
       1  P2INP
      20  SAddr
       1  _A_P1
       4  __Constant_7d0
       2  brojac
       1  coin
       2  counter
      10  dataBuffer
       1  index
       1  keyPressSW4
       0  magneticSwitchInit
       6  magneticSwitchInit::?relay
      13  magneticSwitch_DoorDetection
       6  magneticSwitch_DoorDetection::?relay
      13  motionDetection
       6  motionDetection::?relay
       2  motionInit
       6  motionInit::?relay
       1  prevData
       2  rxMsgCount
      20  shortAddressOfEndDevice
       4  txMsgDelay

 
 955 bytes in segment BANKED_CODE
  36 bytes in segment BANK_RELAYS
   4 bytes in segment SFR_AN
   6 bytes in segment XDATA_I
   6 bytes in segment XDATA_ID
 140 bytes in segment XDATA_ROM_C
 103 bytes in segment XDATA_Z
 
  42 bytes of CODE     memory
 136 bytes of CONST    memory (+ 4 bytes shared)
   0 bytes of DATA     memory (+ 4 bytes shared)
 955 bytes of HUGECODE memory
 109 bytes of XDATA    memory

Errors: none
Warnings: 14
